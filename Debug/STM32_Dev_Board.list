
STM32_Dev_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a590  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b968  0800a720  0800a720  0001a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036088  08036088  00054088  2**0
                  CONTENTS
  4 .ARM          00000008  08036088  08036088  00046088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08036090  08036090  00054088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08036090  08036090  00046090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08036094  08036094  00046094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004088  20000000  08036098  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e68  20004088  0803a120  00054088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009ef0  0803a120  00059ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00054088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024cc8  00000000  00000000  000540b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005660  00000000  00000000  00078d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d58  00000000  00000000  0007e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af8  00000000  00000000  00080138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d8d6  00000000  00000000  00081c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000285c9  00000000  00000000  000af506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103620  00000000  00000000  000d7acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001db0ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ec8  00000000  00000000  001db140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20004088 	.word	0x20004088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a708 	.word	0x0800a708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000408c 	.word	0x2000408c
 80001cc:	0800a708 	.word	0x0800a708

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b974 	b.w	8000a08 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468e      	mov	lr, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14d      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000746:	428a      	cmp	r2, r1
 8000748:	4694      	mov	ip, r2
 800074a:	d969      	bls.n	8000820 <__udivmoddi4+0xe8>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b152      	cbz	r2, 8000768 <__udivmoddi4+0x30>
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	f1c2 0120 	rsb	r1, r2, #32
 800075a:	fa20 f101 	lsr.w	r1, r0, r1
 800075e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000762:	ea41 0e03 	orr.w	lr, r1, r3
 8000766:	4094      	lsls	r4, r2
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	0c21      	lsrs	r1, r4, #16
 800076e:	fbbe f6f8 	udiv	r6, lr, r8
 8000772:	fa1f f78c 	uxth.w	r7, ip
 8000776:	fb08 e316 	mls	r3, r8, r6, lr
 800077a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077e:	fb06 f107 	mul.w	r1, r6, r7
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800078e:	f080 811f 	bcs.w	80009d0 <__udivmoddi4+0x298>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 811c 	bls.w	80009d0 <__udivmoddi4+0x298>
 8000798:	3e02      	subs	r6, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f707 	mul.w	r7, r0, r7
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x92>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007bc:	f080 810a 	bcs.w	80009d4 <__udivmoddi4+0x29c>
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	f240 8107 	bls.w	80009d4 <__udivmoddi4+0x29c>
 80007c6:	4464      	add	r4, ip
 80007c8:	3802      	subs	r0, #2
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	1be4      	subs	r4, r4, r7
 80007d0:	2600      	movs	r6, #0
 80007d2:	b11d      	cbz	r5, 80007dc <__udivmoddi4+0xa4>
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	2300      	movs	r3, #0
 80007d8:	e9c5 4300 	strd	r4, r3, [r5]
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d909      	bls.n	80007fa <__udivmoddi4+0xc2>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 80ef 	beq.w	80009ca <__udivmoddi4+0x292>
 80007ec:	2600      	movs	r6, #0
 80007ee:	e9c5 0100 	strd	r0, r1, [r5]
 80007f2:	4630      	mov	r0, r6
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	fab3 f683 	clz	r6, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d14a      	bne.n	8000898 <__udivmoddi4+0x160>
 8000802:	428b      	cmp	r3, r1
 8000804:	d302      	bcc.n	800080c <__udivmoddi4+0xd4>
 8000806:	4282      	cmp	r2, r0
 8000808:	f200 80f9 	bhi.w	80009fe <__udivmoddi4+0x2c6>
 800080c:	1a84      	subs	r4, r0, r2
 800080e:	eb61 0303 	sbc.w	r3, r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	469e      	mov	lr, r3
 8000816:	2d00      	cmp	r5, #0
 8000818:	d0e0      	beq.n	80007dc <__udivmoddi4+0xa4>
 800081a:	e9c5 4e00 	strd	r4, lr, [r5]
 800081e:	e7dd      	b.n	80007dc <__udivmoddi4+0xa4>
 8000820:	b902      	cbnz	r2, 8000824 <__udivmoddi4+0xec>
 8000822:	deff      	udf	#255	; 0xff
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 8092 	bne.w	8000952 <__udivmoddi4+0x21a>
 800082e:	eba1 010c 	sub.w	r1, r1, ip
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	2601      	movs	r6, #1
 800083c:	0c20      	lsrs	r0, r4, #16
 800083e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000842:	fb07 1113 	mls	r1, r7, r3, r1
 8000846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800084a:	fb0e f003 	mul.w	r0, lr, r3
 800084e:	4288      	cmp	r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x12c>
 8000852:	eb1c 0101 	adds.w	r1, ip, r1
 8000856:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x12a>
 800085c:	4288      	cmp	r0, r1
 800085e:	f200 80cb 	bhi.w	80009f8 <__udivmoddi4+0x2c0>
 8000862:	4643      	mov	r3, r8
 8000864:	1a09      	subs	r1, r1, r0
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb1 f0f7 	udiv	r0, r1, r7
 800086c:	fb07 1110 	mls	r1, r7, r0, r1
 8000870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000874:	fb0e fe00 	mul.w	lr, lr, r0
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x156>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0x154>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f200 80bb 	bhi.w	8000a02 <__udivmoddi4+0x2ca>
 800088c:	4608      	mov	r0, r1
 800088e:	eba4 040e 	sub.w	r4, r4, lr
 8000892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000896:	e79c      	b.n	80007d2 <__udivmoddi4+0x9a>
 8000898:	f1c6 0720 	rsb	r7, r6, #32
 800089c:	40b3      	lsls	r3, r6
 800089e:	fa22 fc07 	lsr.w	ip, r2, r7
 80008a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a6:	fa20 f407 	lsr.w	r4, r0, r7
 80008aa:	fa01 f306 	lsl.w	r3, r1, r6
 80008ae:	431c      	orrs	r4, r3
 80008b0:	40f9      	lsrs	r1, r7
 80008b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80008be:	0c20      	lsrs	r0, r4, #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fb09 1118 	mls	r1, r9, r8, r1
 80008c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008cc:	fb08 f00e 	mul.w	r0, r8, lr
 80008d0:	4288      	cmp	r0, r1
 80008d2:	fa02 f206 	lsl.w	r2, r2, r6
 80008d6:	d90b      	bls.n	80008f0 <__udivmoddi4+0x1b8>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008e0:	f080 8088 	bcs.w	80009f4 <__udivmoddi4+0x2bc>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f240 8085 	bls.w	80009f4 <__udivmoddi4+0x2bc>
 80008ea:	f1a8 0802 	sub.w	r8, r8, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f8:	fb09 1110 	mls	r1, r9, r0, r1
 80008fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000900:	fb00 fe0e 	mul.w	lr, r0, lr
 8000904:	458e      	cmp	lr, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x1e2>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000910:	d26c      	bcs.n	80009ec <__udivmoddi4+0x2b4>
 8000912:	458e      	cmp	lr, r1
 8000914:	d96a      	bls.n	80009ec <__udivmoddi4+0x2b4>
 8000916:	3802      	subs	r0, #2
 8000918:	4461      	add	r1, ip
 800091a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091e:	fba0 9402 	umull	r9, r4, r0, r2
 8000922:	eba1 010e 	sub.w	r1, r1, lr
 8000926:	42a1      	cmp	r1, r4
 8000928:	46c8      	mov	r8, r9
 800092a:	46a6      	mov	lr, r4
 800092c:	d356      	bcc.n	80009dc <__udivmoddi4+0x2a4>
 800092e:	d053      	beq.n	80009d8 <__udivmoddi4+0x2a0>
 8000930:	b15d      	cbz	r5, 800094a <__udivmoddi4+0x212>
 8000932:	ebb3 0208 	subs.w	r2, r3, r8
 8000936:	eb61 010e 	sbc.w	r1, r1, lr
 800093a:	fa01 f707 	lsl.w	r7, r1, r7
 800093e:	fa22 f306 	lsr.w	r3, r2, r6
 8000942:	40f1      	lsrs	r1, r6
 8000944:	431f      	orrs	r7, r3
 8000946:	e9c5 7100 	strd	r7, r1, [r5]
 800094a:	2600      	movs	r6, #0
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	f1c2 0320 	rsb	r3, r2, #32
 8000956:	40d8      	lsrs	r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	fa21 f303 	lsr.w	r3, r1, r3
 8000960:	4091      	lsls	r1, r2
 8000962:	4301      	orrs	r1, r0
 8000964:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000968:	fa1f fe8c 	uxth.w	lr, ip
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3610 	mls	r6, r7, r0, r3
 8000974:	0c0b      	lsrs	r3, r1, #16
 8000976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800097a:	fb00 f60e 	mul.w	r6, r0, lr
 800097e:	429e      	cmp	r6, r3
 8000980:	fa04 f402 	lsl.w	r4, r4, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x260>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800098e:	d22f      	bcs.n	80009f0 <__udivmoddi4+0x2b8>
 8000990:	429e      	cmp	r6, r3
 8000992:	d92d      	bls.n	80009f0 <__udivmoddi4+0x2b8>
 8000994:	3802      	subs	r0, #2
 8000996:	4463      	add	r3, ip
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	b289      	uxth	r1, r1
 800099c:	fbb3 f6f7 	udiv	r6, r3, r7
 80009a0:	fb07 3316 	mls	r3, r7, r6, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x28a>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009b8:	d216      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d914      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 80009be:	3e02      	subs	r6, #2
 80009c0:	4461      	add	r1, ip
 80009c2:	1ac9      	subs	r1, r1, r3
 80009c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c8:	e738      	b.n	800083c <__udivmoddi4+0x104>
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e705      	b.n	80007dc <__udivmoddi4+0xa4>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e3      	b.n	800079c <__udivmoddi4+0x64>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6f8      	b.n	80007ca <__udivmoddi4+0x92>
 80009d8:	454b      	cmp	r3, r9
 80009da:	d2a9      	bcs.n	8000930 <__udivmoddi4+0x1f8>
 80009dc:	ebb9 0802 	subs.w	r8, r9, r2
 80009e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7a3      	b.n	8000930 <__udivmoddi4+0x1f8>
 80009e8:	4646      	mov	r6, r8
 80009ea:	e7ea      	b.n	80009c2 <__udivmoddi4+0x28a>
 80009ec:	4620      	mov	r0, r4
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e2>
 80009f0:	4640      	mov	r0, r8
 80009f2:	e7d1      	b.n	8000998 <__udivmoddi4+0x260>
 80009f4:	46d0      	mov	r8, sl
 80009f6:	e77b      	b.n	80008f0 <__udivmoddi4+0x1b8>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	e732      	b.n	8000864 <__udivmoddi4+0x12c>
 80009fe:	4630      	mov	r0, r6
 8000a00:	e709      	b.n	8000816 <__udivmoddi4+0xde>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	e742      	b.n	800088e <__udivmoddi4+0x156>

08000a08 <__aeabi_idiv0>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <DM_New_Animation>:
 * Creates a new animation element.
 * bitmaps - an array of pointers to bitmaps for each frame
 * selected - the current frame being displayed
 * numChildren - the number of frames in the array
 */
struct DisplayElement DM_New_Animation(int x1, int y1, int scale, unsigned int **bitmaps, int numFrames) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b098      	sub	sp, #96	; 0x60
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
	struct DisplayElement animation;
	animation.type = ANIMATION;
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	613b      	str	r3, [r7, #16]
	animation.x1 = x1; animation.y1 = y1;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	82bb      	strh	r3, [r7, #20]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	82fb      	strh	r3, [r7, #22]
	//Get the animation dimensions
	animation.x2 = x1 + (bitmaps[0][0] * scale);
 8000a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	fb12 f303 	smulbb	r3, r2, r3
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	4413      	add	r3, r2
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	833b      	strh	r3, [r7, #24]
	animation.y2 = y1 + (bitmaps[0][1] * scale);
 8000a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	fb12 f303 	smulbb	r3, r2, r3
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4413      	add	r3, r2
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	837b      	strh	r3, [r7, #26]
	animation.size = scale;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	61fb      	str	r3, [r7, #28]
	animation.bitmaps = bitmaps;
 8000a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
	animation.selected = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
	animation.animationTicks = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	65bb      	str	r3, [r7, #88]	; 0x58
	animation.ticksPerFrame = TICKS_PER_FRAME;
 8000a74:	2302      	movs	r3, #2
 8000a76:	65fb      	str	r3, [r7, #92]	; 0x5c
	animation.refresh = ALWAYS;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	animation.draw = DM_Animation;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <DM_New_Animation+0x94>)
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44
	animation.numChildren = numFrames;
 8000a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a84:	657b      	str	r3, [r7, #84]	; 0x54

	return animation;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	2250      	movs	r2, #80	; 0x50
 8000a90:	4619      	mov	r1, r3
 8000a92:	f009 f947 	bl	8009d24 <memcpy>
}
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	3760      	adds	r7, #96	; 0x60
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	08000aa5 	.word	0x08000aa5

08000aa4 <DM_Animation>:

/**
 * Draws an animation frame to the display.
 */
void DM_Animation(int id) {
 8000aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	draw_bitmap(elements[id].x1, elements[id].y1, elements[id].size, elements[id].bitmaps[elements[id].selected]);
 8000aac:	491d      	ldr	r1, [pc, #116]	; (8000b24 <DM_Animation+0x80>)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	440b      	add	r3, r1
 8000aba:	3304      	adds	r3, #4
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	461d      	mov	r5, r3
 8000ac0:	4918      	ldr	r1, [pc, #96]	; (8000b24 <DM_Animation+0x80>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	440b      	add	r3, r1
 8000ace:	3306      	adds	r3, #6
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	461e      	mov	r6, r3
 8000ad4:	4913      	ldr	r1, [pc, #76]	; (8000b24 <DM_Animation+0x80>)
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	440b      	add	r3, r1
 8000ae2:	330c      	adds	r3, #12
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	490f      	ldr	r1, [pc, #60]	; (8000b24 <DM_Animation+0x80>)
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	011b      	lsls	r3, r3, #4
 8000af2:	440b      	add	r3, r1
 8000af4:	3324      	adds	r3, #36	; 0x24
 8000af6:	6819      	ldr	r1, [r3, #0]
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <DM_Animation+0x80>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	4423      	add	r3, r4
 8000b06:	3310      	adds	r3, #16
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4602      	mov	r2, r0
 8000b12:	4631      	mov	r1, r6
 8000b14:	4628      	mov	r0, r5
 8000b16:	f001 fea3 	bl	8002860 <draw_bitmap>
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200040a4 	.word	0x200040a4

08000b28 <DM_New_Bitmap>:


/**
 * Create a bitmap element and add it to the queue.
 */
struct DisplayElement DM_New_Bitmap(int x, int y, int scale, const unsigned int *src){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b098      	sub	sp, #96	; 0x60
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	603b      	str	r3, [r7, #0]
	  struct DisplayElement bitmap;
	  bitmap.type = BITMAP;
 8000b36:	2305      	movs	r3, #5
 8000b38:	613b      	str	r3, [r7, #16]
	  bitmap.x1 = x; bitmap.y1 = y;
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	82bb      	strh	r3, [r7, #20]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	82fb      	strh	r3, [r7, #22]
	  //Calculate the bitmap size for proper collision detection
	  bitmap.x2 = x + src[0] * scale; bitmap.y2 = y + src[1] * scale;
 8000b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	fb12 f303 	smulbb	r3, r2, r3
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	833b      	strh	r3, [r7, #24]
 8000b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b62:	3304      	adds	r3, #4
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	fb12 f303 	smulbb	r3, r2, r3
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	4413      	add	r3, r2
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	837b      	strh	r3, [r7, #26]
	  bitmap.size = scale;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	61fb      	str	r3, [r7, #28]
	  bitmap.bitmap = src;
 8000b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
	  bitmap.draw = DM_Bitmap;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <DM_New_Bitmap+0x80>)
 8000b86:	647b      	str	r3, [r7, #68]	; 0x44
	  bitmap.refresh = ONCE;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	  return bitmap;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	2250      	movs	r2, #80	; 0x50
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f009 f8c3 	bl	8009d24 <memcpy>
}
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	3760      	adds	r7, #96	; 0x60
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	08000bad 	.word	0x08000bad

08000bac <DM_Bitmap>:

/**
 * Draws a bitmap to the display
 */
void DM_Bitmap(int id) {
 8000bac:	b5b0      	push	{r4, r5, r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	draw_bitmap(elements[id].x1, elements[id].y1, elements[id].size, elements[id].bitmap);
 8000bb4:	4917      	ldr	r1, [pc, #92]	; (8000c14 <DM_Bitmap+0x68>)
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	461c      	mov	r4, r3
 8000bc8:	4912      	ldr	r1, [pc, #72]	; (8000c14 <DM_Bitmap+0x68>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	440b      	add	r3, r1
 8000bd6:	3306      	adds	r3, #6
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	461d      	mov	r5, r3
 8000bdc:	490d      	ldr	r1, [pc, #52]	; (8000c14 <DM_Bitmap+0x68>)
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	4613      	mov	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	011b      	lsls	r3, r3, #4
 8000be8:	440b      	add	r3, r1
 8000bea:	330c      	adds	r3, #12
 8000bec:	6819      	ldr	r1, [r3, #0]
 8000bee:	4809      	ldr	r0, [pc, #36]	; (8000c14 <DM_Bitmap+0x68>)
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	011b      	lsls	r3, r3, #4
 8000bfa:	4403      	add	r3, r0
 8000bfc:	3320      	adds	r3, #32
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	460a      	mov	r2, r1
 8000c02:	4629      	mov	r1, r5
 8000c04:	4620      	mov	r0, r4
 8000c06:	f001 fe2b 	bl	8002860 <draw_bitmap>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bdb0      	pop	{r4, r5, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200040a4 	.word	0x200040a4

08000c18 <DM_New_Button>:
void DM_Button_onPress(int id);

/**
 * Create a new button and add it to the queue
 */
struct DisplayElement DM_New_Button(int x, int y, char *text, State state){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b09c      	sub	sp, #112	; 0x70
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	603b      	str	r3, [r7, #0]
	int width = 120;
 8000c26:	2378      	movs	r3, #120	; 0x78
 8000c28:	66fb      	str	r3, [r7, #108]	; 0x6c
	int height = 40;
 8000c2a:	2328      	movs	r3, #40	; 0x28
 8000c2c:	66bb      	str	r3, [r7, #104]	; 0x68
	//If the string is long, then increase button width
	int len = DM_StrLen(text, 64);
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	6838      	ldr	r0, [r7, #0]
 8000c32:	f000 fb35 	bl	80012a0 <DM_StrLen>
 8000c36:	6678      	str	r0, [r7, #100]	; 0x64
	if(len > 8) {
 8000c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	dd0c      	ble.n	8000c58 <DM_New_Button+0x40>
		width = len * 12;
 8000c3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c40:	4613      	mov	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	66fb      	str	r3, [r7, #108]	; 0x6c
		//if this button is on the right-hand edge, then move it back a bit
		if(x > BTN_MIDDLE_X)
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	2bbe      	cmp	r3, #190	; 0xbe
 8000c4e:	dd03      	ble.n	8000c58 <DM_New_Button+0x40>
			x = WIDTH - width - 10;
 8000c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c52:	f5c3 73eb 	rsb	r3, r3, #470	; 0x1d6
 8000c56:	60bb      	str	r3, [r7, #8]
	}
	struct DisplayElement button;
	button.type = BUTTON;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
	button.x1 = x; button.y1 = y; button.x2 = x + width; button.y2 = y + height;
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	833b      	strh	r3, [r7, #24]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	837b      	strh	r3, [r7, #26]
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	83bb      	strh	r3, [r7, #28]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4413      	add	r3, r2
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	83fb      	strh	r3, [r7, #30]
	button.text = text;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
	button.state = state;
 8000c88:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000c8c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	button.oldState = state - 1; //Will only refresh when the states DONT match.
 8000c90:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000c94:	3b01      	subs	r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	button.draw = DM_Button;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <DM_New_Button+0xac>)
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
	button.onPress = NULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
	button.refresh = ALWAYS;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	return button;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2250      	movs	r2, #80	; 0x50
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f009 f835 	bl	8009d24 <memcpy>
}
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	3770      	adds	r7, #112	; 0x70
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	08000cc9 	.word	0x08000cc9

08000cc8 <DM_Button>:

/**
 * A button looking thing
 */
void DM_Button(int id) {
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	6078      	str	r0, [r7, #4]
	int outlineColour = COLOR_GRAY;
 8000cd0:	f248 4310 	movw	r3, #33808	; 0x8410
 8000cd4:	61fb      	str	r3, [r7, #28]
	int fillColour = COLOR_LIGHTGRAY;
 8000cd6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8000cda:	61bb      	str	r3, [r7, #24]
	int textColour = COLOR_BLACK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
	if(elements[id].state == DISABLED) {
 8000ce0:	49a4      	ldr	r1, [pc, #656]	; (8000f74 <DM_Button+0x2ac>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	440b      	add	r3, r1
 8000cee:	3330      	adds	r3, #48	; 0x30
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d108      	bne.n	8000d08 <DM_Button+0x40>
		fillColour = COLOR_WHITE;
 8000cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfa:	61bb      	str	r3, [r7, #24]
		outlineColour = COLOR_LIGHTGRAY;
 8000cfc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8000d00:	61fb      	str	r3, [r7, #28]
		textColour = COLOR_LIGHTGRAY;
 8000d02:	f24c 6318 	movw	r3, #50712	; 0xc618
 8000d06:	617b      	str	r3, [r7, #20]
	}
	if(elements[id].state == SELECTED) {
 8000d08:	499a      	ldr	r1, [pc, #616]	; (8000f74 <DM_Button+0x2ac>)
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	440b      	add	r3, r1
 8000d16:	3330      	adds	r3, #48	; 0x30
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d102      	bne.n	8000d24 <DM_Button+0x5c>
		fillColour = COLOR_LIGHTBLUE;
 8000d1e:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 8000d22:	61bb      	str	r3, [r7, #24]
	}
	//Draw the background
	fill_rectangle(elements[id].x1 + 1, elements[id].y1 + 1, elements[id].x2 - 1, elements[id].y2 - 1, fillColour);
 8000d24:	4993      	ldr	r1, [pc, #588]	; (8000f74 <DM_Button+0x2ac>)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	440b      	add	r3, r1
 8000d32:	3304      	adds	r3, #4
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	1c58      	adds	r0, r3, #1
 8000d38:	498e      	ldr	r1, [pc, #568]	; (8000f74 <DM_Button+0x2ac>)
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	440b      	add	r3, r1
 8000d46:	3306      	adds	r3, #6
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	1c59      	adds	r1, r3, #1
 8000d4c:	4c89      	ldr	r4, [pc, #548]	; (8000f74 <DM_Button+0x2ac>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	4423      	add	r3, r4
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	1e5c      	subs	r4, r3, #1
 8000d60:	4d84      	ldr	r5, [pc, #528]	; (8000f74 <DM_Button+0x2ac>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	442b      	add	r3, r5
 8000d6e:	330a      	adds	r3, #10
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	4622      	mov	r2, r4
 8000d7c:	f001 fbf0 	bl	8002560 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(elements[id].x1 + 1, elements[id].y1, elements[id].x2, elements[id].y1 + 1, outlineColour);
 8000d80:	497c      	ldr	r1, [pc, #496]	; (8000f74 <DM_Button+0x2ac>)
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3304      	adds	r3, #4
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	1c58      	adds	r0, r3, #1
 8000d94:	4977      	ldr	r1, [pc, #476]	; (8000f74 <DM_Button+0x2ac>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	440b      	add	r3, r1
 8000da2:	3306      	adds	r3, #6
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	461c      	mov	r4, r3
 8000da8:	4972      	ldr	r1, [pc, #456]	; (8000f74 <DM_Button+0x2ac>)
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	440b      	add	r3, r1
 8000db6:	3308      	adds	r3, #8
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	461d      	mov	r5, r3
 8000dbc:	496d      	ldr	r1, [pc, #436]	; (8000f74 <DM_Button+0x2ac>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	440b      	add	r3, r1
 8000dca:	3306      	adds	r3, #6
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	462a      	mov	r2, r5
 8000dd8:	4621      	mov	r1, r4
 8000dda:	f001 fbc1 	bl	8002560 <fill_rectangle>
	//Left border
	fill_rectangle(elements[id].x1, elements[id].y1 + 1, elements[id].x1 + 1, elements[id].y2, outlineColour);
 8000dde:	4965      	ldr	r1, [pc, #404]	; (8000f74 <DM_Button+0x2ac>)
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	440b      	add	r3, r1
 8000dec:	3304      	adds	r3, #4
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	461d      	mov	r5, r3
 8000df2:	4960      	ldr	r1, [pc, #384]	; (8000f74 <DM_Button+0x2ac>)
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	440b      	add	r3, r1
 8000e00:	3306      	adds	r3, #6
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	1c59      	adds	r1, r3, #1
 8000e06:	485b      	ldr	r0, [pc, #364]	; (8000f74 <DM_Button+0x2ac>)
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	4403      	add	r3, r0
 8000e14:	3304      	adds	r3, #4
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	1c58      	adds	r0, r3, #1
 8000e1a:	4c56      	ldr	r4, [pc, #344]	; (8000f74 <DM_Button+0x2ac>)
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4423      	add	r3, r4
 8000e28:	330a      	adds	r3, #10
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4613      	mov	r3, r2
 8000e34:	4602      	mov	r2, r0
 8000e36:	4628      	mov	r0, r5
 8000e38:	f001 fb92 	bl	8002560 <fill_rectangle>
	//Bottom border
	fill_rectangle(elements[id].x1 + 1, elements[id].y2, elements[id].x2, elements[id].y2 + 1, outlineColour);
 8000e3c:	494d      	ldr	r1, [pc, #308]	; (8000f74 <DM_Button+0x2ac>)
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	440b      	add	r3, r1
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	1c58      	adds	r0, r3, #1
 8000e50:	4948      	ldr	r1, [pc, #288]	; (8000f74 <DM_Button+0x2ac>)
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	440b      	add	r3, r1
 8000e5e:	330a      	adds	r3, #10
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	461c      	mov	r4, r3
 8000e64:	4943      	ldr	r1, [pc, #268]	; (8000f74 <DM_Button+0x2ac>)
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	440b      	add	r3, r1
 8000e72:	3308      	adds	r3, #8
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	461d      	mov	r5, r3
 8000e78:	493e      	ldr	r1, [pc, #248]	; (8000f74 <DM_Button+0x2ac>)
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	440b      	add	r3, r1
 8000e86:	330a      	adds	r3, #10
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	4613      	mov	r3, r2
 8000e92:	462a      	mov	r2, r5
 8000e94:	4621      	mov	r1, r4
 8000e96:	f001 fb63 	bl	8002560 <fill_rectangle>
	//Right border
	fill_rectangle(elements[id].x2, elements[id].y1 + 1, elements[id].x2 + 1, elements[id].y2, outlineColour);
 8000e9a:	4936      	ldr	r1, [pc, #216]	; (8000f74 <DM_Button+0x2ac>)
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	461d      	mov	r5, r3
 8000eae:	4931      	ldr	r1, [pc, #196]	; (8000f74 <DM_Button+0x2ac>)
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	440b      	add	r3, r1
 8000ebc:	3306      	adds	r3, #6
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	1c59      	adds	r1, r3, #1
 8000ec2:	482c      	ldr	r0, [pc, #176]	; (8000f74 <DM_Button+0x2ac>)
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	4403      	add	r3, r0
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	1c58      	adds	r0, r3, #1
 8000ed6:	4c27      	ldr	r4, [pc, #156]	; (8000f74 <DM_Button+0x2ac>)
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	4423      	add	r3, r4
 8000ee4:	330a      	adds	r3, #10
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f001 fb34 	bl	8002560 <fill_rectangle>

	//Calculate the length of the string to center the text
	int strLen = DM_StrLen(elements[id].text, 18);
 8000ef8:	491e      	ldr	r1, [pc, #120]	; (8000f74 <DM_Button+0x2ac>)
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	440b      	add	r3, r1
 8000f06:	332c      	adds	r3, #44	; 0x2c
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2112      	movs	r1, #18
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f9c7 	bl	80012a0 <DM_StrLen>
 8000f12:	6138      	str	r0, [r7, #16]

	//Each char will be 8px wide
	int halfWidth = strLen * 3;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
	//Write the text
	draw_fast_string(elements[id].x1 + 50 - halfWidth, elements[id].y1 + 16, textColour, fillColour, elements[id].text);
 8000f1e:	4915      	ldr	r1, [pc, #84]	; (8000f74 <DM_Button+0x2ac>)
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1ad0      	subs	r0, r2, r3
 8000f38:	490e      	ldr	r1, [pc, #56]	; (8000f74 <DM_Button+0x2ac>)
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	440b      	add	r3, r1
 8000f46:	3306      	adds	r3, #6
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	f103 0110 	add.w	r1, r3, #16
 8000f4e:	4c09      	ldr	r4, [pc, #36]	; (8000f74 <DM_Button+0x2ac>)
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	4423      	add	r3, r4
 8000f5c:	332c      	adds	r3, #44	; 0x2c
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	f001 fc51 	bl	800280c <draw_fast_string>
}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bdb0      	pop	{r4, r5, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200040a4 	.word	0x200040a4

08000f78 <DM_Button_onPress>:

/**
 * Intrinsic button press function. Any global behaviours for all buttons should go here.
 */
void DM_Button_onPress(int id) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	if(elements[id].onPress)
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <DM_Button_onPress+0x3c>)
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3338      	adds	r3, #56	; 0x38
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00a      	beq.n	8000fac <DM_Button_onPress+0x34>
		elements[id].onPress(id);
 8000f96:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <DM_Button_onPress+0x3c>)
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3338      	adds	r3, #56	; 0x38
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	4798      	blx	r3
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200040a4 	.word	0x200040a4

08000fb8 <DM_Init>:
int previously_touched_element = 0;

/**
 * Initialises the LCD device, and allocates any memory required.
 */
void DM_Init() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	lcd_init_parallel();
 8000fbc:	f001 f95c 	bl	8002278 <lcd_init_parallel>
	DM_Clear();
 8000fc0:	f000 f8f0 	bl	80011a4 <DM_Clear>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <DM_Draw>:

/**
 * Draw the whole queue.
 */
void DM_Draw() {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	//Draw each element int he array of display elements
	for(int i = 0; i < numElements; i++) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	e0d7      	b.n	8001184 <DM_Draw+0x1bc>
		//Only draw elements flagged for update
		if(elements[i].refresh == ONCE) {
 8000fd4:	4971      	ldr	r1, [pc, #452]	; (800119c <DM_Draw+0x1d4>)
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3332      	adds	r3, #50	; 0x32
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d114      	bne.n	8001014 <DM_Draw+0x4c>
			//Draw this element once then clear the refresh flag
			elements[i].draw(i);
 8000fea:	496c      	ldr	r1, [pc, #432]	; (800119c <DM_Draw+0x1d4>)
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3334      	adds	r3, #52	; 0x34
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	4798      	blx	r3
			elements[i].refresh = NEVER;
 8001000:	4966      	ldr	r1, [pc, #408]	; (800119c <DM_Draw+0x1d4>)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	440b      	add	r3, r1
 800100e:	3332      	adds	r3, #50	; 0x32
 8001010:	2202      	movs	r2, #2
 8001012:	701a      	strb	r2, [r3, #0]
		}
		if(elements[i].refresh == ALWAYS) {
 8001014:	4961      	ldr	r1, [pc, #388]	; (800119c <DM_Draw+0x1d4>)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	440b      	add	r3, r1
 8001022:	3332      	adds	r3, #50	; 0x32
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 80a9 	bne.w	800117e <DM_Draw+0x1b6>
			//For elements that ALWAYS draw, check if the state has changed.
			//Only draw if the state has changed.
			if(elements[i].oldState != elements[i].state) {
 800102c:	495b      	ldr	r1, [pc, #364]	; (800119c <DM_Draw+0x1d4>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	440b      	add	r3, r1
 800103a:	3331      	adds	r3, #49	; 0x31
 800103c:	7819      	ldrb	r1, [r3, #0]
 800103e:	4857      	ldr	r0, [pc, #348]	; (800119c <DM_Draw+0x1d4>)
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	4403      	add	r3, r0
 800104c:	3330      	adds	r3, #48	; 0x30
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4299      	cmp	r1, r3
 8001052:	d01d      	beq.n	8001090 <DM_Draw+0xc8>
				elements[i].draw(i);
 8001054:	4951      	ldr	r1, [pc, #324]	; (800119c <DM_Draw+0x1d4>)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	440b      	add	r3, r1
 8001062:	3334      	adds	r3, #52	; 0x34
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	4798      	blx	r3
				//Update the oldState
				elements[i].oldState = elements[i].state;
 800106a:	494c      	ldr	r1, [pc, #304]	; (800119c <DM_Draw+0x1d4>)
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	440b      	add	r3, r1
 8001078:	3330      	adds	r3, #48	; 0x30
 800107a:	7818      	ldrb	r0, [r3, #0]
 800107c:	4947      	ldr	r1, [pc, #284]	; (800119c <DM_Draw+0x1d4>)
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	440b      	add	r3, r1
 800108a:	3331      	adds	r3, #49	; 0x31
 800108c:	4602      	mov	r2, r0
 800108e:	701a      	strb	r2, [r3, #0]
			}

			//Advance the ticks of an animation
			//Once the tick counter is reached, the animation advances to the next frame
			if(elements[i].type == ANIMATION) {
 8001090:	4942      	ldr	r1, [pc, #264]	; (800119c <DM_Draw+0x1d4>)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	440b      	add	r3, r1
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b0a      	cmp	r3, #10
 80010a2:	d16c      	bne.n	800117e <DM_Draw+0x1b6>
				elements[i].animationTicks++;
 80010a4:	493d      	ldr	r1, [pc, #244]	; (800119c <DM_Draw+0x1d4>)
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	440b      	add	r3, r1
 80010b2:	3348      	adds	r3, #72	; 0x48
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	1c59      	adds	r1, r3, #1
 80010b8:	4838      	ldr	r0, [pc, #224]	; (800119c <DM_Draw+0x1d4>)
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	4403      	add	r3, r0
 80010c6:	3348      	adds	r3, #72	; 0x48
 80010c8:	6019      	str	r1, [r3, #0]
				//If this element is due to advance to the next frame
				if(elements[i].animationTicks >= elements[i].ticksPerFrame) {
 80010ca:	4934      	ldr	r1, [pc, #208]	; (800119c <DM_Draw+0x1d4>)
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	440b      	add	r3, r1
 80010d8:	3348      	adds	r3, #72	; 0x48
 80010da:	6819      	ldr	r1, [r3, #0]
 80010dc:	482f      	ldr	r0, [pc, #188]	; (800119c <DM_Draw+0x1d4>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	4403      	add	r3, r0
 80010ea:	334c      	adds	r3, #76	; 0x4c
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4299      	cmp	r1, r3
 80010f0:	db45      	blt.n	800117e <DM_Draw+0x1b6>
					//Draw the frame
					elements[i].draw(i);
 80010f2:	492a      	ldr	r1, [pc, #168]	; (800119c <DM_Draw+0x1d4>)
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	440b      	add	r3, r1
 8001100:	3334      	adds	r3, #52	; 0x34
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	4798      	blx	r3

					//Advance the frame and reset the counters
					elements[i].animationTicks = 0;
 8001108:	4924      	ldr	r1, [pc, #144]	; (800119c <DM_Draw+0x1d4>)
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	440b      	add	r3, r1
 8001116:	3348      	adds	r3, #72	; 0x48
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
					elements[i].selected++;
 800111c:	491f      	ldr	r1, [pc, #124]	; (800119c <DM_Draw+0x1d4>)
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	440b      	add	r3, r1
 800112a:	3310      	adds	r3, #16
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1c59      	adds	r1, r3, #1
 8001130:	481a      	ldr	r0, [pc, #104]	; (800119c <DM_Draw+0x1d4>)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4403      	add	r3, r0
 800113e:	3310      	adds	r3, #16
 8001140:	6019      	str	r1, [r3, #0]
					if(elements[i].selected >= elements[i].numChildren)
 8001142:	4916      	ldr	r1, [pc, #88]	; (800119c <DM_Draw+0x1d4>)
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	440b      	add	r3, r1
 8001150:	3310      	adds	r3, #16
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <DM_Draw+0x1d4>)
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	4403      	add	r3, r0
 8001162:	3344      	adds	r3, #68	; 0x44
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4299      	cmp	r1, r3
 8001168:	db09      	blt.n	800117e <DM_Draw+0x1b6>
						elements[i].selected = 0;
 800116a:	490c      	ldr	r1, [pc, #48]	; (800119c <DM_Draw+0x1d4>)
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	440b      	add	r3, r1
 8001178:	3310      	adds	r3, #16
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < numElements; i++) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3301      	adds	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <DM_Draw+0x1d8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	429a      	cmp	r2, r3
 800118c:	f6ff af22 	blt.w	8000fd4 <DM_Draw+0xc>
				}
			}
		}

	}
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200040a4 	.word	0x200040a4
 80011a0:	20004aa4 	.word	0x20004aa4

080011a4 <DM_Clear>:

/**
 * Clears the array of elements to draw, and clears the screen.
 */
void DM_Clear() {
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b097      	sub	sp, #92	; 0x5c
 80011a8:	af02      	add	r7, sp, #8
	//Add a blank screen element to the start of the display
	elements[0] = DM_New_Fill_Rectangle(0, 0, WIDTH, HEIGHT, BG_COLOUR);
 80011aa:	4c0d      	ldr	r4, [pc, #52]	; (80011e0 <DM_Clear+0x3c>)
 80011ac:	4638      	mov	r0, r7
 80011ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	f000 f9d3 	bl	800156c <DM_New_Fill_Rectangle>
 80011c6:	4620      	mov	r0, r4
 80011c8:	463b      	mov	r3, r7
 80011ca:	2250      	movs	r2, #80	; 0x50
 80011cc:	4619      	mov	r1, r3
 80011ce:	f008 fda9 	bl	8009d24 <memcpy>

	//Use a background image instead
	//elements[0] = DM_New_Bitmap(0, 0, 2, BGImage);

	//Reset the array counter
	numElements = 1;
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <DM_Clear+0x40>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	bf00      	nop
 80011da:	3754      	adds	r7, #84	; 0x54
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	200040a4 	.word	0x200040a4
 80011e4:	20004aa4 	.word	0x20004aa4

080011e8 <DM_Refresh_Element>:
}

/**
 * Register an element for refresh on next cycle.
 */
void DM_Refresh_Element(int id) {
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	elements[id].refresh = ONCE;
 80011f0:	4907      	ldr	r1, [pc, #28]	; (8001210 <DM_Refresh_Element+0x28>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	440b      	add	r3, r1
 80011fe:	3332      	adds	r3, #50	; 0x32
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	200040a4 	.word	0x200040a4

08001214 <DM_Add_Element>:

/**
 * Adds an element to the queue to be drawn later.
 */
int DM_Add_Element(struct DisplayElement newElement) {
 8001214:	b084      	sub	sp, #16
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
 800121a:	f107 0c08 	add.w	ip, r7, #8
 800121e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	elements[numElements++] = newElement;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <DM_Add_Element+0x44>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	1c53      	adds	r3, r2, #1
 8001228:	490b      	ldr	r1, [pc, #44]	; (8001258 <DM_Add_Element+0x44>)
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	490b      	ldr	r1, [pc, #44]	; (800125c <DM_Add_Element+0x48>)
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	440b      	add	r3, r1
 8001238:	4618      	mov	r0, r3
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2250      	movs	r2, #80	; 0x50
 8001240:	4619      	mov	r1, r3
 8001242:	f008 fd6f 	bl	8009d24 <memcpy>

	return numElements - 1;
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <DM_Add_Element+0x44>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3b01      	subs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001254:	b004      	add	sp, #16
 8001256:	4770      	bx	lr
 8001258:	20004aa4 	.word	0x20004aa4
 800125c:	200040a4 	.word	0x200040a4

08001260 <DM_Replace_Element>:

/**
 * Replaces a specific element in the queue with a new one
 */
void DM_Replace_Element(int id, struct DisplayElement newElement) {
 8001260:	b084      	sub	sp, #16
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	f107 0014 	add.w	r0, r7, #20
 800126e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	elements[id] = newElement;
 8001272:	490a      	ldr	r1, [pc, #40]	; (800129c <DM_Replace_Element+0x3c>)
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	440b      	add	r3, r1
 8001280:	4618      	mov	r0, r3
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	2250      	movs	r2, #80	; 0x50
 8001288:	4619      	mov	r1, r3
 800128a:	f008 fd4b 	bl	8009d24 <memcpy>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001298:	b004      	add	sp, #16
 800129a:	4770      	bx	lr
 800129c:	200040a4 	.word	0x200040a4

080012a0 <DM_StrLen>:

/**
 * Calculate the length of a string up to a maximum length.
 * Returns the maximum length if length is exceeded.
 */
int DM_StrLen(char *str, int length) {
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	int strLen = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < length; i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	e00b      	b.n	80012cc <DM_StrLen+0x2c>
		if(str[i] == '\0') {
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <DM_StrLen+0x26>
			strLen = i;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60fb      	str	r3, [r7, #12]
			break;
 80012c4:	e006      	b.n	80012d4 <DM_StrLen+0x34>
	for(int i = 0; i < length; i++) {
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3301      	adds	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbef      	blt.n	80012b4 <DM_StrLen+0x14>
		}
	}

	return strLen;
 80012d4:	68fb      	ldr	r3, [r7, #12]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <DM_Remove_Element>:
 * Contrary to the name, this does not actually remove the element,
 * it just tells the element not to refresh anymore, and then
 * draws a box over it.
 * The element can still be referenced.
 */
void DM_Remove_Element(int id) {
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	b0a7      	sub	sp, #156	; 0x9c
 80012e8:	af10      	add	r7, sp, #64	; 0x40
 80012ea:	6078      	str	r0, [r7, #4]
	elements[id].refresh = NEVER;
 80012ec:	4929      	ldr	r1, [pc, #164]	; (8001394 <DM_Remove_Element+0xb0>)
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	440b      	add	r3, r1
 80012fa:	3332      	adds	r3, #50	; 0x32
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
	DM_Add_Element(DM_New_Fill_Rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, BG_COLOUR));
 8001300:	4924      	ldr	r1, [pc, #144]	; (8001394 <DM_Remove_Element+0xb0>)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	440b      	add	r3, r1
 800130e:	3304      	adds	r3, #4
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	461c      	mov	r4, r3
 8001314:	491f      	ldr	r1, [pc, #124]	; (8001394 <DM_Remove_Element+0xb0>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	440b      	add	r3, r1
 8001322:	3306      	adds	r3, #6
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	461d      	mov	r5, r3
 8001328:	491a      	ldr	r1, [pc, #104]	; (8001394 <DM_Remove_Element+0xb0>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	440b      	add	r3, r1
 8001336:	3308      	adds	r3, #8
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	461e      	mov	r6, r3
 800133c:	4915      	ldr	r1, [pc, #84]	; (8001394 <DM_Remove_Element+0xb0>)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	440b      	add	r3, r1
 800134a:	330a      	adds	r3, #10
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	f107 0008 	add.w	r0, r7, #8
 8001354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	9200      	str	r2, [sp, #0]
 800135c:	4633      	mov	r3, r6
 800135e:	462a      	mov	r2, r5
 8001360:	4621      	mov	r1, r4
 8001362:	f000 f903 	bl	800156c <DM_New_Fill_Rectangle>
 8001366:	466d      	mov	r5, sp
 8001368:	f107 0418 	add.w	r4, r7, #24
 800136c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001378:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800137c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001386:	f7ff ff45 	bl	8001214 <DM_Add_Element>
}
 800138a:	bf00      	nop
 800138c:	375c      	adds	r7, #92	; 0x5c
 800138e:	46bd      	mov	sp, r7
 8001390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001392:	bf00      	nop
 8001394:	200040a4 	.word	0x200040a4

08001398 <DM_Get_Element>:

/**
 * Returns a reference to the requested element.
 */
struct DisplayElement DM_Get_Element(int id) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	return elements[id];
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <DM_Get_Element+0x2c>)
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	440b      	add	r3, r1
 80013b2:	4619      	mov	r1, r3
 80013b4:	2350      	movs	r3, #80	; 0x50
 80013b6:	461a      	mov	r2, r3
 80013b8:	f008 fcb4 	bl	8009d24 <memcpy>
}
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200040a4 	.word	0x200040a4

080013c8 <DM_Parse_Press>:
 *
 * Remember that most of the time element 0 is the background.
 *
 * Returns -1 if nothing is detected.
 */
int DM_Parse_Press(int x, int y) {
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
	//Check each element to determine if the x,y coordinates are within it's bounds
	for(int i = numElements; i >= 0; i--) {
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <DM_Parse_Press+0x9c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e038      	b.n	800144c <DM_Parse_Press+0x84>
		if(x > elements[i].x1 && y > elements[i].y1 && x < elements[i].x2 && y < elements[i].y2) {
 80013da:	4923      	ldr	r1, [pc, #140]	; (8001468 <DM_Parse_Press+0xa0>)
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	440b      	add	r3, r1
 80013e8:	3304      	adds	r3, #4
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	dd28      	ble.n	8001446 <DM_Parse_Press+0x7e>
 80013f4:	491c      	ldr	r1, [pc, #112]	; (8001468 <DM_Parse_Press+0xa0>)
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	440b      	add	r3, r1
 8001402:	3306      	adds	r3, #6
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	4293      	cmp	r3, r2
 800140c:	dd1b      	ble.n	8001446 <DM_Parse_Press+0x7e>
 800140e:	4916      	ldr	r1, [pc, #88]	; (8001468 <DM_Parse_Press+0xa0>)
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	440b      	add	r3, r1
 800141c:	3308      	adds	r3, #8
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4293      	cmp	r3, r2
 8001426:	da0e      	bge.n	8001446 <DM_Parse_Press+0x7e>
 8001428:	490f      	ldr	r1, [pc, #60]	; (8001468 <DM_Parse_Press+0xa0>)
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	440b      	add	r3, r1
 8001436:	330a      	adds	r3, #10
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4293      	cmp	r3, r2
 8001440:	da01      	bge.n	8001446 <DM_Parse_Press+0x7e>
			return i;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	e007      	b.n	8001456 <DM_Parse_Press+0x8e>
	for(int i = numElements; i >= 0; i--) {
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3b01      	subs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	dac3      	bge.n	80013da <DM_Parse_Press+0x12>
		}
	}

	return -1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20004aa4 	.word	0x20004aa4
 8001468:	200040a4 	.word	0x200040a4

0800146c <DM_Do_Press>:
 * context highlighting etc., as well as an externally defined onPress() function to handle
 * specific tasks.
 *
 * Returns the ID of the element touched, or -1 if no element was touched.
 */
int DM_Do_Press(struct Touch touch) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Find the touched element, if any
	int id = DM_Parse_Press(touch.X, touch.Y);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ffa2 	bl	80013c8 <DM_Parse_Press>
 8001484:	6178      	str	r0, [r7, #20]

	//If no element was found then return right away
	if(id < 0)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b00      	cmp	r3, #0
 800148a:	da01      	bge.n	8001490 <DM_Do_Press+0x24>
		return id;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	e065      	b.n	800155c <DM_Do_Press+0xf0>

	//Call any onPress function for this element on RELEASE.
	//Check that the element we released on was the one we pressed originally
	if(touch.state == 0x01 && id == previously_touched_element) {
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d132      	bne.n	80014fc <DM_Do_Press+0x90>
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <DM_Do_Press+0xf8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	429a      	cmp	r2, r3
 800149e:	d12d      	bne.n	80014fc <DM_Do_Press+0x90>
		//Revert the element's state
		elements[previously_touched_element].state = ENABLED;
 80014a0:	4b30      	ldr	r3, [pc, #192]	; (8001564 <DM_Do_Press+0xf8>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4930      	ldr	r1, [pc, #192]	; (8001568 <DM_Do_Press+0xfc>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	440b      	add	r3, r1
 80014b0:	3330      	adds	r3, #48	; 0x30
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]

		//Call the relevant onPress function
		switch(elements[id].type) {
 80014b6:	492c      	ldr	r1, [pc, #176]	; (8001568 <DM_Do_Press+0xfc>)
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	440b      	add	r3, r1
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b0b      	cmp	r3, #11
 80014c8:	d011      	beq.n	80014ee <DM_Do_Press+0x82>
 80014ca:	2b0b      	cmp	r3, #11
 80014cc:	dc17      	bgt.n	80014fe <DM_Do_Press+0x92>
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <DM_Do_Press+0x6c>
 80014d2:	2b09      	cmp	r3, #9
 80014d4:	d004      	beq.n	80014e0 <DM_Do_Press+0x74>
 80014d6:	e012      	b.n	80014fe <DM_Do_Press+0x92>
		case BUTTON:
			DM_Button_onPress(id);
 80014d8:	6978      	ldr	r0, [r7, #20]
 80014da:	f7ff fd4d 	bl	8000f78 <DM_Button_onPress>
			break;
 80014de:	e00e      	b.n	80014fe <DM_Do_Press+0x92>
		case LIST:
			DM_List_onPress(id, touch.X, touch.Y);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	4619      	mov	r1, r3
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f000 f932 	bl	8001750 <DM_List_onPress>
			break;
 80014ec:	e007      	b.n	80014fe <DM_Do_Press+0x92>
		case NUMPAD:
			DM_NumPad_onPress(id, touch.X, touch.Y);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	4619      	mov	r1, r3
 80014f4:	6978      	ldr	r0, [r7, #20]
 80014f6:	f000 fad9 	bl	8001aac <DM_NumPad_onPress>
			break;
 80014fa:	e000      	b.n	80014fe <DM_Do_Press+0x92>
		}
	}
 80014fc:	bf00      	nop

	//A press has been recorded, or moved, but has not been released yet
	if(touch.state == 0x00 && elements[id].state != DISABLED) {
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d117      	bne.n	8001534 <DM_Do_Press+0xc8>
 8001504:	4918      	ldr	r1, [pc, #96]	; (8001568 <DM_Do_Press+0xfc>)
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	440b      	add	r3, r1
 8001512:	3330      	adds	r3, #48	; 0x30
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d00c      	beq.n	8001534 <DM_Do_Press+0xc8>
		//Update the "current touched element"
		previously_touched_element = id;
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <DM_Do_Press+0xf8>)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	6013      	str	r3, [r2, #0]
		//Set the state of the helement for context highlighting
		elements[id].state = SELECTED;
 8001520:	4911      	ldr	r1, [pc, #68]	; (8001568 <DM_Do_Press+0xfc>)
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	440b      	add	r3, r1
 800152e:	3330      	adds	r3, #48	; 0x30
 8001530:	2202      	movs	r2, #2
 8001532:	701a      	strb	r2, [r3, #0]
	}

	//Finally, if the touch was released, but it is no longer on the element, then revert the element state
	if(touch.state == 0x01 && id != previously_touched_element){
 8001534:	7bbb      	ldrb	r3, [r7, #14]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d10f      	bne.n	800155a <DM_Do_Press+0xee>
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <DM_Do_Press+0xf8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	429a      	cmp	r2, r3
 8001542:	d00a      	beq.n	800155a <DM_Do_Press+0xee>
		//Un-select the previously touched element
		elements[previously_touched_element].state = ENABLED;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <DM_Do_Press+0xf8>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4907      	ldr	r1, [pc, #28]	; (8001568 <DM_Do_Press+0xfc>)
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	440b      	add	r3, r1
 8001554:	3330      	adds	r3, #48	; 0x30
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
	}

	return id;
 800155a:	697b      	ldr	r3, [r7, #20]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20004aa8 	.word	0x20004aa8
 8001568:	200040a4 	.word	0x200040a4

0800156c <DM_New_Fill_Rectangle>:
void DM_Fill_Gradient(int id);

/**
 * Create a rectangle display element and add it to the queue
 */
struct DisplayElement DM_New_Fill_Rectangle(int x1, int y1, int x2, int y2, int colour) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b098      	sub	sp, #96	; 0x60
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
	struct DisplayElement box;
	box.type = FILLRECTANGLE;
 800157a:	2301      	movs	r3, #1
 800157c:	613b      	str	r3, [r7, #16]
	box.x1 = x1; box.y1 = y1; box.x2 = x2; box.y2 = y2;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	b29b      	uxth	r3, r3
 8001582:	82bb      	strh	r3, [r7, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	b29b      	uxth	r3, r3
 8001588:	82fb      	strh	r3, [r7, #22]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	833b      	strh	r3, [r7, #24]
 8001590:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001592:	b29b      	uxth	r3, r3
 8001594:	837b      	strh	r3, [r7, #26]
	box.colour = colour;
 8001596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
	box.draw = DM_Fill_Rectangle;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <DM_New_Fill_Rectangle+0x50>)
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
	box.refresh = ONCE;
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	return box;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	2250      	movs	r2, #80	; 0x50
 80015ae:	4619      	mov	r1, r3
 80015b0:	f008 fbb8 	bl	8009d24 <memcpy>
}
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	3760      	adds	r7, #96	; 0x60
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	080015c1 	.word	0x080015c1

080015c0 <DM_Fill_Rectangle>:

/**
 * A display element that draws a box
 */
void DM_Fill_Rectangle(int id) {
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	6078      	str	r0, [r7, #4]
	fill_rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, elements[id].colour);
 80015c8:	491d      	ldr	r1, [pc, #116]	; (8001640 <DM_Fill_Rectangle+0x80>)
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	440b      	add	r3, r1
 80015d6:	3304      	adds	r3, #4
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	4918      	ldr	r1, [pc, #96]	; (8001640 <DM_Fill_Rectangle+0x80>)
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	440b      	add	r3, r1
 80015ea:	3306      	adds	r3, #6
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	461c      	mov	r4, r3
 80015f0:	4913      	ldr	r1, [pc, #76]	; (8001640 <DM_Fill_Rectangle+0x80>)
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	440b      	add	r3, r1
 80015fe:	3308      	adds	r3, #8
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	461d      	mov	r5, r3
 8001604:	490e      	ldr	r1, [pc, #56]	; (8001640 <DM_Fill_Rectangle+0x80>)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	440b      	add	r3, r1
 8001612:	330a      	adds	r3, #10
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	461e      	mov	r6, r3
 8001618:	4909      	ldr	r1, [pc, #36]	; (8001640 <DM_Fill_Rectangle+0x80>)
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	440b      	add	r3, r1
 8001626:	3314      	adds	r3, #20
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4633      	mov	r3, r6
 800162e:	462a      	mov	r2, r5
 8001630:	4621      	mov	r1, r4
 8001632:	f000 ff95 	bl	8002560 <fill_rectangle>
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163e:	bf00      	nop
 8001640:	200040a4 	.word	0x200040a4

08001644 <DM_New_Fill_Gradient>:


/**
 * Creates a gradient filled rectangle element between two colours.
 */
struct DisplayElement DM_New_Fill_Gradient(int x1, int y1, int x2, int y2, unsigned int startColour, unsigned int endColour, Orientation orientation) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b098      	sub	sp, #96	; 0x60
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
	struct DisplayElement box;
	box.type = FILLGRADIENT;
 8001652:	2308      	movs	r3, #8
 8001654:	613b      	str	r3, [r7, #16]
	box.x1 = x1; box.y1 = y1; box.x2 = x2; box.y2 = y2;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	b29b      	uxth	r3, r3
 800165a:	82bb      	strh	r3, [r7, #20]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	b29b      	uxth	r3, r3
 8001660:	82fb      	strh	r3, [r7, #22]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	833b      	strh	r3, [r7, #24]
 8001668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800166a:	b29b      	uxth	r3, r3
 800166c:	837b      	strh	r3, [r7, #26]
	box.colour = startColour;
 800166e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
	box.bgColour = endColour;
 8001672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
	box.orientation = orientation;
 8001676:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800167a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	box.draw = DM_Fill_Gradient;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <DM_New_Fill_Gradient+0x5c>)
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
	box.refresh = ONCE;
 8001682:	2301      	movs	r3, #1
 8001684:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	return box;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4618      	mov	r0, r3
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2250      	movs	r2, #80	; 0x50
 8001692:	4619      	mov	r1, r3
 8001694:	f008 fb46 	bl	8009d24 <memcpy>
}
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	3760      	adds	r7, #96	; 0x60
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	080016a5 	.word	0x080016a5

080016a4 <DM_Fill_Gradient>:

/**
 * Draws a gradient filled rectangle to the display.
 */
void DM_Fill_Gradient(int id) {
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	6078      	str	r0, [r7, #4]
	fill_gradient(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, elements[id].colour, elements[id].bgColour, elements[id].orientation);
 80016ac:	4927      	ldr	r1, [pc, #156]	; (800174c <DM_Fill_Gradient+0xa8>)
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	440b      	add	r3, r1
 80016ba:	3304      	adds	r3, #4
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	461d      	mov	r5, r3
 80016c0:	4922      	ldr	r1, [pc, #136]	; (800174c <DM_Fill_Gradient+0xa8>)
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	440b      	add	r3, r1
 80016ce:	3306      	adds	r3, #6
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	461e      	mov	r6, r3
 80016d4:	491d      	ldr	r1, [pc, #116]	; (800174c <DM_Fill_Gradient+0xa8>)
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	440b      	add	r3, r1
 80016e2:	3308      	adds	r3, #8
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	469c      	mov	ip, r3
 80016e8:	4918      	ldr	r1, [pc, #96]	; (800174c <DM_Fill_Gradient+0xa8>)
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	440b      	add	r3, r1
 80016f6:	330a      	adds	r3, #10
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	469e      	mov	lr, r3
 80016fc:	4913      	ldr	r1, [pc, #76]	; (800174c <DM_Fill_Gradient+0xa8>)
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	440b      	add	r3, r1
 800170a:	3314      	adds	r3, #20
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	480f      	ldr	r0, [pc, #60]	; (800174c <DM_Fill_Gradient+0xa8>)
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4403      	add	r3, r0
 800171c:	3318      	adds	r3, #24
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	4c0a      	ldr	r4, [pc, #40]	; (800174c <DM_Fill_Gradient+0xa8>)
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	4423      	add	r3, r4
 800172e:	331c      	adds	r3, #28
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	9001      	str	r0, [sp, #4]
 8001736:	9100      	str	r1, [sp, #0]
 8001738:	4673      	mov	r3, lr
 800173a:	4662      	mov	r2, ip
 800173c:	4631      	mov	r1, r6
 800173e:	4628      	mov	r0, r5
 8001740:	f001 f906 	bl	8002950 <fill_gradient>
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800174c:	200040a4 	.word	0x200040a4

08001750 <DM_List_onPress>:

/**
 * Called by the touch handler when the list is pressed. Determines which element
 * was pressed.
 */
void DM_List_onPress(int id, int x, int y) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	const int lineHeight = 30;
 800175c:	231e      	movs	r3, #30
 800175e:	617b      	str	r3, [r7, #20]

	elements[id].state = SELECTED;
 8001760:	4923      	ldr	r1, [pc, #140]	; (80017f0 <DM_List_onPress+0xa0>)
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	440b      	add	r3, r1
 800176e:	3330      	adds	r3, #48	; 0x30
 8001770:	2202      	movs	r2, #2
 8001772:	701a      	strb	r2, [r3, #0]
	elements[id].refresh = ONCE;
 8001774:	491e      	ldr	r1, [pc, #120]	; (80017f0 <DM_List_onPress+0xa0>)
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	440b      	add	r3, r1
 8001782:	3332      	adds	r3, #50	; 0x32
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
	//Report which item is selected
	int index = (int)((y - elements[id].y1) / lineHeight);
 8001788:	4919      	ldr	r1, [pc, #100]	; (80017f0 <DM_List_onPress+0xa0>)
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	440b      	add	r3, r1
 8001796:	3306      	adds	r3, #6
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	1a9a      	subs	r2, r3, r2
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017a6:	613b      	str	r3, [r7, #16]

	elements[id].selected = index;
 80017a8:	4911      	ldr	r1, [pc, #68]	; (80017f0 <DM_List_onPress+0xa0>)
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	440b      	add	r3, r1
 80017b6:	3310      	adds	r3, #16
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	601a      	str	r2, [r3, #0]

	if(elements[id].onPress)
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <DM_List_onPress+0xa0>)
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	440b      	add	r3, r1
 80017ca:	3338      	adds	r3, #56	; 0x38
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <DM_List_onPress+0x98>
		elements[id].onPress(id);
 80017d2:	4907      	ldr	r1, [pc, #28]	; (80017f0 <DM_List_onPress+0xa0>)
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	440b      	add	r3, r1
 80017e0:	3338      	adds	r3, #56	; 0x38
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	4798      	blx	r3
}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200040a4 	.word	0x200040a4

080017f4 <DM_New_NumPad>:
 * Create a new number pad element.
 *
 * A number pad will always fill the right-hand half of the display.
 * Design your components appropriately.
 */
struct DisplayElement DM_New_NumPad() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b096      	sub	sp, #88	; 0x58
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	struct DisplayElement numPad;
	numPad.type = NUMPAD;
 80017fc:	230b      	movs	r3, #11
 80017fe:	60bb      	str	r3, [r7, #8]
	numPad.x1 = WIDTH - (60 * 3);
 8001800:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001804:	81bb      	strh	r3, [r7, #12]
	numPad.y1 = 40;
 8001806:	2328      	movs	r3, #40	; 0x28
 8001808:	81fb      	strh	r3, [r7, #14]
	numPad.x2 = WIDTH;
 800180a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800180e:	823b      	strh	r3, [r7, #16]
	numPad.y2 = HEIGHT;
 8001810:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001814:	827b      	strh	r3, [r7, #18]

	numPad.selected = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
	numPad.onPress = NULL;
 800181a:	2300      	movs	r3, #0
 800181c:	643b      	str	r3, [r7, #64]	; 0x40
	numPad.refresh = ALWAYS;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	numPad.draw = DM_NumPad;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <DM_New_NumPad+0x4c>)
 8001826:	63fb      	str	r3, [r7, #60]	; 0x3c

	return numPad;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	2250      	movs	r2, #80	; 0x50
 8001832:	4619      	mov	r1, r3
 8001834:	f008 fa76 	bl	8009d24 <memcpy>
}
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	3758      	adds	r7, #88	; 0x58
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	08001845 	.word	0x08001845

08001844 <DM_NumPad>:

/**
 * Draws a number pad to the display;
 */
void DM_NumPad(int id) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	const int buttonSpace = 60;
 800184c:	233c      	movs	r3, #60	; 0x3c
 800184e:	613b      	str	r3, [r7, #16]
	//Draw a few buttons
	State state = ENABLED;
 8001850:	2300      	movs	r3, #0
 8001852:	77fb      	strb	r3, [r7, #31]
	//Each vertical row
	for(int y = 0; y < 3; y++) {
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	e049      	b.n	80018ee <DM_NumPad+0xaa>
		//..And Each horizontal row
		for(int x = 0; x < 3; x++) {
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e040      	b.n	80018e2 <DM_NumPad+0x9e>
			//Figure out which digit this is
			int thisDigit = x + (y * 3) + 1;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	441a      	add	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	4413      	add	r3, r2
 800186c:	3301      	adds	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]

			//Is this particular digit selected
			if(elements[id].selected == thisDigit)
 8001870:	4952      	ldr	r1, [pc, #328]	; (80019bc <DM_NumPad+0x178>)
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	440b      	add	r3, r1
 800187e:	3310      	adds	r3, #16
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d102      	bne.n	800188e <DM_NumPad+0x4a>
				state = SELECTED;
 8001888:	2302      	movs	r3, #2
 800188a:	77fb      	strb	r3, [r7, #31]
 800188c:	e001      	b.n	8001892 <DM_NumPad+0x4e>
			else
				state = ENABLED;
 800188e:	2300      	movs	r3, #0
 8001890:	77fb      	strb	r3, [r7, #31]

			//Put the digit with its ASCII to the display
			DM_NumPad_Button(elements[id].x1 + (x * buttonSpace), elements[id].y1 + (y * buttonSpace), thisDigit + 48, state);
 8001892:	494a      	ldr	r1, [pc, #296]	; (80019bc <DM_NumPad+0x178>)
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	440b      	add	r3, r1
 80018a0:	3304      	adds	r3, #4
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	18c8      	adds	r0, r1, r3
 80018b0:	4942      	ldr	r1, [pc, #264]	; (80019bc <DM_NumPad+0x178>)
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	440b      	add	r3, r1
 80018be:	3306      	adds	r3, #6
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	4619      	mov	r1, r3
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	4419      	add	r1, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3330      	adds	r3, #48	; 0x30
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	f000 f872 	bl	80019c0 <DM_NumPad_Button>
		for(int x = 0; x < 3; x++) {
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	ddbb      	ble.n	8001860 <DM_NumPad+0x1c>
	for(int y = 0; y < 3; y++) {
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	3301      	adds	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	ddb2      	ble.n	800185a <DM_NumPad+0x16>
		}
	}

	//zero at the very bottom
	if(elements[id].selected == 11)
 80018f4:	4931      	ldr	r1, [pc, #196]	; (80019bc <DM_NumPad+0x178>)
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	440b      	add	r3, r1
 8001902:	3310      	adds	r3, #16
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b0b      	cmp	r3, #11
 8001908:	d102      	bne.n	8001910 <DM_NumPad+0xcc>
		state = SELECTED;
 800190a:	2302      	movs	r3, #2
 800190c:	77fb      	strb	r3, [r7, #31]
 800190e:	e001      	b.n	8001914 <DM_NumPad+0xd0>
	else
		state = ENABLED;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
	DM_NumPad_Button(elements[id].x1 + (1 * buttonSpace), elements[id].y1 + (3 * buttonSpace), '0', state);
 8001914:	4929      	ldr	r1, [pc, #164]	; (80019bc <DM_NumPad+0x178>)
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	440b      	add	r3, r1
 8001922:	3304      	adds	r3, #4
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	18d0      	adds	r0, r2, r3
 800192c:	4923      	ldr	r1, [pc, #140]	; (80019bc <DM_NumPad+0x178>)
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	440b      	add	r3, r1
 800193a:	3306      	adds	r3, #6
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	4419      	add	r1, r3
 800194a:	7ffb      	ldrb	r3, [r7, #31]
 800194c:	2230      	movs	r2, #48	; 0x30
 800194e:	f000 f837 	bl	80019c0 <DM_NumPad_Button>
	//And a backspace button
	if(elements[id].selected == 12)
 8001952:	491a      	ldr	r1, [pc, #104]	; (80019bc <DM_NumPad+0x178>)
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	440b      	add	r3, r1
 8001960:	3310      	adds	r3, #16
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	d102      	bne.n	800196e <DM_NumPad+0x12a>
		state = SELECTED;
 8001968:	2302      	movs	r3, #2
 800196a:	77fb      	strb	r3, [r7, #31]
 800196c:	e001      	b.n	8001972 <DM_NumPad+0x12e>
	else
		state = ENABLED;
 800196e:	2300      	movs	r3, #0
 8001970:	77fb      	strb	r3, [r7, #31]
	DM_NumPad_Button(elements[id].x1 + (2 * buttonSpace), elements[id].y1 + (3 * buttonSpace), '<', state);
 8001972:	4912      	ldr	r1, [pc, #72]	; (80019bc <DM_NumPad+0x178>)
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	440b      	add	r3, r1
 8001980:	3304      	adds	r3, #4
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	18d0      	adds	r0, r2, r3
 800198c:	490b      	ldr	r1, [pc, #44]	; (80019bc <DM_NumPad+0x178>)
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	440b      	add	r3, r1
 800199a:	3306      	adds	r3, #6
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	4419      	add	r1, r3
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	223c      	movs	r2, #60	; 0x3c
 80019ae:	f000 f807 	bl	80019c0 <DM_NumPad_Button>

}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200040a4 	.word	0x200040a4

080019c0 <DM_NumPad_Button>:

/**
 * Draws an individual number button to the numpad.
 */
void DM_NumPad_Button(int x1, int y1, char c, State state) {
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b08d      	sub	sp, #52	; 0x34
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	460b      	mov	r3, r1
 80019d0:	71fb      	strb	r3, [r7, #7]
 80019d2:	4613      	mov	r3, r2
 80019d4:	71bb      	strb	r3, [r7, #6]
	const int buttonSize = 50;
 80019d6:	2332      	movs	r3, #50	; 0x32
 80019d8:	61bb      	str	r3, [r7, #24]
	int x2 = x1 + buttonSize;
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	4413      	add	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]
	int y2 = y1 + buttonSize;
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	4413      	add	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
	int outlineColour = COLOR_GRAY;
 80019ea:	f248 4310 	movw	r3, #33808	; 0x8410
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
	int fillColour = COLOR_LIGHTGRAY;
 80019f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80019f4:	623b      	str	r3, [r7, #32]
	int textColour = COLOR_BLACK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
	if(state == DISABLED) {
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <DM_NumPad_Button+0x52>
		fillColour = COLOR_WHITE;
 8001a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a04:	623b      	str	r3, [r7, #32]
		outlineColour = COLOR_LIGHTGRAY;
 8001a06:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
		textColour = COLOR_LIGHTGRAY;
 8001a0c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001a10:	61fb      	str	r3, [r7, #28]
	}
	if(state == SELECTED) {
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d102      	bne.n	8001a1e <DM_NumPad_Button+0x5e>
		fillColour = COLOR_LIGHTBLUE;
 8001a18:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 8001a1c:	623b      	str	r3, [r7, #32]
	}
	//Draw the background
	fill_rectangle(x1 + 1, y1 + 1, x2 - 1, y2 - 1, fillColour);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1c58      	adds	r0, r3, #1
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1c59      	adds	r1, r3, #1
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1e5c      	subs	r4, r3, #1
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	4623      	mov	r3, r4
 8001a34:	f000 fd94 	bl	8002560 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(x1 + 1, y1, x2, y1 + 1, outlineColour);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1c58      	adds	r0, r3, #1
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	f000 fd89 	bl	8002560 <fill_rectangle>
	//Left border
	fill_rectangle(x1, y1 + 1, x1 + 1, y2, outlineColour);
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1c59      	adds	r1, r3, #1
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fd7f 	bl	8002560 <fill_rectangle>
	//Bottom border
	fill_rectangle(x1 + 1, y2, x2, y2 + 1, outlineColour);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1c58      	adds	r0, r3, #1
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	6939      	ldr	r1, [r7, #16]
 8001a74:	f000 fd74 	bl	8002560 <fill_rectangle>
	//Right border
	fill_rectangle(x2, y1 + 1, x2 + 1, y2, outlineColour);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c59      	adds	r1, r3, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f000 fd6a 	bl	8002560 <fill_rectangle>
	//Write the text
	draw_fast_char(x1 + 12, y1 + 16, c, textColour, fillColour);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f103 000c 	add.w	r0, r3, #12
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f103 0110 	add.w	r1, r3, #16
 8001a98:	79fa      	ldrb	r2, [r7, #7]
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f000 fe1c 	bl	80026dc <draw_fast_char>
}
 8001aa4:	bf00      	nop
 8001aa6:	372c      	adds	r7, #44	; 0x2c
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}

08001aac <DM_NumPad_onPress>:

/**
 * Intrinsic onPress function for the number pad. Determines which button was pressed
 * then hands off to the user-defined onPress function.
 */
void DM_NumPad_onPress(int id, int x, int y) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
	const int buttonSize = 50;
 8001ab8:	2332      	movs	r3, #50	; 0x32
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
	const int buttonMargin = 10;
 8001abc:	230a      	movs	r3, #10
 8001abe:	623b      	str	r3, [r7, #32]

	//Figure out which number was pressed.
	//The number are arranged in a 3x3 +1 grid.

	//Calculate the X and Y axis location in button-space
	int xIndex = (int) ((x - elements[id].x1) / (buttonSize + buttonMargin));
 8001ac0:	4927      	ldr	r1, [pc, #156]	; (8001b60 <DM_NumPad_onPress+0xb4>)
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	440b      	add	r3, r1
 8001ace:	3304      	adds	r3, #4
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1a9a      	subs	r2, r3, r2
 8001ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	440b      	add	r3, r1
 8001ade:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ae2:	61fb      	str	r3, [r7, #28]
	int yIndex = (int) ((y - elements[id].y1) / (buttonSize + buttonMargin));
 8001ae4:	491e      	ldr	r1, [pc, #120]	; (8001b60 <DM_NumPad_onPress+0xb4>)
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	440b      	add	r3, r1
 8001af2:	3306      	adds	r3, #6
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	1a9a      	subs	r2, r3, r2
 8001afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	440b      	add	r3, r1
 8001b02:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b06:	61bb      	str	r3, [r7, #24]

	//Work out the index
	int index = xIndex + (yIndex * 3) + 1;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	441a      	add	r2, r3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4413      	add	r3, r2
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]

	//Report the element that's selected
	elements[id].selected = index;
 8001b18:	4911      	ldr	r1, [pc, #68]	; (8001b60 <DM_NumPad_onPress+0xb4>)
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	440b      	add	r3, r1
 8001b26:	3310      	adds	r3, #16
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]

	//Call any user-defind onPress function
	if(elements[id].onPress)
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <DM_NumPad_onPress+0xb4>)
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	440b      	add	r3, r1
 8001b3a:	3338      	adds	r3, #56	; 0x38
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00a      	beq.n	8001b58 <DM_NumPad_onPress+0xac>
		elements[id].onPress(id);
 8001b42:	4907      	ldr	r1, [pc, #28]	; (8001b60 <DM_NumPad_onPress+0xb4>)
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	440b      	add	r3, r1
 8001b50:	3338      	adds	r3, #56	; 0x38
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	4798      	blx	r3
}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200040a4 	.word	0x200040a4

08001b64 <DM_New_Text>:
void DM_Fast_Text(int id);

/**
 * Various string drawing elements. Just puts the string on teh screen with nothing extra.
 */
struct DisplayElement DM_New_Text(int x, int y, int colour, int size, char* text){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b09a      	sub	sp, #104	; 0x68
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
	struct DisplayElement string;
	string.type = TEXT;
 8001b72:	2302      	movs	r3, #2
 8001b74:	617b      	str	r3, [r7, #20]
	string.x1 = x; string.y1 = y;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	833b      	strh	r3, [r7, #24]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	837b      	strh	r3, [r7, #26]
	//Have to calculate the length to make a prpoer hit box
	int strLen = DM_StrLen(text, 128);
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b86:	f7ff fb8b 	bl	80012a0 <DM_StrLen>
 8001b8a:	6678      	str	r0, [r7, #100]	; 0x64
	string.x2 = x + ((strLen + 1) * 8); string.y2 = y + 14;
 8001b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	83bb      	strh	r3, [r7, #28]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	330e      	adds	r3, #14
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	83fb      	strh	r3, [r7, #30]
	string.size = size;
 8001baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bac:	623b      	str	r3, [r7, #32]
	string.colour = colour;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
	string.text = text;
 8001bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb4:	643b      	str	r3, [r7, #64]	; 0x40
	string.draw = DM_Text;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <DM_New_Text+0x74>)
 8001bb8:	64bb      	str	r3, [r7, #72]	; 0x48
	string.refresh = ONCE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	return string;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2250      	movs	r2, #80	; 0x50
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f008 f8aa 	bl	8009d24 <memcpy>
}
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	3768      	adds	r7, #104	; 0x68
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	08001bdd 	.word	0x08001bdd

08001bdc <DM_Text>:
void DM_Text(int id){
 8001bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	6078      	str	r0, [r7, #4]
	draw_string(elements[id].x1, elements[id].y1, elements[id].colour, elements[id].size, elements[id].text);
 8001be4:	491c      	ldr	r1, [pc, #112]	; (8001c58 <DM_Text+0x7c>)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	4917      	ldr	r1, [pc, #92]	; (8001c58 <DM_Text+0x7c>)
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	3306      	adds	r3, #6
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	461e      	mov	r6, r3
 8001c0c:	4912      	ldr	r1, [pc, #72]	; (8001c58 <DM_Text+0x7c>)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	440b      	add	r3, r1
 8001c1a:	3314      	adds	r3, #20
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	480e      	ldr	r0, [pc, #56]	; (8001c58 <DM_Text+0x7c>)
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	4403      	add	r3, r0
 8001c2c:	330c      	adds	r3, #12
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	4c09      	ldr	r4, [pc, #36]	; (8001c58 <DM_Text+0x7c>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4423      	add	r3, r4
 8001c3e:	332c      	adds	r3, #44	; 0x2c
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4603      	mov	r3, r0
 8001c46:	460a      	mov	r2, r1
 8001c48:	4631      	mov	r1, r6
 8001c4a:	4628      	mov	r0, r5
 8001c4c:	f000 fdae 	bl	80027ac <draw_string>
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c58:	200040a4 	.word	0x200040a4

08001c5c <DM_New_Title_Bar>:
void DM_Title_Bar(int id);

/**
 * Add a title bar to the top of the screen
 */
struct DisplayElement DM_New_Title_Bar(char *title) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b098      	sub	sp, #96	; 0x60
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
	int height = 40;
 8001c66:	2328      	movs	r3, #40	; 0x28
 8001c68:	65fb      	str	r3, [r7, #92]	; 0x5c
	struct DisplayElement titleBar;
	titleBar.type = TITLEBAR;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	60fb      	str	r3, [r7, #12]
	titleBar.x1 = 0; titleBar.y1 = 0; titleBar.x2 = WIDTH; titleBar.y2 = height;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	823b      	strh	r3, [r7, #16]
 8001c72:	2300      	movs	r3, #0
 8001c74:	827b      	strh	r3, [r7, #18]
 8001c76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c7a:	82bb      	strh	r3, [r7, #20]
 8001c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	82fb      	strh	r3, [r7, #22]
	titleBar.title = title;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
	titleBar.draw = DM_Title_Bar;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <DM_New_Title_Bar+0x4c>)
 8001c88:	643b      	str	r3, [r7, #64]	; 0x40
	titleBar.refresh = ONCE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	return titleBar;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	2250      	movs	r2, #80	; 0x50
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f008 f842 	bl	8009d24 <memcpy>
}
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	3760      	adds	r7, #96	; 0x60
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	08001cad 	.word	0x08001cad

08001cac <DM_Title_Bar>:

void DM_Title_Bar(int id) {
 8001cac:	b5b0      	push	{r4, r5, r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	6078      	str	r0, [r7, #4]
	int backgroundColour = COLOR_LIGHTBLUE;
 8001cb4:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 8001cb8:	617b      	str	r3, [r7, #20]
	int foregroundColour = COLOR_WHITE;
 8001cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cbe:	613b      	str	r3, [r7, #16]
	int halfWidth = (int)((elements[id].x2 - elements[id].x1) / 2);
 8001cc0:	493e      	ldr	r1, [pc, #248]	; (8001dbc <DM_Title_Bar+0x110>)
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	440b      	add	r3, r1
 8001cce:	3308      	adds	r3, #8
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	4939      	ldr	r1, [pc, #228]	; (8001dbc <DM_Title_Bar+0x110>)
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	1ac3      	subs	r3, r0, r3
 8001ce8:	0fda      	lsrs	r2, r3, #31
 8001cea:	4413      	add	r3, r2
 8001cec:	105b      	asrs	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]

	//Draw the background
	//fill_rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, backgroundColour);
	fill_gradient(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, COLOR_NAVY, backgroundColour, HORIZONTAL);
 8001cf0:	4932      	ldr	r1, [pc, #200]	; (8001dbc <DM_Title_Bar+0x110>)
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3304      	adds	r3, #4
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	492d      	ldr	r1, [pc, #180]	; (8001dbc <DM_Title_Bar+0x110>)
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	440b      	add	r3, r1
 8001d12:	3306      	adds	r3, #6
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	461c      	mov	r4, r3
 8001d18:	4928      	ldr	r1, [pc, #160]	; (8001dbc <DM_Title_Bar+0x110>)
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	440b      	add	r3, r1
 8001d26:	3308      	adds	r3, #8
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	461d      	mov	r5, r3
 8001d2c:	4923      	ldr	r1, [pc, #140]	; (8001dbc <DM_Title_Bar+0x110>)
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	440b      	add	r3, r1
 8001d3a:	330a      	adds	r3, #10
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	9302      	str	r3, [sp, #8]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	230f      	movs	r3, #15
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	462a      	mov	r2, r5
 8001d50:	4621      	mov	r1, r4
 8001d52:	f000 fdfd 	bl	8002950 <fill_gradient>
	//And a line
	//fill_rectangle(elements[id].x1, elements[id].y2, elements[id].x2, elements[id].y2 + 1, COLOR_GRAY);

	//Center the text
	int titleLen = DM_StrLen(elements[id].title, 32);
 8001d56:	4919      	ldr	r1, [pc, #100]	; (8001dbc <DM_Title_Bar+0x110>)
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	440b      	add	r3, r1
 8001d64:	3328      	adds	r3, #40	; 0x28
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2120      	movs	r1, #32
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fa98 	bl	80012a0 <DM_StrLen>
 8001d70:	60b8      	str	r0, [r7, #8]
	draw_string(halfWidth - (titleLen * 9), elements[id].y1 + 10, foregroundColour, 2, elements[id].title);
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	4613      	mov	r3, r2
 8001d76:	075b      	lsls	r3, r3, #29
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	1a9a      	subs	r2, r3, r2
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	18d0      	adds	r0, r2, r3
 8001d82:	490e      	ldr	r1, [pc, #56]	; (8001dbc <DM_Title_Bar+0x110>)
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	440b      	add	r3, r1
 8001d90:	3306      	adds	r3, #6
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f103 010a 	add.w	r1, r3, #10
 8001d98:	4c08      	ldr	r4, [pc, #32]	; (8001dbc <DM_Title_Bar+0x110>)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4423      	add	r3, r4
 8001da6:	3328      	adds	r3, #40	; 0x28
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2302      	movs	r3, #2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	f000 fcfc 	bl	80027ac <draw_string>
}
 8001db4:	bf00      	nop
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbc:	200040a4 	.word	0x200040a4

08001dc0 <DFPlayer_sendByte>:
#include "drivers/DFPlayer.h"

/**
 * Send a byte to the UART with flow control.
 */
void DFPlayer_sendByte(unsigned char data) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, &data, 1, 100);
 8001dca:	1df9      	adds	r1, r7, #7
 8001dcc:	2364      	movs	r3, #100	; 0x64
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <DFPlayer_sendByte+0x20>)
 8001dd2:	f005 fbb7 	bl	8007544 <HAL_UART_Transmit>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20004e3c 	.word	0x20004e3c

08001de4 <DFPlayer_calculateChecksum>:
 * the commands look like yet)
 * 
 * Checksum = 0 - (0xFF + 0x06 + command + ACK + dataH + dataL) & 0xFFFF
 * 
 */
unsigned int DFPlayer_calculateChecksum(unsigned char command, unsigned char dataH, unsigned char dataL) {
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	460b      	mov	r3, r1
 8001df0:	71bb      	strb	r3, [r7, #6]
 8001df2:	4613      	mov	r3, r2
 8001df4:	717b      	strb	r3, [r7, #5]
    unsigned int checksum = 0 - (0xFF + 0x06 + command + dataH + dataL);
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f203 1205 	addw	r2, r3, #261	; 0x105
 8001dfc:	79bb      	ldrb	r3, [r7, #6]
 8001dfe:	441a      	add	r2, r3
 8001e00:	797b      	ldrb	r3, [r7, #5]
 8001e02:	4413      	add	r3, r2
 8001e04:	425b      	negs	r3, r3
 8001e06:	60fb      	str	r3, [r7, #12]
    checksum = checksum & 0xFFFF;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	60fb      	str	r3, [r7, #12]
    
    return checksum;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <DFPlayer_sendCommand>:
/**
 * Send a command to the DFPlayer mini
 * Sends two data bytes.
 * Overloaded with another function to send only a single byte.
 */
void DFPlayer_sendCommand(unsigned char command, unsigned char dataH, unsigned char dataL) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	460b      	mov	r3, r1
 8001e28:	71bb      	strb	r3, [r7, #6]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	717b      	strb	r3, [r7, #5]
    //Get the checksum
    unsigned int checksum = DFPlayer_calculateChecksum(command, dataH, dataL);
 8001e2e:	797a      	ldrb	r2, [r7, #5]
 8001e30:	79b9      	ldrb	r1, [r7, #6]
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ffd5 	bl	8001de4 <DFPlayer_calculateChecksum>
 8001e3a:	60f8      	str	r0, [r7, #12]
    
    //Normal command structure
    DFPlayer_sendByte(0x7E);
 8001e3c:	207e      	movs	r0, #126	; 0x7e
 8001e3e:	f7ff ffbf 	bl	8001dc0 <DFPlayer_sendByte>
    DFPlayer_sendByte(0xFF);
 8001e42:	20ff      	movs	r0, #255	; 0xff
 8001e44:	f7ff ffbc 	bl	8001dc0 <DFPlayer_sendByte>
    DFPlayer_sendByte(0x06);
 8001e48:	2006      	movs	r0, #6
 8001e4a:	f7ff ffb9 	bl	8001dc0 <DFPlayer_sendByte>
    DFPlayer_sendByte(command);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ffb5 	bl	8001dc0 <DFPlayer_sendByte>
    DFPlayer_sendByte(0x00); //No ACK needed
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff ffb2 	bl	8001dc0 <DFPlayer_sendByte>
    DFPlayer_sendByte(dataH);
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ffae 	bl	8001dc0 <DFPlayer_sendByte>
    DFPlayer_sendByte(dataL);
 8001e64:	797b      	ldrb	r3, [r7, #5]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ffaa 	bl	8001dc0 <DFPlayer_sendByte>
    DFPlayer_sendByte(checksum >> 8); //Checksum High byte
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ffa4 	bl	8001dc0 <DFPlayer_sendByte>
    DFPlayer_sendByte(checksum & 0xFF); //Checksum low byte
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff9f 	bl	8001dc0 <DFPlayer_sendByte>
    DFPlayer_sendByte(0xEF);
 8001e82:	20ef      	movs	r0, #239	; 0xef
 8001e84:	f7ff ff9c 	bl	8001dc0 <DFPlayer_sendByte>
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <DFPlayer_getResponse>:
/**
 * Sends a specified command to the module and then awaits a reply
 * 
 * BYO data buffer array
 */
void DFPlayer_getResponse(unsigned char command, unsigned char dataH, unsigned char dataL, unsigned char buff[]) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	71bb      	strb	r3, [r7, #6]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	717b      	strb	r3, [r7, #5]
    //Send the request command
    DFPlayer_sendCommand(command, dataH, dataL);
 8001ea4:	797a      	ldrb	r2, [r7, #5]
 8001ea6:	79b9      	ldrb	r1, [r7, #6]
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ffb6 	bl	8001e1c <DFPlayer_sendCommand>
    /*
    for(int num_bytes = 0; num_bytes < 10; num_bytes++) 
        buff[num_bytes] = DFPlayer_getByte();
        */
    HAL_UART_Receive(&huart1, buff, 10, 250);
 8001eb0:	23fa      	movs	r3, #250	; 0xfa
 8001eb2:	220a      	movs	r2, #10
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	4803      	ldr	r0, [pc, #12]	; (8001ec4 <DFPlayer_getResponse+0x34>)
 8001eb8:	f005 fbd8 	bl	800766c <HAL_UART_Receive>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20004e3c 	.word	0x20004e3c

08001ec8 <DFPlayer_setPause>:
}

/**
 * Just sends the PAUSE command. No other data.
 */
void DFPlayer_setPause() {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    DFPlayer_sendCommand(PAUSE, 0x00, 0x00);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	200e      	movs	r0, #14
 8001ed2:	f7ff ffa3 	bl	8001e1c <DFPlayer_sendCommand>
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <DFPlayer_getStatus>:
}

/**
 * Get the current status of the device
 */
int DFPlayer_getStatus() {
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
    unsigned char data[10];
    //Feed the response in to the array
    DFPlayer_getResponse(QUERY_STATUS, 0x00, 0x00, data);
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2042      	movs	r0, #66	; 0x42
 8001ee8:	f7ff ffd2 	bl	8001e90 <DFPlayer_getResponse>
    
    //Return the interesting part of the returned data
    return data[6];
 8001eec:	7abb      	ldrb	r3, [r7, #10]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <DFPlayer_getTracksInFolder>:
}

/**
 * Queries the number of tracks in a specified folder
 */
int DFPlayer_getTracksInFolder(int folder) {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
    unsigned char data[10];
    //Feed the response in to the array
    DFPlayer_getResponse(QUERY_TRACKS_IN_FOLDER, (folder >> 8), (folder & 0xFF), data);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	121b      	asrs	r3, r3, #8
 8001f02:	b2d9      	uxtb	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	204e      	movs	r0, #78	; 0x4e
 8001f0e:	f7ff ffbf 	bl	8001e90 <DFPlayer_getResponse>
    
    //Return the interesting part of the returned data
    return data[6];
 8001f12:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <DFPlayer_resetModule>:

/**
 * Sends the soft reset command
 */
void DFPlayer_resetModule() {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
    DFPlayer_sendCommand(RESET, 0x00, 0x00);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	200c      	movs	r0, #12
 8001f26:	f7ff ff79 	bl	8001e1c <DFPlayer_sendCommand>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <RTC_get_time_date>:
}

/*
 * Returns a time struct of the current time and date
 */
struct Time RTC_get_time_date() {
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b08d      	sub	sp, #52	; 0x34
 8001f34:	af04      	add	r7, sp, #16
 8001f36:	6078      	str	r0, [r7, #4]
    unsigned char timeDate[7];
    struct Time newTime;
    
    //Get the whole chunk of ram as one stream
	if(HAL_I2C_IsDeviceReady (&hi2c1, DS3231_ADDR << 1, 10, 250) == HAL_OK)
 8001f38:	23fa      	movs	r3, #250	; 0xfa
 8001f3a:	220a      	movs	r2, #10
 8001f3c:	21d0      	movs	r1, #208	; 0xd0
 8001f3e:	4827      	ldr	r0, [pc, #156]	; (8001fdc <RTC_get_time_date+0xac>)
 8001f40:	f002 fffa 	bl	8004f38 <HAL_I2C_IsDeviceReady>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <RTC_get_time_date+0x34>
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR << 1, DS3231_SECONDS, I2C_MEMADD_SIZE_8BIT, timeDate, 7, 250);
 8001f4a:	23fa      	movs	r3, #250	; 0xfa
 8001f4c:	9302      	str	r3, [sp, #8]
 8001f4e:	2307      	movs	r3, #7
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	f107 0318 	add.w	r3, r7, #24
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	21d0      	movs	r1, #208	; 0xd0
 8001f5e:	481f      	ldr	r0, [pc, #124]	; (8001fdc <RTC_get_time_date+0xac>)
 8001f60:	f002 fed0 	bl	8004d04 <HAL_I2C_Mem_Read>
    
    //Have to convert these numbers from the weird HEX format to regular
    //decimal format.
    newTime.seconds = RTC_convert_seconds_to_decimal(timeDate[0]);
 8001f64:	7e3b      	ldrb	r3, [r7, #24]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f83a 	bl	8001fe0 <RTC_convert_seconds_to_decimal>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	733b      	strb	r3, [r7, #12]
    newTime.minutes = RTC_convert_seconds_to_decimal(timeDate[1]);
 8001f72:	7e7b      	ldrb	r3, [r7, #25]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f833 	bl	8001fe0 <RTC_convert_seconds_to_decimal>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	737b      	strb	r3, [r7, #13]
    newTime.hours = RTC_convert_hours_to_decimal(timeDate[2]);
 8001f80:	7ebb      	ldrb	r3, [r7, #26]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f847 	bl	8002016 <RTC_convert_hours_to_decimal>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	73bb      	strb	r3, [r7, #14]
    newTime.weekday = timeDate[3] - 1;
 8001f8e:	7efb      	ldrb	r3, [r7, #27]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	73fb      	strb	r3, [r7, #15]
    newTime.day = RTC_convert_date_to_decimal(timeDate[4]);
 8001f96:	7f3b      	ldrb	r3, [r7, #28]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 f857 	bl	800204c <RTC_convert_date_to_decimal>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	743b      	strb	r3, [r7, #16]
    //We can re-use the hours and seconds conversion here.
    newTime.month = RTC_convert_hours_to_decimal(timeDate[5]);
 8001fa4:	7f7b      	ldrb	r3, [r7, #29]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f835 	bl	8002016 <RTC_convert_hours_to_decimal>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	747b      	strb	r3, [r7, #17]
    newTime.year = RTC_convert_seconds_to_decimal(timeDate[6]) + 2000;
 8001fb2:	7fbb      	ldrb	r3, [r7, #30]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 f813 	bl	8001fe0 <RTC_convert_seconds_to_decimal>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001fc0:	617b      	str	r3, [r7, #20]
    
    return newTime;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	461c      	mov	r4, r3
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20004d84 	.word	0x20004d84

08001fe0 <RTC_convert_seconds_to_decimal>:

/*
 * Converts a value from the RTC's werid memory format in to a regular
 * decimal number.
 */
int RTC_convert_seconds_to_decimal(unsigned char data) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0xF0) >> 4) * 10;
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
    int seconds = data & 0x0F;
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	60bb      	str	r3, [r7, #8]
    
    return tens + seconds;
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4413      	add	r3, r2
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <RTC_convert_hours_to_decimal>:
/*
 * Converts the hours register to a decimal value
 */
int RTC_convert_hours_to_decimal(unsigned char data) {
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0x30) >> 4) * 10;
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	111b      	asrs	r3, r3, #4
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
    int digits = data & 0x0F;
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	60bb      	str	r3, [r7, #8]
    
    return tens + digits;
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4413      	add	r3, r2
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <RTC_convert_date_to_decimal>:
/*
 * Converts the DATE register in to a decimal representation
 */
int RTC_convert_date_to_decimal(unsigned char data) {
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0x30) >> 4) * 10;
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	111b      	asrs	r3, r3, #4
 800205a:	f003 0203 	and.w	r2, r3, #3
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
    int digits = data & 0x0F;
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	60bb      	str	r3, [r7, #8]
    
    return tens + digits;
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	4413      	add	r3, r2
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <FT5446_getTouch>:
 *      Author: tommy
 */

#include "drivers/FT5446.h"

struct Touch FT5446_getTouch() {
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b08d      	sub	sp, #52	; 0x34
 8002088:	af04      	add	r7, sp, #16
 800208a:	6078      	str	r0, [r7, #4]
	struct Touch touch;
	unsigned char touchData[6];

	//Get number of touches
	//Wait for device to be ready
	if(HAL_I2C_IsDeviceReady (&hi2c1, FT5446_ADDR << 1, 10, 250) == HAL_OK) {
 800208c:	23fa      	movs	r3, #250	; 0xfa
 800208e:	220a      	movs	r2, #10
 8002090:	2170      	movs	r1, #112	; 0x70
 8002092:	481a      	ldr	r0, [pc, #104]	; (80020fc <FT5446_getTouch+0x78>)
 8002094:	f002 ff50 	bl	8004f38 <HAL_I2C_IsDeviceReady>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d122      	bne.n	80020e4 <FT5446_getTouch+0x60>
		//Get the CTP ram
		HAL_I2C_Mem_Read (&hi2c1, FT5446_ADDR << 1, FT5446_GESTURE_ADDR, I2C_MEMADD_SIZE_8BIT, touchData, 6, 250);
 800209e:	23fa      	movs	r3, #250	; 0xfa
 80020a0:	9302      	str	r3, [sp, #8]
 80020a2:	2306      	movs	r3, #6
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2301      	movs	r3, #1
 80020ae:	2201      	movs	r2, #1
 80020b0:	2170      	movs	r1, #112	; 0x70
 80020b2:	4812      	ldr	r0, [pc, #72]	; (80020fc <FT5446_getTouch+0x78>)
 80020b4:	f002 fe26 	bl	8004d04 <HAL_I2C_Mem_Read>
		//Combine in to regular human numbers
		touch.Y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 80020b8:	7bbb      	ldrb	r3, [r7, #14]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
		touch.X = ((touchData[4] & 0x0F) << 8) | touchData[5];
 80020c6:	7c3b      	ldrb	r3, [r7, #16]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020ce:	7c7a      	ldrb	r2, [r7, #17]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]

		//Get the gesture and n touches values
		touch.gesture = touchData[0];
 80020d4:	7b3b      	ldrb	r3, [r7, #12]
 80020d6:	773b      	strb	r3, [r7, #28]
		touch.nTouches = touchData[1];
 80020d8:	7b7b      	ldrb	r3, [r7, #13]
 80020da:	777b      	strb	r3, [r7, #29]
		touch.state = touchData[2] >> 6;
 80020dc:	7bbb      	ldrb	r3, [r7, #14]
 80020de:	099b      	lsrs	r3, r3, #6
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	77bb      	strb	r3, [r7, #30]
	}

	return touch;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	461c      	mov	r4, r3
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	3724      	adds	r7, #36	; 0x24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd90      	pop	{r4, r7, pc}
 80020fc:	20004d84 	.word	0x20004d84

08002100 <parallel_write>:
#include "font.h"

/**
 * Writes data to an 16-bit parallel bus.
 */
void parallel_write(unsigned int data) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	//In this particular example I'm using PA8:15 and PC8:15
    HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210e:	4810      	ldr	r0, [pc, #64]	; (8002150 <parallel_write+0x50>)
 8002110:	f002 fd14 	bl	8004b3c <HAL_GPIO_WritePin>
	GPIOC->ODR = (data & 0xFF00) | (GPIOC->ODR & 0x00FF); //Remember, we're using the lower half of these pins for other things.
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <parallel_write+0x54>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <parallel_write+0x54>)
 8002122:	4313      	orrs	r3, r2
 8002124:	614b      	str	r3, [r1, #20]
	GPIOA->ODR = ((data << 8) & 0xFF00) | (GPIOA->ODR & 0x00FF);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b29a      	uxth	r2, r3
 800212c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002138:	4313      	orrs	r3, r2
 800213a:	614b      	str	r3, [r1, #20]
    HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_SET);
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002142:	4803      	ldr	r0, [pc, #12]	; (8002150 <parallel_write+0x50>)
 8002144:	f002 fcfa 	bl	8004b3c <HAL_GPIO_WritePin>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	48000400 	.word	0x48000400
 8002154:	48000800 	.word	0x48000800

08002158 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned int data) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8002160:	2201      	movs	r2, #1
 8002162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002166:	480b      	ldr	r0, [pc, #44]	; (8002194 <lcd_write_data+0x3c>)
 8002168:	f002 fce8 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002172:	4808      	ldr	r0, [pc, #32]	; (8002194 <lcd_write_data+0x3c>)
 8002174:	f002 fce2 	bl	8004b3c <HAL_GPIO_WritePin>
	parallel_write(data);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffc1 	bl	8002100 <parallel_write>
    //HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <lcd_write_data+0x3c>)
 8002186:	f002 fcd9 	bl	8004b3c <HAL_GPIO_WritePin>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	48000400 	.word	0x48000400

08002198 <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <lcd_write_command+0x40>)
 80021aa:	f002 fcc7 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b4:	4808      	ldr	r0, [pc, #32]	; (80021d8 <lcd_write_command+0x40>)
 80021b6:	f002 fcc1 	bl	8004b3c <HAL_GPIO_WritePin>
	parallel_write(data);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff9f 	bl	8002100 <parallel_write>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <lcd_write_command+0x40>)
 80021ca:	f002 fcb7 	bl	8004b3c <HAL_GPIO_WritePin>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	48000400 	.word	0x48000400

080021dc <swap_int>:
}

/*
 * Swaps two 16-bit integers
 */
void swap_int(unsigned int *num1, unsigned int *num2) {
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
    int temp = *num2;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]
    *num2 = *num1;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	601a      	str	r2, [r3, #0]
    *num1 = temp;
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	ed87 0b00 	vstr	d0, [r7]
    int multiplier = 4;
 8002212:	2304      	movs	r3, #4
 8002214:	617b      	str	r3, [r7, #20]
    double counter = millis;
 8002216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800221a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 800221e:	e01c      	b.n	800225a <delay_ms+0x52>
        while(counter--);
 8002220:	bf00      	nop
 8002222:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <delay_ms+0x68>)
 800222c:	4620      	mov	r0, r4
 800222e:	4629      	mov	r1, r5
 8002230:	f7fe f82a 	bl	8000288 <__aeabi_dsub>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	4620      	mov	r0, r4
 8002246:	4629      	mov	r1, r5
 8002248:	f7fe fa2c 	bl	80006a4 <__aeabi_dcmpeq>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0e7      	beq.n	8002222 <delay_ms+0x1a>
        counter = millis;
 8002252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002256:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	617a      	str	r2, [r7, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1dd      	bne.n	8002220 <delay_ms+0x18>
    }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bdb0      	pop	{r4, r5, r7, pc}
 800226e:	bf00      	nop
 8002270:	3ff00000 	.word	0x3ff00000
 8002274:	00000000 	.word	0x00000000

08002278 <lcd_init_parallel>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init_parallel() {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0

    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH (Active LOW)
 800227c:	2201      	movs	r2, #1
 800227e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002282:	481d      	ldr	r0, [pc, #116]	; (80022f8 <lcd_init_parallel+0x80>)
 8002284:	f002 fc5a 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET); //Chip Select Active LOW
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800228e:	481a      	ldr	r0, [pc, #104]	; (80022f8 <lcd_init_parallel+0x80>)
 8002290:	f002 fc54 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET); //Data / Command select Active LOW
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800229a:	4817      	ldr	r0, [pc, #92]	; (80022f8 <lcd_init_parallel+0x80>)
 800229c:	f002 fc4e 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RD_PORT, RD_PIN, GPIO_PIN_SET); //READ pin HIGH (active LOW)
 80022a0:	2201      	movs	r2, #1
 80022a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a6:	4814      	ldr	r0, [pc, #80]	; (80022f8 <lcd_init_parallel+0x80>)
 80022a8:	f002 fc48 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_SET); //WRITE pin HIGH (active LOW)
 80022ac:	2201      	movs	r2, #1
 80022ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b2:	4811      	ldr	r0, [pc, #68]	; (80022f8 <lcd_init_parallel+0x80>)
 80022b4:	f002 fc42 	bl	8004b3c <HAL_GPIO_WritePin>
    //Cycle reset pin
    delay_ms(100);
 80022b8:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80022f0 <lcd_init_parallel+0x78>
 80022bc:	f7ff ffa4 	bl	8002208 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c6:	480c      	ldr	r0, [pc, #48]	; (80022f8 <lcd_init_parallel+0x80>)
 80022c8:	f002 fc38 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80022cc:	2064      	movs	r0, #100	; 0x64
 80022ce:	f002 f89b 	bl	8004408 <HAL_Delay>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d8:	4807      	ldr	r0, [pc, #28]	; (80022f8 <lcd_init_parallel+0x80>)
 80022da:	f002 fc2f 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80022de:	2064      	movs	r0, #100	; 0x64
 80022e0:	f002 f892 	bl	8004408 <HAL_Delay>

    lcd_init_command_list();
 80022e4:	f000 f80a 	bl	80022fc <lcd_init_command_list>

}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	f3af 8000 	nop.w
 80022f0:	00000000 	.word	0x00000000
 80022f4:	40590000 	.word	0x40590000
 80022f8:	48000400 	.word	0x48000400

080022fc <lcd_init_command_list>:

/**
 * This is the magic initialisation routine.
 */
void lcd_init_command_list(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0

	//********Start Initial Sequence*******//
	lcd_write_command(0xE0); //P-Gamma
 8002300:	20e0      	movs	r0, #224	; 0xe0
 8002302:	f7ff ff49 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7ff ff26 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x13);
 800230c:	2013      	movs	r0, #19
 800230e:	f7ff ff23 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x18);
 8002312:	2018      	movs	r0, #24
 8002314:	f7ff ff20 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x04);
 8002318:	2004      	movs	r0, #4
 800231a:	f7ff ff1d 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x0F);
 800231e:	200f      	movs	r0, #15
 8002320:	f7ff ff1a 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x06);
 8002324:	2006      	movs	r0, #6
 8002326:	f7ff ff17 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x3A);
 800232a:	203a      	movs	r0, #58	; 0x3a
 800232c:	f7ff ff14 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x56);
 8002330:	2056      	movs	r0, #86	; 0x56
 8002332:	f7ff ff11 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x4D);
 8002336:	204d      	movs	r0, #77	; 0x4d
 8002338:	f7ff ff0e 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x03);
 800233c:	2003      	movs	r0, #3
 800233e:	f7ff ff0b 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x0A);
 8002342:	200a      	movs	r0, #10
 8002344:	f7ff ff08 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x06);
 8002348:	2006      	movs	r0, #6
 800234a:	f7ff ff05 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x30);
 800234e:	2030      	movs	r0, #48	; 0x30
 8002350:	f7ff ff02 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x3E);
 8002354:	203e      	movs	r0, #62	; 0x3e
 8002356:	f7ff feff 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x0F);
 800235a:	200f      	movs	r0, #15
 800235c:	f7ff fefc 	bl	8002158 <lcd_write_data>
	lcd_write_command(0XE1); //N-Gamma
 8002360:	20e1      	movs	r0, #225	; 0xe1
 8002362:	f7ff ff19 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x00);
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff fef6 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x13);
 800236c:	2013      	movs	r0, #19
 800236e:	f7ff fef3 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x18);
 8002372:	2018      	movs	r0, #24
 8002374:	f7ff fef0 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x01);
 8002378:	2001      	movs	r0, #1
 800237a:	f7ff feed 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x11);
 800237e:	2011      	movs	r0, #17
 8002380:	f7ff feea 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x06);
 8002384:	2006      	movs	r0, #6
 8002386:	f7ff fee7 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x38);
 800238a:	2038      	movs	r0, #56	; 0x38
 800238c:	f7ff fee4 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x34);
 8002390:	2034      	movs	r0, #52	; 0x34
 8002392:	f7ff fee1 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x4D);
 8002396:	204d      	movs	r0, #77	; 0x4d
 8002398:	f7ff fede 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x06);
 800239c:	2006      	movs	r0, #6
 800239e:	f7ff fedb 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x0D);
 80023a2:	200d      	movs	r0, #13
 80023a4:	f7ff fed8 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x0B);
 80023a8:	200b      	movs	r0, #11
 80023aa:	f7ff fed5 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x31);
 80023ae:	2031      	movs	r0, #49	; 0x31
 80023b0:	f7ff fed2 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x37);
 80023b4:	2037      	movs	r0, #55	; 0x37
 80023b6:	f7ff fecf 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x0F);
 80023ba:	200f      	movs	r0, #15
 80023bc:	f7ff fecc 	bl	8002158 <lcd_write_data>
	lcd_write_command(0xC0);
 80023c0:	20c0      	movs	r0, #192	; 0xc0
 80023c2:	f7ff fee9 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x18);
 80023c6:	2018      	movs	r0, #24
 80023c8:	f7ff fec6 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x16);
 80023cc:	2016      	movs	r0, #22
 80023ce:	f7ff fec3 	bl	8002158 <lcd_write_data>
	lcd_write_command(0xC1);
 80023d2:	20c1      	movs	r0, #193	; 0xc1
 80023d4:	f7ff fee0 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x45);
 80023d8:	2045      	movs	r0, #69	; 0x45
 80023da:	f7ff febd 	bl	8002158 <lcd_write_data>
	lcd_write_command(0xC5); //VCOM
 80023de:	20c5      	movs	r0, #197	; 0xc5
 80023e0:	f7ff feda 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff feb7 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x63);
 80023ea:	2063      	movs	r0, #99	; 0x63
 80023ec:	f7ff feb4 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x01);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7ff feb1 	bl	8002158 <lcd_write_data>

	lcd_write_command(0x36); //RAM address mode
 80023f6:	2036      	movs	r0, #54	; 0x36
 80023f8:	f7ff fece 	bl	8002198 <lcd_write_command>
	//0xF8 and 0x3C are landscape mode. 0x5C and 0x9C for portrait mode.
	if(LANDSCAPE)
		lcd_write_data(0xF8);
 80023fc:	20f8      	movs	r0, #248	; 0xf8
 80023fe:	f7ff feab 	bl	8002158 <lcd_write_data>
	else
		lcd_write_data(0x5C);

	lcd_write_command(0x3A); //Interface Mode Control
 8002402:	203a      	movs	r0, #58	; 0x3a
 8002404:	f7ff fec8 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x55); //x55 for 16-bit mode OR 0x66 for 18-bit serial mode
 8002408:	2055      	movs	r0, #85	; 0x55
 800240a:	f7ff fea5 	bl	8002158 <lcd_write_data>
	lcd_write_command(0xB0); //Interface Mode Control
 800240e:	20b0      	movs	r0, #176	; 0xb0
 8002410:	f7ff fec2 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x80); //SDO not in use
 8002414:	2080      	movs	r0, #128	; 0x80
 8002416:	f7ff fe9f 	bl	8002158 <lcd_write_data>
	lcd_write_command(0xB1); //Frame rate 70HZ
 800241a:	20b1      	movs	r0, #177	; 0xb1
 800241c:	f7ff febc 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x00); //
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff fe99 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x10);
 8002426:	2010      	movs	r0, #16
 8002428:	f7ff fe96 	bl	8002158 <lcd_write_data>
	lcd_write_command(0xB4);
 800242c:	20b4      	movs	r0, #180	; 0xb4
 800242e:	f7ff feb3 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x02);
 8002432:	2002      	movs	r0, #2
 8002434:	f7ff fe90 	bl	8002158 <lcd_write_data>

	lcd_write_command(0xB6); //RGB/MCU Interface Control
 8002438:	20b6      	movs	r0, #182	; 0xb6
 800243a:	f7ff fead 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x02);
 800243e:	2002      	movs	r0, #2
 8002440:	f7ff fe8a 	bl	8002158 <lcd_write_data>
	//lcd_write_data(0x22);

	lcd_write_command(0xE9);
 8002444:	20e9      	movs	r0, #233	; 0xe9
 8002446:	f7ff fea7 	bl	8002198 <lcd_write_command>
	lcd_write_data(0x00);
 800244a:	2000      	movs	r0, #0
 800244c:	f7ff fe84 	bl	8002158 <lcd_write_data>
	lcd_write_command(0xF7);
 8002450:	20f7      	movs	r0, #247	; 0xf7
 8002452:	f7ff fea1 	bl	8002198 <lcd_write_command>
	lcd_write_data(0xA9);
 8002456:	20a9      	movs	r0, #169	; 0xa9
 8002458:	f7ff fe7e 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x51);
 800245c:	2051      	movs	r0, #81	; 0x51
 800245e:	f7ff fe7b 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x2C);
 8002462:	202c      	movs	r0, #44	; 0x2c
 8002464:	f7ff fe78 	bl	8002158 <lcd_write_data>
	lcd_write_data(0x82);
 8002468:	2082      	movs	r0, #130	; 0x82
 800246a:	f7ff fe75 	bl	8002158 <lcd_write_data>
	lcd_write_command(0x11);
 800246e:	2011      	movs	r0, #17
 8002470:	f7ff fe92 	bl	8002198 <lcd_write_command>
	HAL_Delay(120);
 8002474:	2078      	movs	r0, #120	; 0x78
 8002476:	f001 ffc7 	bl	8004408 <HAL_Delay>
	lcd_write_command(0x21);
 800247a:	2021      	movs	r0, #33	; 0x21
 800247c:	f7ff fe8c 	bl	8002198 <lcd_write_command>


	HAL_Delay(120);
 8002480:	2078      	movs	r0, #120	; 0x78
 8002482:	f001 ffc1 	bl	8004408 <HAL_Delay>
	lcd_write_command(0x29);
 8002486:	2029      	movs	r0, #41	; 0x29
 8002488:	f7ff fe86 	bl	8002198 <lcd_write_command>
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <set_draw_window>:
/*
 * Sets the X,Y position for following commands on the display.
 * Should only be called within a function that draws something
 * to the display.
 */
void set_draw_window(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]

    //Check that the values are in order
    if(x2 < x1)
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d206      	bcs.n	80024b4 <set_draw_window+0x24>
        swap_int(&x2, &x1);
 80024a6:	f107 020c 	add.w	r2, r7, #12
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fe94 	bl	80021dc <swap_int>
    if(y2 < y1)
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d206      	bcs.n	80024ca <set_draw_window+0x3a>
        swap_int(&y2, &y1);
 80024bc:	f107 0208 	add.w	r2, r7, #8
 80024c0:	463b      	mov	r3, r7
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fe89 	bl	80021dc <swap_int>

    lcd_write_command(ILI9488_CASET);
 80024ca:	202a      	movs	r0, #42	; 0x2a
 80024cc:	f7ff fe64 	bl	8002198 <lcd_write_command>
    lcd_write_data(x1 >> 8);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fe3f 	bl	8002158 <lcd_write_data>
    lcd_write_data(x1 & 0xFF);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fe3a 	bl	8002158 <lcd_write_data>

    lcd_write_data(x2 >> 8);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fe35 	bl	8002158 <lcd_write_data>
    lcd_write_data(x2 & 0xFF);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fe30 	bl	8002158 <lcd_write_data>

    lcd_write_command(ILI9488_PASET);
 80024f8:	202b      	movs	r0, #43	; 0x2b
 80024fa:	f7ff fe4d 	bl	8002198 <lcd_write_command>
    lcd_write_data(y1 >> 8);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fe28 	bl	8002158 <lcd_write_data>
    lcd_write_data(y1 & 0xFF);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fe23 	bl	8002158 <lcd_write_data>

    lcd_write_data(y2 >> 8);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fe1e 	bl	8002158 <lcd_write_data>
    lcd_write_data(y2 & 0xFF);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fe19 	bl	8002158 <lcd_write_data>

    lcd_write_command(ILI9488_RAMWR);
 8002526:	202c      	movs	r0, #44	; 0x2c
 8002528:	f7ff fe36 	bl	8002198 <lcd_write_command>
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with
 * Colour.
 *
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(unsigned int x, unsigned int y, unsigned int colour) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]

    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3301      	adds	r3, #1
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff ffa0 	bl	8002490 <set_draw_window>
    lcd_write_data(colour);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fe01 	bl	8002158 <lcd_write_data>
}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int colour) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]


    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f7ff ff8b 	bl	8002490 <set_draw_window>

    // data sections but I don't trust it.)
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800257a:	2201      	movs	r2, #1
 800257c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002580:	4817      	ldr	r0, [pc, #92]	; (80025e0 <fill_rectangle+0x80>)
 8002582:	f002 fadb 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258c:	4814      	ldr	r0, [pc, #80]	; (80025e0 <fill_rectangle+0x80>)
 800258e:	f002 fad5 	bl	8004b3c <HAL_GPIO_WritePin>


    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e012      	b.n	80025be <fill_rectangle+0x5e>
        for(int x = 0; x < x2-x1+1; x++) {
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	e005      	b.n	80025aa <fill_rectangle+0x4a>
        	parallel_write(colour);
 800259e:	6a38      	ldr	r0, [r7, #32]
 80025a0:	f7ff fdae 	bl	8002100 <parallel_write>
        for(int x = 0; x < x2-x1+1; x++) {
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	3301      	adds	r3, #1
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d8f2      	bhi.n	800259e <fill_rectangle+0x3e>
    for(int y = 0; y < y2-y1+1 ; y++) {
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3301      	adds	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d8e5      	bhi.n	8002598 <fill_rectangle+0x38>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80025cc:	2201      	movs	r2, #1
 80025ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d2:	4803      	ldr	r0, [pc, #12]	; (80025e0 <fill_rectangle+0x80>)
 80025d4:	f002 fab2 	bl	8004b3c <HAL_GPIO_WritePin>
}
 80025d8:	bf00      	nop
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	48000400 	.word	0x48000400

080025e4 <draw_char>:

/*
 * Draws a single char to the screen.
 */
void draw_char(unsigned int x, unsigned int y, char c, unsigned int colour, char size) {
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b08b      	sub	sp, #44	; 0x2c
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	71fb      	strb	r3, [r7, #7]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	3b20      	subs	r3, #32
 80025f8:	617b      	str	r3, [r7, #20]

    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e062      	b.n	80026c6 <draw_char+0xe2>

        line = FontLarge[font_index][12 - i];
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 010c 	rsb	r1, r3, #12
 8002606:	4834      	ldr	r0, [pc, #208]	; (80026d8 <draw_char+0xf4>)
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	4403      	add	r3, r0
 8002616:	440b      	add	r3, r1
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	74fb      	strb	r3, [r7, #19]

        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
 8002620:	e04b      	b.n	80026ba <draw_char+0xd6>
            if(line & (0x01 << j)) {
 8002622:	7cfa      	ldrb	r2, [r7, #19]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa42 f303 	asr.w	r3, r2, r3
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d040      	beq.n	80026b4 <draw_char+0xd0>
                if(size == 1) {
 8002632:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002636:	2b01      	cmp	r3, #1
 8002638:	d10c      	bne.n	8002654 <draw_char+0x70>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f103 0008 	add.w	r0, r3, #8
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4413      	add	r3, r2
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	f7ff ff71 	bl	8002534 <draw_pixel>
 8002652:	e02f      	b.n	80026b4 <draw_char+0xd0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f1c3 0308 	rsb	r3, r3, #8
 800265a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	18d0      	adds	r0, r2, r3
 8002668:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	18d1      	adds	r1, r2, r3
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f1c3 0308 	rsb	r3, r3, #8
 800267e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	441a      	add	r2, r3
 800268c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002690:	18d4      	adds	r4, r2, r3
 8002692:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	441a      	add	r2, r3
 80026a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80026a6:	441a      	add	r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	4622      	mov	r2, r4
 80026b0:	f7ff ff56 	bl	8002560 <fill_rectangle>
        for(j=0; j<8; j++) {
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	3301      	adds	r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b07      	cmp	r3, #7
 80026be:	ddb0      	ble.n	8002622 <draw_char+0x3e>
    for(i=0; i<13; i++ ) {
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3301      	adds	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2b0c      	cmp	r3, #12
 80026ca:	dd99      	ble.n	8002600 <draw_char+0x1c>
                }
            }
        }
    }
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800aa28 	.word	0x0800aa28

080026dc <draw_fast_char>:
 * than drawing individual pixels.
 * This will draw over any background image though.
 *
 * NOTE: This sends 130 bytes for a regular sized char
 */
void draw_fast_char(unsigned int x, unsigned int y, char c, unsigned int colour, unsigned int bg_colour) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71fb      	strb	r3, [r7, #7]
    char line;
    char width = 8;
 80026ec:	2308      	movs	r3, #8
 80026ee:	76fb      	strb	r3, [r7, #27]
    char height = 13;
 80026f0:	230d      	movs	r3, #13
 80026f2:	76bb      	strb	r3, [r7, #26]
    unsigned int font_index = (c - 32);
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	3b20      	subs	r3, #32
 80026f8:	617b      	str	r3, [r7, #20]
    unsigned int this_px = bg_colour;
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24

    //Set the drawing region
    set_draw_window(x, y, x + width - 1, y + height);
 80026fe:	7efa      	ldrb	r2, [r7, #27]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	1e59      	subs	r1, r3, #1
 8002706:	7eba      	ldrb	r2, [r7, #26]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4413      	add	r3, r2
 800270c:	460a      	mov	r2, r1
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff febd 	bl	8002490 <set_draw_window>

    //We will do the SPI write manually here for speed
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8002716:	2201      	movs	r2, #1
 8002718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800271c:	4821      	ldr	r0, [pc, #132]	; (80027a4 <draw_fast_char+0xc8>)
 800271e:	f002 fa0d 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002728:	481e      	ldr	r0, [pc, #120]	; (80027a4 <draw_fast_char+0xc8>)
 800272a:	f002 fa07 	bl	8004b3c <HAL_GPIO_WritePin>

    //Get the line of pixels from the font file
    for(int i=0; i < height; i++ ) {
 800272e:	2300      	movs	r3, #0
 8002730:	623b      	str	r3, [r7, #32]
 8002732:	e029      	b.n	8002788 <draw_fast_char+0xac>
        line = FontLarge[font_index][12 - i];
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f1c3 010c 	rsb	r1, r3, #12
 800273a:	481b      	ldr	r0, [pc, #108]	; (80027a8 <draw_fast_char+0xcc>)
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	4403      	add	r3, r0
 800274a:	440b      	add	r3, r1
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	74fb      	strb	r3, [r7, #19]

        //Draw the pixels to screen
        for(int j = width-1; j >= 0; j--) {
 8002750:	7efb      	ldrb	r3, [r7, #27]
 8002752:	3b01      	subs	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	e011      	b.n	800277c <draw_fast_char+0xa0>
            //Default pixel colour is the background colour, unless changed below
            this_px = bg_colour;
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
			if((line >> (j)) & 0x01)
 800275c:	7cfa      	ldrb	r2, [r7, #19]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa42 f303 	asr.w	r3, r2, r3
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <draw_fast_char+0x94>
				this_px = colour;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
			parallel_write(this_px);
 8002770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002772:	f7ff fcc5 	bl	8002100 <parallel_write>
        for(int j = width-1; j >= 0; j--) {
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3b01      	subs	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	daea      	bge.n	8002758 <draw_fast_char+0x7c>
    for(int i=0; i < height; i++ ) {
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	3301      	adds	r3, #1
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	7ebb      	ldrb	r3, [r7, #26]
 800278a:	6a3a      	ldr	r2, [r7, #32]
 800278c:	429a      	cmp	r2, r3
 800278e:	dbd1      	blt.n	8002734 <draw_fast_char+0x58>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8002790:	2201      	movs	r2, #1
 8002792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002796:	4803      	ldr	r0, [pc, #12]	; (80027a4 <draw_fast_char+0xc8>)
 8002798:	f002 f9d0 	bl	8004b3c <HAL_GPIO_WritePin>
}
 800279c:	bf00      	nop
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	48000400 	.word	0x48000400
 80027a8:	0800aa28 	.word	0x0800aa28

080027ac <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with
 * a given colour and size.
 */
void draw_string(unsigned int x, unsigned int y, unsigned int colour, char size, char *str) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	70fb      	strb	r3, [r7, #3]

    //Work out the size of each character
    int char_width = size * 9;
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
    //Iterate through each character in the string
    int counter = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
    while(str[counter] != '\0') {
 80027c8:	e015      	b.n	80027f6 <draw_string+0x4a>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	fb02 f303 	mul.w	r3, r2, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027e0:	4413      	add	r3, r2
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	f7ff fefa 	bl	80025e4 <draw_char>
        //Next character
        counter++;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
    while(str[counter] != '\0') {
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027fa:	4413      	add	r3, r2
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e3      	bne.n	80027ca <draw_string+0x1e>
    }
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <draw_fast_string>:
 * Draws a string using the draw_fast_char() function.
 * This will not preserve any background image and so a custom background
 * colour should be provided.
 * NOTE: Can only be the regular sized font. No scaling.
 */
void draw_fast_string(unsigned int x, unsigned int y, unsigned int colour, unsigned int bg_colour, char *str) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
    //Iterate through each character in the string
    int counter = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 800281e:	e013      	b.n	8002848 <draw_fast_string+0x3c>
        //Write char to the display
        draw_fast_char(x + (counter * 9), y, str[counter], colour, bg_colour);
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	461a      	mov	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	18d0      	adds	r0, r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	6a3a      	ldr	r2, [r7, #32]
 8002832:	4413      	add	r3, r2
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	f7ff ff4d 	bl	80026dc <draw_fast_char>
        //Next character
        counter++;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	6a3a      	ldr	r2, [r7, #32]
 800284c:	4413      	add	r3, r2
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e5      	bne.n	8002820 <draw_fast_string+0x14>
    }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <draw_bitmap>:
 * Draws a bitmap by directly writing the byte stream to the LCD.
 *
 * So the scaling is done strangely here because writing individual pixels
 * has an overhead of 26 bytes each.
 */
void draw_bitmap(unsigned int x1, unsigned int y1, int scale, const unsigned int *bmp) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b08e      	sub	sp, #56	; 0x38
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
	int width = bmp[0];
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
	int height = bmp[1];
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	3304      	adds	r3, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	623b      	str	r3, [r7, #32]
	unsigned int this_byte;
	int x2 = x1 + (width * scale);
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	461a      	mov	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4413      	add	r3, r2
 800288a:	61fb      	str	r3, [r7, #28]
	int y2 = y1 + (height * scale);
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	4413      	add	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]

	//Set the drawing region
	set_draw_window(x1, y1, x2 + scale - 2, y2);
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	3b02      	subs	r3, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7ff fdf0 	bl	8002490 <set_draw_window>

	//We will do the SPI write manually here for speed
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80028b0:	2201      	movs	r2, #1
 80028b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028b6:	4825      	ldr	r0, [pc, #148]	; (800294c <draw_bitmap+0xec>)
 80028b8:	f002 f940 	bl	8004b3c <HAL_GPIO_WritePin>
	//CS low to begin data
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80028bc:	2200      	movs	r2, #0
 80028be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c2:	4822      	ldr	r0, [pc, #136]	; (800294c <draw_bitmap+0xec>)
 80028c4:	f002 f93a 	bl	8004b3c <HAL_GPIO_WritePin>

	//Write colour to each pixel
	for (int y = 0; y < height; y++) {
 80028c8:	2300      	movs	r3, #0
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
 80028cc:	e02f      	b.n	800292e <draw_bitmap+0xce>
		//this loop does the vertical axis scaling (two of each line))
		for (int sv = 0; sv < scale; sv++) {
 80028ce:	2300      	movs	r3, #0
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30
 80028d2:	e025      	b.n	8002920 <draw_bitmap+0xc0>
			for (int x = 0; x < width; x++) {
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d8:	e01b      	b.n	8002912 <draw_bitmap+0xb2>
				//Choose which byte to display depending on the screen orientation
				//NOTE: We add 2 bytes because of the first two bytes being dimension data in the array
				this_byte = bmp[(width * (y)) + x + 2];
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028de:	fb03 f202 	mul.w	r2, r3, r2
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	4413      	add	r3, r2
 80028e6:	3302      	adds	r3, #2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	4413      	add	r3, r2
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	617b      	str	r3, [r7, #20]

				//And this loop does the horizontal axis scale (three bytes per pixel))
				for (int sh = 0; sh < scale; sh++) {
 80028f2:	2300      	movs	r3, #0
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f6:	e005      	b.n	8002904 <draw_bitmap+0xa4>
					parallel_write(this_byte);
 80028f8:	6978      	ldr	r0, [r7, #20]
 80028fa:	f7ff fc01 	bl	8002100 <parallel_write>
				for (int sh = 0; sh < scale; sh++) {
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	3301      	adds	r3, #1
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
 8002904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	dbf5      	blt.n	80028f8 <draw_bitmap+0x98>
			for (int x = 0; x < width; x++) {
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	3301      	adds	r3, #1
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	429a      	cmp	r2, r3
 8002918:	dbdf      	blt.n	80028da <draw_bitmap+0x7a>
		for (int sv = 0; sv < scale; sv++) {
 800291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291c:	3301      	adds	r3, #1
 800291e:	633b      	str	r3, [r7, #48]	; 0x30
 8002920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbd5      	blt.n	80028d4 <draw_bitmap+0x74>
	for (int y = 0; y < height; y++) {
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	3301      	adds	r3, #1
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
 800292e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	429a      	cmp	r2, r3
 8002934:	dbcb      	blt.n	80028ce <draw_bitmap+0x6e>
			}
		}
	}

	//Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8002936:	2201      	movs	r2, #1
 8002938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293c:	4803      	ldr	r0, [pc, #12]	; (800294c <draw_bitmap+0xec>)
 800293e:	f002 f8fd 	bl	8004b3c <HAL_GPIO_WritePin>

}
 8002942:	bf00      	nop
 8002944:	3738      	adds	r7, #56	; 0x38
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	48000400 	.word	0x48000400

08002950 <fill_gradient>:
}

/**
 * Fills a rectangle with a gradient between two colours.
 */
void fill_gradient(int x1, int y1, int x2, int y2, unsigned int startColour, unsigned int endColour, Orientation orientation) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b090      	sub	sp, #64	; 0x40
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
	//Calculate each colour channel
	unsigned char rStart = (startColour >> 11) & 0x1F;
 800295e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002960:	0adb      	lsrs	r3, r3, #11
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    unsigned char gStart = (startColour >> 5) & 0x3F;
 800296c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002976:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    unsigned char bStart = (startColour) & 0x1F;
 800297a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	unsigned char rEnd = (endColour >> 11) & 0x1F;
 8002986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002988:	0adb      	lsrs	r3, r3, #11
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    unsigned char gEnd = (endColour >> 5) & 0x3F;
 8002994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800299e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char bEnd = (endColour) & 0x1F;
 80029a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	//Number of incremental steps are we doing
    //Depends on orientation
    int steps = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(orientation == HORIZONTAL)
 80029b2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d103      	bne.n	80029c2 <fill_gradient+0x72>
		steps = (x2 - x1);
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(orientation == VERTICAL)
 80029c2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d103      	bne.n	80029d2 <fill_gradient+0x82>
    	steps = (y2 - y1);
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Calculate difference between each colour channel
	float dR = ((float)(rEnd - rStart) / steps);
 80029d2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80029d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float dG = ((float)(gEnd - gStart) / steps);
 80029f6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80029fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a16:	edc7 7a08 	vstr	s15, [r7, #32]
	float dB = ((float)(bEnd - bStart) / steps);
 8002a1a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002a1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	ee07 3a90 	vmov	s15, r3
 8002a28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a3a:	edc7 7a07 	vstr	s15, [r7, #28]

	//Figure out how often to change the colour
	unsigned int thisR = rStart;
 8002a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a42:	61bb      	str	r3, [r7, #24]
	unsigned int thisG = gStart;
 8002a44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a48:	617b      	str	r3, [r7, #20]
	unsigned int thisB = bStart;
 8002a4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a4e:	613b      	str	r3, [r7, #16]

	//Doing a normal rectangle fill but we change the colour as we go
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f7ff fd1a 	bl	8002490 <set_draw_window>
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a62:	4857      	ldr	r0, [pc, #348]	; (8002bc0 <fill_gradient+0x270>)
 8002a64:	f002 f86a 	bl	8004b3c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a6e:	4854      	ldr	r0, [pc, #336]	; (8002bc0 <fill_gradient+0x270>)
 8002a70:	f002 f864 	bl	8004b3c <HAL_GPIO_WritePin>

    //Write colour to each pixel
    unsigned int colour = startColour;
 8002a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a76:	63bb      	str	r3, [r7, #56]	; 0x38
    for(int y = 0; y < y2-y1 ; y++) {
 8002a78:	2300      	movs	r3, #0
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7c:	e08f      	b.n	8002b9e <fill_gradient+0x24e>
        for(int x = 0; x < x2-x1; x++) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
 8002a82:	e044      	b.n	8002b0e <fill_gradient+0x1be>
        	//Send them to the display
        	parallel_write(colour);
 8002a84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a86:	f7ff fb3b 	bl	8002100 <parallel_write>

        	//For a horizontal gradient, update on each X increment
            if(orientation == HORIZONTAL) {
 8002a8a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d13a      	bne.n	8002b08 <fill_gradient+0x1b8>
    			//Increment the colours
    			thisR = rStart + (int)(dR * x);
 8002a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a98:	ee07 2a90 	vmov	s15, r2
 8002a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aac:	ee17 2a90 	vmov	r2, s15
 8002ab0:	4413      	add	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
    			thisG = gStart + (int)(dG * x);
 8002ab4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aba:	ee07 2a90 	vmov	s15, r2
 8002abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ac2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ace:	ee17 2a90 	vmov	r2, s15
 8002ad2:	4413      	add	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
    			thisB = bStart + (int)(dB * x);
 8002ad6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002adc:	ee07 2a90 	vmov	s15, r2
 8002ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ae4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002af0:	ee17 2a90 	vmov	r2, s15
 8002af4:	4413      	add	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
    			//Combine them to RGB565
    			colour = (thisR << 11) | (thisG << 5) | (thisB);
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	02da      	lsls	r2, r3, #11
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	015b      	lsls	r3, r3, #5
 8002b00:	4313      	orrs	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
        for(int x = 0; x < x2-x1; x++) {
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b16:	429a      	cmp	r2, r3
 8002b18:	dbb4      	blt.n	8002a84 <fill_gradient+0x134>
            }

        }

        //For a vertical gradient, change on each Y increment
        if(orientation == VERTICAL) {
 8002b1a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d13a      	bne.n	8002b98 <fill_gradient+0x248>
			//Increment the colours
			thisR = rStart + (int)(dR * y);
 8002b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b28:	ee07 2a90 	vmov	s15, r2
 8002b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b3c:	ee17 2a90 	vmov	r2, s15
 8002b40:	4413      	add	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
			thisG = gStart + (int)(dG * y);
 8002b44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002b48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b4a:	ee07 2a90 	vmov	s15, r2
 8002b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b52:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5e:	ee17 2a90 	vmov	r2, s15
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
			thisB = bStart + (int)(dB * y);
 8002b66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b6c:	ee07 2a90 	vmov	s15, r2
 8002b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b74:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b80:	ee17 2a90 	vmov	r2, s15
 8002b84:	4413      	add	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
			//Combine them to RGB565
			colour = (thisR << 11) | (thisG << 5) | (thisB);
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	02da      	lsls	r2, r3, #11
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	015b      	lsls	r3, r3, #5
 8002b90:	4313      	orrs	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	63bb      	str	r3, [r7, #56]	; 0x38
    for(int y = 0; y < y2-y1 ; y++) {
 8002b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	f6ff af69 	blt.w	8002a7e <fill_gradient+0x12e>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb2:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <fill_gradient+0x270>)
 8002bb4:	f001 ffc2 	bl	8004b3c <HAL_GPIO_WritePin>
}
 8002bb8:	bf00      	nop
 8002bba:	3740      	adds	r7, #64	; 0x40
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	48000400 	.word	0x48000400

08002bc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002bd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <vApplicationGetIdleTaskMemory+0x30>)
 8002bda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20004aac 	.word	0x20004aac
 8002bf4:	20004b60 	.word	0x20004b60

08002bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bf8:	b5b0      	push	{r4, r5, r7, lr}
 8002bfa:	b096      	sub	sp, #88	; 0x58
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bfe:	f001 fbca 	bl	8004396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c02:	f000 f861 	bl	8002cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c06:	f000 f981 	bl	8002f0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c0a:	f000 f8d1 	bl	8002db0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c0e:	f000 f90f 	bl	8002e30 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002c12:	f000 f94b 	bl	8002eac <MX_USART1_UART_Init>
  MX_CRC_Init();
 8002c16:	f000 f8a9 	bl	8002d6c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  //Turn the Power LED on
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_SET);
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c20:	4821      	ldr	r0, [pc, #132]	; (8002ca8 <main+0xb0>)
 8002c22:	f001 ff8b 	bl	8004b3c <HAL_GPIO_WritePin>

  //Initialise the display using the display manager
  DM_Init();
 8002c26:	f7fe f9c7 	bl	8000fb8 <DM_Init>

  //Bring the CTP out of reset
  //Dont' forget that the top half of PORTC is used by the LCD Data
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2140      	movs	r1, #64	; 0x40
 8002c2e:	481f      	ldr	r0, [pc, #124]	; (8002cac <main+0xb4>)
 8002c30:	f001 ff84 	bl	8004b3c <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 128);
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <main+0xb8>)
 8002c36:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002c48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f005 fa76 	bl	8008140 <osThreadCreate>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <main+0xbc>)
 8002c58:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  //Task which handles switching screens
  osThreadDef(changeScreenTask, ChangeScreenTask, osPriorityNormal, 0, 512);
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <main+0xc0>)
 8002c5c:	f107 0420 	add.w	r4, r7, #32
 8002c60:	461d      	mov	r5, r3
 8002c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  changeScreenTaskHandle = osThreadCreate(osThread(changeScreenTask), NULL);
 8002c6e:	f107 0320 	add.w	r3, r7, #32
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f005 fa63 	bl	8008140 <osThreadCreate>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4a0f      	ldr	r2, [pc, #60]	; (8002cbc <main+0xc4>)
 8002c7e:	6013      	str	r3, [r2, #0]
  //This task handles touching
  osThreadDef(touchTask, TouchTask, osPriorityNormal, 0, 512);
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <main+0xc8>)
 8002c82:	1d3c      	adds	r4, r7, #4
 8002c84:	461d      	mov	r5, r3
 8002c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchTaskHandle = osThreadCreate(osThread(touchTask), NULL);
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 fa52 	bl	8008140 <osThreadCreate>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <main+0xcc>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002ca2:	f005 fa46 	bl	8008132 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ca6:	e7fe      	b.n	8002ca6 <main+0xae>
 8002ca8:	48000400 	.word	0x48000400
 8002cac:	48000800 	.word	0x48000800
 8002cb0:	0800a77c 	.word	0x0800a77c
 8002cb4:	20004ec0 	.word	0x20004ec0
 8002cb8:	0800a798 	.word	0x0800a798
 8002cbc:	20004ec8 	.word	0x20004ec8
 8002cc0:	0800a7b4 	.word	0x0800a7b4
 8002cc4:	20004ecc 	.word	0x20004ecc

08002cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b096      	sub	sp, #88	; 0x58
 8002ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	2244      	movs	r2, #68	; 0x44
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f007 f832 	bl	8009d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cdc:	463b      	mov	r3, r7
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002cea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002cee:	f002 fd23 	bl	8005738 <HAL_PWREx_ControlVoltageScaling>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002cf8:	f000 fa6a 	bl	80031d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d06:	2310      	movs	r3, #16
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002d16:	230a      	movs	r3, #10
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d22:	2302      	movs	r3, #2
 8002d24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 fd5a 	bl	80057e4 <HAL_RCC_OscConfig>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002d36:	f000 fa4b 	bl	80031d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d3a:	230f      	movs	r3, #15
 8002d3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d4e:	463b      	mov	r3, r7
 8002d50:	2104      	movs	r1, #4
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 f922 	bl	8005f9c <HAL_RCC_ClockConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d5e:	f000 fa37 	bl	80031d0 <Error_Handler>
  }
}
 8002d62:	bf00      	nop
 8002d64:	3758      	adds	r7, #88	; 0x58
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002d70:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <MX_CRC_Init+0x3c>)
 8002d72:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <MX_CRC_Init+0x40>)
 8002d74:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <MX_CRC_Init+0x3c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <MX_CRC_Init+0x3c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <MX_CRC_Init+0x3c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <MX_CRC_Init+0x3c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <MX_CRC_Init+0x3c>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002d94:	4804      	ldr	r0, [pc, #16]	; (8002da8 <MX_CRC_Init+0x3c>)
 8002d96:	f001 fc3d 	bl	8004614 <HAL_CRC_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002da0:	f000 fa16 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20004d60 	.word	0x20004d60
 8002dac:	40023000 	.word	0x40023000

08002db0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002db6:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <MX_I2C1_Init+0x78>)
 8002db8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002dbc:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <MX_I2C1_Init+0x7c>)
 8002dbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dcc:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dea:	480e      	ldr	r0, [pc, #56]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002dec:	f001 fefb 	bl	8004be6 <HAL_I2C_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002df6:	f000 f9eb 	bl	80031d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4809      	ldr	r0, [pc, #36]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002dfe:	f002 fbf5 	bl	80055ec <HAL_I2CEx_ConfigAnalogFilter>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e08:	f000 f9e2 	bl	80031d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4805      	ldr	r0, [pc, #20]	; (8002e24 <MX_I2C1_Init+0x74>)
 8002e10:	f002 fc37 	bl	8005682 <HAL_I2CEx_ConfigDigitalFilter>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e1a:	f000 f9d9 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20004d84 	.word	0x20004d84
 8002e28:	40005400 	.word	0x40005400
 8002e2c:	10909cec 	.word	0x10909cec

08002e30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <MX_SPI1_Init+0x78>)
 8002e38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e4a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e7e:	2207      	movs	r2, #7
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e8e:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <MX_SPI1_Init+0x74>)
 8002e90:	f003 ff96 	bl	8006dc0 <HAL_SPI_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002e9a:	f000 f999 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20004dd8 	.word	0x20004dd8
 8002ea8:	40013000 	.word	0x40013000

08002eac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002eb2:	4a15      	ldr	r2, [pc, #84]	; (8002f08 <MX_USART1_UART_Init+0x5c>)
 8002eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002eb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eee:	4805      	ldr	r0, [pc, #20]	; (8002f04 <MX_USART1_UART_Init+0x58>)
 8002ef0:	f004 fada 	bl	80074a8 <HAL_UART_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002efa:	f000 f969 	bl	80031d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20004e3c 	.word	0x20004e3c
 8002f08:	40013800 	.word	0x40013800

08002f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f12:	f107 030c 	add.w	r3, r7, #12
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <MX_GPIO_Init+0x134>)
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	4a46      	ldr	r2, [pc, #280]	; (8003040 <MX_GPIO_Init+0x134>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f2e:	4b44      	ldr	r3, [pc, #272]	; (8003040 <MX_GPIO_Init+0x134>)
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <MX_GPIO_Init+0x134>)
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	4a40      	ldr	r2, [pc, #256]	; (8003040 <MX_GPIO_Init+0x134>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f46:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <MX_GPIO_Init+0x134>)
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f52:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <MX_GPIO_Init+0x134>)
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	4a3a      	ldr	r2, [pc, #232]	; (8003040 <MX_GPIO_Init+0x134>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5e:	4b38      	ldr	r3, [pc, #224]	; (8003040 <MX_GPIO_Init+0x134>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD13_Pin|LCD14_Pin|LCD15_Pin|W25Q128_CS_Pin
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f64f 7120 	movw	r1, #65312	; 0xff20
 8002f70:	4834      	ldr	r0, [pc, #208]	; (8003044 <MX_GPIO_Init+0x138>)
 8002f72:	f001 fde3 	bl	8004b3c <HAL_GPIO_WritePin>
                          |LCD8_Pin|LCD9_Pin|LCD10_Pin|LCD11_Pin
                          |LCD12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIO3_Pin|DIO4_Pin|DIO5_Pin|DIO6_Pin
 8002f76:	2200      	movs	r2, #0
 8002f78:	f64f 711f 	movw	r1, #65311	; 0xff1f
 8002f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f80:	f001 fddc 	bl	8004b3c <HAL_GPIO_WritePin>
                          |DIO7_Pin|LCD0_Pin|LCD1_Pin|LCD2_Pin
                          |LCD3_Pin|LCD4_Pin|LCD5_Pin|LCD6_Pin
                          |LCD7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO0_Pin|DIO1_Pin|DIO2_Pin|PWR_LED_Pin
 8002f84:	2200      	movs	r2, #0
 8002f86:	f64f 413f 	movw	r1, #64575	; 0xfc3f
 8002f8a:	482f      	ldr	r0, [pc, #188]	; (8003048 <MX_GPIO_Init+0x13c>)
 8002f8c:	f001 fdd6 	bl	8004b3c <HAL_GPIO_WritePin>
                          |LCD_RD_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_D_C_Pin
                          |LCD_CS_Pin|DIO8_Pin|DIO9_Pin|DIO10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8002f90:	2201      	movs	r2, #1
 8002f92:	2140      	movs	r1, #64	; 0x40
 8002f94:	482b      	ldr	r0, [pc, #172]	; (8003044 <MX_GPIO_Init+0x138>)
 8002f96:	f001 fdd1 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD13_Pin LCD14_Pin LCD15_Pin W25Q128_CS_Pin
                           CTP_RST_Pin LCD8_Pin LCD9_Pin LCD10_Pin
                           LCD11_Pin LCD12_Pin */
  GPIO_InitStruct.Pin = LCD13_Pin|LCD14_Pin|LCD15_Pin|W25Q128_CS_Pin
 8002f9a:	f64f 7360 	movw	r3, #65376	; 0xff60
 8002f9e:	60fb      	str	r3, [r7, #12]
                          |CTP_RST_Pin|LCD8_Pin|LCD9_Pin|LCD10_Pin
                          |LCD11_Pin|LCD12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fac:	f107 030c 	add.w	r3, r7, #12
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4824      	ldr	r0, [pc, #144]	; (8003044 <MX_GPIO_Init+0x138>)
 8002fb4:	f001 fc18 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_UP_Pin SW_DOWN_Pin SW_LEFT_Pin SW_MIDDLE_Pin
                           SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_UP_Pin|SW_DOWN_Pin|SW_LEFT_Pin|SW_MIDDLE_Pin
 8002fb8:	231f      	movs	r3, #31
 8002fba:	60fb      	str	r3, [r7, #12]
                          |SW_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	4619      	mov	r1, r3
 8002fca:	481e      	ldr	r0, [pc, #120]	; (8003044 <MX_GPIO_Init+0x138>)
 8002fcc:	f001 fc0c 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO3_Pin DIO4_Pin DIO5_Pin DIO6_Pin
                           DIO7_Pin LCD0_Pin LCD1_Pin LCD2_Pin
                           LCD3_Pin LCD4_Pin LCD5_Pin LCD6_Pin
                           LCD7_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin|DIO4_Pin|DIO5_Pin|DIO6_Pin
 8002fd0:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8002fd4:	60fb      	str	r3, [r7, #12]
                          |DIO7_Pin|LCD0_Pin|LCD1_Pin|LCD2_Pin
                          |LCD3_Pin|LCD4_Pin|LCD5_Pin|LCD6_Pin
                          |LCD7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	f107 030c 	add.w	r3, r7, #12
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fec:	f001 fbfc 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin DIO2_Pin PWR_LED_Pin
                           LCD_RD_Pin LCD_WR_Pin LCD_RST_Pin LCD_D_C_Pin
                           LCD_CS_Pin DIO8_Pin DIO9_Pin DIO10_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|PWR_LED_Pin
 8002ff0:	f64f 433f 	movw	r3, #64575	; 0xfc3f
 8002ff4:	60fb      	str	r3, [r7, #12]
                          |LCD_RD_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_D_C_Pin
                          |LCD_CS_Pin|DIO8_Pin|DIO9_Pin|DIO10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003002:	f107 030c 	add.w	r3, r7, #12
 8003006:	4619      	mov	r1, r3
 8003008:	480f      	ldr	r0, [pc, #60]	; (8003048 <MX_GPIO_Init+0x13c>)
 800300a:	f001 fbed 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003012:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	4619      	mov	r1, r3
 8003022:	4808      	ldr	r0, [pc, #32]	; (8003044 <MX_GPIO_Init+0x138>)
 8003024:	f001 fbe0 	bl	80047e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	2105      	movs	r1, #5
 800302c:	2017      	movs	r0, #23
 800302e:	f001 fac7 	bl	80045c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003032:	2017      	movs	r0, #23
 8003034:	f001 fae0 	bl	80045f8 <HAL_NVIC_EnableIRQ>

}
 8003038:	bf00      	nop
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	48000800 	.word	0x48000800
 8003048:	48000400 	.word	0x48000400

0800304c <ChangeScreenTask>:

/**
 * Function which receives signals, usually from button callbacks, and changes
 * the display to the desired screen.
 */
void ChangeScreenTask(void const * arguments) {
 800304c:	b5b0      	push	{r4, r5, r7, lr}
 800304e:	b09a      	sub	sp, #104	; 0x68
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

	//Any screens you want to display
	osThreadDef(deviceTestTask, DeviceTestTask, osPriorityNormal, 0, 1024);
 8003054:	4b30      	ldr	r3, [pc, #192]	; (8003118 <ChangeScreenTask+0xcc>)
 8003056:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800305a:	461d      	mov	r5, r3
 800305c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800305e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003060:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(mainMenuTask, MainMenuTask, osPriorityNormal, 0, 512);
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <ChangeScreenTask+0xd0>)
 800306a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800306e:	461d      	mov	r5, r3
 8003070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003074:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(splashScreenTask, SplashScreenTask, osPriorityNormal, 0, 256);
	osThreadDef(settingsTask, SettingsTask, osPriorityNormal, 0, 1028);
 800307c:	4b28      	ldr	r3, [pc, #160]	; (8003120 <ChangeScreenTask+0xd4>)
 800307e:	f107 0410 	add.w	r4, r7, #16
 8003082:	461d      	mov	r5, r3
 8003084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003088:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800308c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	//Initial entry screen
	currentScreenHandle = osThreadCreate(osThread(mainMenuTask), NULL);
 8003090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f005 f852 	bl	8008140 <osThreadCreate>
 800309c:	4603      	mov	r3, r0
 800309e:	4a21      	ldr	r2, [pc, #132]	; (8003124 <ChangeScreenTask+0xd8>)
 80030a0:	6013      	str	r3, [r2, #0]

	int signal = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
	int event;
	while(1) {
			event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 80030a6:	f107 020c 	add.w	r2, r7, #12
 80030aa:	2300      	movs	r3, #0
 80030ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030b0:	2000      	movs	r0, #0
 80030b2:	f005 ff67 	bl	8008f84 <xTaskNotifyWait>
 80030b6:	6678      	str	r0, [r7, #100]	; 0x64

			if(event == pdTRUE) {
 80030b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d1f3      	bne.n	80030a6 <ChangeScreenTask+0x5a>

				//Clear the display elements
				DM_Clear();
 80030be:	f7fe f871 	bl	80011a4 <DM_Clear>

				//End the current screen thread
				osThreadTerminate(currentScreenHandle);
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <ChangeScreenTask+0xd8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f005 f886 	bl	80081d8 <osThreadTerminate>

				//Load the desired screen
				if(signal == MAIN_MENU)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d108      	bne.n	80030e4 <ChangeScreenTask+0x98>
					currentScreenHandle = osThreadCreate(osThread(mainMenuTask), NULL);
 80030d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f005 f831 	bl	8008140 <osThreadCreate>
 80030de:	4603      	mov	r3, r0
 80030e0:	4a10      	ldr	r2, [pc, #64]	; (8003124 <ChangeScreenTask+0xd8>)
 80030e2:	6013      	str	r3, [r2, #0]

				if(signal == DEVICE_TEST)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d108      	bne.n	80030fc <ChangeScreenTask+0xb0>
					currentScreenHandle = osThreadCreate(osThread(deviceTestTask), NULL);
 80030ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f005 f825 	bl	8008140 <osThreadCreate>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <ChangeScreenTask+0xd8>)
 80030fa:	6013      	str	r3, [r2, #0]

				if(signal == SETTINGS)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d1d1      	bne.n	80030a6 <ChangeScreenTask+0x5a>
					currentScreenHandle = osThreadCreate(osThread(settingsTask), NULL);
 8003102:	f107 0310 	add.w	r3, r7, #16
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f005 f819 	bl	8008140 <osThreadCreate>
 800310e:	4603      	mov	r3, r0
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <ChangeScreenTask+0xd8>)
 8003112:	6013      	str	r3, [r2, #0]
			event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8003114:	e7c7      	b.n	80030a6 <ChangeScreenTask+0x5a>
 8003116:	bf00      	nop
 8003118:	0800a7d0 	.word	0x0800a7d0
 800311c:	0800a7ec 	.word	0x0800a7ec
 8003120:	0800a808 	.word	0x0800a808
 8003124:	20004ec4 	.word	0x20004ec4

08003128 <TouchTask>:
}

/**
 * Handles touch events and reports them to the display manager.
 */
void TouchTask(void const * argument) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	osEvent evt;
	int  pressId = -1;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
	struct Touch touch;

	for(;;) {
	    // wait for a signal
	    evt = osSignalWait(0x01, 0);
 8003136:	f107 0318 	add.w	r3, r7, #24
 800313a:	2200      	movs	r2, #0
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f005 f8aa 	bl	8008298 <osSignalWait>
	    if (evt.status == osEventSignal)  {
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b08      	cmp	r3, #8
 8003148:	d1f5      	bne.n	8003136 <TouchTask+0xe>

	    	//Get the most recent touch point
	    	touch = FT5446_getTouch();
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe ff98 	bl	8002084 <FT5446_getTouch>

	    	//Envoke the pressed element
			pressId = DM_Do_Press(touch);
 8003154:	f107 030c 	add.w	r3, r7, #12
 8003158:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800315c:	f7fe f986 	bl	800146c <DM_Do_Press>
 8003160:	6278      	str	r0, [r7, #36]	; 0x24
	    evt = osSignalWait(0x01, 0);
 8003162:	e7e8      	b.n	8003136 <TouchTask+0xe>

08003164 <home_onPress>:
}

/**
 * Callback for any button that wants to return HOME
 */
void home_onPress(int id) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, MAIN_MENU, eSetValueWithOverwrite);
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <home_onPress+0x20>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	2300      	movs	r3, #0
 8003172:	2203      	movs	r2, #3
 8003174:	2102      	movs	r1, #2
 8003176:	f005 ff65 	bl	8009044 <xTaskGenericNotify>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20004ec8 	.word	0x20004ec8

08003188 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //Do a display refresh
		DM_Draw();
 8003190:	f7fd ff1a 	bl	8000fc8 <DM_Draw>
		HAL_GPIO_TogglePin(PWR_LED_GPIO_Port, PWR_LED_Pin);
 8003194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003198:	4803      	ldr	r0, [pc, #12]	; (80031a8 <StartDefaultTask+0x20>)
 800319a:	f001 fce7 	bl	8004b6c <HAL_GPIO_TogglePin>
		osDelay(100);
 800319e:	2064      	movs	r0, #100	; 0x64
 80031a0:	f005 f826 	bl	80081f0 <osDelay>
		DM_Draw();
 80031a4:	e7f4      	b.n	8003190 <StartDefaultTask+0x8>
 80031a6:	bf00      	nop
 80031a8:	48000400 	.word	0x48000400

080031ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031be:	f001 f903 	bl	80043c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40012c00 	.word	0x40012c00

080031d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d4:	b672      	cpsid	i
}
 80031d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <Error_Handler+0x8>
	...

080031dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_MspInit+0x4c>)
 80031e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e6:	4a10      	ldr	r2, [pc, #64]	; (8003228 <HAL_MspInit+0x4c>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6613      	str	r3, [r2, #96]	; 0x60
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <HAL_MspInit+0x4c>)
 80031f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_MspInit+0x4c>)
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <HAL_MspInit+0x4c>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	6593      	str	r3, [r2, #88]	; 0x58
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_MspInit+0x4c>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	210f      	movs	r1, #15
 8003216:	f06f 0001 	mvn.w	r0, #1
 800321a:	f001 f9d1 	bl	80045c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000

0800322c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <HAL_CRC_MspInit+0x38>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10b      	bne.n	8003256 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_CRC_MspInit+0x3c>)
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_CRC_MspInit+0x3c>)
 8003244:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003248:	6493      	str	r3, [r2, #72]	; 0x48
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <HAL_CRC_MspInit+0x3c>)
 800324c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40023000 	.word	0x40023000
 8003268:	40021000 	.word	0x40021000

0800326c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b0ac      	sub	sp, #176	; 0xb0
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	2288      	movs	r2, #136	; 0x88
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f006 fd57 	bl	8009d40 <memset>
  if(hi2c->Instance==I2C1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <HAL_I2C_MspInit+0xb0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d13b      	bne.n	8003314 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800329c:	2340      	movs	r3, #64	; 0x40
 800329e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032a0:	2300      	movs	r3, #0
 80032a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	4618      	mov	r0, r3
 80032aa:	f003 f8cd 	bl	8006448 <HAL_RCCEx_PeriphCLKConfig>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80032b4:	f7ff ff8c 	bl	80031d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_I2C_MspInit+0xb4>)
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032bc:	4a18      	ldr	r2, [pc, #96]	; (8003320 <HAL_I2C_MspInit+0xb4>)
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c4:	4b16      	ldr	r3, [pc, #88]	; (8003320 <HAL_I2C_MspInit+0xb4>)
 80032c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032d8:	2312      	movs	r3, #18
 80032da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e4:	2303      	movs	r3, #3
 80032e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032ea:	2304      	movs	r3, #4
 80032ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032f4:	4619      	mov	r1, r3
 80032f6:	480b      	ldr	r0, [pc, #44]	; (8003324 <HAL_I2C_MspInit+0xb8>)
 80032f8:	f001 fa76 	bl	80047e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_I2C_MspInit+0xb4>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	4a07      	ldr	r2, [pc, #28]	; (8003320 <HAL_I2C_MspInit+0xb4>)
 8003302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003306:	6593      	str	r3, [r2, #88]	; 0x58
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_I2C_MspInit+0xb4>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003314:	bf00      	nop
 8003316:	37b0      	adds	r7, #176	; 0xb0
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40005400 	.word	0x40005400
 8003320:	40021000 	.word	0x40021000
 8003324:	48000400 	.word	0x48000400

08003328 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <HAL_SPI_MspInit+0x7c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d128      	bne.n	800339c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 8003350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003354:	6613      	str	r3, [r2, #96]	; 0x60
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 8003358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800337a:	23e0      	movs	r3, #224	; 0xe0
 800337c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003386:	2303      	movs	r3, #3
 8003388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800338a:	2305      	movs	r3, #5
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4619      	mov	r1, r3
 8003394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003398:	f001 fa26 	bl	80047e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800339c:	bf00      	nop
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40013000 	.word	0x40013000
 80033a8:	40021000 	.word	0x40021000

080033ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b0ac      	sub	sp, #176	; 0xb0
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	2288      	movs	r2, #136	; 0x88
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f006 fcb7 	bl	8009d40 <memset>
  if(huart->Instance==USART1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a21      	ldr	r2, [pc, #132]	; (800345c <HAL_UART_MspInit+0xb0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d13a      	bne.n	8003452 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033dc:	2301      	movs	r3, #1
 80033de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033e0:	2300      	movs	r3, #0
 80033e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 f82d 	bl	8006448 <HAL_RCCEx_PeriphCLKConfig>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80033f4:	f7ff feec 	bl	80031d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_UART_MspInit+0xb4>)
 80033fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fc:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_UART_MspInit+0xb4>)
 80033fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003402:	6613      	str	r3, [r2, #96]	; 0x60
 8003404:	4b16      	ldr	r3, [pc, #88]	; (8003460 <HAL_UART_MspInit+0xb4>)
 8003406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_UART_MspInit+0xb4>)
 8003412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003414:	4a12      	ldr	r2, [pc, #72]	; (8003460 <HAL_UART_MspInit+0xb4>)
 8003416:	f043 0302 	orr.w	r3, r3, #2
 800341a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_UART_MspInit+0xb4>)
 800341e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003428:	23c0      	movs	r3, #192	; 0xc0
 800342a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343a:	2303      	movs	r3, #3
 800343c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003440:	2307      	movs	r3, #7
 8003442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800344a:	4619      	mov	r1, r3
 800344c:	4805      	ldr	r0, [pc, #20]	; (8003464 <HAL_UART_MspInit+0xb8>)
 800344e:	f001 f9cb 	bl	80047e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003452:	bf00      	nop
 8003454:	37b0      	adds	r7, #176	; 0xb0
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40013800 	.word	0x40013800
 8003460:	40021000 	.word	0x40021000
 8003464:	48000400 	.word	0x48000400

08003468 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	; 0x30
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003476:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <HAL_InitTick+0xc8>)
 8003478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347a:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <HAL_InitTick+0xc8>)
 800347c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003480:	6613      	str	r3, [r2, #96]	; 0x60
 8003482:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <HAL_InitTick+0xc8>)
 8003484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800348e:	f107 020c 	add.w	r2, r7, #12
 8003492:	f107 0310 	add.w	r3, r7, #16
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f002 ff43 	bl	8006324 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800349e:	f002 ff2b 	bl	80062f8 <HAL_RCC_GetPCLK2Freq>
 80034a2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	4a23      	ldr	r2, [pc, #140]	; (8003534 <HAL_InitTick+0xcc>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	0c9b      	lsrs	r3, r3, #18
 80034ae:	3b01      	subs	r3, #1
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80034b2:	4b21      	ldr	r3, [pc, #132]	; (8003538 <HAL_InitTick+0xd0>)
 80034b4:	4a21      	ldr	r2, [pc, #132]	; (800353c <HAL_InitTick+0xd4>)
 80034b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80034b8:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <HAL_InitTick+0xd0>)
 80034ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034be:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_InitTick+0xd0>)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80034c6:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <HAL_InitTick+0xd0>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034cc:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <HAL_InitTick+0xd0>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_InitTick+0xd0>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80034d8:	4817      	ldr	r0, [pc, #92]	; (8003538 <HAL_InitTick+0xd0>)
 80034da:	f003 fd14 	bl	8006f06 <HAL_TIM_Base_Init>
 80034de:	4603      	mov	r3, r0
 80034e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80034e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d11b      	bne.n	8003524 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80034ec:	4812      	ldr	r0, [pc, #72]	; (8003538 <HAL_InitTick+0xd0>)
 80034ee:	f003 fd6b 	bl	8006fc8 <HAL_TIM_Base_Start_IT>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80034f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d111      	bne.n	8003524 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003500:	2019      	movs	r0, #25
 8003502:	f001 f879 	bl	80045f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b0f      	cmp	r3, #15
 800350a:	d808      	bhi.n	800351e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800350c:	2200      	movs	r2, #0
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	2019      	movs	r0, #25
 8003512:	f001 f855 	bl	80045c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_InitTick+0xd8>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	e002      	b.n	8003524 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003528:	4618      	mov	r0, r3
 800352a:	3730      	adds	r7, #48	; 0x30
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	431bde83 	.word	0x431bde83
 8003538:	20004ed0 	.word	0x20004ed0
 800353c:	40012c00 	.word	0x40012c00
 8003540:	20004018 	.word	0x20004018

08003544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <NMI_Handler+0x4>

0800354a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800354e:	e7fe      	b.n	800354e <HardFault_Handler+0x4>

08003550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003554:	e7fe      	b.n	8003554 <MemManage_Handler+0x4>

08003556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800355a:	e7fe      	b.n	800355a <BusFault_Handler+0x4>

0800355c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <UsageFault_Handler+0x4>

08003562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
		osSignalSet(touchTaskHandle, 0x01);
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <EXTI9_5_IRQHandler+0x1c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	4618      	mov	r0, r3
 800357c:	f004 fe4c 	bl	8008218 <osSignalSet>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 8003580:	2080      	movs	r0, #128	; 0x80
 8003582:	f001 fb0d 	bl	8004ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20004ecc 	.word	0x20004ecc

08003590 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003596:	f003 fd87 	bl	80070a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20004ed0 	.word	0x20004ed0

080035a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <_sbrk+0x5c>)
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <_sbrk+0x60>)
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <_sbrk+0x64>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <_sbrk+0x64>)
 80035c2:	4a12      	ldr	r2, [pc, #72]	; (800360c <_sbrk+0x68>)
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <_sbrk+0x64>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d207      	bcs.n	80035e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035d4:	f006 fb7a 	bl	8009ccc <__errno>
 80035d8:	4603      	mov	r3, r0
 80035da:	220c      	movs	r2, #12
 80035dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035e2:	e009      	b.n	80035f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <_sbrk+0x64>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <_sbrk+0x64>)
 80035f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20018000 	.word	0x20018000
 8003604:	00000400 	.word	0x00000400
 8003608:	20004f1c 	.word	0x20004f1c
 800360c:	20009ef0 	.word	0x20009ef0

08003610 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <SystemInit+0x20>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	4a05      	ldr	r2, [pc, #20]	; (8003630 <SystemInit+0x20>)
 800361c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <DeviceTestTask>:
void OK_Press(int id);

/**
 * The main task.
 */
void DeviceTestTask(void const * arguments) {
 8003634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003636:	f5ad 7d7b 	sub.w	sp, sp, #1004	; 0x3ec
 800363a:	af10      	add	r7, sp, #64	; 0x40
 800363c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003640:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8003644:	6018      	str	r0, [r3, #0]

	const unsigned int textColour = COLOR_BLACK;
 8003646:	2300      	movs	r3, #0
 8003648:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398

	//Add some dummy display elements
	DM_Add_Element(DM_New_Title_Bar("Device Test"));
 800364c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003650:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003654:	4950      	ldr	r1, [pc, #320]	; (8003798 <DeviceTestTask+0x164>)
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fb00 	bl	8001c5c <DM_New_Title_Bar>
 800365c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003660:	f5a3 7600 	sub.w	r6, r3, #512	; 0x200
 8003664:	466d      	mov	r5, sp
 8003666:	f106 0410 	add.w	r4, r6, #16
 800366a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003676:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800367a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800367e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003682:	f7fd fdc7 	bl	8001214 <DM_Add_Element>

	//Show a loding animation while we test peripherals
	int loadingText = DM_Add_Element(DM_New_Text(208, 160, textColour, 1, "Loading..."));
 8003686:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800368a:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 800368e:	f5a2 70d8 	sub.w	r0, r2, #432	; 0x1b0
 8003692:	4a42      	ldr	r2, [pc, #264]	; (800379c <DeviceTestTask+0x168>)
 8003694:	9201      	str	r2, [sp, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	9200      	str	r2, [sp, #0]
 800369a:	22a0      	movs	r2, #160	; 0xa0
 800369c:	21d0      	movs	r1, #208	; 0xd0
 800369e:	f7fe fa61 	bl	8001b64 <DM_New_Text>
 80036a2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80036a6:	f5a3 76d8 	sub.w	r6, r3, #432	; 0x1b0
 80036aa:	466d      	mov	r5, sp
 80036ac:	f106 0410 	add.w	r4, r6, #16
 80036b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80036c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80036c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80036c8:	f7fd fda4 	bl	8001214 <DM_Add_Element>
 80036cc:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
	int loadingAnimation = DM_Add_Element(DM_New_Animation(218, 180, 1, myAnimation, 3));
 80036d0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80036d4:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 80036d8:	2303      	movs	r3, #3
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <DeviceTestTask+0x16c>)
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2301      	movs	r3, #1
 80036e2:	22b4      	movs	r2, #180	; 0xb4
 80036e4:	21da      	movs	r1, #218	; 0xda
 80036e6:	f7fd f991 	bl	8000a0c <DM_New_Animation>
 80036ea:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80036ee:	f5a3 76b0 	sub.w	r6, r3, #352	; 0x160
 80036f2:	466d      	mov	r5, sp
 80036f4:	f106 0410 	add.w	r4, r6, #16
 80036f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003704:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003708:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800370c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003710:	f7fd fd80 	bl	8001214 <DM_Add_Element>
 8003714:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390

	//Reset the MP3 player module
	DFPlayer_resetModule();
 8003718:	f7fe fc00 	bl	8001f1c <DFPlayer_resetModule>
	//Wait for the device to reset... It's slow
	osDelay(1000);
 800371c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003720:	f004 fd66 	bl	80081f0 <osDelay>
	//Test communication with the player
    int status = DFPlayer_getStatus();
 8003724:	f7fe fbd9 	bl	8001eda <DFPlayer_getStatus>
 8003728:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
    int timeout = 10;
 800372c:	230a      	movs	r3, #10
 800372e:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
    int songs = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
    while(timeout--) {
 8003738:	e008      	b.n	800374c <DeviceTestTask+0x118>
    	songs = DFPlayer_getTracksInFolder(0);
 800373a:	2000      	movs	r0, #0
 800373c:	f7fe fbdb 	bl	8001ef6 <DFPlayer_getTracksInFolder>
 8003740:	f8c7 03a0 	str.w	r0, [r7, #928]	; 0x3a0
    	if(songs > 0)
 8003744:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003748:	2b00      	cmp	r3, #0
 800374a:	dc07      	bgt.n	800375c <DeviceTestTask+0x128>
    while(timeout--) {
 800374c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ef      	bne.n	800373a <DeviceTestTask+0x106>
 800375a:	e000      	b.n	800375e <DeviceTestTask+0x12a>
    		break;
 800375c:	bf00      	nop
    }
    char numSongs[64];
    sprintf(numSongs, "DFPlayer Status: %d, with %d songs.", status, songs);
 800375e:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8003762:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003766:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 800376a:	490e      	ldr	r1, [pc, #56]	; (80037a4 <DeviceTestTask+0x170>)
 800376c:	f006 fbfe 	bl	8009f6c <siprintf>


	//Make a list of I2C devices
	char deviceString[128] = "I2C Devices:";
 8003770:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003774:	f5a3 7530 	sub.w	r5, r3, #704	; 0x2c0
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <DeviceTestTask+0x174>)
 800377a:	462c      	mov	r4, r5
 800377c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800377e:	c407      	stmia	r4!, {r0, r1, r2}
 8003780:	7023      	strb	r3, [r4, #0]
 8003782:	f105 030d 	add.w	r3, r5, #13
 8003786:	2273      	movs	r2, #115	; 0x73
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f006 fad8 	bl	8009d40 <memset>
	for(char i = 0; i < 128; i++) {
 8003790:	2300      	movs	r3, #0
 8003792:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f
 8003796:	e024      	b.n	80037e2 <DeviceTestTask+0x1ae>
 8003798:	0800a838 	.word	0x0800a838
 800379c:	0800a844 	.word	0x0800a844
 80037a0:	20000004 	.word	0x20000004
 80037a4:	0800a850 	.word	0x0800a850
 80037a8:	0800a8a0 	.word	0x0800a8a0
		if(HAL_I2C_IsDeviceReady (&hi2c1, i << 1, 10, 250) == HAL_OK) {
 80037ac:	f897 339f 	ldrb.w	r3, [r7, #927]	; 0x39f
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	b299      	uxth	r1, r3
 80037b6:	23fa      	movs	r3, #250	; 0xfa
 80037b8:	220a      	movs	r2, #10
 80037ba:	487a      	ldr	r0, [pc, #488]	; (80039a4 <DeviceTestTask+0x370>)
 80037bc:	f001 fbbc 	bl	8004f38 <HAL_I2C_IsDeviceReady>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <DeviceTestTask+0x1a4>
			sprintf(deviceString, "%s %d", deviceString, i);
 80037c6:	f897 339f 	ldrb.w	r3, [r7, #927]	; 0x39f
 80037ca:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80037ce:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 80037d2:	4975      	ldr	r1, [pc, #468]	; (80039a8 <DeviceTestTask+0x374>)
 80037d4:	f006 fbca 	bl	8009f6c <siprintf>
	for(char i = 0; i < 128; i++) {
 80037d8:	f897 339f 	ldrb.w	r3, [r7, #927]	; 0x39f
 80037dc:	3301      	adds	r3, #1
 80037de:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f
 80037e2:	f997 339f 	ldrsb.w	r3, [r7, #927]	; 0x39f
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	dae0      	bge.n	80037ac <DeviceTestTask+0x178>
		}
	}

	//Confirm communication with the RTC
	struct Time thisTime = RTC_get_time_date();
 80037ea:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80037ee:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe fb9c 	bl	8001f30 <RTC_get_time_date>
	char timeDateString[128];
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 80037f8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80037fc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8003800:	78db      	ldrb	r3, [r3, #3]
 8003802:	461a      	mov	r2, r3
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4a67      	ldr	r2, [pc, #412]	; (80039ac <DeviceTestTask+0x378>)
 800380e:	1899      	adds	r1, r3, r2
 8003810:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003814:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8003818:	791b      	ldrb	r3, [r3, #4]
 800381a:	469c      	mov	ip, r3
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 800381c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003820:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8003824:	795b      	ldrb	r3, [r3, #5]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8003826:	461c      	mov	r4, r3
 8003828:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800382c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8003830:	689b      	ldr	r3, [r3, #8]
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 8003832:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8003836:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 800383a:	7892      	ldrb	r2, [r2, #2]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 800383c:	4615      	mov	r5, r2
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 800383e:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8003842:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 8003846:	7852      	ldrb	r2, [r2, #1]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8003848:	4616      	mov	r6, r2
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 800384a:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 800384e:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 8003852:	7812      	ldrb	r2, [r2, #0]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8003854:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8003858:	9204      	str	r2, [sp, #16]
 800385a:	9603      	str	r6, [sp, #12]
 800385c:	9502      	str	r5, [sp, #8]
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	9400      	str	r4, [sp, #0]
 8003862:	4663      	mov	r3, ip
 8003864:	460a      	mov	r2, r1
 8003866:	4952      	ldr	r1, [pc, #328]	; (80039b0 <DeviceTestTask+0x37c>)
 8003868:	f006 fb80 	bl	8009f6c <siprintf>


	//List of I2C devices found
	DM_Add_Element(DM_New_Text(10, 45, textColour, 1, deviceString));
 800386c:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8003870:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003874:	f5a3 7088 	sub.w	r0, r3, #272	; 0x110
 8003878:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	2301      	movs	r3, #1
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	222d      	movs	r2, #45	; 0x2d
 8003886:	210a      	movs	r1, #10
 8003888:	f7fe f96c 	bl	8001b64 <DM_New_Text>
 800388c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003890:	f5a3 7688 	sub.w	r6, r3, #272	; 0x110
 8003894:	466d      	mov	r5, sp
 8003896:	f106 0410 	add.w	r4, r6, #16
 800389a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800389c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800389e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80038aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80038ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80038b2:	f7fd fcaf 	bl	8001214 <DM_Add_Element>
	//List tracks on MP3
	DM_Add_Element(DM_New_Text(10, 60, textColour, 1, numSongs));
 80038b6:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 80038ba:	f507 703a 	add.w	r0, r7, #744	; 0x2e8
 80038be:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	2301      	movs	r3, #1
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	223c      	movs	r2, #60	; 0x3c
 80038cc:	210a      	movs	r1, #10
 80038ce:	f7fe f949 	bl	8001b64 <DM_New_Text>
 80038d2:	466d      	mov	r5, sp
 80038d4:	f507 743e 	add.w	r4, r7, #760	; 0x2f8
 80038d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80038e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80038ec:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80038f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038f2:	f7fd fc8f 	bl	8001214 <DM_Add_Element>
	//List current time on the clock
	DM_Add_Element(DM_New_Text(10, 75, textColour, 1, timeDateString));
 80038f6:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 80038fa:	f507 704e 	add.w	r0, r7, #824	; 0x338
 80038fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	2301      	movs	r3, #1
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	224b      	movs	r2, #75	; 0x4b
 800390c:	210a      	movs	r1, #10
 800390e:	f7fe f929 	bl	8001b64 <DM_New_Text>
 8003912:	466d      	mov	r5, sp
 8003914:	f507 7452 	add.w	r4, r7, #840	; 0x348
 8003918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003924:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003928:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800392c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003932:	f7fd fc6f 	bl	8001214 <DM_Add_Element>

	//Remove the loading animations
	DM_Remove_Element(loadingText);
 8003936:	f8d7 0394 	ldr.w	r0, [r7, #916]	; 0x394
 800393a:	f7fd fcd3 	bl	80012e4 <DM_Remove_Element>
	DM_Remove_Element(loadingAnimation);
 800393e:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8003942:	f7fd fccf 	bl	80012e4 <DM_Remove_Element>

	//OK button
	struct DisplayElement okBtn = DM_New_Button(BTN_RIGHT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 8003946:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800394a:	f5a3 7067 	sub.w	r0, r3, #924	; 0x39c
 800394e:	2300      	movs	r3, #0
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	4b18      	ldr	r3, [pc, #96]	; (80039b4 <DeviceTestTask+0x380>)
 8003954:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003958:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800395c:	f7fd f95c 	bl	8000c18 <DM_New_Button>
	okBtn.onPress = OK_Press;
 8003960:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003964:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8003968:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <DeviceTestTask+0x384>)
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
	int okBtnId = DM_Add_Element(okBtn);
 800396c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8003970:	f5a3 7667 	sub.w	r6, r3, #924	; 0x39c
 8003974:	466d      	mov	r5, sp
 8003976:	f106 0410 	add.w	r4, r6, #16
 800397a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800397c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800397e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003986:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800398a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800398e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003992:	f7fd fc3f 	bl	8001214 <DM_Add_Element>
 8003996:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388

	while(1) {
		osDelay(1000);
 800399a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800399e:	f004 fc27 	bl	80081f0 <osDelay>
 80039a2:	e7fa      	b.n	800399a <DeviceTestTask+0x366>
 80039a4:	20004d84 	.word	0x20004d84
 80039a8:	0800a874 	.word	0x0800a874
 80039ac:	0800af44 	.word	0x0800af44
 80039b0:	0800a87c 	.word	0x0800a87c
 80039b4:	0800a898 	.word	0x0800a898
 80039b8:	080039bd 	.word	0x080039bd

080039bc <OK_Press>:
	}
}

void OK_Press(int id) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	//Stop the music playing
	DFPlayer_setPause();
 80039c4:	f7fe fa80 	bl	8001ec8 <DFPlayer_setPause>

	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, MAIN_MENU, eSetValueWithOverwrite);
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <OK_Press+0x24>)
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	2300      	movs	r3, #0
 80039ce:	2203      	movs	r2, #3
 80039d0:	2102      	movs	r1, #2
 80039d2:	f005 fb37 	bl	8009044 <xTaskGenericNotify>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20004ec8 	.word	0x20004ec8

080039e4 <MainMenuTask>:

/**
 * The main display which is currently a clock. Called Main Menu
 * for historical reasons. Is not actually a menu.
 */
void MainMenuTask(void const * arguments) {
 80039e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e6:	f2ad 4dac 	subw	sp, sp, #1196	; 0x4ac
 80039ea:	af12      	add	r7, sp, #72	; 0x48
 80039ec:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80039f0:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80039f4:	6018      	str	r0, [r3, #0]

	const unsigned int textColour = COLOR_BLACK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458

	//Double gradient effect
	DM_Add_Element(DM_New_Fill_Gradient(0, 90, WIDTH, 120, COLOR_WHITE, COLOR_BLACK, VERTICAL));
 80039fc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003a00:	f5a3 7092 	sub.w	r0, r3, #292	; 0x124
 8003a04:	2301      	movs	r3, #1
 8003a06:	9303      	str	r3, [sp, #12]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9302      	str	r3, [sp, #8]
 8003a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	2378      	movs	r3, #120	; 0x78
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003a1a:	225a      	movs	r2, #90	; 0x5a
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f7fd fe11 	bl	8001644 <DM_New_Fill_Gradient>
 8003a22:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003a26:	f5a3 7692 	sub.w	r6, r3, #292	; 0x124
 8003a2a:	466d      	mov	r5, sp
 8003a2c:	f106 0410 	add.w	r4, r6, #16
 8003a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003a44:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003a48:	f7fd fbe4 	bl	8001214 <DM_Add_Element>
	DM_Add_Element(DM_New_Fill_Rectangle(0, 120, WIDTH, 184, COLOR_BLACK));
 8003a4c:	f507 7063 	add.w	r0, r7, #908	; 0x38c
 8003a50:	2300      	movs	r3, #0
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	23b8      	movs	r3, #184	; 0xb8
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003a5c:	2278      	movs	r2, #120	; 0x78
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f7fd fd84 	bl	800156c <DM_New_Fill_Rectangle>
 8003a64:	466d      	mov	r5, sp
 8003a66:	f507 7467 	add.w	r4, r7, #924	; 0x39c
 8003a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003a7e:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8003a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a84:	f7fd fbc6 	bl	8001214 <DM_Add_Element>
	DM_Add_Element(DM_New_Fill_Gradient(0, 184, WIDTH, 214, COLOR_BLACK, COLOR_WHITE, VERTICAL));
 8003a88:	f507 7077 	add.w	r0, r7, #988	; 0x3dc
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	9303      	str	r3, [sp, #12]
 8003a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a94:	9302      	str	r3, [sp, #8]
 8003a96:	2300      	movs	r3, #0
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	23d6      	movs	r3, #214	; 0xd6
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003aa2:	22b8      	movs	r2, #184	; 0xb8
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f7fd fdcd 	bl	8001644 <DM_New_Fill_Gradient>
 8003aaa:	466d      	mov	r5, sp
 8003aac:	f507 747b 	add.w	r4, r7, #1004	; 0x3ec
 8003ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003abc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003ac0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003ac4:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8003ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003aca:	f7fd fba3 	bl	8001214 <DM_Add_Element>

	//Draw some digits
	const int xMargin = 16;
 8003ace:	2310      	movs	r3, #16
 8003ad0:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	const int digitWidth = 64;
 8003ad4:	2340      	movs	r3, #64	; 0x40
 8003ad6:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
	const int colonWidth = 16;
 8003ada:	2310      	movs	r3, #16
 8003adc:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

	struct DisplayElement digit1 = DM_New_Bitmap(xMargin, 120, 1, num_1);
 8003ae0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003ae4:	f5a3 70ba 	sub.w	r0, r3, #372	; 0x174
 8003ae8:	4bcb      	ldr	r3, [pc, #812]	; (8003e18 <MainMenuTask+0x434>)
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2301      	movs	r3, #1
 8003aee:	2278      	movs	r2, #120	; 0x78
 8003af0:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8003af4:	f7fd f818 	bl	8000b28 <DM_New_Bitmap>
	struct DisplayElement digit2 = DM_New_Bitmap(xMargin + digitWidth, 120, 1, num_5);
 8003af8:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003afc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8003b00:	18d1      	adds	r1, r2, r3
 8003b02:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003b06:	f5a3 70e2 	sub.w	r0, r3, #452	; 0x1c4
 8003b0a:	4bc4      	ldr	r3, [pc, #784]	; (8003e1c <MainMenuTask+0x438>)
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2301      	movs	r3, #1
 8003b10:	2278      	movs	r2, #120	; 0x78
 8003b12:	f7fd f809 	bl	8000b28 <DM_New_Bitmap>
	struct DisplayElement colon1 = DM_New_Bitmap(xMargin + (digitWidth * 2) - colonWidth, 120, 1, colon);
 8003b16:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8003b1a:	005a      	lsls	r2, r3, #1
 8003b1c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003b20:	441a      	add	r2, r3
 8003b22:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8003b26:	1ad1      	subs	r1, r2, r3
 8003b28:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003b2c:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 8003b30:	4bbb      	ldr	r3, [pc, #748]	; (8003e20 <MainMenuTask+0x43c>)
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2301      	movs	r3, #1
 8003b36:	2278      	movs	r2, #120	; 0x78
 8003b38:	f7fc fff6 	bl	8000b28 <DM_New_Bitmap>
	struct DisplayElement digit3 = DM_New_Bitmap(xMargin + (2 * digitWidth) + (2 * colonWidth), 120, 1, num_2);
 8003b3c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8003b40:	005a      	lsls	r2, r3, #1
 8003b42:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003b46:	441a      	add	r2, r3
 8003b48:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	18d1      	adds	r1, r2, r3
 8003b50:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003b54:	f5a3 7019 	sub.w	r0, r3, #612	; 0x264
 8003b58:	4bb2      	ldr	r3, [pc, #712]	; (8003e24 <MainMenuTask+0x440>)
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	2278      	movs	r2, #120	; 0x78
 8003b60:	f7fc ffe2 	bl	8000b28 <DM_New_Bitmap>
	struct DisplayElement digit4 = DM_New_Bitmap(xMargin + (3 * digitWidth) + (2 * colonWidth), 120, 1, num_4);
 8003b64:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003b68:	4613      	mov	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	441a      	add	r2, r3
 8003b6e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003b72:	441a      	add	r2, r3
 8003b74:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	18d1      	adds	r1, r2, r3
 8003b7c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003b80:	f5a3 702d 	sub.w	r0, r3, #692	; 0x2b4
 8003b84:	4ba8      	ldr	r3, [pc, #672]	; (8003e28 <MainMenuTask+0x444>)
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	2278      	movs	r2, #120	; 0x78
 8003b8c:	f7fc ffcc 	bl	8000b28 <DM_New_Bitmap>
	struct DisplayElement colon2 = DM_New_Bitmap(xMargin + (digitWidth * 4) + colonWidth, 120, 1, colon);
 8003b90:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8003b94:	009a      	lsls	r2, r3, #2
 8003b96:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003b9a:	441a      	add	r2, r3
 8003b9c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8003ba0:	18d1      	adds	r1, r2, r3
 8003ba2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003ba6:	f5a3 7041 	sub.w	r0, r3, #772	; 0x304
 8003baa:	4b9d      	ldr	r3, [pc, #628]	; (8003e20 <MainMenuTask+0x43c>)
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2301      	movs	r3, #1
 8003bb0:	2278      	movs	r2, #120	; 0x78
 8003bb2:	f7fc ffb9 	bl	8000b28 <DM_New_Bitmap>
	struct DisplayElement digit5 = DM_New_Bitmap(xMargin + (5 * digitWidth), 120, 1, num_5);
 8003bb6:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	441a      	add	r2, r3
 8003bc0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003bc4:	18d1      	adds	r1, r2, r3
 8003bc6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003bca:	f5a3 7055 	sub.w	r0, r3, #852	; 0x354
 8003bce:	4b93      	ldr	r3, [pc, #588]	; (8003e1c <MainMenuTask+0x438>)
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	2278      	movs	r2, #120	; 0x78
 8003bd6:	f7fc ffa7 	bl	8000b28 <DM_New_Bitmap>
	struct DisplayElement digit6 = DM_New_Bitmap(xMargin + (6 * digitWidth), 120, 1, num_7);
 8003bda:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	461a      	mov	r2, r3
 8003be8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003bec:	18d1      	adds	r1, r2, r3
 8003bee:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003bf2:	f5a3 7069 	sub.w	r0, r3, #932	; 0x3a4
 8003bf6:	4b8d      	ldr	r3, [pc, #564]	; (8003e2c <MainMenuTask+0x448>)
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	2278      	movs	r2, #120	; 0x78
 8003bfe:	f7fc ff93 	bl	8000b28 <DM_New_Bitmap>


	int digit1Id = DM_Add_Element(digit1);
 8003c02:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003c06:	f5a3 76ba 	sub.w	r6, r3, #372	; 0x174
 8003c0a:	466d      	mov	r5, sp
 8003c0c:	f106 0410 	add.w	r4, r6, #16
 8003c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c20:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003c24:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003c28:	f7fd faf4 	bl	8001214 <DM_Add_Element>
 8003c2c:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
	int colon1Id = DM_Add_Element(colon1); //colon
 8003c30:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003c34:	f5a3 7605 	sub.w	r6, r3, #532	; 0x214
 8003c38:	466d      	mov	r5, sp
 8003c3a:	f106 0410 	add.w	r4, r6, #16
 8003c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c4e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003c52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003c56:	f7fd fadd 	bl	8001214 <DM_Add_Element>
 8003c5a:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
	int digit2Id = DM_Add_Element(digit2);
 8003c5e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003c62:	f5a3 76e2 	sub.w	r6, r3, #452	; 0x1c4
 8003c66:	466d      	mov	r5, sp
 8003c68:	f106 0410 	add.w	r4, r6, #16
 8003c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003c80:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003c84:	f7fd fac6 	bl	8001214 <DM_Add_Element>
 8003c88:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440

	int digit3Id = DM_Add_Element(digit3);
 8003c8c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003c90:	f5a3 7619 	sub.w	r6, r3, #612	; 0x264
 8003c94:	466d      	mov	r5, sp
 8003c96:	f106 0410 	add.w	r4, r6, #16
 8003c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003caa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003cae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003cb2:	f7fd faaf 	bl	8001214 <DM_Add_Element>
 8003cb6:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
	int colon2Id = DM_Add_Element(colon2); //colon
 8003cba:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003cbe:	f5a3 7641 	sub.w	r6, r3, #772	; 0x304
 8003cc2:	466d      	mov	r5, sp
 8003cc4:	f106 0410 	add.w	r4, r6, #16
 8003cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003cd8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003cdc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ce0:	f7fd fa98 	bl	8001214 <DM_Add_Element>
 8003ce4:	f8c7 0438 	str.w	r0, [r7, #1080]	; 0x438
	int digit4Id = DM_Add_Element(digit4);
 8003ce8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003cec:	f5a3 762d 	sub.w	r6, r3, #692	; 0x2b4
 8003cf0:	466d      	mov	r5, sp
 8003cf2:	f106 0410 	add.w	r4, r6, #16
 8003cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d06:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003d0a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003d0e:	f7fd fa81 	bl	8001214 <DM_Add_Element>
 8003d12:	f8c7 0434 	str.w	r0, [r7, #1076]	; 0x434

	int digit5Id = DM_Add_Element(digit5);
 8003d16:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003d1a:	f5a3 7655 	sub.w	r6, r3, #852	; 0x354
 8003d1e:	466d      	mov	r5, sp
 8003d20:	f106 0410 	add.w	r4, r6, #16
 8003d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d34:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003d38:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003d3c:	f7fd fa6a 	bl	8001214 <DM_Add_Element>
 8003d40:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
	int digit6Id = DM_Add_Element(digit6);
 8003d44:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003d48:	f5a3 7669 	sub.w	r6, r3, #932	; 0x3a4
 8003d4c:	466d      	mov	r5, sp
 8003d4e:	f106 0410 	add.w	r4, r6, #16
 8003d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003d66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003d6a:	f7fd fa53 	bl	8001214 <DM_Add_Element>
 8003d6e:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c

	//Button for the device test
	struct DisplayElement button1 = DM_New_Button(BTN_RIGHT_X, BTN_BOTTOM_Y, "Test Device", ENABLED);
 8003d72:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003d76:	f5a3 707d 	sub.w	r0, r3, #1012	; 0x3f4
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <MainMenuTask+0x44c>)
 8003d80:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003d84:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8003d88:	f7fc ff46 	bl	8000c18 <DM_New_Button>
	button1.onPress = deviceTest_onPress;
 8003d8c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003d90:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8003d94:	4a27      	ldr	r2, [pc, #156]	; (8003e34 <MainMenuTask+0x450>)
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
	DM_Add_Element(button1);
 8003d98:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003d9c:	f5a3 767d 	sub.w	r6, r3, #1012	; 0x3f4
 8003da0:	466d      	mov	r5, sp
 8003da2:	f106 0410 	add.w	r4, r6, #16
 8003da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003db6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003dba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003dbe:	f7fd fa29 	bl	8001214 <DM_Add_Element>

	//Button for settings
	struct DisplayElement button2 = DM_New_Button(BTN_LEFT_X, BTN_BOTTOM_Y, "Settings", ENABLED);
 8003dc2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003dc6:	f2a3 4044 	subw	r0, r3, #1092	; 0x444
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <MainMenuTask+0x454>)
 8003dd0:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003dd4:	210a      	movs	r1, #10
 8003dd6:	f7fc ff1f 	bl	8000c18 <DM_New_Button>
	button2.onPress = settingsScreen_onPress;
 8003dda:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003dde:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <MainMenuTask+0x458>)
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
	DM_Add_Element(button2);
 8003de6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003dea:	f2a3 4644 	subw	r6, r3, #1092	; 0x444
 8003dee:	466d      	mov	r5, sp
 8003df0:	f106 0410 	add.w	r4, r6, #16
 8003df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e04:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003e08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003e0c:	f7fd fa02 	bl	8001214 <DM_Add_Element>

	//Previous time to compare to new time and decide to update
	char oldMin = '0';
 8003e10:	2330      	movs	r3, #48	; 0x30
 8003e12:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8003e16:	e013      	b.n	8003e40 <MainMenuTask+0x45c>
 8003e18:	08011fac 	.word	0x08011fac
 8003e1c:	08021fcc 	.word	0x08021fcc
 8003e20:	20000010 	.word	0x20000010
 8003e24:	08015fb4 	.word	0x08015fb4
 8003e28:	0801dfc4 	.word	0x0801dfc4
 8003e2c:	08029fdc 	.word	0x08029fdc
 8003e30:	0800a920 	.word	0x0800a920
 8003e34:	08004069 	.word	0x08004069
 8003e38:	0800a92c 	.word	0x0800a92c
 8003e3c:	0800408d 	.word	0x0800408d

	//The main loop
	while(1) {
		//Get the time from the RTC once per second
		struct Time thisTime = RTC_get_time_date();
 8003e40:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003e44:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe f871 	bl	8001f30 <RTC_get_time_date>
		char timeString[7];
		sprintf(timeString, "%2d%2d%2d", thisTime.hours, thisTime.minutes, thisTime.seconds);
 8003e4e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003e52:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8003e56:	789b      	ldrb	r3, [r3, #2]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003e5e:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	4619      	mov	r1, r3
 8003e66:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003e6a:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	f107 0008 	add.w	r0, r7, #8
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	460b      	mov	r3, r1
 8003e78:	497a      	ldr	r1, [pc, #488]	; (8004064 <MainMenuTask+0x680>)
 8003e7a:	f006 f877 	bl	8009f6c <siprintf>

		//Update the bitmaps with the new time
		//check if we need to update the whole lot, or just seconds
		if(oldMin != timeString[3]) {
 8003e7e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003e82:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8003e86:	78db      	ldrb	r3, [r3, #3]
 8003e88:	f897 245f 	ldrb.w	r2, [r7, #1119]	; 0x45f
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	f000 809e 	beq.w	8003fce <MainMenuTask+0x5ea>
			digit1.bitmap = Char_To_Bmp(timeString[0]);
 8003e92:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003e96:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f907 	bl	80040b0 <Char_To_Bmp>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003ea8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003eac:	621a      	str	r2, [r3, #32]
			digit2.bitmap = Char_To_Bmp(timeString[1]);
 8003eae:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003eb2:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 f8f9 	bl	80040b0 <Char_To_Bmp>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003ec4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ec8:	621a      	str	r2, [r3, #32]
			DM_Replace_Element(digit1Id, digit1);
 8003eca:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003ece:	f5a3 74ba 	sub.w	r4, r3, #372	; 0x174
 8003ed2:	4668      	mov	r0, sp
 8003ed4:	f104 030c 	add.w	r3, r4, #12
 8003ed8:	2244      	movs	r2, #68	; 0x44
 8003eda:	4619      	mov	r1, r3
 8003edc:	f005 ff22 	bl	8009d24 <memcpy>
 8003ee0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003ee4:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 8003ee8:	f7fd f9ba 	bl	8001260 <DM_Replace_Element>
			DM_Replace_Element(colon1Id, colon1);
 8003eec:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003ef0:	f5a3 7405 	sub.w	r4, r3, #532	; 0x214
 8003ef4:	4668      	mov	r0, sp
 8003ef6:	f104 030c 	add.w	r3, r4, #12
 8003efa:	2244      	movs	r2, #68	; 0x44
 8003efc:	4619      	mov	r1, r3
 8003efe:	f005 ff11 	bl	8009d24 <memcpy>
 8003f02:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003f06:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8003f0a:	f7fd f9a9 	bl	8001260 <DM_Replace_Element>
			DM_Replace_Element(digit2Id, digit2);
 8003f0e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003f12:	f5a3 74e2 	sub.w	r4, r3, #452	; 0x1c4
 8003f16:	4668      	mov	r0, sp
 8003f18:	f104 030c 	add.w	r3, r4, #12
 8003f1c:	2244      	movs	r2, #68	; 0x44
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f005 ff00 	bl	8009d24 <memcpy>
 8003f24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003f28:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 8003f2c:	f7fd f998 	bl	8001260 <DM_Replace_Element>

			digit3.bitmap = Char_To_Bmp(timeString[2]);
 8003f30:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003f34:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8003f38:	789b      	ldrb	r3, [r3, #2]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f8b8 	bl	80040b0 <Char_To_Bmp>
 8003f40:	4602      	mov	r2, r0
 8003f42:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003f46:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003f4a:	621a      	str	r2, [r3, #32]
			digit4.bitmap = Char_To_Bmp(timeString[3]);
 8003f4c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003f50:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8003f54:	78db      	ldrb	r3, [r3, #3]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f8aa 	bl	80040b0 <Char_To_Bmp>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003f62:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8003f66:	621a      	str	r2, [r3, #32]
			DM_Replace_Element(digit3Id, digit3);
 8003f68:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003f6c:	f5a3 7419 	sub.w	r4, r3, #612	; 0x264
 8003f70:	4668      	mov	r0, sp
 8003f72:	f104 030c 	add.w	r3, r4, #12
 8003f76:	2244      	movs	r2, #68	; 0x44
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f005 fed3 	bl	8009d24 <memcpy>
 8003f7e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003f82:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 8003f86:	f7fd f96b 	bl	8001260 <DM_Replace_Element>
			DM_Replace_Element(colon2Id, colon2);
 8003f8a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003f8e:	f5a3 7441 	sub.w	r4, r3, #772	; 0x304
 8003f92:	4668      	mov	r0, sp
 8003f94:	f104 030c 	add.w	r3, r4, #12
 8003f98:	2244      	movs	r2, #68	; 0x44
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f005 fec2 	bl	8009d24 <memcpy>
 8003fa0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003fa4:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 8003fa8:	f7fd f95a 	bl	8001260 <DM_Replace_Element>
			DM_Replace_Element(digit4Id, digit4);
 8003fac:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003fb0:	f5a3 742d 	sub.w	r4, r3, #692	; 0x2b4
 8003fb4:	4668      	mov	r0, sp
 8003fb6:	f104 030c 	add.w	r3, r4, #12
 8003fba:	2244      	movs	r2, #68	; 0x44
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f005 feb1 	bl	8009d24 <memcpy>
 8003fc2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003fc6:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 8003fca:	f7fd f949 	bl	8001260 <DM_Replace_Element>
		}
		//Update the seconds componetnts
		digit5.bitmap = Char_To_Bmp(timeString[4]);
 8003fce:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003fd2:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f869 	bl	80040b0 <Char_To_Bmp>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003fe4:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8003fe8:	621a      	str	r2, [r3, #32]
		digit6.bitmap = Char_To_Bmp(timeString[5]);
 8003fea:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003fee:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8003ff2:	795b      	ldrb	r3, [r3, #5]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 f85b 	bl	80040b0 <Char_To_Bmp>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8004000:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8004004:	621a      	str	r2, [r3, #32]
		DM_Replace_Element(digit5Id, digit5);
 8004006:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800400a:	f5a3 7455 	sub.w	r4, r3, #852	; 0x354
 800400e:	4668      	mov	r0, sp
 8004010:	f104 030c 	add.w	r3, r4, #12
 8004014:	2244      	movs	r2, #68	; 0x44
 8004016:	4619      	mov	r1, r3
 8004018:	f005 fe84 	bl	8009d24 <memcpy>
 800401c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004020:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8004024:	f7fd f91c 	bl	8001260 <DM_Replace_Element>
		DM_Replace_Element(digit6Id, digit6);
 8004028:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800402c:	f5a3 7469 	sub.w	r4, r3, #932	; 0x3a4
 8004030:	4668      	mov	r0, sp
 8004032:	f104 030c 	add.w	r3, r4, #12
 8004036:	2244      	movs	r2, #68	; 0x44
 8004038:	4619      	mov	r1, r3
 800403a:	f005 fe73 	bl	8009d24 <memcpy>
 800403e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004042:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 8004046:	f7fd f90b 	bl	8001260 <DM_Replace_Element>

		//Update the old minutes flag for the next update
		oldMin = timeString[3];
 800404a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800404e:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8004052:	78db      	ldrb	r3, [r3, #3]
 8004054:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f

		osDelay(1000);
 8004058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800405c:	f004 f8c8 	bl	80081f0 <osDelay>
	while(1) {
 8004060:	e6ee      	b.n	8003e40 <MainMenuTask+0x45c>
 8004062:	bf00      	nop
 8004064:	0800a938 	.word	0x0800a938

08004068 <deviceTest_onPress>:
}

/**
 * Callback for the Test Device button
 */
void deviceTest_onPress(int id) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, DEVICE_TEST, eSetValueWithOverwrite);
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <deviceTest_onPress+0x20>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	2300      	movs	r3, #0
 8004076:	2203      	movs	r2, #3
 8004078:	2100      	movs	r1, #0
 800407a:	f004 ffe3 	bl	8009044 <xTaskGenericNotify>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20004ec8 	.word	0x20004ec8

0800408c <settingsScreen_onPress>:

/**
 * onPress callback for the settings screen button
 */
void settingsScreen_onPress(int id) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	xTaskNotify(changeScreenTaskHandle, SETTINGS, eSetValueWithOverwrite);
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <settingsScreen_onPress+0x20>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	2300      	movs	r3, #0
 800409a:	2203      	movs	r2, #3
 800409c:	2103      	movs	r1, #3
 800409e:	f004 ffd1 	bl	8009044 <xTaskGenericNotify>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20004ec8 	.word	0x20004ec8

080040b0 <Char_To_Bmp>:
}

/**
 * Converts a char to a bitmap represnting that number.
 */
unsigned int* Char_To_Bmp(char c) {
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
	switch(c) {
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	3b30      	subs	r3, #48	; 0x30
 80040be:	2b09      	cmp	r3, #9
 80040c0:	d82a      	bhi.n	8004118 <Char_To_Bmp+0x68>
 80040c2:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <Char_To_Bmp+0x18>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040f1 	.word	0x080040f1
 80040cc:	080040f5 	.word	0x080040f5
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004105 	.word	0x08004105
 80040e0:	08004109 	.word	0x08004109
 80040e4:	0800410d 	.word	0x0800410d
 80040e8:	08004111 	.word	0x08004111
 80040ec:	08004115 	.word	0x08004115
	case '0':
		return num_0;
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <Char_To_Bmp+0x78>)
 80040f2:	e012      	b.n	800411a <Char_To_Bmp+0x6a>
	case '1':
		return num_1;
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <Char_To_Bmp+0x7c>)
 80040f6:	e010      	b.n	800411a <Char_To_Bmp+0x6a>
	case '2':
		return num_2;
 80040f8:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <Char_To_Bmp+0x80>)
 80040fa:	e00e      	b.n	800411a <Char_To_Bmp+0x6a>
	case '3':
		return num_3;
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <Char_To_Bmp+0x84>)
 80040fe:	e00c      	b.n	800411a <Char_To_Bmp+0x6a>
	case '4':
		return num_4;
 8004100:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <Char_To_Bmp+0x88>)
 8004102:	e00a      	b.n	800411a <Char_To_Bmp+0x6a>
	case '5':
		return num_5;
 8004104:	4b0d      	ldr	r3, [pc, #52]	; (800413c <Char_To_Bmp+0x8c>)
 8004106:	e008      	b.n	800411a <Char_To_Bmp+0x6a>
	case '6':
		return num_6;
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <Char_To_Bmp+0x90>)
 800410a:	e006      	b.n	800411a <Char_To_Bmp+0x6a>
	case '7':
		return num_7;
 800410c:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <Char_To_Bmp+0x94>)
 800410e:	e004      	b.n	800411a <Char_To_Bmp+0x6a>
	case '8':
		return num_8;
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <Char_To_Bmp+0x98>)
 8004112:	e002      	b.n	800411a <Char_To_Bmp+0x6a>
	case '9':
		return num_9;
 8004114:	4b0d      	ldr	r3, [pc, #52]	; (800414c <Char_To_Bmp+0x9c>)
 8004116:	e000      	b.n	800411a <Char_To_Bmp+0x6a>
	}

	return num_0;
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <Char_To_Bmp+0x78>)
}
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	0800dfa4 	.word	0x0800dfa4
 800412c:	08011fac 	.word	0x08011fac
 8004130:	08015fb4 	.word	0x08015fb4
 8004134:	08019fbc 	.word	0x08019fbc
 8004138:	0801dfc4 	.word	0x0801dfc4
 800413c:	08021fcc 	.word	0x08021fcc
 8004140:	08025fd4 	.word	0x08025fd4
 8004144:	08029fdc 	.word	0x08029fdc
 8004148:	0802dfe4 	.word	0x0802dfe4
 800414c:	08031fec 	.word	0x08031fec

08004150 <SettingsTask>:
int textBlankId;

/**
 * Main task to display the settings screen.
 */
void SettingsTask(void const * args) {
 8004150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004152:	b0f9      	sub	sp, #484	; 0x1e4
 8004154:	af10      	add	r7, sp, #64	; 0x40
 8004156:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800415a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800415e:	6018      	str	r0, [r3, #0]
	//Clear the text from previous sessions
	text[0] = '\0';
 8004160:	4b51      	ldr	r3, [pc, #324]	; (80042a8 <SettingsTask+0x158>)
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]

	//Add some dummy display elements
	DM_Add_Element(DM_New_Title_Bar("Settings"));
 8004166:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800416a:	4950      	ldr	r1, [pc, #320]	; (80042ac <SettingsTask+0x15c>)
 800416c:	4618      	mov	r0, r3
 800416e:	f7fd fd75 	bl	8001c5c <DM_New_Title_Bar>
 8004172:	466d      	mov	r5, sp
 8004174:	f507 74ae 	add.w	r4, r7, #348	; 0x15c
 8004178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800417a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800417c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800417e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004184:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004188:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800418c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8004190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004192:	f7fd f83f 	bl	8001214 <DM_Add_Element>
	//HOME
	struct DisplayElement okBtn = DM_New_Button(BTN_LEFT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 8004196:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 800419a:	2300      	movs	r3, #0
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4b44      	ldr	r3, [pc, #272]	; (80042b0 <SettingsTask+0x160>)
 80041a0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80041a4:	210a      	movs	r1, #10
 80041a6:	f7fc fd37 	bl	8000c18 <DM_New_Button>
	okBtn.onPress = home_onPress;
 80041aa:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <SettingsTask+0x164>)
 80041ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	int okBtnId = DM_Add_Element(okBtn);
 80041b0:	466d      	mov	r5, sp
 80041b2:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 80041b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80041ca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80041ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041d0:	f7fd f820 	bl	8001214 <DM_Add_Element>
 80041d4:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c

	//draw a number pad
	struct DisplayElement numPad = DM_New_NumPad();
 80041d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd fb09 	bl	80017f4 <DM_New_NumPad>
	numPad.onPress = numPad_onPress;
 80041e2:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <SettingsTask+0x168>)
 80041e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	DM_Add_Element(numPad);
 80041e8:	466d      	mov	r5, sp
 80041ea:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 80041ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004202:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004208:	f7fd f804 	bl	8001214 <DM_Add_Element>

	//A blank area to clear the text box - will make this part of the actual element later
	struct DisplayElement blankBox = DM_New_Fill_Rectangle(0, 45, 260, 70, COLOR_WHITE);
 800420c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004210:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8004214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	2346      	movs	r3, #70	; 0x46
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004222:	222d      	movs	r2, #45	; 0x2d
 8004224:	2100      	movs	r1, #0
 8004226:	f7fd f9a1 	bl	800156c <DM_New_Fill_Rectangle>
	textBlankId = DM_Add_Element(blankBox);
 800422a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800422e:	f5a3 76a2 	sub.w	r6, r3, #324	; 0x144
 8004232:	466d      	mov	r5, sp
 8004234:	f106 0410 	add.w	r4, r6, #16
 8004238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800423a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800423c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800423e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004244:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004248:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800424c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004250:	f7fc ffe0 	bl	8001214 <DM_Add_Element>
 8004254:	4603      	mov	r3, r0
 8004256:	4a19      	ldr	r2, [pc, #100]	; (80042bc <SettingsTask+0x16c>)
 8004258:	6013      	str	r3, [r2, #0]
	//A text box to put the numbers in
	struct DisplayElement textBox = DM_New_Text(0, 45, COLOR_BLUE, 2, text);
 800425a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800425e:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <SettingsTask+0x158>)
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	2302      	movs	r3, #2
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	231f      	movs	r3, #31
 800426c:	222d      	movs	r2, #45	; 0x2d
 800426e:	2100      	movs	r1, #0
 8004270:	f7fd fc78 	bl	8001b64 <DM_New_Text>
	textBoxId = DM_Add_Element(textBox);
 8004274:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004278:	f5a3 76ca 	sub.w	r6, r3, #404	; 0x194
 800427c:	466d      	mov	r5, sp
 800427e:	f106 0410 	add.w	r4, r6, #16
 8004282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800428a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800428c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800428e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004292:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004296:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800429a:	f7fc ffbb 	bl	8001214 <DM_Add_Element>
 800429e:	4603      	mov	r3, r0
 80042a0:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <SettingsTask+0x170>)
 80042a2:	6013      	str	r3, [r2, #0]

	while(1);
 80042a4:	e7fe      	b.n	80042a4 <SettingsTask+0x154>
 80042a6:	bf00      	nop
 80042a8:	20004f20 	.word	0x20004f20
 80042ac:	0800aa0c 	.word	0x0800aa0c
 80042b0:	0800aa18 	.word	0x0800aa18
 80042b4:	08003165 	.word	0x08003165
 80042b8:	080042c5 	.word	0x080042c5
 80042bc:	20004f64 	.word	0x20004f64
 80042c0:	20004f60 	.word	0x20004f60

080042c4 <numPad_onPress>:
}

/**
 * Callback from the numpad for digits to input
 */
void numPad_onPress(int id) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b09a      	sub	sp, #104	; 0x68
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	int num = DM_Get_Element(id).selected;
 80042cc:	f107 0310 	add.w	r3, r7, #16
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fd f860 	bl	8001398 <DM_Get_Element>
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	667b      	str	r3, [r7, #100]	; 0x64
	//The numbers count up from 1, with 0 being reserved as NULL.
	//So the number zero is actually 11, and backspace is 12.
	if(num == 11)
 80042dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042de:	2b0b      	cmp	r3, #11
 80042e0:	d101      	bne.n	80042e6 <numPad_onPress+0x22>
		num = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	667b      	str	r3, [r7, #100]	; 0x64
	//If the num is 12 then it's a backspace, otherwise it's a digit
	if(num == 12) {
 80042e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042e8:	2b0c      	cmp	r3, #12
 80042ea:	d10a      	bne.n	8004302 <numPad_onPress+0x3e>
		//Change the last character to null
		int len = strlen(text);
 80042ec:	4812      	ldr	r0, [pc, #72]	; (8004338 <numPad_onPress+0x74>)
 80042ee:	f7fb ff6f 	bl	80001d0 <strlen>
 80042f2:	4603      	mov	r3, r0
 80042f4:	663b      	str	r3, [r7, #96]	; 0x60
		text[len - 1] = '\0';
 80042f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f8:	3b01      	subs	r3, #1
 80042fa:	4a0f      	ldr	r2, [pc, #60]	; (8004338 <numPad_onPress+0x74>)
 80042fc:	2100      	movs	r1, #0
 80042fe:	54d1      	strb	r1, [r2, r3]
 8004300:	e00b      	b.n	800431a <numPad_onPress+0x56>
	} else {
		//Calculate the new char and add it to the text string
		char c = num + 48;
 8004302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004304:	b2db      	uxtb	r3, r3
 8004306:	3330      	adds	r3, #48	; 0x30
 8004308:	b2db      	uxtb	r3, r3
 800430a:	73fb      	strb	r3, [r7, #15]
		strncat(text, &c, 1);
 800430c:	f107 030f 	add.w	r3, r7, #15
 8004310:	2201      	movs	r2, #1
 8004312:	4619      	mov	r1, r3
 8004314:	4808      	ldr	r0, [pc, #32]	; (8004338 <numPad_onPress+0x74>)
 8004316:	f005 fe49 	bl	8009fac <strncat>
	}

	//Register the blanking square, and the text element for update.
	DM_Refresh_Element(textBlankId);
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <numPad_onPress+0x78>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc ff62 	bl	80011e8 <DM_Refresh_Element>
	DM_Refresh_Element(textBoxId);
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <numPad_onPress+0x7c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc ff5d 	bl	80011e8 <DM_Refresh_Element>
}
 800432e:	bf00      	nop
 8004330:	3768      	adds	r7, #104	; 0x68
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20004f20 	.word	0x20004f20
 800433c:	20004f64 	.word	0x20004f64
 8004340:	20004f60 	.word	0x20004f60

08004344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800437c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004348:	f7ff f962 	bl	8003610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800434c:	480c      	ldr	r0, [pc, #48]	; (8004380 <LoopForever+0x6>)
  ldr r1, =_edata
 800434e:	490d      	ldr	r1, [pc, #52]	; (8004384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004350:	4a0d      	ldr	r2, [pc, #52]	; (8004388 <LoopForever+0xe>)
  movs r3, #0
 8004352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004354:	e002      	b.n	800435c <LoopCopyDataInit>

08004356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800435a:	3304      	adds	r3, #4

0800435c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800435c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800435e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004360:	d3f9      	bcc.n	8004356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004362:	4a0a      	ldr	r2, [pc, #40]	; (800438c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004364:	4c0a      	ldr	r4, [pc, #40]	; (8004390 <LoopForever+0x16>)
  movs r3, #0
 8004366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004368:	e001      	b.n	800436e <LoopFillZerobss>

0800436a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800436a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800436c:	3204      	adds	r2, #4

0800436e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800436e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004370:	d3fb      	bcc.n	800436a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004372:	f005 fcb1 	bl	8009cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004376:	f7fe fc3f 	bl	8002bf8 <main>

0800437a <LoopForever>:

LoopForever:
    b LoopForever
 800437a:	e7fe      	b.n	800437a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800437c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004384:	20004088 	.word	0x20004088
  ldr r2, =_sidata
 8004388:	08036098 	.word	0x08036098
  ldr r2, =_sbss
 800438c:	20004088 	.word	0x20004088
  ldr r4, =_ebss
 8004390:	20009ef0 	.word	0x20009ef0

08004394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004394:	e7fe      	b.n	8004394 <ADC1_2_IRQHandler>

08004396 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a0:	2003      	movs	r0, #3
 80043a2:	f000 f902 	bl	80045aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043a6:	200f      	movs	r0, #15
 80043a8:	f7ff f85e 	bl	8003468 <HAL_InitTick>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	71fb      	strb	r3, [r7, #7]
 80043b6:	e001      	b.n	80043bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043b8:	f7fe ff10 	bl	80031dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043bc:	79fb      	ldrb	r3, [r7, #7]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_IncTick+0x20>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_IncTick+0x24>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <HAL_IncTick+0x24>)
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	2000401c 	.word	0x2000401c
 80043ec:	20004f68 	.word	0x20004f68

080043f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return uwTick;
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_GetTick+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20004f68 	.word	0x20004f68

08004408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7ff ffee 	bl	80043f0 <HAL_GetTick>
 8004414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004420:	d005      	beq.n	800442e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_Delay+0x44>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800442e:	bf00      	nop
 8004430:	f7ff ffde 	bl	80043f0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	429a      	cmp	r2, r3
 800443e:	d8f7      	bhi.n	8004430 <HAL_Delay+0x28>
  {
  }
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2000401c 	.word	0x2000401c

08004450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800446c:	4013      	ands	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800447c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004482:	4a04      	ldr	r2, [pc, #16]	; (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	60d3      	str	r3, [r2, #12]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <__NVIC_GetPriorityGrouping+0x18>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	f003 0307 	and.w	r3, r3, #7
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	db0b      	blt.n	80044de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	4907      	ldr	r1, [pc, #28]	; (80044ec <__NVIC_EnableIRQ+0x38>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2001      	movs	r0, #1
 80044d6:	fa00 f202 	lsl.w	r2, r0, r2
 80044da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004500:	2b00      	cmp	r3, #0
 8004502:	db0a      	blt.n	800451a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	490c      	ldr	r1, [pc, #48]	; (800453c <__NVIC_SetPriority+0x4c>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	0112      	lsls	r2, r2, #4
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	440b      	add	r3, r1
 8004514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004518:	e00a      	b.n	8004530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4908      	ldr	r1, [pc, #32]	; (8004540 <__NVIC_SetPriority+0x50>)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	3b04      	subs	r3, #4
 8004528:	0112      	lsls	r2, r2, #4
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	440b      	add	r3, r1
 800452e:	761a      	strb	r2, [r3, #24]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000e100 	.word	0xe000e100
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	; 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f1c3 0307 	rsb	r3, r3, #7
 800455e:	2b04      	cmp	r3, #4
 8004560:	bf28      	it	cs
 8004562:	2304      	movcs	r3, #4
 8004564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3304      	adds	r3, #4
 800456a:	2b06      	cmp	r3, #6
 800456c:	d902      	bls.n	8004574 <NVIC_EncodePriority+0x30>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3b03      	subs	r3, #3
 8004572:	e000      	b.n	8004576 <NVIC_EncodePriority+0x32>
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	401a      	ands	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800458c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	43d9      	mvns	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800459c:	4313      	orrs	r3, r2
         );
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3724      	adds	r7, #36	; 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ff4c 	bl	8004450 <__NVIC_SetPriorityGrouping>
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045d2:	f7ff ff61 	bl	8004498 <__NVIC_GetPriorityGrouping>
 80045d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	6978      	ldr	r0, [r7, #20]
 80045de:	f7ff ffb1 	bl	8004544 <NVIC_EncodePriority>
 80045e2:	4602      	mov	r2, r0
 80045e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ff80 	bl	80044f0 <__NVIC_SetPriority>
}
 80045f0:	bf00      	nop
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff ff54 	bl	80044b4 <__NVIC_EnableIRQ>
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e054      	b.n	80046d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7f5b      	ldrb	r3, [r3, #29]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe fdf8 	bl	800322c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	791b      	ldrb	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10c      	bne.n	8004664 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a22      	ldr	r2, [pc, #136]	; (80046d8 <HAL_CRC_Init+0xc4>)
 8004650:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0218 	bic.w	r2, r2, #24
 8004660:	609a      	str	r2, [r3, #8]
 8004662:	e00c      	b.n	800467e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6899      	ldr	r1, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	461a      	mov	r2, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f834 	bl	80046dc <HAL_CRCEx_Polynomial_Set>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e028      	b.n	80046d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	795b      	ldrb	r3, [r3, #5]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d105      	bne.n	8004692 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800468e:	611a      	str	r2, [r3, #16]
 8004690:	e004      	b.n	800469c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6912      	ldr	r2, [r2, #16]
 800469a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	04c11db7 	.word	0x04c11db7

080046dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80046ec:	231f      	movs	r3, #31
 80046ee:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80046f0:	bf00      	nop
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1e5a      	subs	r2, r3, #1
 80046f6:	613a      	str	r2, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d009      	beq.n	8004710 <HAL_CRCEx_Polynomial_Set+0x34>
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b18      	cmp	r3, #24
 8004714:	d846      	bhi.n	80047a4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004716:	a201      	add	r2, pc, #4	; (adr r2, 800471c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	080047ab 	.word	0x080047ab
 8004720:	080047a5 	.word	0x080047a5
 8004724:	080047a5 	.word	0x080047a5
 8004728:	080047a5 	.word	0x080047a5
 800472c:	080047a5 	.word	0x080047a5
 8004730:	080047a5 	.word	0x080047a5
 8004734:	080047a5 	.word	0x080047a5
 8004738:	080047a5 	.word	0x080047a5
 800473c:	08004799 	.word	0x08004799
 8004740:	080047a5 	.word	0x080047a5
 8004744:	080047a5 	.word	0x080047a5
 8004748:	080047a5 	.word	0x080047a5
 800474c:	080047a5 	.word	0x080047a5
 8004750:	080047a5 	.word	0x080047a5
 8004754:	080047a5 	.word	0x080047a5
 8004758:	080047a5 	.word	0x080047a5
 800475c:	0800478d 	.word	0x0800478d
 8004760:	080047a5 	.word	0x080047a5
 8004764:	080047a5 	.word	0x080047a5
 8004768:	080047a5 	.word	0x080047a5
 800476c:	080047a5 	.word	0x080047a5
 8004770:	080047a5 	.word	0x080047a5
 8004774:	080047a5 	.word	0x080047a5
 8004778:	080047a5 	.word	0x080047a5
 800477c:	08004781 	.word	0x08004781
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b06      	cmp	r3, #6
 8004784:	d913      	bls.n	80047ae <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800478a:	e010      	b.n	80047ae <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b07      	cmp	r3, #7
 8004790:	d90f      	bls.n	80047b2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004796:	e00c      	b.n	80047b2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b0f      	cmp	r3, #15
 800479c:	d90b      	bls.n	80047b6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047a2:	e008      	b.n	80047b6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	75fb      	strb	r3, [r7, #23]
      break;
 80047a8:	e006      	b.n	80047b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047aa:	bf00      	nop
 80047ac:	e004      	b.n	80047b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047b6:	bf00      	nop
  }
  if (status == HAL_OK)
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10d      	bne.n	80047da <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f023 0118 	bic.w	r1, r3, #24
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047f6:	e17f      	b.n	8004af8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	4013      	ands	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8171 	beq.w	8004af2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d005      	beq.n	8004828 <HAL_GPIO_Init+0x40>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d130      	bne.n	800488a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800485e:	2201      	movs	r2, #1
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4013      	ands	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0201 	and.w	r2, r3, #1
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d118      	bne.n	80048c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800489c:	2201      	movs	r2, #1
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	08db      	lsrs	r3, r3, #3
 80048b2:	f003 0201 	and.w	r2, r3, #1
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d017      	beq.n	8004904 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	2203      	movs	r2, #3
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d123      	bne.n	8004958 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	220f      	movs	r2, #15
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4013      	ands	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	08da      	lsrs	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3208      	adds	r2, #8
 8004952:	6939      	ldr	r1, [r7, #16]
 8004954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	2203      	movs	r2, #3
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 0203 	and.w	r2, r3, #3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80ac 	beq.w	8004af2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800499a:	4b5f      	ldr	r3, [pc, #380]	; (8004b18 <HAL_GPIO_Init+0x330>)
 800499c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499e:	4a5e      	ldr	r2, [pc, #376]	; (8004b18 <HAL_GPIO_Init+0x330>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6613      	str	r3, [r2, #96]	; 0x60
 80049a6:	4b5c      	ldr	r3, [pc, #368]	; (8004b18 <HAL_GPIO_Init+0x330>)
 80049a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049b2:	4a5a      	ldr	r2, [pc, #360]	; (8004b1c <HAL_GPIO_Init+0x334>)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	3302      	adds	r3, #2
 80049ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	220f      	movs	r2, #15
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049dc:	d025      	beq.n	8004a2a <HAL_GPIO_Init+0x242>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a4f      	ldr	r2, [pc, #316]	; (8004b20 <HAL_GPIO_Init+0x338>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01f      	beq.n	8004a26 <HAL_GPIO_Init+0x23e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a4e      	ldr	r2, [pc, #312]	; (8004b24 <HAL_GPIO_Init+0x33c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d019      	beq.n	8004a22 <HAL_GPIO_Init+0x23a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a4d      	ldr	r2, [pc, #308]	; (8004b28 <HAL_GPIO_Init+0x340>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <HAL_GPIO_Init+0x236>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4c      	ldr	r2, [pc, #304]	; (8004b2c <HAL_GPIO_Init+0x344>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00d      	beq.n	8004a1a <HAL_GPIO_Init+0x232>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a4b      	ldr	r2, [pc, #300]	; (8004b30 <HAL_GPIO_Init+0x348>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <HAL_GPIO_Init+0x22e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a4a      	ldr	r2, [pc, #296]	; (8004b34 <HAL_GPIO_Init+0x34c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_GPIO_Init+0x22a>
 8004a0e:	2306      	movs	r3, #6
 8004a10:	e00c      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a12:	2307      	movs	r3, #7
 8004a14:	e00a      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a16:	2305      	movs	r3, #5
 8004a18:	e008      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a1a:	2304      	movs	r3, #4
 8004a1c:	e006      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e004      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e002      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	f002 0203 	and.w	r2, r2, #3
 8004a32:	0092      	lsls	r2, r2, #2
 8004a34:	4093      	lsls	r3, r2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a3c:	4937      	ldr	r1, [pc, #220]	; (8004b1c <HAL_GPIO_Init+0x334>)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	089b      	lsrs	r3, r3, #2
 8004a42:	3302      	adds	r3, #2
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a4a:	4b3b      	ldr	r3, [pc, #236]	; (8004b38 <HAL_GPIO_Init+0x350>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a6e:	4a32      	ldr	r2, [pc, #200]	; (8004b38 <HAL_GPIO_Init+0x350>)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a74:	4b30      	ldr	r3, [pc, #192]	; (8004b38 <HAL_GPIO_Init+0x350>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4013      	ands	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a98:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <HAL_GPIO_Init+0x350>)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a9e:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <HAL_GPIO_Init+0x350>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ac2:	4a1d      	ldr	r2, [pc, #116]	; (8004b38 <HAL_GPIO_Init+0x350>)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <HAL_GPIO_Init+0x350>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aec:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <HAL_GPIO_Init+0x350>)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	3301      	adds	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f47f ae78 	bne.w	80047f8 <HAL_GPIO_Init+0x10>
  }
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40010000 	.word	0x40010000
 8004b20:	48000400 	.word	0x48000400
 8004b24:	48000800 	.word	0x48000800
 8004b28:	48000c00 	.word	0x48000c00
 8004b2c:	48001000 	.word	0x48001000
 8004b30:	48001400 	.word	0x48001400
 8004b34:	48001800 	.word	0x48001800
 8004b38:	40010400 	.word	0x40010400

08004b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	807b      	strh	r3, [r7, #2]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b4c:	787b      	ldrb	r3, [r7, #1]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b52:	887a      	ldrh	r2, [r7, #2]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b58:	e002      	b.n	8004b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b5a:	887a      	ldrh	r2, [r7, #2]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b7e:	887a      	ldrh	r2, [r7, #2]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4013      	ands	r3, r2
 8004b84:	041a      	lsls	r2, r3, #16
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	43d9      	mvns	r1, r3
 8004b8a:	887b      	ldrh	r3, [r7, #2]
 8004b8c:	400b      	ands	r3, r1
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	619a      	str	r2, [r3, #24]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d006      	beq.n	8004bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bb6:	4a05      	ldr	r2, [pc, #20]	; (8004bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bbc:	88fb      	ldrh	r3, [r7, #6]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f806 	bl	8004bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40010400 	.word	0x40010400

08004bd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e081      	b.n	8004cfc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d106      	bne.n	8004c12 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fe fb2d 	bl	800326c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2224      	movs	r2, #36	; 0x24
 8004c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d107      	bne.n	8004c60 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c5c:	609a      	str	r2, [r3, #8]
 8004c5e:	e006      	b.n	8004c6e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d104      	bne.n	8004c80 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c92:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69d9      	ldr	r1, [r3, #28]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1a      	ldr	r2, [r3, #32]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	461a      	mov	r2, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	817b      	strh	r3, [r7, #10]
 8004d16:	460b      	mov	r3, r1
 8004d18:	813b      	strh	r3, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	f040 80fd 	bne.w	8004f26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_I2C_Mem_Read+0x34>
 8004d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d105      	bne.n	8004d44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0f1      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_I2C_Mem_Read+0x4e>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e0ea      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d5a:	f7ff fb49 	bl	80043f0 <HAL_GetTick>
 8004d5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	2319      	movs	r3, #25
 8004d66:	2201      	movs	r2, #1
 8004d68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fa63 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0d5      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2222      	movs	r2, #34	; 0x22
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2240      	movs	r2, #64	; 0x40
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a3a      	ldr	r2, [r7, #32]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004da4:	88f8      	ldrh	r0, [r7, #6]
 8004da6:	893a      	ldrh	r2, [r7, #8]
 8004da8:	8979      	ldrh	r1, [r7, #10]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	4603      	mov	r3, r0
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f9c7 	bl	8005148 <I2C_RequestMemoryRead>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0ad      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2bff      	cmp	r3, #255	; 0xff
 8004dd4:	d90e      	bls.n	8004df4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	8979      	ldrh	r1, [r7, #10]
 8004de4:	4b52      	ldr	r3, [pc, #328]	; (8004f30 <HAL_I2C_Mem_Read+0x22c>)
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fbcb 	bl	8005588 <I2C_TransferConfig>
 8004df2:	e00f      	b.n	8004e14 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	8979      	ldrh	r1, [r7, #10]
 8004e06:	4b4a      	ldr	r3, [pc, #296]	; (8004f30 <HAL_I2C_Mem_Read+0x22c>)
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 fbba 	bl	8005588 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2104      	movs	r1, #4
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fa0a 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e07c      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d034      	beq.n	8004ed4 <HAL_I2C_Mem_Read+0x1d0>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d130      	bne.n	8004ed4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2180      	movs	r1, #128	; 0x80
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f9db 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e04d      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2bff      	cmp	r3, #255	; 0xff
 8004e94:	d90e      	bls.n	8004eb4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	22ff      	movs	r2, #255	; 0xff
 8004e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	8979      	ldrh	r1, [r7, #10]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fb6b 	bl	8005588 <I2C_TransferConfig>
 8004eb2:	e00f      	b.n	8004ed4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	8979      	ldrh	r1, [r7, #10]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fb5a 	bl	8005588 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d19a      	bne.n	8004e14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fa28 	bl	8005338 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e01a      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6859      	ldr	r1, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_I2C_Mem_Read+0x230>)
 8004f06:	400b      	ands	r3, r1
 8004f08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e000      	b.n	8004f28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f26:	2302      	movs	r3, #2
  }
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	80002400 	.word	0x80002400
 8004f34:	fe00e800 	.word	0xfe00e800

08004f38 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	460b      	mov	r3, r1
 8004f46:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	f040 80f1 	bne.w	800513c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f68:	d101      	bne.n	8004f6e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e0e7      	b.n	800513e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_I2C_IsDeviceReady+0x44>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e0e0      	b.n	800513e <HAL_I2C_IsDeviceReady+0x206>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2224      	movs	r2, #36	; 0x24
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <HAL_I2C_IsDeviceReady+0x72>
 8004f9a:	897b      	ldrh	r3, [r7, #10]
 8004f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fa8:	e004      	b.n	8004fb4 <HAL_I2C_IsDeviceReady+0x7c>
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004fba:	f7ff fa19 	bl	80043f0 <HAL_GetTick>
 8004fbe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004fec:	e034      	b.n	8005058 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff4:	d01a      	beq.n	800502c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ff6:	f7ff f9fb 	bl	80043f0 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d302      	bcc.n	800500c <HAL_I2C_IsDeviceReady+0xd4>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10f      	bne.n	800502c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e088      	b.n	800513e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b20      	cmp	r3, #32
 8005038:	bf0c      	ite	eq
 800503a:	2301      	moveq	r3, #1
 800503c:	2300      	movne	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b10      	cmp	r3, #16
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005058:	7ffb      	ldrb	r3, [r7, #31]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <HAL_I2C_IsDeviceReady+0x12c>
 800505e:	7fbb      	ldrb	r3, [r7, #30]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0c4      	beq.n	8004fee <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b10      	cmp	r3, #16
 8005070:	d01a      	beq.n	80050a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2200      	movs	r2, #0
 800507a:	2120      	movs	r1, #32
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f8db 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e058      	b.n	800513e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2220      	movs	r2, #32
 8005092:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	e04a      	b.n	800513e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	2120      	movs	r1, #32
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f8c0 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e03d      	b.n	800513e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2210      	movs	r2, #16
 80050c8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2220      	movs	r2, #32
 80050d0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d118      	bne.n	800510c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050e8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2200      	movs	r2, #0
 80050f2:	2120      	movs	r1, #32
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f89f 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e01c      	b.n	800513e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2220      	movs	r2, #32
 800510a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	3301      	adds	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	f63f af3b 	bhi.w	8004f92 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	4608      	mov	r0, r1
 8005152:	4611      	mov	r1, r2
 8005154:	461a      	mov	r2, r3
 8005156:	4603      	mov	r3, r0
 8005158:	817b      	strh	r3, [r7, #10]
 800515a:	460b      	mov	r3, r1
 800515c:	813b      	strh	r3, [r7, #8]
 800515e:	4613      	mov	r3, r2
 8005160:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	8979      	ldrh	r1, [r7, #10]
 8005168:	4b20      	ldr	r3, [pc, #128]	; (80051ec <I2C_RequestMemoryRead+0xa4>)
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2300      	movs	r3, #0
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fa0a 	bl	8005588 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	69b9      	ldr	r1, [r7, #24]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f89d 	bl	80052b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e02c      	b.n	80051e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d105      	bne.n	800519a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800518e:	893b      	ldrh	r3, [r7, #8]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28
 8005198:	e015      	b.n	80051c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800519a:	893b      	ldrh	r3, [r7, #8]
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	b29b      	uxth	r3, r3
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	69b9      	ldr	r1, [r7, #24]
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f883 	bl	80052b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e012      	b.n	80051e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051bc:	893b      	ldrh	r3, [r7, #8]
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2200      	movs	r2, #0
 80051ce:	2140      	movs	r1, #64	; 0x40
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f831 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	80002000 	.word	0x80002000

080051f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d103      	bne.n	800520e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b01      	cmp	r3, #1
 800521a:	d007      	beq.n	800522c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	619a      	str	r2, [r3, #24]
  }
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005248:	e022      	b.n	8005290 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005250:	d01e      	beq.n	8005290 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7ff f8cd 	bl	80043f0 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d113      	bne.n	8005290 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e00f      	b.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4013      	ands	r3, r2
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	429a      	cmp	r2, r3
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d0cd      	beq.n	800524a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052c4:	e02c      	b.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f870 	bl	80053b0 <I2C_IsErrorOccurred>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e02a      	b.n	8005330 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e0:	d01e      	beq.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e2:	f7ff f885 	bl	80043f0 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d302      	bcc.n	80052f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d113      	bne.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e007      	b.n	8005330 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b02      	cmp	r3, #2
 800532c:	d1cb      	bne.n	80052c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005344:	e028      	b.n	8005398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f830 	bl	80053b0 <I2C_IsErrorOccurred>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e026      	b.n	80053a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535a:	f7ff f849 	bl	80043f0 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	429a      	cmp	r2, r3
 8005368:	d302      	bcc.n	8005370 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d113      	bne.n	8005398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e007      	b.n	80053a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d1cf      	bne.n	8005346 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	; 0x28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d075      	beq.n	80054c8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2210      	movs	r2, #16
 80053e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053e4:	e056      	b.n	8005494 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ec:	d052      	beq.n	8005494 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fe ffff 	bl	80043f0 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <I2C_IsErrorOccurred+0x54>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d147      	bne.n	8005494 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800540e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005416:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005426:	d12e      	bne.n	8005486 <I2C_IsErrorOccurred+0xd6>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800542e:	d02a      	beq.n	8005486 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	2b20      	cmp	r3, #32
 8005434:	d027      	beq.n	8005486 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005444:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005446:	f7fe ffd3 	bl	80043f0 <HAL_GetTick>
 800544a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800544c:	e01b      	b.n	8005486 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800544e:	f7fe ffcf 	bl	80043f0 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b19      	cmp	r3, #25
 800545a:	d914      	bls.n	8005486 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b20      	cmp	r3, #32
 8005492:	d1dc      	bne.n	800544e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d003      	beq.n	80054aa <I2C_IsErrorOccurred+0xfa>
 80054a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d09d      	beq.n	80053e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2220      	movs	r2, #32
 80054b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	f043 0304 	orr.w	r3, r3, #4
 80054c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	f043 0308 	orr.w	r3, r3, #8
 8005502:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800550c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800552e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01c      	beq.n	8005578 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff fe56 	bl	80051f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <I2C_IsErrorOccurred+0x1d4>)
 8005550:	400b      	ands	r3, r1
 8005552:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	431a      	orrs	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800557c:	4618      	mov	r0, r3
 800557e:	3728      	adds	r7, #40	; 0x28
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	fe00e800 	.word	0xfe00e800

08005588 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	460b      	mov	r3, r1
 8005594:	817b      	strh	r3, [r7, #10]
 8005596:	4613      	mov	r3, r2
 8005598:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800559a:	897b      	ldrh	r3, [r7, #10]
 800559c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055a0:	7a7b      	ldrb	r3, [r7, #9]
 80055a2:	041b      	lsls	r3, r3, #16
 80055a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	0d5b      	lsrs	r3, r3, #21
 80055c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055c6:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <I2C_TransferConfig+0x60>)
 80055c8:	430b      	orrs	r3, r1
 80055ca:	43db      	mvns	r3, r3
 80055cc:	ea02 0103 	and.w	r1, r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	03ff63ff 	.word	0x03ff63ff

080055ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d138      	bne.n	8005674 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800560c:	2302      	movs	r3, #2
 800560e:	e032      	b.n	8005676 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2224      	movs	r2, #36	; 0x24
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800563e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	e000      	b.n	8005676 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005674:	2302      	movs	r3, #2
  }
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b20      	cmp	r3, #32
 8005696:	d139      	bne.n	800570c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e033      	b.n	800570e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2224      	movs	r2, #36	; 0x24
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0201 	bic.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	e000      	b.n	800570e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
  }
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <HAL_PWREx_GetVoltageRange+0x18>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40007000 	.word	0x40007000

08005738 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005746:	d130      	bne.n	80057aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005748:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005754:	d038      	beq.n	80057c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005756:	4b20      	ldr	r3, [pc, #128]	; (80057d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800575e:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005764:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005766:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2232      	movs	r2, #50	; 0x32
 800576c:	fb02 f303 	mul.w	r3, r2, r3
 8005770:	4a1b      	ldr	r2, [pc, #108]	; (80057e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	0c9b      	lsrs	r3, r3, #18
 8005778:	3301      	adds	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800577c:	e002      	b.n	8005784 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3b01      	subs	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005784:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005790:	d102      	bne.n	8005798 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f2      	bne.n	800577e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a4:	d110      	bne.n	80057c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e00f      	b.n	80057ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80057aa:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b6:	d007      	beq.n	80057c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057c0:	4a05      	ldr	r2, [pc, #20]	; (80057d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40007000 	.word	0x40007000
 80057dc:	20000000 	.word	0x20000000
 80057e0:	431bde83 	.word	0x431bde83

080057e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e3ca      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057f6:	4b97      	ldr	r3, [pc, #604]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005800:	4b94      	ldr	r3, [pc, #592]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 80e4 	beq.w	80059e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_RCC_OscConfig+0x4a>
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b0c      	cmp	r3, #12
 8005822:	f040 808b 	bne.w	800593c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b01      	cmp	r3, #1
 800582a:	f040 8087 	bne.w	800593c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800582e:	4b89      	ldr	r3, [pc, #548]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_RCC_OscConfig+0x62>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e3a2      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1a      	ldr	r2, [r3, #32]
 800584a:	4b82      	ldr	r3, [pc, #520]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <HAL_RCC_OscConfig+0x7c>
 8005856:	4b7f      	ldr	r3, [pc, #508]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800585e:	e005      	b.n	800586c <HAL_RCC_OscConfig+0x88>
 8005860:	4b7c      	ldr	r3, [pc, #496]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800586c:	4293      	cmp	r3, r2
 800586e:	d223      	bcs.n	80058b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fd87 	bl	8006388 <RCC_SetFlashLatencyFromMSIRange>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e383      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005884:	4b73      	ldr	r3, [pc, #460]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a72      	ldr	r2, [pc, #456]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 800588a:	f043 0308 	orr.w	r3, r3, #8
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	4b70      	ldr	r3, [pc, #448]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	496d      	ldr	r1, [pc, #436]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058a2:	4b6c      	ldr	r3, [pc, #432]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	021b      	lsls	r3, r3, #8
 80058b0:	4968      	ldr	r1, [pc, #416]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	604b      	str	r3, [r1, #4]
 80058b6:	e025      	b.n	8005904 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058b8:	4b66      	ldr	r3, [pc, #408]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a65      	ldr	r2, [pc, #404]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80058be:	f043 0308 	orr.w	r3, r3, #8
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	4b63      	ldr	r3, [pc, #396]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	4960      	ldr	r1, [pc, #384]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058d6:	4b5f      	ldr	r3, [pc, #380]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	495b      	ldr	r1, [pc, #364]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fd47 	bl	8006388 <RCC_SetFlashLatencyFromMSIRange>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e343      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005904:	f000 fc4a 	bl	800619c <HAL_RCC_GetSysClockFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b52      	ldr	r3, [pc, #328]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	4950      	ldr	r1, [pc, #320]	; (8005a58 <HAL_RCC_OscConfig+0x274>)
 8005916:	5ccb      	ldrb	r3, [r1, r3]
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	4a4e      	ldr	r2, [pc, #312]	; (8005a5c <HAL_RCC_OscConfig+0x278>)
 8005922:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005924:	4b4e      	ldr	r3, [pc, #312]	; (8005a60 <HAL_RCC_OscConfig+0x27c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7fd fd9d 	bl	8003468 <HAL_InitTick>
 800592e:	4603      	mov	r3, r0
 8005930:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d052      	beq.n	80059de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	e327      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d032      	beq.n	80059aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005944:	4b43      	ldr	r3, [pc, #268]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a42      	ldr	r2, [pc, #264]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005950:	f7fe fd4e 	bl	80043f0 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005958:	f7fe fd4a 	bl	80043f0 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e310      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800596a:	4b3a      	ldr	r3, [pc, #232]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005976:	4b37      	ldr	r3, [pc, #220]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a36      	ldr	r2, [pc, #216]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 800597c:	f043 0308 	orr.w	r3, r3, #8
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	4b34      	ldr	r3, [pc, #208]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	4931      	ldr	r1, [pc, #196]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005990:	4313      	orrs	r3, r2
 8005992:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005994:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	492c      	ldr	r1, [pc, #176]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	604b      	str	r3, [r1, #4]
 80059a8:	e01a      	b.n	80059e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059aa:	4b2a      	ldr	r3, [pc, #168]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a29      	ldr	r2, [pc, #164]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059b6:	f7fe fd1b 	bl	80043f0 <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059be:	f7fe fd17 	bl	80043f0 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e2dd      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059d0:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f0      	bne.n	80059be <HAL_RCC_OscConfig+0x1da>
 80059dc:	e000      	b.n	80059e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d074      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d005      	beq.n	80059fe <HAL_RCC_OscConfig+0x21a>
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d10e      	bne.n	8005a16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d10b      	bne.n	8005a16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059fe:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d064      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x2f0>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d160      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e2ba      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_OscConfig+0x24a>
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0b      	ldr	r2, [pc, #44]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	e026      	b.n	8005a7c <HAL_RCC_OscConfig+0x298>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a36:	d115      	bne.n	8005a64 <HAL_RCC_OscConfig+0x280>
 8005a38:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a05      	ldr	r2, [pc, #20]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	4b03      	ldr	r3, [pc, #12]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a02      	ldr	r2, [pc, #8]	; (8005a54 <HAL_RCC_OscConfig+0x270>)
 8005a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	e014      	b.n	8005a7c <HAL_RCC_OscConfig+0x298>
 8005a52:	bf00      	nop
 8005a54:	40021000 	.word	0x40021000
 8005a58:	0800aefc 	.word	0x0800aefc
 8005a5c:	20000000 	.word	0x20000000
 8005a60:	20004018 	.word	0x20004018
 8005a64:	4ba0      	ldr	r3, [pc, #640]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a9f      	ldr	r2, [pc, #636]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	4b9d      	ldr	r3, [pc, #628]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a9c      	ldr	r2, [pc, #624]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d013      	beq.n	8005aac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fe fcb4 	bl	80043f0 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a8c:	f7fe fcb0 	bl	80043f0 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b64      	cmp	r3, #100	; 0x64
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e276      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a9e:	4b92      	ldr	r3, [pc, #584]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0x2a8>
 8005aaa:	e014      	b.n	8005ad6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fe fca0 	bl	80043f0 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab4:	f7fe fc9c 	bl	80043f0 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b64      	cmp	r3, #100	; 0x64
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e262      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ac6:	4b88      	ldr	r3, [pc, #544]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x2d0>
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d060      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d005      	beq.n	8005af4 <HAL_RCC_OscConfig+0x310>
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b0c      	cmp	r3, #12
 8005aec:	d119      	bne.n	8005b22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d116      	bne.n	8005b22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005af4:	4b7c      	ldr	r3, [pc, #496]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <HAL_RCC_OscConfig+0x328>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e23f      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b0c:	4b76      	ldr	r3, [pc, #472]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	061b      	lsls	r3, r3, #24
 8005b1a:	4973      	ldr	r1, [pc, #460]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b20:	e040      	b.n	8005ba4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d023      	beq.n	8005b72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b2a:	4b6f      	ldr	r3, [pc, #444]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a6e      	ldr	r2, [pc, #440]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b36:	f7fe fc5b 	bl	80043f0 <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b3e:	f7fe fc57 	bl	80043f0 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e21d      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b50:	4b65      	ldr	r3, [pc, #404]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0f0      	beq.n	8005b3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b5c:	4b62      	ldr	r3, [pc, #392]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	061b      	lsls	r3, r3, #24
 8005b6a:	495f      	ldr	r1, [pc, #380]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	604b      	str	r3, [r1, #4]
 8005b70:	e018      	b.n	8005ba4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b72:	4b5d      	ldr	r3, [pc, #372]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a5c      	ldr	r2, [pc, #368]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7e:	f7fe fc37 	bl	80043f0 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b86:	f7fe fc33 	bl	80043f0 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e1f9      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b98:	4b53      	ldr	r3, [pc, #332]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1f0      	bne.n	8005b86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d03c      	beq.n	8005c2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01c      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bb8:	4b4b      	ldr	r3, [pc, #300]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bbe:	4a4a      	ldr	r2, [pc, #296]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc8:	f7fe fc12 	bl	80043f0 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd0:	f7fe fc0e 	bl	80043f0 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e1d4      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005be2:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0ef      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x3ec>
 8005bf0:	e01b      	b.n	8005c2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf2:	4b3d      	ldr	r3, [pc, #244]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf8:	4a3b      	ldr	r2, [pc, #236]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c02:	f7fe fbf5 	bl	80043f0 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c0a:	f7fe fbf1 	bl	80043f0 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e1b7      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c1c:	4b32      	ldr	r3, [pc, #200]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1ef      	bne.n	8005c0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 80a6 	beq.w	8005d84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10d      	bne.n	8005c64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c48:	4b27      	ldr	r3, [pc, #156]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4c:	4a26      	ldr	r2, [pc, #152]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c52:	6593      	str	r3, [r2, #88]	; 0x58
 8005c54:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c60:	2301      	movs	r3, #1
 8005c62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c64:	4b21      	ldr	r3, [pc, #132]	; (8005cec <HAL_RCC_OscConfig+0x508>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d118      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c70:	4b1e      	ldr	r3, [pc, #120]	; (8005cec <HAL_RCC_OscConfig+0x508>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1d      	ldr	r2, [pc, #116]	; (8005cec <HAL_RCC_OscConfig+0x508>)
 8005c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c7c:	f7fe fbb8 	bl	80043f0 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c84:	f7fe fbb4 	bl	80043f0 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e17a      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <HAL_RCC_OscConfig+0x508>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f0      	beq.n	8005c84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d108      	bne.n	8005cbc <HAL_RCC_OscConfig+0x4d8>
 8005caa:	4b0f      	ldr	r3, [pc, #60]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb0:	4a0d      	ldr	r2, [pc, #52]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cba:	e029      	b.n	8005d10 <HAL_RCC_OscConfig+0x52c>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b05      	cmp	r3, #5
 8005cc2:	d115      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x50c>
 8005cc4:	4b08      	ldr	r3, [pc, #32]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	4a07      	ldr	r2, [pc, #28]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005ccc:	f043 0304 	orr.w	r3, r3, #4
 8005cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cd4:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cda:	4a03      	ldr	r2, [pc, #12]	; (8005ce8 <HAL_RCC_OscConfig+0x504>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ce4:	e014      	b.n	8005d10 <HAL_RCC_OscConfig+0x52c>
 8005ce6:	bf00      	nop
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	40007000 	.word	0x40007000
 8005cf0:	4b9c      	ldr	r3, [pc, #624]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	4a9b      	ldr	r2, [pc, #620]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d00:	4b98      	ldr	r3, [pc, #608]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	4a97      	ldr	r2, [pc, #604]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005d08:	f023 0304 	bic.w	r3, r3, #4
 8005d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d016      	beq.n	8005d46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d18:	f7fe fb6a 	bl	80043f0 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d20:	f7fe fb66 	bl	80043f0 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e12a      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d36:	4b8b      	ldr	r3, [pc, #556]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0ed      	beq.n	8005d20 <HAL_RCC_OscConfig+0x53c>
 8005d44:	e015      	b.n	8005d72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d46:	f7fe fb53 	bl	80043f0 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d4c:	e00a      	b.n	8005d64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4e:	f7fe fb4f 	bl	80043f0 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e113      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d64:	4b7f      	ldr	r3, [pc, #508]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1ed      	bne.n	8005d4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d72:	7ffb      	ldrb	r3, [r7, #31]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d105      	bne.n	8005d84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d78:	4b7a      	ldr	r3, [pc, #488]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7c:	4a79      	ldr	r2, [pc, #484]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 80fe 	beq.w	8005f8a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	f040 80d0 	bne.w	8005f38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d98:	4b72      	ldr	r3, [pc, #456]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f003 0203 	and.w	r2, r3, #3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d130      	bne.n	8005e0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	3b01      	subs	r3, #1
 8005db8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d127      	bne.n	8005e0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d11f      	bne.n	8005e0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dd8:	2a07      	cmp	r2, #7
 8005dda:	bf14      	ite	ne
 8005ddc:	2201      	movne	r2, #1
 8005dde:	2200      	moveq	r2, #0
 8005de0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d113      	bne.n	8005e0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	3b01      	subs	r3, #1
 8005df4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d109      	bne.n	8005e0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	3b01      	subs	r3, #1
 8005e08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d06e      	beq.n	8005eec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d069      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e14:	4b53      	ldr	r3, [pc, #332]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e20:	4b50      	ldr	r3, [pc, #320]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0ad      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e30:	4b4c      	ldr	r3, [pc, #304]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a4b      	ldr	r2, [pc, #300]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e3c:	f7fe fad8 	bl	80043f0 <HAL_GetTick>
 8005e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e44:	f7fe fad4 	bl	80043f0 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e09a      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e56:	4b43      	ldr	r3, [pc, #268]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e62:	4b40      	ldr	r3, [pc, #256]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	4b40      	ldr	r3, [pc, #256]	; (8005f68 <HAL_RCC_OscConfig+0x784>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e72:	3a01      	subs	r2, #1
 8005e74:	0112      	lsls	r2, r2, #4
 8005e76:	4311      	orrs	r1, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e7c:	0212      	lsls	r2, r2, #8
 8005e7e:	4311      	orrs	r1, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e84:	0852      	lsrs	r2, r2, #1
 8005e86:	3a01      	subs	r2, #1
 8005e88:	0552      	lsls	r2, r2, #21
 8005e8a:	4311      	orrs	r1, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e90:	0852      	lsrs	r2, r2, #1
 8005e92:	3a01      	subs	r2, #1
 8005e94:	0652      	lsls	r2, r2, #25
 8005e96:	4311      	orrs	r1, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e9c:	0912      	lsrs	r2, r2, #4
 8005e9e:	0452      	lsls	r2, r2, #17
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	4930      	ldr	r1, [pc, #192]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ea8:	4b2e      	ldr	r3, [pc, #184]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a2d      	ldr	r2, [pc, #180]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005eb4:	4b2b      	ldr	r3, [pc, #172]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4a2a      	ldr	r2, [pc, #168]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ebe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ec0:	f7fe fa96 	bl	80043f0 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec8:	f7fe fa92 	bl	80043f0 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e058      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eda:	4b22      	ldr	r3, [pc, #136]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ee6:	e050      	b.n	8005f8a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e04f      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eec:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d148      	bne.n	8005f8a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f04:	4b17      	ldr	r3, [pc, #92]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f10:	f7fe fa6e 	bl	80043f0 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f18:	f7fe fa6a 	bl	80043f0 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e030      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f2a:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0x734>
 8005f36:	e028      	b.n	8005f8a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b0c      	cmp	r3, #12
 8005f3c:	d023      	beq.n	8005f86 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a08      	ldr	r2, [pc, #32]	; (8005f64 <HAL_RCC_OscConfig+0x780>)
 8005f44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4a:	f7fe fa51 	bl	80043f0 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f50:	e00c      	b.n	8005f6c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f52:	f7fe fa4d 	bl	80043f0 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d905      	bls.n	8005f6c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e013      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
 8005f64:	40021000 	.word	0x40021000
 8005f68:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f6c:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <HAL_RCC_OscConfig+0x7b0>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1ec      	bne.n	8005f52 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f78:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <HAL_RCC_OscConfig+0x7b0>)
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	4905      	ldr	r1, [pc, #20]	; (8005f94 <HAL_RCC_OscConfig+0x7b0>)
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <HAL_RCC_OscConfig+0x7b4>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	60cb      	str	r3, [r1, #12]
 8005f84:	e001      	b.n	8005f8a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40021000 	.word	0x40021000
 8005f98:	feeefffc 	.word	0xfeeefffc

08005f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0e7      	b.n	8006180 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb0:	4b75      	ldr	r3, [pc, #468]	; (8006188 <HAL_RCC_ClockConfig+0x1ec>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d910      	bls.n	8005fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fbe:	4b72      	ldr	r3, [pc, #456]	; (8006188 <HAL_RCC_ClockConfig+0x1ec>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f023 0207 	bic.w	r2, r3, #7
 8005fc6:	4970      	ldr	r1, [pc, #448]	; (8006188 <HAL_RCC_ClockConfig+0x1ec>)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fce:	4b6e      	ldr	r3, [pc, #440]	; (8006188 <HAL_RCC_ClockConfig+0x1ec>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d001      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0cf      	b.n	8006180 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d010      	beq.n	800600e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	4b66      	ldr	r3, [pc, #408]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d908      	bls.n	800600e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ffc:	4b63      	ldr	r3, [pc, #396]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4960      	ldr	r1, [pc, #384]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 800600a:	4313      	orrs	r3, r2
 800600c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d04c      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b03      	cmp	r3, #3
 8006020:	d107      	bne.n	8006032 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006022:	4b5a      	ldr	r3, [pc, #360]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d121      	bne.n	8006072 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e0a6      	b.n	8006180 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d107      	bne.n	800604a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800603a:	4b54      	ldr	r3, [pc, #336]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d115      	bne.n	8006072 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e09a      	b.n	8006180 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d107      	bne.n	8006062 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006052:	4b4e      	ldr	r3, [pc, #312]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e08e      	b.n	8006180 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006062:	4b4a      	ldr	r3, [pc, #296]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e086      	b.n	8006180 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006072:	4b46      	ldr	r3, [pc, #280]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f023 0203 	bic.w	r2, r3, #3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	4943      	ldr	r1, [pc, #268]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 8006080:	4313      	orrs	r3, r2
 8006082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006084:	f7fe f9b4 	bl	80043f0 <HAL_GetTick>
 8006088:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608a:	e00a      	b.n	80060a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800608c:	f7fe f9b0 	bl	80043f0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f241 3288 	movw	r2, #5000	; 0x1388
 800609a:	4293      	cmp	r3, r2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e06e      	b.n	8006180 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a2:	4b3a      	ldr	r3, [pc, #232]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 020c 	and.w	r2, r3, #12
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d1eb      	bne.n	800608c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d010      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	4b31      	ldr	r3, [pc, #196]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d208      	bcs.n	80060e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d0:	4b2e      	ldr	r3, [pc, #184]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	492b      	ldr	r1, [pc, #172]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060e2:	4b29      	ldr	r3, [pc, #164]	; (8006188 <HAL_RCC_ClockConfig+0x1ec>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d210      	bcs.n	8006112 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f0:	4b25      	ldr	r3, [pc, #148]	; (8006188 <HAL_RCC_ClockConfig+0x1ec>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f023 0207 	bic.w	r2, r3, #7
 80060f8:	4923      	ldr	r1, [pc, #140]	; (8006188 <HAL_RCC_ClockConfig+0x1ec>)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006100:	4b21      	ldr	r3, [pc, #132]	; (8006188 <HAL_RCC_ClockConfig+0x1ec>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d001      	beq.n	8006112 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e036      	b.n	8006180 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800611e:	4b1b      	ldr	r3, [pc, #108]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	4918      	ldr	r1, [pc, #96]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 800612c:	4313      	orrs	r3, r2
 800612e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d009      	beq.n	8006150 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800613c:	4b13      	ldr	r3, [pc, #76]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4910      	ldr	r1, [pc, #64]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 800614c:	4313      	orrs	r3, r2
 800614e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006150:	f000 f824 	bl	800619c <HAL_RCC_GetSysClockFreq>
 8006154:	4602      	mov	r2, r0
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <HAL_RCC_ClockConfig+0x1f0>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	091b      	lsrs	r3, r3, #4
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	490b      	ldr	r1, [pc, #44]	; (8006190 <HAL_RCC_ClockConfig+0x1f4>)
 8006162:	5ccb      	ldrb	r3, [r1, r3]
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	4a09      	ldr	r2, [pc, #36]	; (8006194 <HAL_RCC_ClockConfig+0x1f8>)
 800616e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006170:	4b09      	ldr	r3, [pc, #36]	; (8006198 <HAL_RCC_ClockConfig+0x1fc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4618      	mov	r0, r3
 8006176:	f7fd f977 	bl	8003468 <HAL_InitTick>
 800617a:	4603      	mov	r3, r0
 800617c:	72fb      	strb	r3, [r7, #11]

  return status;
 800617e:	7afb      	ldrb	r3, [r7, #11]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40022000 	.word	0x40022000
 800618c:	40021000 	.word	0x40021000
 8006190:	0800aefc 	.word	0x0800aefc
 8006194:	20000000 	.word	0x20000000
 8006198:	20004018 	.word	0x20004018

0800619c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800619c:	b480      	push	{r7}
 800619e:	b089      	sub	sp, #36	; 0x24
 80061a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061aa:	4b3e      	ldr	r3, [pc, #248]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061b4:	4b3b      	ldr	r3, [pc, #236]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_RCC_GetSysClockFreq+0x34>
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2b0c      	cmp	r3, #12
 80061c8:	d121      	bne.n	800620e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d11e      	bne.n	800620e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061d0:	4b34      	ldr	r3, [pc, #208]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d107      	bne.n	80061ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061dc:	4b31      	ldr	r3, [pc, #196]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80061de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	e005      	b.n	80061f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061ec:	4b2d      	ldr	r3, [pc, #180]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061f8:	4a2b      	ldr	r2, [pc, #172]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006200:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10d      	bne.n	8006224 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800620c:	e00a      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b04      	cmp	r3, #4
 8006212:	d102      	bne.n	800621a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006214:	4b25      	ldr	r3, [pc, #148]	; (80062ac <HAL_RCC_GetSysClockFreq+0x110>)
 8006216:	61bb      	str	r3, [r7, #24]
 8006218:	e004      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b08      	cmp	r3, #8
 800621e:	d101      	bne.n	8006224 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006220:	4b23      	ldr	r3, [pc, #140]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006222:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2b0c      	cmp	r3, #12
 8006228:	d134      	bne.n	8006294 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800622a:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d003      	beq.n	8006242 <HAL_RCC_GetSysClockFreq+0xa6>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b03      	cmp	r3, #3
 800623e:	d003      	beq.n	8006248 <HAL_RCC_GetSysClockFreq+0xac>
 8006240:	e005      	b.n	800624e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006242:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <HAL_RCC_GetSysClockFreq+0x110>)
 8006244:	617b      	str	r3, [r7, #20]
      break;
 8006246:	e005      	b.n	8006254 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006248:	4b19      	ldr	r3, [pc, #100]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800624a:	617b      	str	r3, [r7, #20]
      break;
 800624c:	e002      	b.n	8006254 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	617b      	str	r3, [r7, #20]
      break;
 8006252:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006254:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	3301      	adds	r3, #1
 8006260:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006262:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	0a1b      	lsrs	r3, r3, #8
 8006268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	fb03 f202 	mul.w	r2, r3, r2
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	fbb2 f3f3 	udiv	r3, r2, r3
 8006278:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800627a:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	0e5b      	lsrs	r3, r3, #25
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	3301      	adds	r3, #1
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006294:	69bb      	ldr	r3, [r7, #24]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3724      	adds	r7, #36	; 0x24
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40021000 	.word	0x40021000
 80062a8:	0800af14 	.word	0x0800af14
 80062ac:	00f42400 	.word	0x00f42400
 80062b0:	007a1200 	.word	0x007a1200

080062b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80062ba:	681b      	ldr	r3, [r3, #0]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	20000000 	.word	0x20000000

080062cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062d0:	f7ff fff0 	bl	80062b4 <HAL_RCC_GetHCLKFreq>
 80062d4:	4602      	mov	r2, r0
 80062d6:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	4904      	ldr	r1, [pc, #16]	; (80062f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062e2:	5ccb      	ldrb	r3, [r1, r3]
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40021000 	.word	0x40021000
 80062f4:	0800af0c 	.word	0x0800af0c

080062f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062fc:	f7ff ffda 	bl	80062b4 <HAL_RCC_GetHCLKFreq>
 8006300:	4602      	mov	r2, r0
 8006302:	4b06      	ldr	r3, [pc, #24]	; (800631c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	0adb      	lsrs	r3, r3, #11
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	4904      	ldr	r1, [pc, #16]	; (8006320 <HAL_RCC_GetPCLK2Freq+0x28>)
 800630e:	5ccb      	ldrb	r3, [r1, r3]
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006318:	4618      	mov	r0, r3
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40021000 	.word	0x40021000
 8006320:	0800af0c 	.word	0x0800af0c

08006324 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	220f      	movs	r2, #15
 8006332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006334:	4b12      	ldr	r3, [pc, #72]	; (8006380 <HAL_RCC_GetClockConfig+0x5c>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0203 	and.w	r2, r3, #3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006340:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <HAL_RCC_GetClockConfig+0x5c>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800634c:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <HAL_RCC_GetClockConfig+0x5c>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006358:	4b09      	ldr	r3, [pc, #36]	; (8006380 <HAL_RCC_GetClockConfig+0x5c>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	08db      	lsrs	r3, r3, #3
 800635e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006366:	4b07      	ldr	r3, [pc, #28]	; (8006384 <HAL_RCC_GetClockConfig+0x60>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0207 	and.w	r2, r3, #7
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	601a      	str	r2, [r3, #0]
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40021000 	.word	0x40021000
 8006384:	40022000 	.word	0x40022000

08006388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006394:	4b2a      	ldr	r3, [pc, #168]	; (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063a0:	f7ff f9bc 	bl	800571c <HAL_PWREx_GetVoltageRange>
 80063a4:	6178      	str	r0, [r7, #20]
 80063a6:	e014      	b.n	80063d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063a8:	4b25      	ldr	r3, [pc, #148]	; (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	4a24      	ldr	r2, [pc, #144]	; (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b2:	6593      	str	r3, [r2, #88]	; 0x58
 80063b4:	4b22      	ldr	r3, [pc, #136]	; (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063c0:	f7ff f9ac 	bl	800571c <HAL_PWREx_GetVoltageRange>
 80063c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063c6:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ca:	4a1d      	ldr	r2, [pc, #116]	; (8006440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d8:	d10b      	bne.n	80063f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b80      	cmp	r3, #128	; 0x80
 80063de:	d919      	bls.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2ba0      	cmp	r3, #160	; 0xa0
 80063e4:	d902      	bls.n	80063ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063e6:	2302      	movs	r3, #2
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	e013      	b.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063ec:	2301      	movs	r3, #1
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	e010      	b.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d902      	bls.n	80063fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80063f8:	2303      	movs	r3, #3
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	e00a      	b.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b80      	cmp	r3, #128	; 0x80
 8006402:	d102      	bne.n	800640a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006404:	2302      	movs	r3, #2
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e004      	b.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b70      	cmp	r3, #112	; 0x70
 800640e:	d101      	bne.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006410:	2301      	movs	r3, #1
 8006412:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f023 0207 	bic.w	r2, r3, #7
 800641c:	4909      	ldr	r1, [pc, #36]	; (8006444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006424:	4b07      	ldr	r3, [pc, #28]	; (8006444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	429a      	cmp	r2, r3
 8006430:	d001      	beq.n	8006436 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40021000 	.word	0x40021000
 8006444:	40022000 	.word	0x40022000

08006448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006450:	2300      	movs	r3, #0
 8006452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006454:	2300      	movs	r3, #0
 8006456:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006460:	2b00      	cmp	r3, #0
 8006462:	d041      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006468:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800646c:	d02a      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800646e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006472:	d824      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006474:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006478:	d008      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800647a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800647e:	d81e      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006488:	d010      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800648a:	e018      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800648c:	4b86      	ldr	r3, [pc, #536]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	4a85      	ldr	r2, [pc, #532]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006496:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006498:	e015      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3304      	adds	r3, #4
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fabb 	bl	8006a1c <RCCEx_PLLSAI1_Config>
 80064a6:	4603      	mov	r3, r0
 80064a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064aa:	e00c      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3320      	adds	r3, #32
 80064b0:	2100      	movs	r1, #0
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fba6 	bl	8006c04 <RCCEx_PLLSAI2_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064bc:	e003      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	74fb      	strb	r3, [r7, #19]
      break;
 80064c2:	e000      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80064c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c6:	7cfb      	ldrb	r3, [r7, #19]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064cc:	4b76      	ldr	r3, [pc, #472]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064da:	4973      	ldr	r1, [pc, #460]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80064e2:	e001      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d041      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064fc:	d02a      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80064fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006502:	d824      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006508:	d008      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800650a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800650e:	d81e      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006518:	d010      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800651a:	e018      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800651c:	4b62      	ldr	r3, [pc, #392]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	4a61      	ldr	r2, [pc, #388]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006526:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006528:	e015      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3304      	adds	r3, #4
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fa73 	bl	8006a1c <RCCEx_PLLSAI1_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800653a:	e00c      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3320      	adds	r3, #32
 8006540:	2100      	movs	r1, #0
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fb5e 	bl	8006c04 <RCCEx_PLLSAI2_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800654c:	e003      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	74fb      	strb	r3, [r7, #19]
      break;
 8006552:	e000      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006556:	7cfb      	ldrb	r3, [r7, #19]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800655c:	4b52      	ldr	r3, [pc, #328]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800655e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006562:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800656a:	494f      	ldr	r1, [pc, #316]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006572:	e001      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80a0 	beq.w	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006586:	2300      	movs	r3, #0
 8006588:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800658a:	4b47      	ldr	r3, [pc, #284]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800658c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800659a:	2300      	movs	r3, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00d      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065a0:	4b41      	ldr	r3, [pc, #260]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a4:	4a40      	ldr	r2, [pc, #256]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065aa:	6593      	str	r3, [r2, #88]	; 0x58
 80065ac:	4b3e      	ldr	r3, [pc, #248]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065b8:	2301      	movs	r3, #1
 80065ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065bc:	4b3b      	ldr	r3, [pc, #236]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a3a      	ldr	r2, [pc, #232]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065c8:	f7fd ff12 	bl	80043f0 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065ce:	e009      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d0:	f7fd ff0e 	bl	80043f0 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d902      	bls.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	74fb      	strb	r3, [r7, #19]
        break;
 80065e2:	e005      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065e4:	4b31      	ldr	r3, [pc, #196]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0ef      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80065f0:	7cfb      	ldrb	r3, [r7, #19]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d15c      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065f6:	4b2c      	ldr	r3, [pc, #176]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006600:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01f      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	429a      	cmp	r2, r3
 8006612:	d019      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006614:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006620:	4b21      	ldr	r3, [pc, #132]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006626:	4a20      	ldr	r2, [pc, #128]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800662c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006630:	4b1d      	ldr	r3, [pc, #116]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	4a1c      	ldr	r2, [pc, #112]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006640:	4a19      	ldr	r2, [pc, #100]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d016      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006652:	f7fd fecd 	bl	80043f0 <HAL_GetTick>
 8006656:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006658:	e00b      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800665a:	f7fd fec9 	bl	80043f0 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	f241 3288 	movw	r2, #5000	; 0x1388
 8006668:	4293      	cmp	r3, r2
 800666a:	d902      	bls.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	74fb      	strb	r3, [r7, #19]
            break;
 8006670:	e006      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006672:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0ec      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006680:	7cfb      	ldrb	r3, [r7, #19]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10c      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006686:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006696:	4904      	ldr	r1, [pc, #16]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006698:	4313      	orrs	r3, r2
 800669a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800669e:	e009      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066a0:	7cfb      	ldrb	r3, [r7, #19]
 80066a2:	74bb      	strb	r3, [r7, #18]
 80066a4:	e006      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80066a6:	bf00      	nop
 80066a8:	40021000 	.word	0x40021000
 80066ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b0:	7cfb      	ldrb	r3, [r7, #19]
 80066b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066b4:	7c7b      	ldrb	r3, [r7, #17]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d105      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066ba:	4b9e      	ldr	r3, [pc, #632]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066be:	4a9d      	ldr	r2, [pc, #628]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066d2:	4b98      	ldr	r3, [pc, #608]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d8:	f023 0203 	bic.w	r2, r3, #3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	4994      	ldr	r1, [pc, #592]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066f4:	4b8f      	ldr	r3, [pc, #572]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fa:	f023 020c 	bic.w	r2, r3, #12
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006702:	498c      	ldr	r1, [pc, #560]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006716:	4b87      	ldr	r3, [pc, #540]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	4983      	ldr	r1, [pc, #524]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006738:	4b7e      	ldr	r3, [pc, #504]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006746:	497b      	ldr	r1, [pc, #492]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800675a:	4b76      	ldr	r3, [pc, #472]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006768:	4972      	ldr	r1, [pc, #456]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800676a:	4313      	orrs	r3, r2
 800676c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800677c:	4b6d      	ldr	r3, [pc, #436]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800677e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	496a      	ldr	r1, [pc, #424]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800678c:	4313      	orrs	r3, r2
 800678e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800679e:	4b65      	ldr	r3, [pc, #404]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ac:	4961      	ldr	r1, [pc, #388]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067c0:	4b5c      	ldr	r3, [pc, #368]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ce:	4959      	ldr	r1, [pc, #356]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067e2:	4b54      	ldr	r3, [pc, #336]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f0:	4950      	ldr	r1, [pc, #320]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006804:	4b4b      	ldr	r3, [pc, #300]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006812:	4948      	ldr	r1, [pc, #288]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006826:	4b43      	ldr	r3, [pc, #268]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006834:	493f      	ldr	r1, [pc, #252]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d028      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006848:	4b3a      	ldr	r3, [pc, #232]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800684a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006856:	4937      	ldr	r1, [pc, #220]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006858:	4313      	orrs	r3, r2
 800685a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006866:	d106      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006868:	4b32      	ldr	r3, [pc, #200]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4a31      	ldr	r2, [pc, #196]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800686e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006872:	60d3      	str	r3, [r2, #12]
 8006874:	e011      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800687e:	d10c      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	2101      	movs	r1, #1
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f8c8 	bl	8006a1c <RCCEx_PLLSAI1_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006890:	7cfb      	ldrb	r3, [r7, #19]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006896:	7cfb      	ldrb	r3, [r7, #19]
 8006898:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d028      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068a6:	4b23      	ldr	r3, [pc, #140]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b4:	491f      	ldr	r1, [pc, #124]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c4:	d106      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068c6:	4b1b      	ldr	r3, [pc, #108]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068d0:	60d3      	str	r3, [r2, #12]
 80068d2:	e011      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068dc:	d10c      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3304      	adds	r3, #4
 80068e2:	2101      	movs	r1, #1
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 f899 	bl	8006a1c <RCCEx_PLLSAI1_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068ee:	7cfb      	ldrb	r3, [r7, #19]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80068f4:	7cfb      	ldrb	r3, [r7, #19]
 80068f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d02b      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006904:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006912:	4908      	ldr	r1, [pc, #32]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006914:	4313      	orrs	r3, r2
 8006916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800691e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006922:	d109      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006924:	4b03      	ldr	r3, [pc, #12]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4a02      	ldr	r2, [pc, #8]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800692a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800692e:	60d3      	str	r3, [r2, #12]
 8006930:	e014      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006932:	bf00      	nop
 8006934:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006940:	d10c      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3304      	adds	r3, #4
 8006946:	2101      	movs	r1, #1
 8006948:	4618      	mov	r0, r3
 800694a:	f000 f867 	bl	8006a1c <RCCEx_PLLSAI1_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006952:	7cfb      	ldrb	r3, [r7, #19]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006958:	7cfb      	ldrb	r3, [r7, #19]
 800695a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d02f      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006968:	4b2b      	ldr	r3, [pc, #172]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006976:	4928      	ldr	r1, [pc, #160]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006986:	d10d      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3304      	adds	r3, #4
 800698c:	2102      	movs	r1, #2
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f844 	bl	8006a1c <RCCEx_PLLSAI1_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006998:	7cfb      	ldrb	r3, [r7, #19]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d014      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800699e:	7cfb      	ldrb	r3, [r7, #19]
 80069a0:	74bb      	strb	r3, [r7, #18]
 80069a2:	e011      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ac:	d10c      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3320      	adds	r3, #32
 80069b2:	2102      	movs	r1, #2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 f925 	bl	8006c04 <RCCEx_PLLSAI2_Config>
 80069ba:	4603      	mov	r3, r0
 80069bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069be:	7cfb      	ldrb	r3, [r7, #19]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80069c4:	7cfb      	ldrb	r3, [r7, #19]
 80069c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069d4:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e2:	490d      	ldr	r1, [pc, #52]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00b      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069f6:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a06:	4904      	ldr	r1, [pc, #16]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40021000 	.word	0x40021000

08006a1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a2a:	4b75      	ldr	r3, [pc, #468]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d018      	beq.n	8006a68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a36:	4b72      	ldr	r3, [pc, #456]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f003 0203 	and.w	r2, r3, #3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d10d      	bne.n	8006a62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
       ||
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d009      	beq.n	8006a62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a4e:	4b6c      	ldr	r3, [pc, #432]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	091b      	lsrs	r3, r3, #4
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d047      	beq.n	8006af2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	73fb      	strb	r3, [r7, #15]
 8006a66:	e044      	b.n	8006af2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d018      	beq.n	8006aa2 <RCCEx_PLLSAI1_Config+0x86>
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d825      	bhi.n	8006ac0 <RCCEx_PLLSAI1_Config+0xa4>
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d002      	beq.n	8006a7e <RCCEx_PLLSAI1_Config+0x62>
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d009      	beq.n	8006a90 <RCCEx_PLLSAI1_Config+0x74>
 8006a7c:	e020      	b.n	8006ac0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a7e:	4b60      	ldr	r3, [pc, #384]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d11d      	bne.n	8006ac6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a8e:	e01a      	b.n	8006ac6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a90:	4b5b      	ldr	r3, [pc, #364]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d116      	bne.n	8006aca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aa0:	e013      	b.n	8006aca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006aa2:	4b57      	ldr	r3, [pc, #348]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10f      	bne.n	8006ace <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006aae:	4b54      	ldr	r3, [pc, #336]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006abe:	e006      	b.n	8006ace <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac4:	e004      	b.n	8006ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ac6:	bf00      	nop
 8006ac8:	e002      	b.n	8006ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006aca:	bf00      	nop
 8006acc:	e000      	b.n	8006ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ace:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10d      	bne.n	8006af2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ad6:	4b4a      	ldr	r3, [pc, #296]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6819      	ldr	r1, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	430b      	orrs	r3, r1
 8006aec:	4944      	ldr	r1, [pc, #272]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d17d      	bne.n	8006bf4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006af8:	4b41      	ldr	r3, [pc, #260]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a40      	ldr	r2, [pc, #256]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006afe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b04:	f7fd fc74 	bl	80043f0 <HAL_GetTick>
 8006b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b0a:	e009      	b.n	8006b20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b0c:	f7fd fc70 	bl	80043f0 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d902      	bls.n	8006b20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b1e:	e005      	b.n	8006b2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b20:	4b37      	ldr	r3, [pc, #220]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1ef      	bne.n	8006b0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d160      	bne.n	8006bf4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d111      	bne.n	8006b5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b38:	4b31      	ldr	r3, [pc, #196]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6892      	ldr	r2, [r2, #8]
 8006b48:	0211      	lsls	r1, r2, #8
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	68d2      	ldr	r2, [r2, #12]
 8006b4e:	0912      	lsrs	r2, r2, #4
 8006b50:	0452      	lsls	r2, r2, #17
 8006b52:	430a      	orrs	r2, r1
 8006b54:	492a      	ldr	r1, [pc, #168]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	610b      	str	r3, [r1, #16]
 8006b5a:	e027      	b.n	8006bac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d112      	bne.n	8006b88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b62:	4b27      	ldr	r3, [pc, #156]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6892      	ldr	r2, [r2, #8]
 8006b72:	0211      	lsls	r1, r2, #8
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6912      	ldr	r2, [r2, #16]
 8006b78:	0852      	lsrs	r2, r2, #1
 8006b7a:	3a01      	subs	r2, #1
 8006b7c:	0552      	lsls	r2, r2, #21
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	491f      	ldr	r1, [pc, #124]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	610b      	str	r3, [r1, #16]
 8006b86:	e011      	b.n	8006bac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b88:	4b1d      	ldr	r3, [pc, #116]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6892      	ldr	r2, [r2, #8]
 8006b98:	0211      	lsls	r1, r2, #8
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6952      	ldr	r2, [r2, #20]
 8006b9e:	0852      	lsrs	r2, r2, #1
 8006ba0:	3a01      	subs	r2, #1
 8006ba2:	0652      	lsls	r2, r2, #25
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	4916      	ldr	r1, [pc, #88]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006bac:	4b14      	ldr	r3, [pc, #80]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a13      	ldr	r2, [pc, #76]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb8:	f7fd fc1a 	bl	80043f0 <HAL_GetTick>
 8006bbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bbe:	e009      	b.n	8006bd4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bc0:	f7fd fc16 	bl	80043f0 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d902      	bls.n	8006bd4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	73fb      	strb	r3, [r7, #15]
          break;
 8006bd2:	e005      	b.n	8006be0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0ef      	beq.n	8006bc0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006be6:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	4904      	ldr	r1, [pc, #16]	; (8006c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40021000 	.word	0x40021000

08006c04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c12:	4b6a      	ldr	r3, [pc, #424]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d018      	beq.n	8006c50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c1e:	4b67      	ldr	r3, [pc, #412]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0203 	and.w	r2, r3, #3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d10d      	bne.n	8006c4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
       ||
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d009      	beq.n	8006c4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006c36:	4b61      	ldr	r3, [pc, #388]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	091b      	lsrs	r3, r3, #4
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
       ||
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d047      	beq.n	8006cda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	73fb      	strb	r3, [r7, #15]
 8006c4e:	e044      	b.n	8006cda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d018      	beq.n	8006c8a <RCCEx_PLLSAI2_Config+0x86>
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d825      	bhi.n	8006ca8 <RCCEx_PLLSAI2_Config+0xa4>
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d002      	beq.n	8006c66 <RCCEx_PLLSAI2_Config+0x62>
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d009      	beq.n	8006c78 <RCCEx_PLLSAI2_Config+0x74>
 8006c64:	e020      	b.n	8006ca8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c66:	4b55      	ldr	r3, [pc, #340]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d11d      	bne.n	8006cae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c76:	e01a      	b.n	8006cae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c78:	4b50      	ldr	r3, [pc, #320]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d116      	bne.n	8006cb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c88:	e013      	b.n	8006cb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c8a:	4b4c      	ldr	r3, [pc, #304]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10f      	bne.n	8006cb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c96:	4b49      	ldr	r3, [pc, #292]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d109      	bne.n	8006cb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ca6:	e006      	b.n	8006cb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	73fb      	strb	r3, [r7, #15]
      break;
 8006cac:	e004      	b.n	8006cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006cae:	bf00      	nop
 8006cb0:	e002      	b.n	8006cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006cb2:	bf00      	nop
 8006cb4:	e000      	b.n	8006cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10d      	bne.n	8006cda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006cbe:	4b3f      	ldr	r3, [pc, #252]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6819      	ldr	r1, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	4939      	ldr	r1, [pc, #228]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d167      	bne.n	8006db0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006ce0:	4b36      	ldr	r3, [pc, #216]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a35      	ldr	r2, [pc, #212]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cec:	f7fd fb80 	bl	80043f0 <HAL_GetTick>
 8006cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cf2:	e009      	b.n	8006d08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006cf4:	f7fd fb7c 	bl	80043f0 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d902      	bls.n	8006d08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	73fb      	strb	r3, [r7, #15]
        break;
 8006d06:	e005      	b.n	8006d14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d08:	4b2c      	ldr	r3, [pc, #176]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1ef      	bne.n	8006cf4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d14a      	bne.n	8006db0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d111      	bne.n	8006d44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d20:	4b26      	ldr	r3, [pc, #152]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6892      	ldr	r2, [r2, #8]
 8006d30:	0211      	lsls	r1, r2, #8
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	68d2      	ldr	r2, [r2, #12]
 8006d36:	0912      	lsrs	r2, r2, #4
 8006d38:	0452      	lsls	r2, r2, #17
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	491f      	ldr	r1, [pc, #124]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	614b      	str	r3, [r1, #20]
 8006d42:	e011      	b.n	8006d68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d44:	4b1d      	ldr	r3, [pc, #116]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006d4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6892      	ldr	r2, [r2, #8]
 8006d54:	0211      	lsls	r1, r2, #8
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6912      	ldr	r2, [r2, #16]
 8006d5a:	0852      	lsrs	r2, r2, #1
 8006d5c:	3a01      	subs	r2, #1
 8006d5e:	0652      	lsls	r2, r2, #25
 8006d60:	430a      	orrs	r2, r1
 8006d62:	4916      	ldr	r1, [pc, #88]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d68:	4b14      	ldr	r3, [pc, #80]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a13      	ldr	r2, [pc, #76]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d74:	f7fd fb3c 	bl	80043f0 <HAL_GetTick>
 8006d78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d7a:	e009      	b.n	8006d90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d7c:	f7fd fb38 	bl	80043f0 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d902      	bls.n	8006d90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	73fb      	strb	r3, [r7, #15]
          break;
 8006d8e:	e005      	b.n	8006d9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d90:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0ef      	beq.n	8006d7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006da2:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006da4:	695a      	ldr	r2, [r3, #20]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	4904      	ldr	r1, [pc, #16]	; (8006dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	40021000 	.word	0x40021000

08006dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e095      	b.n	8006efe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d108      	bne.n	8006dec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006de2:	d009      	beq.n	8006df8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	61da      	str	r2, [r3, #28]
 8006dea:	e005      	b.n	8006df8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fc fa88 	bl	8003328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e38:	d902      	bls.n	8006e40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	e002      	b.n	8006e46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006e4e:	d007      	beq.n	8006e60 <HAL_SPI_Init+0xa0>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e58:	d002      	beq.n	8006e60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	ea42 0103 	orr.w	r1, r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	0c1b      	lsrs	r3, r3, #16
 8006ebc:	f003 0204 	and.w	r2, r3, #4
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006edc:	ea42 0103 	orr.w	r1, r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e049      	b.n	8006fac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f841 	bl	8006fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f000 f9f7 	bl	8007338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d001      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e04f      	b.n	8007080 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a23      	ldr	r2, [pc, #140]	; (800708c <HAL_TIM_Base_Start_IT+0xc4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800700a:	d018      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1f      	ldr	r2, [pc, #124]	; (8007090 <HAL_TIM_Base_Start_IT+0xc8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1e      	ldr	r2, [pc, #120]	; (8007094 <HAL_TIM_Base_Start_IT+0xcc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1c      	ldr	r2, [pc, #112]	; (8007098 <HAL_TIM_Base_Start_IT+0xd0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1b      	ldr	r2, [pc, #108]	; (800709c <HAL_TIM_Base_Start_IT+0xd4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a19      	ldr	r2, [pc, #100]	; (80070a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d115      	bne.n	800706a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	4b17      	ldr	r3, [pc, #92]	; (80070a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007046:	4013      	ands	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b06      	cmp	r3, #6
 800704e:	d015      	beq.n	800707c <HAL_TIM_Base_Start_IT+0xb4>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007056:	d011      	beq.n	800707c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007068:	e008      	b.n	800707c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0201 	orr.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e000      	b.n	800707e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	40012c00 	.word	0x40012c00
 8007090:	40000400 	.word	0x40000400
 8007094:	40000800 	.word	0x40000800
 8007098:	40000c00 	.word	0x40000c00
 800709c:	40013400 	.word	0x40013400
 80070a0:	40014000 	.word	0x40014000
 80070a4:	00010007 	.word	0x00010007

080070a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d122      	bne.n	8007104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d11b      	bne.n	8007104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f06f 0202 	mvn.w	r2, #2
 80070d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f905 	bl	80072fa <HAL_TIM_IC_CaptureCallback>
 80070f0:	e005      	b.n	80070fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f8f7 	bl	80072e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f908 	bl	800730e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b04      	cmp	r3, #4
 8007110:	d122      	bne.n	8007158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b04      	cmp	r3, #4
 800711e:	d11b      	bne.n	8007158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f06f 0204 	mvn.w	r2, #4
 8007128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f8db 	bl	80072fa <HAL_TIM_IC_CaptureCallback>
 8007144:	e005      	b.n	8007152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8cd 	bl	80072e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f8de 	bl	800730e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b08      	cmp	r3, #8
 8007164:	d122      	bne.n	80071ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f003 0308 	and.w	r3, r3, #8
 8007170:	2b08      	cmp	r3, #8
 8007172:	d11b      	bne.n	80071ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f06f 0208 	mvn.w	r2, #8
 800717c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2204      	movs	r2, #4
 8007182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f8b1 	bl	80072fa <HAL_TIM_IC_CaptureCallback>
 8007198:	e005      	b.n	80071a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f8a3 	bl	80072e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f8b4 	bl	800730e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d122      	bne.n	8007200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	2b10      	cmp	r3, #16
 80071c6:	d11b      	bne.n	8007200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0210 	mvn.w	r2, #16
 80071d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2208      	movs	r2, #8
 80071d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f887 	bl	80072fa <HAL_TIM_IC_CaptureCallback>
 80071ec:	e005      	b.n	80071fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f879 	bl	80072e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f88a 	bl	800730e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b01      	cmp	r3, #1
 800720c:	d10e      	bne.n	800722c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b01      	cmp	r3, #1
 800721a:	d107      	bne.n	800722c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0201 	mvn.w	r2, #1
 8007224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fb ffc0 	bl	80031ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007236:	2b80      	cmp	r3, #128	; 0x80
 8007238:	d10e      	bne.n	8007258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007244:	2b80      	cmp	r3, #128	; 0x80
 8007246:	d107      	bne.n	8007258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f914 	bl	8007480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007266:	d10e      	bne.n	8007286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	2b80      	cmp	r3, #128	; 0x80
 8007274:	d107      	bne.n	8007286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800727e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f907 	bl	8007494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007290:	2b40      	cmp	r3, #64	; 0x40
 8007292:	d10e      	bne.n	80072b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d107      	bne.n	80072b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f838 	bl	8007322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b20      	cmp	r3, #32
 80072be:	d10e      	bne.n	80072de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d107      	bne.n	80072de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f06f 0220 	mvn.w	r2, #32
 80072d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f8c7 	bl	800746c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
	...

08007338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a40      	ldr	r2, [pc, #256]	; (800744c <TIM_Base_SetConfig+0x114>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d013      	beq.n	8007378 <TIM_Base_SetConfig+0x40>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007356:	d00f      	beq.n	8007378 <TIM_Base_SetConfig+0x40>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a3d      	ldr	r2, [pc, #244]	; (8007450 <TIM_Base_SetConfig+0x118>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00b      	beq.n	8007378 <TIM_Base_SetConfig+0x40>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a3c      	ldr	r2, [pc, #240]	; (8007454 <TIM_Base_SetConfig+0x11c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d007      	beq.n	8007378 <TIM_Base_SetConfig+0x40>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a3b      	ldr	r2, [pc, #236]	; (8007458 <TIM_Base_SetConfig+0x120>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_Base_SetConfig+0x40>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a3a      	ldr	r2, [pc, #232]	; (800745c <TIM_Base_SetConfig+0x124>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d108      	bne.n	800738a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a2f      	ldr	r2, [pc, #188]	; (800744c <TIM_Base_SetConfig+0x114>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d01f      	beq.n	80073d2 <TIM_Base_SetConfig+0x9a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007398:	d01b      	beq.n	80073d2 <TIM_Base_SetConfig+0x9a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a2c      	ldr	r2, [pc, #176]	; (8007450 <TIM_Base_SetConfig+0x118>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d017      	beq.n	80073d2 <TIM_Base_SetConfig+0x9a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a2b      	ldr	r2, [pc, #172]	; (8007454 <TIM_Base_SetConfig+0x11c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d013      	beq.n	80073d2 <TIM_Base_SetConfig+0x9a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a2a      	ldr	r2, [pc, #168]	; (8007458 <TIM_Base_SetConfig+0x120>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00f      	beq.n	80073d2 <TIM_Base_SetConfig+0x9a>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a29      	ldr	r2, [pc, #164]	; (800745c <TIM_Base_SetConfig+0x124>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00b      	beq.n	80073d2 <TIM_Base_SetConfig+0x9a>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a28      	ldr	r2, [pc, #160]	; (8007460 <TIM_Base_SetConfig+0x128>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d007      	beq.n	80073d2 <TIM_Base_SetConfig+0x9a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a27      	ldr	r2, [pc, #156]	; (8007464 <TIM_Base_SetConfig+0x12c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d003      	beq.n	80073d2 <TIM_Base_SetConfig+0x9a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a26      	ldr	r2, [pc, #152]	; (8007468 <TIM_Base_SetConfig+0x130>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d108      	bne.n	80073e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a10      	ldr	r2, [pc, #64]	; (800744c <TIM_Base_SetConfig+0x114>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00f      	beq.n	8007430 <TIM_Base_SetConfig+0xf8>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a12      	ldr	r2, [pc, #72]	; (800745c <TIM_Base_SetConfig+0x124>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00b      	beq.n	8007430 <TIM_Base_SetConfig+0xf8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a11      	ldr	r2, [pc, #68]	; (8007460 <TIM_Base_SetConfig+0x128>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d007      	beq.n	8007430 <TIM_Base_SetConfig+0xf8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a10      	ldr	r2, [pc, #64]	; (8007464 <TIM_Base_SetConfig+0x12c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d003      	beq.n	8007430 <TIM_Base_SetConfig+0xf8>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <TIM_Base_SetConfig+0x130>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d103      	bne.n	8007438 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	615a      	str	r2, [r3, #20]
}
 800743e:	bf00      	nop
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40000400 	.word	0x40000400
 8007454:	40000800 	.word	0x40000800
 8007458:	40000c00 	.word	0x40000c00
 800745c:	40013400 	.word	0x40013400
 8007460:	40014000 	.word	0x40014000
 8007464:	40014400 	.word	0x40014400
 8007468:	40014800 	.word	0x40014800

0800746c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e040      	b.n	800753c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fb ff6e 	bl	80033ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2224      	movs	r2, #36	; 0x24
 80074d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0201 	bic.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f992 	bl	8007810 <UART_SetConfig>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d101      	bne.n	80074f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e022      	b.n	800753c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fc3e 	bl	8007d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fcc5 	bl	8007ec4 <UART_CheckIdleState>
 800753a:	4603      	mov	r3, r0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08a      	sub	sp, #40	; 0x28
 8007548:	af02      	add	r7, sp, #8
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	4613      	mov	r3, r2
 8007552:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007558:	2b20      	cmp	r3, #32
 800755a:	f040 8082 	bne.w	8007662 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_UART_Transmit+0x26>
 8007564:	88fb      	ldrh	r3, [r7, #6]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e07a      	b.n	8007664 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <HAL_UART_Transmit+0x38>
 8007578:	2302      	movs	r3, #2
 800757a:	e073      	b.n	8007664 <HAL_UART_Transmit+0x120>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2221      	movs	r2, #33	; 0x21
 8007590:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007592:	f7fc ff2d 	bl	80043f0 <HAL_GetTick>
 8007596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	88fa      	ldrh	r2, [r7, #6]
 800759c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	88fa      	ldrh	r2, [r7, #6]
 80075a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b0:	d108      	bne.n	80075c4 <HAL_UART_Transmit+0x80>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d104      	bne.n	80075c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	e003      	b.n	80075cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80075d4:	e02d      	b.n	8007632 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2200      	movs	r2, #0
 80075de:	2180      	movs	r1, #128	; 0x80
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fcb8 	bl	8007f56 <UART_WaitOnFlagUntilTimeout>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e039      	b.n	8007664 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10b      	bne.n	800760e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	881a      	ldrh	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007602:	b292      	uxth	r2, r2
 8007604:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	3302      	adds	r3, #2
 800760a:	61bb      	str	r3, [r7, #24]
 800760c:	e008      	b.n	8007620 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	781a      	ldrb	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	b292      	uxth	r2, r2
 8007618:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	3301      	adds	r3, #1
 800761e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007626:	b29b      	uxth	r3, r3
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1cb      	bne.n	80075d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2200      	movs	r2, #0
 8007646:	2140      	movs	r1, #64	; 0x40
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fc84 	bl	8007f56 <UART_WaitOnFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e005      	b.n	8007664 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	e000      	b.n	8007664 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007662:	2302      	movs	r3, #2
  }
}
 8007664:	4618      	mov	r0, r3
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af02      	add	r7, sp, #8
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007680:	2b20      	cmp	r3, #32
 8007682:	f040 80bf 	bne.w	8007804 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <HAL_UART_Receive+0x26>
 800768c:	88fb      	ldrh	r3, [r7, #6]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e0b7      	b.n	8007806 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_UART_Receive+0x38>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e0b0      	b.n	8007806 <HAL_UART_Receive+0x19a>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2222      	movs	r2, #34	; 0x22
 80076b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076c0:	f7fc fe96 	bl	80043f0 <HAL_GetTick>
 80076c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	88fa      	ldrh	r2, [r7, #6]
 80076d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076de:	d10e      	bne.n	80076fe <HAL_UART_Receive+0x92>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d105      	bne.n	80076f4 <HAL_UART_Receive+0x88>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80076ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076f2:	e02d      	b.n	8007750 <HAL_UART_Receive+0xe4>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	22ff      	movs	r2, #255	; 0xff
 80076f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076fc:	e028      	b.n	8007750 <HAL_UART_Receive+0xe4>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10d      	bne.n	8007722 <HAL_UART_Receive+0xb6>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <HAL_UART_Receive+0xac>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	22ff      	movs	r2, #255	; 0xff
 8007712:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007716:	e01b      	b.n	8007750 <HAL_UART_Receive+0xe4>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	227f      	movs	r2, #127	; 0x7f
 800771c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007720:	e016      	b.n	8007750 <HAL_UART_Receive+0xe4>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800772a:	d10d      	bne.n	8007748 <HAL_UART_Receive+0xdc>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d104      	bne.n	800773e <HAL_UART_Receive+0xd2>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	227f      	movs	r2, #127	; 0x7f
 8007738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800773c:	e008      	b.n	8007750 <HAL_UART_Receive+0xe4>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	223f      	movs	r2, #63	; 0x3f
 8007742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007746:	e003      	b.n	8007750 <HAL_UART_Receive+0xe4>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007756:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007760:	d108      	bne.n	8007774 <HAL_UART_Receive+0x108>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d104      	bne.n	8007774 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	e003      	b.n	800777c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007784:	e033      	b.n	80077ee <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2200      	movs	r2, #0
 800778e:	2120      	movs	r1, #32
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fbe0 	bl	8007f56 <UART_WaitOnFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e032      	b.n	8007806 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10c      	bne.n	80077c0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	8a7b      	ldrh	r3, [r7, #18]
 80077b0:	4013      	ands	r3, r2
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	3302      	adds	r3, #2
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	e00d      	b.n	80077dc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	8a7b      	ldrh	r3, [r7, #18]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	4013      	ands	r3, r2
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	3301      	adds	r3, #1
 80077da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1c5      	bne.n	8007786 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2220      	movs	r2, #32
 80077fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	e000      	b.n	8007806 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007804:	2302      	movs	r3, #2
  }
}
 8007806:	4618      	mov	r0, r3
 8007808:	3720      	adds	r7, #32
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
	...

08007810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007814:	b08a      	sub	sp, #40	; 0x28
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	431a      	orrs	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	431a      	orrs	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	4313      	orrs	r3, r2
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4ba4      	ldr	r3, [pc, #656]	; (8007ad0 <UART_SetConfig+0x2c0>)
 8007840:	4013      	ands	r3, r2
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	6812      	ldr	r2, [r2, #0]
 8007846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007848:	430b      	orrs	r3, r1
 800784a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a99      	ldr	r2, [pc, #612]	; (8007ad4 <UART_SetConfig+0x2c4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d004      	beq.n	800787c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007878:	4313      	orrs	r3, r2
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788c:	430a      	orrs	r2, r1
 800788e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a90      	ldr	r2, [pc, #576]	; (8007ad8 <UART_SetConfig+0x2c8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d126      	bne.n	80078e8 <UART_SetConfig+0xd8>
 800789a:	4b90      	ldr	r3, [pc, #576]	; (8007adc <UART_SetConfig+0x2cc>)
 800789c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d81b      	bhi.n	80078e0 <UART_SetConfig+0xd0>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <UART_SetConfig+0xa0>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	080078c1 	.word	0x080078c1
 80078b4:	080078d1 	.word	0x080078d1
 80078b8:	080078c9 	.word	0x080078c9
 80078bc:	080078d9 	.word	0x080078d9
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c6:	e116      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80078c8:	2302      	movs	r3, #2
 80078ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ce:	e112      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80078d0:	2304      	movs	r3, #4
 80078d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078d6:	e10e      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80078d8:	2308      	movs	r3, #8
 80078da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078de:	e10a      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80078e0:	2310      	movs	r3, #16
 80078e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078e6:	e106      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a7c      	ldr	r2, [pc, #496]	; (8007ae0 <UART_SetConfig+0x2d0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d138      	bne.n	8007964 <UART_SetConfig+0x154>
 80078f2:	4b7a      	ldr	r3, [pc, #488]	; (8007adc <UART_SetConfig+0x2cc>)
 80078f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f8:	f003 030c 	and.w	r3, r3, #12
 80078fc:	2b0c      	cmp	r3, #12
 80078fe:	d82d      	bhi.n	800795c <UART_SetConfig+0x14c>
 8007900:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <UART_SetConfig+0xf8>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	0800793d 	.word	0x0800793d
 800790c:	0800795d 	.word	0x0800795d
 8007910:	0800795d 	.word	0x0800795d
 8007914:	0800795d 	.word	0x0800795d
 8007918:	0800794d 	.word	0x0800794d
 800791c:	0800795d 	.word	0x0800795d
 8007920:	0800795d 	.word	0x0800795d
 8007924:	0800795d 	.word	0x0800795d
 8007928:	08007945 	.word	0x08007945
 800792c:	0800795d 	.word	0x0800795d
 8007930:	0800795d 	.word	0x0800795d
 8007934:	0800795d 	.word	0x0800795d
 8007938:	08007955 	.word	0x08007955
 800793c:	2300      	movs	r3, #0
 800793e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007942:	e0d8      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007944:	2302      	movs	r3, #2
 8007946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800794a:	e0d4      	b.n	8007af6 <UART_SetConfig+0x2e6>
 800794c:	2304      	movs	r3, #4
 800794e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007952:	e0d0      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007954:	2308      	movs	r3, #8
 8007956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800795a:	e0cc      	b.n	8007af6 <UART_SetConfig+0x2e6>
 800795c:	2310      	movs	r3, #16
 800795e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007962:	e0c8      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a5e      	ldr	r2, [pc, #376]	; (8007ae4 <UART_SetConfig+0x2d4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d125      	bne.n	80079ba <UART_SetConfig+0x1aa>
 800796e:	4b5b      	ldr	r3, [pc, #364]	; (8007adc <UART_SetConfig+0x2cc>)
 8007970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007974:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007978:	2b30      	cmp	r3, #48	; 0x30
 800797a:	d016      	beq.n	80079aa <UART_SetConfig+0x19a>
 800797c:	2b30      	cmp	r3, #48	; 0x30
 800797e:	d818      	bhi.n	80079b2 <UART_SetConfig+0x1a2>
 8007980:	2b20      	cmp	r3, #32
 8007982:	d00a      	beq.n	800799a <UART_SetConfig+0x18a>
 8007984:	2b20      	cmp	r3, #32
 8007986:	d814      	bhi.n	80079b2 <UART_SetConfig+0x1a2>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <UART_SetConfig+0x182>
 800798c:	2b10      	cmp	r3, #16
 800798e:	d008      	beq.n	80079a2 <UART_SetConfig+0x192>
 8007990:	e00f      	b.n	80079b2 <UART_SetConfig+0x1a2>
 8007992:	2300      	movs	r3, #0
 8007994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007998:	e0ad      	b.n	8007af6 <UART_SetConfig+0x2e6>
 800799a:	2302      	movs	r3, #2
 800799c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079a0:	e0a9      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80079a2:	2304      	movs	r3, #4
 80079a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079a8:	e0a5      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80079aa:	2308      	movs	r3, #8
 80079ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079b0:	e0a1      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80079b2:	2310      	movs	r3, #16
 80079b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079b8:	e09d      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a4a      	ldr	r2, [pc, #296]	; (8007ae8 <UART_SetConfig+0x2d8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d125      	bne.n	8007a10 <UART_SetConfig+0x200>
 80079c4:	4b45      	ldr	r3, [pc, #276]	; (8007adc <UART_SetConfig+0x2cc>)
 80079c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079ce:	2bc0      	cmp	r3, #192	; 0xc0
 80079d0:	d016      	beq.n	8007a00 <UART_SetConfig+0x1f0>
 80079d2:	2bc0      	cmp	r3, #192	; 0xc0
 80079d4:	d818      	bhi.n	8007a08 <UART_SetConfig+0x1f8>
 80079d6:	2b80      	cmp	r3, #128	; 0x80
 80079d8:	d00a      	beq.n	80079f0 <UART_SetConfig+0x1e0>
 80079da:	2b80      	cmp	r3, #128	; 0x80
 80079dc:	d814      	bhi.n	8007a08 <UART_SetConfig+0x1f8>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <UART_SetConfig+0x1d8>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d008      	beq.n	80079f8 <UART_SetConfig+0x1e8>
 80079e6:	e00f      	b.n	8007a08 <UART_SetConfig+0x1f8>
 80079e8:	2300      	movs	r3, #0
 80079ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ee:	e082      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80079f0:	2302      	movs	r3, #2
 80079f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079f6:	e07e      	b.n	8007af6 <UART_SetConfig+0x2e6>
 80079f8:	2304      	movs	r3, #4
 80079fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079fe:	e07a      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007a00:	2308      	movs	r3, #8
 8007a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a06:	e076      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007a08:	2310      	movs	r3, #16
 8007a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a0e:	e072      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a35      	ldr	r2, [pc, #212]	; (8007aec <UART_SetConfig+0x2dc>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d12a      	bne.n	8007a70 <UART_SetConfig+0x260>
 8007a1a:	4b30      	ldr	r3, [pc, #192]	; (8007adc <UART_SetConfig+0x2cc>)
 8007a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a28:	d01a      	beq.n	8007a60 <UART_SetConfig+0x250>
 8007a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a2e:	d81b      	bhi.n	8007a68 <UART_SetConfig+0x258>
 8007a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a34:	d00c      	beq.n	8007a50 <UART_SetConfig+0x240>
 8007a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a3a:	d815      	bhi.n	8007a68 <UART_SetConfig+0x258>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <UART_SetConfig+0x238>
 8007a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a44:	d008      	beq.n	8007a58 <UART_SetConfig+0x248>
 8007a46:	e00f      	b.n	8007a68 <UART_SetConfig+0x258>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a4e:	e052      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007a50:	2302      	movs	r3, #2
 8007a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a56:	e04e      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a5e:	e04a      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007a60:	2308      	movs	r3, #8
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a66:	e046      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007a68:	2310      	movs	r3, #16
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a6e:	e042      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a17      	ldr	r2, [pc, #92]	; (8007ad4 <UART_SetConfig+0x2c4>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d13a      	bne.n	8007af0 <UART_SetConfig+0x2e0>
 8007a7a:	4b18      	ldr	r3, [pc, #96]	; (8007adc <UART_SetConfig+0x2cc>)
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a88:	d01a      	beq.n	8007ac0 <UART_SetConfig+0x2b0>
 8007a8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a8e:	d81b      	bhi.n	8007ac8 <UART_SetConfig+0x2b8>
 8007a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a94:	d00c      	beq.n	8007ab0 <UART_SetConfig+0x2a0>
 8007a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a9a:	d815      	bhi.n	8007ac8 <UART_SetConfig+0x2b8>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <UART_SetConfig+0x298>
 8007aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa4:	d008      	beq.n	8007ab8 <UART_SetConfig+0x2a8>
 8007aa6:	e00f      	b.n	8007ac8 <UART_SetConfig+0x2b8>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aae:	e022      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ab6:	e01e      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007ab8:	2304      	movs	r3, #4
 8007aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007abe:	e01a      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007ac0:	2308      	movs	r3, #8
 8007ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ac6:	e016      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007ac8:	2310      	movs	r3, #16
 8007aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ace:	e012      	b.n	8007af6 <UART_SetConfig+0x2e6>
 8007ad0:	efff69f3 	.word	0xefff69f3
 8007ad4:	40008000 	.word	0x40008000
 8007ad8:	40013800 	.word	0x40013800
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	40004400 	.word	0x40004400
 8007ae4:	40004800 	.word	0x40004800
 8007ae8:	40004c00 	.word	0x40004c00
 8007aec:	40005000 	.word	0x40005000
 8007af0:	2310      	movs	r3, #16
 8007af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a9f      	ldr	r2, [pc, #636]	; (8007d78 <UART_SetConfig+0x568>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d17a      	bne.n	8007bf6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d824      	bhi.n	8007b52 <UART_SetConfig+0x342>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <UART_SetConfig+0x300>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b35 	.word	0x08007b35
 8007b14:	08007b53 	.word	0x08007b53
 8007b18:	08007b3d 	.word	0x08007b3d
 8007b1c:	08007b53 	.word	0x08007b53
 8007b20:	08007b43 	.word	0x08007b43
 8007b24:	08007b53 	.word	0x08007b53
 8007b28:	08007b53 	.word	0x08007b53
 8007b2c:	08007b53 	.word	0x08007b53
 8007b30:	08007b4b 	.word	0x08007b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b34:	f7fe fbca 	bl	80062cc <HAL_RCC_GetPCLK1Freq>
 8007b38:	61f8      	str	r0, [r7, #28]
        break;
 8007b3a:	e010      	b.n	8007b5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b3c:	4b8f      	ldr	r3, [pc, #572]	; (8007d7c <UART_SetConfig+0x56c>)
 8007b3e:	61fb      	str	r3, [r7, #28]
        break;
 8007b40:	e00d      	b.n	8007b5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b42:	f7fe fb2b 	bl	800619c <HAL_RCC_GetSysClockFreq>
 8007b46:	61f8      	str	r0, [r7, #28]
        break;
 8007b48:	e009      	b.n	8007b5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4e:	61fb      	str	r3, [r7, #28]
        break;
 8007b50:	e005      	b.n	8007b5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 80fb 	beq.w	8007d5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	4413      	add	r3, r2
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d305      	bcc.n	8007b82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d903      	bls.n	8007b8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b88:	e0e8      	b.n	8007d5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	461c      	mov	r4, r3
 8007b90:	4615      	mov	r5, r2
 8007b92:	f04f 0200 	mov.w	r2, #0
 8007b96:	f04f 0300 	mov.w	r3, #0
 8007b9a:	022b      	lsls	r3, r5, #8
 8007b9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ba0:	0222      	lsls	r2, r4, #8
 8007ba2:	68f9      	ldr	r1, [r7, #12]
 8007ba4:	6849      	ldr	r1, [r1, #4]
 8007ba6:	0849      	lsrs	r1, r1, #1
 8007ba8:	2000      	movs	r0, #0
 8007baa:	4688      	mov	r8, r1
 8007bac:	4681      	mov	r9, r0
 8007bae:	eb12 0a08 	adds.w	sl, r2, r8
 8007bb2:	eb43 0b09 	adc.w	fp, r3, r9
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	603b      	str	r3, [r7, #0]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc4:	4650      	mov	r0, sl
 8007bc6:	4659      	mov	r1, fp
 8007bc8:	f7f8 fd9e 	bl	8000708 <__aeabi_uldivmod>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bda:	d308      	bcc.n	8007bee <UART_SetConfig+0x3de>
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007be2:	d204      	bcs.n	8007bee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	60da      	str	r2, [r3, #12]
 8007bec:	e0b6      	b.n	8007d5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007bf4:	e0b2      	b.n	8007d5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bfe:	d15e      	bne.n	8007cbe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	d828      	bhi.n	8007c5a <UART_SetConfig+0x44a>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <UART_SetConfig+0x400>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c35 	.word	0x08007c35
 8007c14:	08007c3d 	.word	0x08007c3d
 8007c18:	08007c45 	.word	0x08007c45
 8007c1c:	08007c5b 	.word	0x08007c5b
 8007c20:	08007c4b 	.word	0x08007c4b
 8007c24:	08007c5b 	.word	0x08007c5b
 8007c28:	08007c5b 	.word	0x08007c5b
 8007c2c:	08007c5b 	.word	0x08007c5b
 8007c30:	08007c53 	.word	0x08007c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c34:	f7fe fb4a 	bl	80062cc <HAL_RCC_GetPCLK1Freq>
 8007c38:	61f8      	str	r0, [r7, #28]
        break;
 8007c3a:	e014      	b.n	8007c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c3c:	f7fe fb5c 	bl	80062f8 <HAL_RCC_GetPCLK2Freq>
 8007c40:	61f8      	str	r0, [r7, #28]
        break;
 8007c42:	e010      	b.n	8007c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c44:	4b4d      	ldr	r3, [pc, #308]	; (8007d7c <UART_SetConfig+0x56c>)
 8007c46:	61fb      	str	r3, [r7, #28]
        break;
 8007c48:	e00d      	b.n	8007c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c4a:	f7fe faa7 	bl	800619c <HAL_RCC_GetSysClockFreq>
 8007c4e:	61f8      	str	r0, [r7, #28]
        break;
 8007c50:	e009      	b.n	8007c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c56:	61fb      	str	r3, [r7, #28]
        break;
 8007c58:	e005      	b.n	8007c66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d077      	beq.n	8007d5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	005a      	lsls	r2, r3, #1
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	085b      	lsrs	r3, r3, #1
 8007c76:	441a      	add	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	2b0f      	cmp	r3, #15
 8007c86:	d916      	bls.n	8007cb6 <UART_SetConfig+0x4a6>
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8e:	d212      	bcs.n	8007cb6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f023 030f 	bic.w	r3, r3, #15
 8007c98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	085b      	lsrs	r3, r3, #1
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	f003 0307 	and.w	r3, r3, #7
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	8afb      	ldrh	r3, [r7, #22]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	8afa      	ldrh	r2, [r7, #22]
 8007cb2:	60da      	str	r2, [r3, #12]
 8007cb4:	e052      	b.n	8007d5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007cbc:	e04e      	b.n	8007d5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cc2:	2b08      	cmp	r3, #8
 8007cc4:	d827      	bhi.n	8007d16 <UART_SetConfig+0x506>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <UART_SetConfig+0x4bc>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007cf1 	.word	0x08007cf1
 8007cd0:	08007cf9 	.word	0x08007cf9
 8007cd4:	08007d01 	.word	0x08007d01
 8007cd8:	08007d17 	.word	0x08007d17
 8007cdc:	08007d07 	.word	0x08007d07
 8007ce0:	08007d17 	.word	0x08007d17
 8007ce4:	08007d17 	.word	0x08007d17
 8007ce8:	08007d17 	.word	0x08007d17
 8007cec:	08007d0f 	.word	0x08007d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf0:	f7fe faec 	bl	80062cc <HAL_RCC_GetPCLK1Freq>
 8007cf4:	61f8      	str	r0, [r7, #28]
        break;
 8007cf6:	e014      	b.n	8007d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf8:	f7fe fafe 	bl	80062f8 <HAL_RCC_GetPCLK2Freq>
 8007cfc:	61f8      	str	r0, [r7, #28]
        break;
 8007cfe:	e010      	b.n	8007d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d00:	4b1e      	ldr	r3, [pc, #120]	; (8007d7c <UART_SetConfig+0x56c>)
 8007d02:	61fb      	str	r3, [r7, #28]
        break;
 8007d04:	e00d      	b.n	8007d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d06:	f7fe fa49 	bl	800619c <HAL_RCC_GetSysClockFreq>
 8007d0a:	61f8      	str	r0, [r7, #28]
        break;
 8007d0c:	e009      	b.n	8007d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d12:	61fb      	str	r3, [r7, #28]
        break;
 8007d14:	e005      	b.n	8007d22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d20:	bf00      	nop
    }

    if (pclk != 0U)
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d019      	beq.n	8007d5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	085a      	lsrs	r2, r3, #1
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	441a      	add	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	2b0f      	cmp	r3, #15
 8007d40:	d909      	bls.n	8007d56 <UART_SetConfig+0x546>
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d48:	d205      	bcs.n	8007d56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60da      	str	r2, [r3, #12]
 8007d54:	e002      	b.n	8007d5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007d68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3728      	adds	r7, #40	; 0x28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d76:	bf00      	nop
 8007d78:	40008000 	.word	0x40008000
 8007d7c:	00f42400 	.word	0x00f42400

08007d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01a      	beq.n	8007e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e7e:	d10a      	bne.n	8007e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]
  }
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ed4:	f7fc fa8c 	bl	80043f0 <HAL_GetTick>
 8007ed8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0308 	and.w	r3, r3, #8
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d10e      	bne.n	8007f06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f82d 	bl	8007f56 <UART_WaitOnFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e023      	b.n	8007f4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d10e      	bne.n	8007f32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f817 	bl	8007f56 <UART_WaitOnFlagUntilTimeout>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e00d      	b.n	8007f4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b09c      	sub	sp, #112	; 0x70
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	603b      	str	r3, [r7, #0]
 8007f62:	4613      	mov	r3, r2
 8007f64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f66:	e0a5      	b.n	80080b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f6e:	f000 80a1 	beq.w	80080b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f72:	f7fc fa3d 	bl	80043f0 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d302      	bcc.n	8007f88 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d13e      	bne.n	8008006 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e6      	bne.n	8007f88 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fda:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e5      	bne.n	8007fba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e067      	b.n	80080d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d04f      	beq.n	80080b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800801e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008022:	d147      	bne.n	80080b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800802c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008042:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804c:	637b      	str	r3, [r7, #52]	; 0x34
 800804e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3308      	adds	r3, #8
 8008066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	e853 3f00 	ldrex	r3, [r3]
 800806e:	613b      	str	r3, [r7, #16]
   return(result);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f023 0301 	bic.w	r3, r3, #1
 8008076:	66bb      	str	r3, [r7, #104]	; 0x68
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3308      	adds	r3, #8
 800807e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008080:	623a      	str	r2, [r7, #32]
 8008082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008084:	69f9      	ldr	r1, [r7, #28]
 8008086:	6a3a      	ldr	r2, [r7, #32]
 8008088:	e841 2300 	strex	r3, r2, [r1]
 800808c:	61bb      	str	r3, [r7, #24]
   return(result);
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e5      	bne.n	8008060 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2220      	movs	r2, #32
 8008098:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2220      	movs	r2, #32
 800809e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e010      	b.n	80080d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	69da      	ldr	r2, [r3, #28]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4013      	ands	r3, r2
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	bf0c      	ite	eq
 80080c4:	2301      	moveq	r3, #1
 80080c6:	2300      	movne	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	79fb      	ldrb	r3, [r7, #7]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	f43f af4a 	beq.w	8007f68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3770      	adds	r7, #112	; 0x70
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	4603      	mov	r3, r0
 80080e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80080e8:	2300      	movs	r3, #0
 80080ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80080ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080f0:	2b84      	cmp	r3, #132	; 0x84
 80080f2:	d005      	beq.n	8008100 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80080f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	3303      	adds	r3, #3
 80080fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008100:	68fb      	ldr	r3, [r7, #12]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008114:	f3ef 8305 	mrs	r3, IPSR
 8008118:	607b      	str	r3, [r7, #4]
  return(result);
 800811a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800811c:	2b00      	cmp	r3, #0
 800811e:	bf14      	ite	ne
 8008120:	2301      	movne	r3, #1
 8008122:	2300      	moveq	r3, #0
 8008124:	b2db      	uxtb	r3, r3
}
 8008126:	4618      	mov	r0, r3
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008136:	f000 fc1d 	bl	8008974 <vTaskStartScheduler>
  
  return osOK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	bd80      	pop	{r7, pc}

08008140 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008142:	b089      	sub	sp, #36	; 0x24
 8008144:	af04      	add	r7, sp, #16
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d020      	beq.n	8008194 <osThreadCreate+0x54>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01c      	beq.n	8008194 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685c      	ldr	r4, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681d      	ldr	r5, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691e      	ldr	r6, [r3, #16]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff ffb6 	bl	80080de <makeFreeRtosPriority>
 8008172:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800817c:	9202      	str	r2, [sp, #8]
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	9100      	str	r1, [sp, #0]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	4632      	mov	r2, r6
 8008186:	4629      	mov	r1, r5
 8008188:	4620      	mov	r0, r4
 800818a:	f000 f985 	bl	8008498 <xTaskCreateStatic>
 800818e:	4603      	mov	r3, r0
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	e01c      	b.n	80081ce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685c      	ldr	r4, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081a0:	b29e      	uxth	r6, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff ff98 	bl	80080de <makeFreeRtosPriority>
 80081ae:	4602      	mov	r2, r0
 80081b0:	f107 030c 	add.w	r3, r7, #12
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	9200      	str	r2, [sp, #0]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	4632      	mov	r2, r6
 80081bc:	4629      	mov	r1, r5
 80081be:	4620      	mov	r0, r4
 80081c0:	f000 f9c7 	bl	8008552 <xTaskCreate>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d001      	beq.n	80081ce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	e000      	b.n	80081d0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80081ce:	68fb      	ldr	r3, [r7, #12]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081d8 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fb03 	bl	80087ec <vTaskDelete>
  return osOK;
 80081e6:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <osDelay+0x16>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	e000      	b.n	8008208 <osDelay+0x18>
 8008206:	2301      	movs	r3, #1
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fb7f 	bl	800890c <vTaskDelay>
  
  return osOK;
 800820e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af02      	add	r7, sp, #8
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800822a:	f7ff ff70 	bl	800810e <inHandlerMode>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01c      	beq.n	800826e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	f107 0208 	add.w	r2, r7, #8
 800823a:	f107 030c 	add.w	r3, r7, #12
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	2201      	movs	r2, #1
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 ffbb 	bl	80091c0 <xTaskGenericNotifyFromISR>
 800824a:	4603      	mov	r3, r0
 800824c:	2b01      	cmp	r3, #1
 800824e:	d002      	beq.n	8008256 <osSignalSet+0x3e>
      return 0x80000000;
 8008250:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008254:	e019      	b.n	800828a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d015      	beq.n	8008288 <osSignalSet+0x70>
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <osSignalSet+0x7c>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	e00c      	b.n	8008288 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	f107 0308 	add.w	r3, r7, #8
 8008274:	2201      	movs	r2, #1
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fee4 	bl	8009044 <xTaskGenericNotify>
 800827c:	4603      	mov	r3, r0
 800827e:	2b01      	cmp	r3, #1
 8008280:	d002      	beq.n	8008288 <osSignalSet+0x70>
    return 0x80000000;
 8008282:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008286:	e000      	b.n	800828a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8008288:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	e000ed04 	.word	0xe000ed04

08008298 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8008298:	b590      	push	{r4, r7, lr}
 800829a:	b089      	sub	sp, #36	; 0x24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b2:	d103      	bne.n	80082bc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082b8:	61fb      	str	r3, [r7, #28]
 80082ba:	e009      	b.n	80082d0 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d006      	beq.n	80082d0 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <osSignalWait+0x38>
      ticks = 1;
 80082cc:	2301      	movs	r3, #1
 80082ce:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80082d0:	f7ff ff1d 	bl	800810e <inHandlerMode>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80082da:	2382      	movs	r3, #130	; 0x82
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	e01b      	b.n	8008318 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	f107 0310 	add.w	r3, r7, #16
 80082e6:	1d1a      	adds	r2, r3, #4
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	2000      	movs	r0, #0
 80082ec:	f000 fe4a 	bl	8008f84 <xTaskNotifyWait>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d008      	beq.n	8008308 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <osSignalWait+0x6a>
 80082fc:	2300      	movs	r3, #0
 80082fe:	613b      	str	r3, [r7, #16]
 8008300:	e00a      	b.n	8008318 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8008302:	2340      	movs	r3, #64	; 0x40
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	e007      	b.n	8008318 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	da02      	bge.n	8008314 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800830e:	2386      	movs	r3, #134	; 0x86
 8008310:	613b      	str	r3, [r7, #16]
 8008312:	e001      	b.n	8008318 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8008314:	2308      	movs	r3, #8
 8008316:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	461c      	mov	r4, r3
 800831c:	f107 0310 	add.w	r3, r7, #16
 8008320:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008324:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	3724      	adds	r7, #36	; 0x24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd90      	pop	{r4, r7, pc}

08008330 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f103 0208 	add.w	r2, r3, #8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008348:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f103 0208 	add.w	r2, r3, #8
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f103 0208 	add.w	r2, r3, #8
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800838a:	b480      	push	{r7}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
}
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083d2:	b480      	push	{r7}
 80083d4:	b085      	sub	sp, #20
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083e8:	d103      	bne.n	80083f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	e00c      	b.n	800840c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3308      	adds	r3, #8
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	e002      	b.n	8008400 <vListInsert+0x2e>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	429a      	cmp	r2, r3
 800840a:	d2f6      	bcs.n	80083fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]
}
 8008438:	bf00      	nop
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6892      	ldr	r2, [r2, #8]
 800845a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6852      	ldr	r2, [r2, #4]
 8008464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	429a      	cmp	r2, r3
 800846e:	d103      	bne.n	8008478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	1e5a      	subs	r2, r3, #1
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08e      	sub	sp, #56	; 0x38
 800849c:	af04      	add	r7, sp, #16
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <xTaskCreateStatic+0x46>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	61fb      	str	r3, [r7, #28]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084de:	23b4      	movs	r3, #180	; 0xb4
 80084e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2bb4      	cmp	r3, #180	; 0xb4
 80084e6:	d00a      	beq.n	80084fe <xTaskCreateStatic+0x66>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	61bb      	str	r3, [r7, #24]
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	2b00      	cmp	r3, #0
 8008504:	d01e      	beq.n	8008544 <xTaskCreateStatic+0xac>
 8008506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01b      	beq.n	8008544 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008514:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	2202      	movs	r2, #2
 800851a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800851e:	2300      	movs	r3, #0
 8008520:	9303      	str	r3, [sp, #12]
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	9302      	str	r3, [sp, #8]
 8008526:	f107 0314 	add.w	r3, r7, #20
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	68b9      	ldr	r1, [r7, #8]
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 f850 	bl	80085dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800853c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800853e:	f000 f8eb 	bl	8008718 <prvAddNewTaskToReadyList>
 8008542:	e001      	b.n	8008548 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008544:	2300      	movs	r3, #0
 8008546:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008548:	697b      	ldr	r3, [r7, #20]
	}
 800854a:	4618      	mov	r0, r3
 800854c:	3728      	adds	r7, #40	; 0x28
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008552:	b580      	push	{r7, lr}
 8008554:	b08c      	sub	sp, #48	; 0x30
 8008556:	af04      	add	r7, sp, #16
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	4613      	mov	r3, r2
 8008560:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4618      	mov	r0, r3
 8008568:	f001 f9c6 	bl	80098f8 <pvPortMalloc>
 800856c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00e      	beq.n	8008592 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008574:	20b4      	movs	r0, #180	; 0xb4
 8008576:	f001 f9bf 	bl	80098f8 <pvPortMalloc>
 800857a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	631a      	str	r2, [r3, #48]	; 0x30
 8008588:	e005      	b.n	8008596 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800858a:	6978      	ldr	r0, [r7, #20]
 800858c:	f001 fa80 	bl	8009a90 <vPortFree>
 8008590:	e001      	b.n	8008596 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d017      	beq.n	80085cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085a4:	88fa      	ldrh	r2, [r7, #6]
 80085a6:	2300      	movs	r3, #0
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	9302      	str	r3, [sp, #8]
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68b9      	ldr	r1, [r7, #8]
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 f80e 	bl	80085dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085c0:	69f8      	ldr	r0, [r7, #28]
 80085c2:	f000 f8a9 	bl	8008718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085c6:	2301      	movs	r3, #1
 80085c8:	61bb      	str	r3, [r7, #24]
 80085ca:	e002      	b.n	80085d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085d2:	69bb      	ldr	r3, [r7, #24]
	}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3720      	adds	r7, #32
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b088      	sub	sp, #32
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085f4:	3b01      	subs	r3, #1
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	f023 0307 	bic.w	r3, r3, #7
 8008602:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00a      	beq.n	8008624 <prvInitialiseNewTask+0x48>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	617b      	str	r3, [r7, #20]
}
 8008620:	bf00      	nop
 8008622:	e7fe      	b.n	8008622 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d01f      	beq.n	800866a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800862a:	2300      	movs	r3, #0
 800862c:	61fb      	str	r3, [r7, #28]
 800862e:	e012      	b.n	8008656 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	7819      	ldrb	r1, [r3, #0]
 8008638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	4413      	add	r3, r2
 800863e:	3334      	adds	r3, #52	; 0x34
 8008640:	460a      	mov	r2, r1
 8008642:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	4413      	add	r3, r2
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d006      	beq.n	800865e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	3301      	adds	r3, #1
 8008654:	61fb      	str	r3, [r7, #28]
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	2b0f      	cmp	r3, #15
 800865a:	d9e9      	bls.n	8008630 <prvInitialiseNewTask+0x54>
 800865c:	e000      	b.n	8008660 <prvInitialiseNewTask+0x84>
			{
				break;
 800865e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008668:	e003      	b.n	8008672 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	2b06      	cmp	r3, #6
 8008676:	d901      	bls.n	800867c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008678:	2306      	movs	r3, #6
 800867a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008680:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008686:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	2200      	movs	r2, #0
 800868c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	3304      	adds	r3, #4
 8008692:	4618      	mov	r0, r3
 8008694:	f7ff fe6c 	bl	8008370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	3318      	adds	r3, #24
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fe67 	bl	8008370 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	f1c3 0207 	rsb	r2, r3, #7
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	334c      	adds	r3, #76	; 0x4c
 80086cc:	2260      	movs	r2, #96	; 0x60
 80086ce:	2100      	movs	r1, #0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 fb35 	bl	8009d40 <memset>
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	4a0c      	ldr	r2, [pc, #48]	; (800870c <prvInitialiseNewTask+0x130>)
 80086da:	651a      	str	r2, [r3, #80]	; 0x50
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	4a0c      	ldr	r2, [pc, #48]	; (8008710 <prvInitialiseNewTask+0x134>)
 80086e0:	655a      	str	r2, [r3, #84]	; 0x54
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	4a0b      	ldr	r2, [pc, #44]	; (8008714 <prvInitialiseNewTask+0x138>)
 80086e6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	68f9      	ldr	r1, [r7, #12]
 80086ec:	69b8      	ldr	r0, [r7, #24]
 80086ee:	f000 feb1 	bl	8009454 <pxPortInitialiseStack>
 80086f2:	4602      	mov	r2, r0
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008704:	bf00      	nop
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	08036014 	.word	0x08036014
 8008710:	08036034 	.word	0x08036034
 8008714:	08035ff4 	.word	0x08035ff4

08008718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008720:	f000 ffc8 	bl	80096b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008724:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <prvAddNewTaskToReadyList+0xb8>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3301      	adds	r3, #1
 800872a:	4a29      	ldr	r2, [pc, #164]	; (80087d0 <prvAddNewTaskToReadyList+0xb8>)
 800872c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800872e:	4b29      	ldr	r3, [pc, #164]	; (80087d4 <prvAddNewTaskToReadyList+0xbc>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d109      	bne.n	800874a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008736:	4a27      	ldr	r2, [pc, #156]	; (80087d4 <prvAddNewTaskToReadyList+0xbc>)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800873c:	4b24      	ldr	r3, [pc, #144]	; (80087d0 <prvAddNewTaskToReadyList+0xb8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d110      	bne.n	8008766 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008744:	f000 fb5c 	bl	8008e00 <prvInitialiseTaskLists>
 8008748:	e00d      	b.n	8008766 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800874a:	4b23      	ldr	r3, [pc, #140]	; (80087d8 <prvAddNewTaskToReadyList+0xc0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008752:	4b20      	ldr	r3, [pc, #128]	; (80087d4 <prvAddNewTaskToReadyList+0xbc>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	429a      	cmp	r2, r3
 800875e:	d802      	bhi.n	8008766 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008760:	4a1c      	ldr	r2, [pc, #112]	; (80087d4 <prvAddNewTaskToReadyList+0xbc>)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008766:	4b1d      	ldr	r3, [pc, #116]	; (80087dc <prvAddNewTaskToReadyList+0xc4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3301      	adds	r3, #1
 800876c:	4a1b      	ldr	r2, [pc, #108]	; (80087dc <prvAddNewTaskToReadyList+0xc4>)
 800876e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	2201      	movs	r2, #1
 8008776:	409a      	lsls	r2, r3
 8008778:	4b19      	ldr	r3, [pc, #100]	; (80087e0 <prvAddNewTaskToReadyList+0xc8>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4313      	orrs	r3, r2
 800877e:	4a18      	ldr	r2, [pc, #96]	; (80087e0 <prvAddNewTaskToReadyList+0xc8>)
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4a15      	ldr	r2, [pc, #84]	; (80087e4 <prvAddNewTaskToReadyList+0xcc>)
 8008790:	441a      	add	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	3304      	adds	r3, #4
 8008796:	4619      	mov	r1, r3
 8008798:	4610      	mov	r0, r2
 800879a:	f7ff fdf6 	bl	800838a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800879e:	f000 ffb9 	bl	8009714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087a2:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <prvAddNewTaskToReadyList+0xc0>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00e      	beq.n	80087c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087aa:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <prvAddNewTaskToReadyList+0xbc>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d207      	bcs.n	80087c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087b8:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <prvAddNewTaskToReadyList+0xd0>)
 80087ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	2000506c 	.word	0x2000506c
 80087d4:	20004f6c 	.word	0x20004f6c
 80087d8:	20005078 	.word	0x20005078
 80087dc:	20005088 	.word	0x20005088
 80087e0:	20005074 	.word	0x20005074
 80087e4:	20004f70 	.word	0x20004f70
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80087f4:	f000 ff5e 	bl	80096b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <vTaskDelete+0x18>
 80087fe:	4b39      	ldr	r3, [pc, #228]	; (80088e4 <vTaskDelete+0xf8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	e000      	b.n	8008806 <vTaskDelete+0x1a>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3304      	adds	r3, #4
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff fe19 	bl	8008444 <uxListRemove>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d115      	bne.n	8008844 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881c:	4932      	ldr	r1, [pc, #200]	; (80088e8 <vTaskDelete+0xfc>)
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	440b      	add	r3, r1
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <vTaskDelete+0x58>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	2201      	movs	r2, #1
 8008834:	fa02 f303 	lsl.w	r3, r2, r3
 8008838:	43da      	mvns	r2, r3
 800883a:	4b2c      	ldr	r3, [pc, #176]	; (80088ec <vTaskDelete+0x100>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4013      	ands	r3, r2
 8008840:	4a2a      	ldr	r2, [pc, #168]	; (80088ec <vTaskDelete+0x100>)
 8008842:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008848:	2b00      	cmp	r3, #0
 800884a:	d004      	beq.n	8008856 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3318      	adds	r3, #24
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff fdf7 	bl	8008444 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008856:	4b26      	ldr	r3, [pc, #152]	; (80088f0 <vTaskDelete+0x104>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3301      	adds	r3, #1
 800885c:	4a24      	ldr	r2, [pc, #144]	; (80088f0 <vTaskDelete+0x104>)
 800885e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008860:	4b20      	ldr	r3, [pc, #128]	; (80088e4 <vTaskDelete+0xf8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	429a      	cmp	r2, r3
 8008868:	d10b      	bne.n	8008882 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3304      	adds	r3, #4
 800886e:	4619      	mov	r1, r3
 8008870:	4820      	ldr	r0, [pc, #128]	; (80088f4 <vTaskDelete+0x108>)
 8008872:	f7ff fd8a 	bl	800838a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008876:	4b20      	ldr	r3, [pc, #128]	; (80088f8 <vTaskDelete+0x10c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3301      	adds	r3, #1
 800887c:	4a1e      	ldr	r2, [pc, #120]	; (80088f8 <vTaskDelete+0x10c>)
 800887e:	6013      	str	r3, [r2, #0]
 8008880:	e009      	b.n	8008896 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008882:	4b1e      	ldr	r3, [pc, #120]	; (80088fc <vTaskDelete+0x110>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3b01      	subs	r3, #1
 8008888:	4a1c      	ldr	r2, [pc, #112]	; (80088fc <vTaskDelete+0x110>)
 800888a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fb25 	bl	8008edc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008892:	f000 fb57 	bl	8008f44 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008896:	f000 ff3d 	bl	8009714 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800889a:	4b19      	ldr	r3, [pc, #100]	; (8008900 <vTaskDelete+0x114>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d01b      	beq.n	80088da <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80088a2:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <vTaskDelete+0xf8>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d116      	bne.n	80088da <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80088ac:	4b15      	ldr	r3, [pc, #84]	; (8008904 <vTaskDelete+0x118>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <vTaskDelete+0xde>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	60bb      	str	r3, [r7, #8]
}
 80088c6:	bf00      	nop
 80088c8:	e7fe      	b.n	80088c8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80088ca:	4b0f      	ldr	r3, [pc, #60]	; (8008908 <vTaskDelete+0x11c>)
 80088cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20004f6c 	.word	0x20004f6c
 80088e8:	20004f70 	.word	0x20004f70
 80088ec:	20005074 	.word	0x20005074
 80088f0:	20005088 	.word	0x20005088
 80088f4:	20005040 	.word	0x20005040
 80088f8:	20005054 	.word	0x20005054
 80088fc:	2000506c 	.word	0x2000506c
 8008900:	20005078 	.word	0x20005078
 8008904:	20005094 	.word	0x20005094
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008914:	2300      	movs	r3, #0
 8008916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d017      	beq.n	800894e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800891e:	4b13      	ldr	r3, [pc, #76]	; (800896c <vTaskDelay+0x60>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <vTaskDelay+0x30>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60bb      	str	r3, [r7, #8]
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800893c:	f000 f884 	bl	8008a48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008940:	2100      	movs	r1, #0
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fd20 	bl	8009388 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008948:	f000 f88c 	bl	8008a64 <xTaskResumeAll>
 800894c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d107      	bne.n	8008964 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008954:	4b06      	ldr	r3, [pc, #24]	; (8008970 <vTaskDelay+0x64>)
 8008956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008964:	bf00      	nop
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20005094 	.word	0x20005094
 8008970:	e000ed04 	.word	0xe000ed04

08008974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	; 0x28
 8008978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008982:	463a      	mov	r2, r7
 8008984:	1d39      	adds	r1, r7, #4
 8008986:	f107 0308 	add.w	r3, r7, #8
 800898a:	4618      	mov	r0, r3
 800898c:	f7fa f91a 	bl	8002bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	9202      	str	r2, [sp, #8]
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	2300      	movs	r3, #0
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	2300      	movs	r3, #0
 80089a0:	460a      	mov	r2, r1
 80089a2:	4921      	ldr	r1, [pc, #132]	; (8008a28 <vTaskStartScheduler+0xb4>)
 80089a4:	4821      	ldr	r0, [pc, #132]	; (8008a2c <vTaskStartScheduler+0xb8>)
 80089a6:	f7ff fd77 	bl	8008498 <xTaskCreateStatic>
 80089aa:	4603      	mov	r3, r0
 80089ac:	4a20      	ldr	r2, [pc, #128]	; (8008a30 <vTaskStartScheduler+0xbc>)
 80089ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089b0:	4b1f      	ldr	r3, [pc, #124]	; (8008a30 <vTaskStartScheduler+0xbc>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089b8:	2301      	movs	r3, #1
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	e001      	b.n	80089c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089be:	2300      	movs	r3, #0
 80089c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d11b      	bne.n	8008a00 <vTaskStartScheduler+0x8c>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	613b      	str	r3, [r7, #16]
}
 80089da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089dc:	4b15      	ldr	r3, [pc, #84]	; (8008a34 <vTaskStartScheduler+0xc0>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	334c      	adds	r3, #76	; 0x4c
 80089e2:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <vTaskStartScheduler+0xc4>)
 80089e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089e6:	4b15      	ldr	r3, [pc, #84]	; (8008a3c <vTaskStartScheduler+0xc8>)
 80089e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089ee:	4b14      	ldr	r3, [pc, #80]	; (8008a40 <vTaskStartScheduler+0xcc>)
 80089f0:	2201      	movs	r2, #1
 80089f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089f4:	4b13      	ldr	r3, [pc, #76]	; (8008a44 <vTaskStartScheduler+0xd0>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089fa:	f000 fdb9 	bl	8009570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089fe:	e00e      	b.n	8008a1e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a06:	d10a      	bne.n	8008a1e <vTaskStartScheduler+0xaa>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	60fb      	str	r3, [r7, #12]
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <vTaskStartScheduler+0xa8>
}
 8008a1e:	bf00      	nop
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	0800aa20 	.word	0x0800aa20
 8008a2c:	08008dd1 	.word	0x08008dd1
 8008a30:	20005090 	.word	0x20005090
 8008a34:	20004f6c 	.word	0x20004f6c
 8008a38:	20004024 	.word	0x20004024
 8008a3c:	2000508c 	.word	0x2000508c
 8008a40:	20005078 	.word	0x20005078
 8008a44:	20005070 	.word	0x20005070

08008a48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a4c:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <vTaskSuspendAll+0x18>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3301      	adds	r3, #1
 8008a52:	4a03      	ldr	r2, [pc, #12]	; (8008a60 <vTaskSuspendAll+0x18>)
 8008a54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a56:	bf00      	nop
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	20005094 	.word	0x20005094

08008a64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a72:	4b41      	ldr	r3, [pc, #260]	; (8008b78 <xTaskResumeAll+0x114>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10a      	bne.n	8008a90 <xTaskResumeAll+0x2c>
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	603b      	str	r3, [r7, #0]
}
 8008a8c:	bf00      	nop
 8008a8e:	e7fe      	b.n	8008a8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a90:	f000 fe10 	bl	80096b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a94:	4b38      	ldr	r3, [pc, #224]	; (8008b78 <xTaskResumeAll+0x114>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	4a37      	ldr	r2, [pc, #220]	; (8008b78 <xTaskResumeAll+0x114>)
 8008a9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a9e:	4b36      	ldr	r3, [pc, #216]	; (8008b78 <xTaskResumeAll+0x114>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d161      	bne.n	8008b6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008aa6:	4b35      	ldr	r3, [pc, #212]	; (8008b7c <xTaskResumeAll+0x118>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d05d      	beq.n	8008b6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008aae:	e02e      	b.n	8008b0e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab0:	4b33      	ldr	r3, [pc, #204]	; (8008b80 <xTaskResumeAll+0x11c>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3318      	adds	r3, #24
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff fcc1 	bl	8008444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7ff fcbc 	bl	8008444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	409a      	lsls	r2, r3
 8008ad4:	4b2b      	ldr	r3, [pc, #172]	; (8008b84 <xTaskResumeAll+0x120>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	4a2a      	ldr	r2, [pc, #168]	; (8008b84 <xTaskResumeAll+0x120>)
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4a27      	ldr	r2, [pc, #156]	; (8008b88 <xTaskResumeAll+0x124>)
 8008aec:	441a      	add	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4619      	mov	r1, r3
 8008af4:	4610      	mov	r0, r2
 8008af6:	f7ff fc48 	bl	800838a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afe:	4b23      	ldr	r3, [pc, #140]	; (8008b8c <xTaskResumeAll+0x128>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d302      	bcc.n	8008b0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008b08:	4b21      	ldr	r3, [pc, #132]	; (8008b90 <xTaskResumeAll+0x12c>)
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b0e:	4b1c      	ldr	r3, [pc, #112]	; (8008b80 <xTaskResumeAll+0x11c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1cc      	bne.n	8008ab0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b1c:	f000 fa12 	bl	8008f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b20:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <xTaskResumeAll+0x130>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d010      	beq.n	8008b4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b2c:	f000 f836 	bl	8008b9c <xTaskIncrementTick>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008b36:	4b16      	ldr	r3, [pc, #88]	; (8008b90 <xTaskResumeAll+0x12c>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1f1      	bne.n	8008b2c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008b48:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <xTaskResumeAll+0x130>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b4e:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <xTaskResumeAll+0x12c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b56:	2301      	movs	r3, #1
 8008b58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b5a:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <xTaskResumeAll+0x134>)
 8008b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b6a:	f000 fdd3 	bl	8009714 <vPortExitCritical>

	return xAlreadyYielded;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20005094 	.word	0x20005094
 8008b7c:	2000506c 	.word	0x2000506c
 8008b80:	2000502c 	.word	0x2000502c
 8008b84:	20005074 	.word	0x20005074
 8008b88:	20004f70 	.word	0x20004f70
 8008b8c:	20004f6c 	.word	0x20004f6c
 8008b90:	20005080 	.word	0x20005080
 8008b94:	2000507c 	.word	0x2000507c
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ba6:	4b4e      	ldr	r3, [pc, #312]	; (8008ce0 <xTaskIncrementTick+0x144>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f040 808e 	bne.w	8008ccc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bb0:	4b4c      	ldr	r3, [pc, #304]	; (8008ce4 <xTaskIncrementTick+0x148>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bb8:	4a4a      	ldr	r2, [pc, #296]	; (8008ce4 <xTaskIncrementTick+0x148>)
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d120      	bne.n	8008c06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bc4:	4b48      	ldr	r3, [pc, #288]	; (8008ce8 <xTaskIncrementTick+0x14c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	603b      	str	r3, [r7, #0]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <xTaskIncrementTick+0x46>
 8008be4:	4b40      	ldr	r3, [pc, #256]	; (8008ce8 <xTaskIncrementTick+0x14c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	4b40      	ldr	r3, [pc, #256]	; (8008cec <xTaskIncrementTick+0x150>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a3e      	ldr	r2, [pc, #248]	; (8008ce8 <xTaskIncrementTick+0x14c>)
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	4a3e      	ldr	r2, [pc, #248]	; (8008cec <xTaskIncrementTick+0x150>)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	4b3d      	ldr	r3, [pc, #244]	; (8008cf0 <xTaskIncrementTick+0x154>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	4a3c      	ldr	r2, [pc, #240]	; (8008cf0 <xTaskIncrementTick+0x154>)
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	f000 f99f 	bl	8008f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c06:	4b3b      	ldr	r3, [pc, #236]	; (8008cf4 <xTaskIncrementTick+0x158>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d348      	bcc.n	8008ca2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c10:	4b35      	ldr	r3, [pc, #212]	; (8008ce8 <xTaskIncrementTick+0x14c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d104      	bne.n	8008c24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c1a:	4b36      	ldr	r3, [pc, #216]	; (8008cf4 <xTaskIncrementTick+0x158>)
 8008c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c20:	601a      	str	r2, [r3, #0]
					break;
 8008c22:	e03e      	b.n	8008ca2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c24:	4b30      	ldr	r3, [pc, #192]	; (8008ce8 <xTaskIncrementTick+0x14c>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d203      	bcs.n	8008c44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c3c:	4a2d      	ldr	r2, [pc, #180]	; (8008cf4 <xTaskIncrementTick+0x158>)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c42:	e02e      	b.n	8008ca2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	3304      	adds	r3, #4
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff fbfb 	bl	8008444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d004      	beq.n	8008c60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	3318      	adds	r3, #24
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff fbf2 	bl	8008444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	2201      	movs	r2, #1
 8008c66:	409a      	lsls	r2, r3
 8008c68:	4b23      	ldr	r3, [pc, #140]	; (8008cf8 <xTaskIncrementTick+0x15c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	4a22      	ldr	r2, [pc, #136]	; (8008cf8 <xTaskIncrementTick+0x15c>)
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4a1f      	ldr	r2, [pc, #124]	; (8008cfc <xTaskIncrementTick+0x160>)
 8008c80:	441a      	add	r2, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4619      	mov	r1, r3
 8008c88:	4610      	mov	r0, r2
 8008c8a:	f7ff fb7e 	bl	800838a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c92:	4b1b      	ldr	r3, [pc, #108]	; (8008d00 <xTaskIncrementTick+0x164>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d3b9      	bcc.n	8008c10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ca0:	e7b6      	b.n	8008c10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ca2:	4b17      	ldr	r3, [pc, #92]	; (8008d00 <xTaskIncrementTick+0x164>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca8:	4914      	ldr	r1, [pc, #80]	; (8008cfc <xTaskIncrementTick+0x160>)
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	440b      	add	r3, r1
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d901      	bls.n	8008cbe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008cbe:	4b11      	ldr	r3, [pc, #68]	; (8008d04 <xTaskIncrementTick+0x168>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d007      	beq.n	8008cd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	617b      	str	r3, [r7, #20]
 8008cca:	e004      	b.n	8008cd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ccc:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <xTaskIncrementTick+0x16c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	4a0d      	ldr	r2, [pc, #52]	; (8008d08 <xTaskIncrementTick+0x16c>)
 8008cd4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008cd6:	697b      	ldr	r3, [r7, #20]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20005094 	.word	0x20005094
 8008ce4:	20005070 	.word	0x20005070
 8008ce8:	20005024 	.word	0x20005024
 8008cec:	20005028 	.word	0x20005028
 8008cf0:	20005084 	.word	0x20005084
 8008cf4:	2000508c 	.word	0x2000508c
 8008cf8:	20005074 	.word	0x20005074
 8008cfc:	20004f70 	.word	0x20004f70
 8008d00:	20004f6c 	.word	0x20004f6c
 8008d04:	20005080 	.word	0x20005080
 8008d08:	2000507c 	.word	0x2000507c

08008d0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d12:	4b29      	ldr	r3, [pc, #164]	; (8008db8 <vTaskSwitchContext+0xac>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d1a:	4b28      	ldr	r3, [pc, #160]	; (8008dbc <vTaskSwitchContext+0xb0>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d20:	e044      	b.n	8008dac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008d22:	4b26      	ldr	r3, [pc, #152]	; (8008dbc <vTaskSwitchContext+0xb0>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d28:	4b25      	ldr	r3, [pc, #148]	; (8008dc0 <vTaskSwitchContext+0xb4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	fab3 f383 	clz	r3, r3
 8008d34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d36:	7afb      	ldrb	r3, [r7, #11]
 8008d38:	f1c3 031f 	rsb	r3, r3, #31
 8008d3c:	617b      	str	r3, [r7, #20]
 8008d3e:	4921      	ldr	r1, [pc, #132]	; (8008dc4 <vTaskSwitchContext+0xb8>)
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	440b      	add	r3, r1
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	607b      	str	r3, [r7, #4]
}
 8008d64:	bf00      	nop
 8008d66:	e7fe      	b.n	8008d66 <vTaskSwitchContext+0x5a>
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4a14      	ldr	r2, [pc, #80]	; (8008dc4 <vTaskSwitchContext+0xb8>)
 8008d74:	4413      	add	r3, r2
 8008d76:	613b      	str	r3, [r7, #16]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	605a      	str	r2, [r3, #4]
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d104      	bne.n	8008d98 <vTaskSwitchContext+0x8c>
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	605a      	str	r2, [r3, #4]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	4a0a      	ldr	r2, [pc, #40]	; (8008dc8 <vTaskSwitchContext+0xbc>)
 8008da0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <vTaskSwitchContext+0xbc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	334c      	adds	r3, #76	; 0x4c
 8008da8:	4a08      	ldr	r2, [pc, #32]	; (8008dcc <vTaskSwitchContext+0xc0>)
 8008daa:	6013      	str	r3, [r2, #0]
}
 8008dac:	bf00      	nop
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	20005094 	.word	0x20005094
 8008dbc:	20005080 	.word	0x20005080
 8008dc0:	20005074 	.word	0x20005074
 8008dc4:	20004f70 	.word	0x20004f70
 8008dc8:	20004f6c 	.word	0x20004f6c
 8008dcc:	20004024 	.word	0x20004024

08008dd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dd8:	f000 f852 	bl	8008e80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ddc:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <prvIdleTask+0x28>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d9f9      	bls.n	8008dd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008de4:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <prvIdleTask+0x2c>)
 8008de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008df4:	e7f0      	b.n	8008dd8 <prvIdleTask+0x8>
 8008df6:	bf00      	nop
 8008df8:	20004f70 	.word	0x20004f70
 8008dfc:	e000ed04 	.word	0xe000ed04

08008e00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e06:	2300      	movs	r3, #0
 8008e08:	607b      	str	r3, [r7, #4]
 8008e0a:	e00c      	b.n	8008e26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4a12      	ldr	r2, [pc, #72]	; (8008e60 <prvInitialiseTaskLists+0x60>)
 8008e18:	4413      	add	r3, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff fa88 	bl	8008330 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3301      	adds	r3, #1
 8008e24:	607b      	str	r3, [r7, #4]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b06      	cmp	r3, #6
 8008e2a:	d9ef      	bls.n	8008e0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e2c:	480d      	ldr	r0, [pc, #52]	; (8008e64 <prvInitialiseTaskLists+0x64>)
 8008e2e:	f7ff fa7f 	bl	8008330 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e32:	480d      	ldr	r0, [pc, #52]	; (8008e68 <prvInitialiseTaskLists+0x68>)
 8008e34:	f7ff fa7c 	bl	8008330 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e38:	480c      	ldr	r0, [pc, #48]	; (8008e6c <prvInitialiseTaskLists+0x6c>)
 8008e3a:	f7ff fa79 	bl	8008330 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e3e:	480c      	ldr	r0, [pc, #48]	; (8008e70 <prvInitialiseTaskLists+0x70>)
 8008e40:	f7ff fa76 	bl	8008330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e44:	480b      	ldr	r0, [pc, #44]	; (8008e74 <prvInitialiseTaskLists+0x74>)
 8008e46:	f7ff fa73 	bl	8008330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e4a:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <prvInitialiseTaskLists+0x78>)
 8008e4c:	4a05      	ldr	r2, [pc, #20]	; (8008e64 <prvInitialiseTaskLists+0x64>)
 8008e4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <prvInitialiseTaskLists+0x7c>)
 8008e52:	4a05      	ldr	r2, [pc, #20]	; (8008e68 <prvInitialiseTaskLists+0x68>)
 8008e54:	601a      	str	r2, [r3, #0]
}
 8008e56:	bf00      	nop
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20004f70 	.word	0x20004f70
 8008e64:	20004ffc 	.word	0x20004ffc
 8008e68:	20005010 	.word	0x20005010
 8008e6c:	2000502c 	.word	0x2000502c
 8008e70:	20005040 	.word	0x20005040
 8008e74:	20005058 	.word	0x20005058
 8008e78:	20005024 	.word	0x20005024
 8008e7c:	20005028 	.word	0x20005028

08008e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e86:	e019      	b.n	8008ebc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e88:	f000 fc14 	bl	80096b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e8c:	4b10      	ldr	r3, [pc, #64]	; (8008ed0 <prvCheckTasksWaitingTermination+0x50>)
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	3304      	adds	r3, #4
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff fad3 	bl	8008444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <prvCheckTasksWaitingTermination+0x54>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	4a0b      	ldr	r2, [pc, #44]	; (8008ed4 <prvCheckTasksWaitingTermination+0x54>)
 8008ea6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ea8:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <prvCheckTasksWaitingTermination+0x58>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	4a0a      	ldr	r2, [pc, #40]	; (8008ed8 <prvCheckTasksWaitingTermination+0x58>)
 8008eb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008eb2:	f000 fc2f 	bl	8009714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f810 	bl	8008edc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ebc:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <prvCheckTasksWaitingTermination+0x58>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e1      	bne.n	8008e88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20005040 	.word	0x20005040
 8008ed4:	2000506c 	.word	0x2000506c
 8008ed8:	20005054 	.word	0x20005054

08008edc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	334c      	adds	r3, #76	; 0x4c
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 ffd3 	bl	8009e94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d108      	bne.n	8008f0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fdc7 	bl	8009a90 <vPortFree>
				vPortFree( pxTCB );
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fdc4 	bl	8009a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f08:	e018      	b.n	8008f3c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d103      	bne.n	8008f1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fdbb 	bl	8009a90 <vPortFree>
	}
 8008f1a:	e00f      	b.n	8008f3c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d00a      	beq.n	8008f3c <prvDeleteTCB+0x60>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	60fb      	str	r3, [r7, #12]
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <prvDeleteTCB+0x5e>
	}
 8008f3c:	bf00      	nop
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f4a:	4b0c      	ldr	r3, [pc, #48]	; (8008f7c <prvResetNextTaskUnblockTime+0x38>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f54:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <prvResetNextTaskUnblockTime+0x3c>)
 8008f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f5c:	e008      	b.n	8008f70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f5e:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <prvResetNextTaskUnblockTime+0x38>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	4a04      	ldr	r2, [pc, #16]	; (8008f80 <prvResetNextTaskUnblockTime+0x3c>)
 8008f6e:	6013      	str	r3, [r2, #0]
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	20005024 	.word	0x20005024
 8008f80:	2000508c 	.word	0x2000508c

08008f84 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008f92:	f000 fb8f 	bl	80096b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008f96:	4b29      	ldr	r3, [pc, #164]	; (800903c <xTaskNotifyWait+0xb8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d01c      	beq.n	8008fde <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008fa4:	4b25      	ldr	r3, [pc, #148]	; (800903c <xTaskNotifyWait+0xb8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	43d2      	mvns	r2, r2
 8008fb0:	400a      	ands	r2, r1
 8008fb2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008fb6:	4b21      	ldr	r3, [pc, #132]	; (800903c <xTaskNotifyWait+0xb8>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	6838      	ldr	r0, [r7, #0]
 8008fca:	f000 f9dd 	bl	8009388 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008fce:	4b1c      	ldr	r3, [pc, #112]	; (8009040 <xTaskNotifyWait+0xbc>)
 8008fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008fde:	f000 fb99 	bl	8009714 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008fe2:	f000 fb67 	bl	80096b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d005      	beq.n	8008ff8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008fec:	4b13      	ldr	r3, [pc, #76]	; (800903c <xTaskNotifyWait+0xb8>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008ff8:	4b10      	ldr	r3, [pc, #64]	; (800903c <xTaskNotifyWait+0xb8>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d002      	beq.n	800900c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009006:	2300      	movs	r3, #0
 8009008:	617b      	str	r3, [r7, #20]
 800900a:	e00a      	b.n	8009022 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800900c:	4b0b      	ldr	r3, [pc, #44]	; (800903c <xTaskNotifyWait+0xb8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	43d2      	mvns	r2, r2
 8009018:	400a      	ands	r2, r1
 800901a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 800901e:	2301      	movs	r3, #1
 8009020:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009022:	4b06      	ldr	r3, [pc, #24]	; (800903c <xTaskNotifyWait+0xb8>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 800902c:	f000 fb72 	bl	8009714 <vPortExitCritical>

		return xReturn;
 8009030:	697b      	ldr	r3, [r7, #20]
	}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20004f6c 	.word	0x20004f6c
 8009040:	e000ed04 	.word	0xe000ed04

08009044 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08a      	sub	sp, #40	; 0x28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	4613      	mov	r3, r2
 8009052:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009054:	2301      	movs	r3, #1
 8009056:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10a      	bne.n	8009074 <xTaskGenericNotify+0x30>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	61bb      	str	r3, [r7, #24]
}
 8009070:	bf00      	nop
 8009072:	e7fe      	b.n	8009072 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009078:	f000 fb1c 	bl	80096b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d004      	beq.n	800908c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009092:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d82d      	bhi.n	80090fe <xTaskGenericNotify+0xba>
 80090a2:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <xTaskGenericNotify+0x64>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	08009121 	.word	0x08009121
 80090ac:	080090bd 	.word	0x080090bd
 80090b0:	080090cf 	.word	0x080090cf
 80090b4:	080090df 	.word	0x080090df
 80090b8:	080090e9 	.word	0x080090e9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	431a      	orrs	r2, r3
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80090cc:	e02b      	b.n	8009126 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80090dc:	e023      	b.n	8009126 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80090e6:	e01e      	b.n	8009126 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80090e8:	7ffb      	ldrb	r3, [r7, #31]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d004      	beq.n	80090f8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80090f6:	e016      	b.n	8009126 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80090fc:	e013      	b.n	8009126 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009108:	d00c      	beq.n	8009124 <xTaskGenericNotify+0xe0>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	617b      	str	r3, [r7, #20]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <xTaskGenericNotify+0xda>
					break;
 8009120:	bf00      	nop
 8009122:	e000      	b.n	8009126 <xTaskGenericNotify+0xe2>

					break;
 8009124:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009126:	7ffb      	ldrb	r3, [r7, #31]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d139      	bne.n	80091a0 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	3304      	adds	r3, #4
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff f987 	bl	8008444 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913a:	2201      	movs	r2, #1
 800913c:	409a      	lsls	r2, r3
 800913e:	4b1c      	ldr	r3, [pc, #112]	; (80091b0 <xTaskGenericNotify+0x16c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4313      	orrs	r3, r2
 8009144:	4a1a      	ldr	r2, [pc, #104]	; (80091b0 <xTaskGenericNotify+0x16c>)
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4a17      	ldr	r2, [pc, #92]	; (80091b4 <xTaskGenericNotify+0x170>)
 8009156:	441a      	add	r2, r3
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	3304      	adds	r3, #4
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f7ff f913 	bl	800838a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <xTaskGenericNotify+0x13e>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	613b      	str	r3, [r7, #16]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009182:	6a3b      	ldr	r3, [r7, #32]
 8009184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009186:	4b0c      	ldr	r3, [pc, #48]	; (80091b8 <xTaskGenericNotify+0x174>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	429a      	cmp	r2, r3
 800918e:	d907      	bls.n	80091a0 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009190:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <xTaskGenericNotify+0x178>)
 8009192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80091a0:	f000 fab8 	bl	8009714 <vPortExitCritical>

		return xReturn;
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3728      	adds	r7, #40	; 0x28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20005074 	.word	0x20005074
 80091b4:	20004f70 	.word	0x20004f70
 80091b8:	20004f6c 	.word	0x20004f6c
 80091bc:	e000ed04 	.word	0xe000ed04

080091c0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08e      	sub	sp, #56	; 0x38
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	4613      	mov	r3, r2
 80091ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80091d0:	2301      	movs	r3, #1
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10a      	bne.n	80091f0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091ec:	bf00      	nop
 80091ee:	e7fe      	b.n	80091ee <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091f0:	f000 fb42 	bl	8009878 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091f8:	f3ef 8211 	mrs	r2, BASEPRI
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	623a      	str	r2, [r7, #32]
 800920e:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009210:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009226:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800922a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	2202      	movs	r2, #2
 8009232:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	2b04      	cmp	r3, #4
 800923a:	d82f      	bhi.n	800929c <xTaskGenericNotifyFromISR+0xdc>
 800923c:	a201      	add	r2, pc, #4	; (adr r2, 8009244 <xTaskGenericNotifyFromISR+0x84>)
 800923e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009242:	bf00      	nop
 8009244:	080092bf 	.word	0x080092bf
 8009248:	08009259 	.word	0x08009259
 800924c:	0800926b 	.word	0x0800926b
 8009250:	0800927b 	.word	0x0800927b
 8009254:	08009285 	.word	0x08009285
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	431a      	orrs	r2, r3
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009268:	e02c      	b.n	80092c4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009278:	e024      	b.n	80092c4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009282:	e01f      	b.n	80092c4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009284:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009288:	2b02      	cmp	r3, #2
 800928a:	d004      	beq.n	8009296 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800928c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009294:	e016      	b.n	80092c4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009296:	2300      	movs	r3, #0
 8009298:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800929a:	e013      	b.n	80092c4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092a6:	d00c      	beq.n	80092c2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	61bb      	str	r3, [r7, #24]
}
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <xTaskGenericNotifyFromISR+0xfc>
					break;
 80092be:	bf00      	nop
 80092c0:	e000      	b.n	80092c4 <xTaskGenericNotifyFromISR+0x104>
					break;
 80092c2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80092c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d145      	bne.n	8009358 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00a      	beq.n	80092ea <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	617b      	str	r3, [r7, #20]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ea:	4b21      	ldr	r3, [pc, #132]	; (8009370 <xTaskGenericNotifyFromISR+0x1b0>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d11c      	bne.n	800932c <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f4:	3304      	adds	r3, #4
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff f8a4 	bl	8008444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009300:	2201      	movs	r2, #1
 8009302:	409a      	lsls	r2, r3
 8009304:	4b1b      	ldr	r3, [pc, #108]	; (8009374 <xTaskGenericNotifyFromISR+0x1b4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4313      	orrs	r3, r2
 800930a:	4a1a      	ldr	r2, [pc, #104]	; (8009374 <xTaskGenericNotifyFromISR+0x1b4>)
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4a17      	ldr	r2, [pc, #92]	; (8009378 <xTaskGenericNotifyFromISR+0x1b8>)
 800931c:	441a      	add	r2, r3
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	3304      	adds	r3, #4
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f7ff f830 	bl	800838a <vListInsertEnd>
 800932a:	e005      	b.n	8009338 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	3318      	adds	r3, #24
 8009330:	4619      	mov	r1, r3
 8009332:	4812      	ldr	r0, [pc, #72]	; (800937c <xTaskGenericNotifyFromISR+0x1bc>)
 8009334:	f7ff f829 	bl	800838a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	4b10      	ldr	r3, [pc, #64]	; (8009380 <xTaskGenericNotifyFromISR+0x1c0>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009342:	429a      	cmp	r2, r3
 8009344:	d908      	bls.n	8009358 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800934c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800934e:	2201      	movs	r2, #1
 8009350:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <xTaskGenericNotifyFromISR+0x1c4>)
 8009354:	2201      	movs	r2, #1
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009362:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009366:	4618      	mov	r0, r3
 8009368:	3738      	adds	r7, #56	; 0x38
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20005094 	.word	0x20005094
 8009374:	20005074 	.word	0x20005074
 8009378:	20004f70 	.word	0x20004f70
 800937c:	2000502c 	.word	0x2000502c
 8009380:	20004f6c 	.word	0x20004f6c
 8009384:	20005080 	.word	0x20005080

08009388 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009392:	4b29      	ldr	r3, [pc, #164]	; (8009438 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009398:	4b28      	ldr	r3, [pc, #160]	; (800943c <prvAddCurrentTaskToDelayedList+0xb4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3304      	adds	r3, #4
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff f850 	bl	8008444 <uxListRemove>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10b      	bne.n	80093c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80093aa:	4b24      	ldr	r3, [pc, #144]	; (800943c <prvAddCurrentTaskToDelayedList+0xb4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	2201      	movs	r2, #1
 80093b2:	fa02 f303 	lsl.w	r3, r2, r3
 80093b6:	43da      	mvns	r2, r3
 80093b8:	4b21      	ldr	r3, [pc, #132]	; (8009440 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4013      	ands	r3, r2
 80093be:	4a20      	ldr	r2, [pc, #128]	; (8009440 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093c8:	d10a      	bne.n	80093e0 <prvAddCurrentTaskToDelayedList+0x58>
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093d0:	4b1a      	ldr	r3, [pc, #104]	; (800943c <prvAddCurrentTaskToDelayedList+0xb4>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3304      	adds	r3, #4
 80093d6:	4619      	mov	r1, r3
 80093d8:	481a      	ldr	r0, [pc, #104]	; (8009444 <prvAddCurrentTaskToDelayedList+0xbc>)
 80093da:	f7fe ffd6 	bl	800838a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093de:	e026      	b.n	800942e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4413      	add	r3, r2
 80093e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093e8:	4b14      	ldr	r3, [pc, #80]	; (800943c <prvAddCurrentTaskToDelayedList+0xb4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d209      	bcs.n	800940c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093f8:	4b13      	ldr	r3, [pc, #76]	; (8009448 <prvAddCurrentTaskToDelayedList+0xc0>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	4b0f      	ldr	r3, [pc, #60]	; (800943c <prvAddCurrentTaskToDelayedList+0xb4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3304      	adds	r3, #4
 8009402:	4619      	mov	r1, r3
 8009404:	4610      	mov	r0, r2
 8009406:	f7fe ffe4 	bl	80083d2 <vListInsert>
}
 800940a:	e010      	b.n	800942e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800940c:	4b0f      	ldr	r3, [pc, #60]	; (800944c <prvAddCurrentTaskToDelayedList+0xc4>)
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3304      	adds	r3, #4
 8009416:	4619      	mov	r1, r3
 8009418:	4610      	mov	r0, r2
 800941a:	f7fe ffda 	bl	80083d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800941e:	4b0c      	ldr	r3, [pc, #48]	; (8009450 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	429a      	cmp	r2, r3
 8009426:	d202      	bcs.n	800942e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009428:	4a09      	ldr	r2, [pc, #36]	; (8009450 <prvAddCurrentTaskToDelayedList+0xc8>)
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	6013      	str	r3, [r2, #0]
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	20005070 	.word	0x20005070
 800943c:	20004f6c 	.word	0x20004f6c
 8009440:	20005074 	.word	0x20005074
 8009444:	20005058 	.word	0x20005058
 8009448:	20005028 	.word	0x20005028
 800944c:	20005024 	.word	0x20005024
 8009450:	2000508c 	.word	0x2000508c

08009454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	3b04      	subs	r3, #4
 8009464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800946c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3b04      	subs	r3, #4
 8009472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f023 0201 	bic.w	r2, r3, #1
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3b04      	subs	r3, #4
 8009482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009484:	4a0c      	ldr	r2, [pc, #48]	; (80094b8 <pxPortInitialiseStack+0x64>)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3b14      	subs	r3, #20
 800948e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3b04      	subs	r3, #4
 800949a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f06f 0202 	mvn.w	r2, #2
 80094a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3b20      	subs	r3, #32
 80094a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094aa:	68fb      	ldr	r3, [r7, #12]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	080094bd 	.word	0x080094bd

080094bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094c2:	2300      	movs	r3, #0
 80094c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094c6:	4b12      	ldr	r3, [pc, #72]	; (8009510 <prvTaskExitError+0x54>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ce:	d00a      	beq.n	80094e6 <prvTaskExitError+0x2a>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	60fb      	str	r3, [r7, #12]
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <prvTaskExitError+0x28>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	60bb      	str	r3, [r7, #8]
}
 80094f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094fa:	bf00      	nop
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0fc      	beq.n	80094fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009502:	bf00      	nop
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	20004020 	.word	0x20004020
	...

08009520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009520:	4b07      	ldr	r3, [pc, #28]	; (8009540 <pxCurrentTCBConst2>)
 8009522:	6819      	ldr	r1, [r3, #0]
 8009524:	6808      	ldr	r0, [r1, #0]
 8009526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952a:	f380 8809 	msr	PSP, r0
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f04f 0000 	mov.w	r0, #0
 8009536:	f380 8811 	msr	BASEPRI, r0
 800953a:	4770      	bx	lr
 800953c:	f3af 8000 	nop.w

08009540 <pxCurrentTCBConst2>:
 8009540:	20004f6c 	.word	0x20004f6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop

08009548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009548:	4808      	ldr	r0, [pc, #32]	; (800956c <prvPortStartFirstTask+0x24>)
 800954a:	6800      	ldr	r0, [r0, #0]
 800954c:	6800      	ldr	r0, [r0, #0]
 800954e:	f380 8808 	msr	MSP, r0
 8009552:	f04f 0000 	mov.w	r0, #0
 8009556:	f380 8814 	msr	CONTROL, r0
 800955a:	b662      	cpsie	i
 800955c:	b661      	cpsie	f
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	df00      	svc	0
 8009568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800956a:	bf00      	nop
 800956c:	e000ed08 	.word	0xe000ed08

08009570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009576:	4b46      	ldr	r3, [pc, #280]	; (8009690 <xPortStartScheduler+0x120>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a46      	ldr	r2, [pc, #280]	; (8009694 <xPortStartScheduler+0x124>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d10a      	bne.n	8009596 <xPortStartScheduler+0x26>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	613b      	str	r3, [r7, #16]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009596:	4b3e      	ldr	r3, [pc, #248]	; (8009690 <xPortStartScheduler+0x120>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a3f      	ldr	r2, [pc, #252]	; (8009698 <xPortStartScheduler+0x128>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d10a      	bne.n	80095b6 <xPortStartScheduler+0x46>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	60fb      	str	r3, [r7, #12]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095b6:	4b39      	ldr	r3, [pc, #228]	; (800969c <xPortStartScheduler+0x12c>)
 80095b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	22ff      	movs	r2, #255	; 0xff
 80095c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	4b31      	ldr	r3, [pc, #196]	; (80096a0 <xPortStartScheduler+0x130>)
 80095dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095de:	4b31      	ldr	r3, [pc, #196]	; (80096a4 <xPortStartScheduler+0x134>)
 80095e0:	2207      	movs	r2, #7
 80095e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095e4:	e009      	b.n	80095fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80095e6:	4b2f      	ldr	r3, [pc, #188]	; (80096a4 <xPortStartScheduler+0x134>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	4a2d      	ldr	r2, [pc, #180]	; (80096a4 <xPortStartScheduler+0x134>)
 80095ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009602:	2b80      	cmp	r3, #128	; 0x80
 8009604:	d0ef      	beq.n	80095e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009606:	4b27      	ldr	r3, [pc, #156]	; (80096a4 <xPortStartScheduler+0x134>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f1c3 0307 	rsb	r3, r3, #7
 800960e:	2b04      	cmp	r3, #4
 8009610:	d00a      	beq.n	8009628 <xPortStartScheduler+0xb8>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	60bb      	str	r3, [r7, #8]
}
 8009624:	bf00      	nop
 8009626:	e7fe      	b.n	8009626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009628:	4b1e      	ldr	r3, [pc, #120]	; (80096a4 <xPortStartScheduler+0x134>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	021b      	lsls	r3, r3, #8
 800962e:	4a1d      	ldr	r2, [pc, #116]	; (80096a4 <xPortStartScheduler+0x134>)
 8009630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009632:	4b1c      	ldr	r3, [pc, #112]	; (80096a4 <xPortStartScheduler+0x134>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800963a:	4a1a      	ldr	r2, [pc, #104]	; (80096a4 <xPortStartScheduler+0x134>)
 800963c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	b2da      	uxtb	r2, r3
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009646:	4b18      	ldr	r3, [pc, #96]	; (80096a8 <xPortStartScheduler+0x138>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a17      	ldr	r2, [pc, #92]	; (80096a8 <xPortStartScheduler+0x138>)
 800964c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009652:	4b15      	ldr	r3, [pc, #84]	; (80096a8 <xPortStartScheduler+0x138>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a14      	ldr	r2, [pc, #80]	; (80096a8 <xPortStartScheduler+0x138>)
 8009658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800965c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800965e:	f000 f8dd 	bl	800981c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009662:	4b12      	ldr	r3, [pc, #72]	; (80096ac <xPortStartScheduler+0x13c>)
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009668:	f000 f8fc 	bl	8009864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800966c:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <xPortStartScheduler+0x140>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a0f      	ldr	r2, [pc, #60]	; (80096b0 <xPortStartScheduler+0x140>)
 8009672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009678:	f7ff ff66 	bl	8009548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800967c:	f7ff fb46 	bl	8008d0c <vTaskSwitchContext>
	prvTaskExitError();
 8009680:	f7ff ff1c 	bl	80094bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	e000ed00 	.word	0xe000ed00
 8009694:	410fc271 	.word	0x410fc271
 8009698:	410fc270 	.word	0x410fc270
 800969c:	e000e400 	.word	0xe000e400
 80096a0:	20005098 	.word	0x20005098
 80096a4:	2000509c 	.word	0x2000509c
 80096a8:	e000ed20 	.word	0xe000ed20
 80096ac:	20004020 	.word	0x20004020
 80096b0:	e000ef34 	.word	0xe000ef34

080096b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	607b      	str	r3, [r7, #4]
}
 80096cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096ce:	4b0f      	ldr	r3, [pc, #60]	; (800970c <vPortEnterCritical+0x58>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3301      	adds	r3, #1
 80096d4:	4a0d      	ldr	r2, [pc, #52]	; (800970c <vPortEnterCritical+0x58>)
 80096d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096d8:	4b0c      	ldr	r3, [pc, #48]	; (800970c <vPortEnterCritical+0x58>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d10f      	bne.n	8009700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096e0:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <vPortEnterCritical+0x5c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00a      	beq.n	8009700 <vPortEnterCritical+0x4c>
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	603b      	str	r3, [r7, #0]
}
 80096fc:	bf00      	nop
 80096fe:	e7fe      	b.n	80096fe <vPortEnterCritical+0x4a>
	}
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	20004020 	.word	0x20004020
 8009710:	e000ed04 	.word	0xe000ed04

08009714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800971a:	4b12      	ldr	r3, [pc, #72]	; (8009764 <vPortExitCritical+0x50>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <vPortExitCritical+0x24>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	607b      	str	r3, [r7, #4]
}
 8009734:	bf00      	nop
 8009736:	e7fe      	b.n	8009736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009738:	4b0a      	ldr	r3, [pc, #40]	; (8009764 <vPortExitCritical+0x50>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	3b01      	subs	r3, #1
 800973e:	4a09      	ldr	r2, [pc, #36]	; (8009764 <vPortExitCritical+0x50>)
 8009740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009742:	4b08      	ldr	r3, [pc, #32]	; (8009764 <vPortExitCritical+0x50>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d105      	bne.n	8009756 <vPortExitCritical+0x42>
 800974a:	2300      	movs	r3, #0
 800974c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	f383 8811 	msr	BASEPRI, r3
}
 8009754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	20004020 	.word	0x20004020
	...

08009770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009770:	f3ef 8009 	mrs	r0, PSP
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	4b15      	ldr	r3, [pc, #84]	; (80097d0 <pxCurrentTCBConst>)
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	f01e 0f10 	tst.w	lr, #16
 8009780:	bf08      	it	eq
 8009782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978a:	6010      	str	r0, [r2, #0]
 800978c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009794:	f380 8811 	msr	BASEPRI, r0
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f7ff fab4 	bl	8008d0c <vTaskSwitchContext>
 80097a4:	f04f 0000 	mov.w	r0, #0
 80097a8:	f380 8811 	msr	BASEPRI, r0
 80097ac:	bc09      	pop	{r0, r3}
 80097ae:	6819      	ldr	r1, [r3, #0]
 80097b0:	6808      	ldr	r0, [r1, #0]
 80097b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b6:	f01e 0f10 	tst.w	lr, #16
 80097ba:	bf08      	it	eq
 80097bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097c0:	f380 8809 	msr	PSP, r0
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	f3af 8000 	nop.w

080097d0 <pxCurrentTCBConst>:
 80097d0:	20004f6c 	.word	0x20004f6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop

080097d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	607b      	str	r3, [r7, #4]
}
 80097f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097f2:	f7ff f9d3 	bl	8008b9c <xTaskIncrementTick>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097fc:	4b06      	ldr	r3, [pc, #24]	; (8009818 <SysTick_Handler+0x40>)
 80097fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	2300      	movs	r3, #0
 8009806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	f383 8811 	msr	BASEPRI, r3
}
 800980e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800981c:	b480      	push	{r7}
 800981e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009820:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <vPortSetupTimerInterrupt+0x34>)
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009826:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <vPortSetupTimerInterrupt+0x38>)
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800982c:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <vPortSetupTimerInterrupt+0x3c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a0a      	ldr	r2, [pc, #40]	; (800985c <vPortSetupTimerInterrupt+0x40>)
 8009832:	fba2 2303 	umull	r2, r3, r2, r3
 8009836:	099b      	lsrs	r3, r3, #6
 8009838:	4a09      	ldr	r2, [pc, #36]	; (8009860 <vPortSetupTimerInterrupt+0x44>)
 800983a:	3b01      	subs	r3, #1
 800983c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800983e:	4b04      	ldr	r3, [pc, #16]	; (8009850 <vPortSetupTimerInterrupt+0x34>)
 8009840:	2207      	movs	r2, #7
 8009842:	601a      	str	r2, [r3, #0]
}
 8009844:	bf00      	nop
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	e000e010 	.word	0xe000e010
 8009854:	e000e018 	.word	0xe000e018
 8009858:	20000000 	.word	0x20000000
 800985c:	10624dd3 	.word	0x10624dd3
 8009860:	e000e014 	.word	0xe000e014

08009864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009874 <vPortEnableVFP+0x10>
 8009868:	6801      	ldr	r1, [r0, #0]
 800986a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800986e:	6001      	str	r1, [r0, #0]
 8009870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009872:	bf00      	nop
 8009874:	e000ed88 	.word	0xe000ed88

08009878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800987e:	f3ef 8305 	mrs	r3, IPSR
 8009882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b0f      	cmp	r3, #15
 8009888:	d914      	bls.n	80098b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800988a:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <vPortValidateInterruptPriority+0x70>)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4413      	add	r3, r2
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009894:	4b15      	ldr	r3, [pc, #84]	; (80098ec <vPortValidateInterruptPriority+0x74>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	7afa      	ldrb	r2, [r7, #11]
 800989a:	429a      	cmp	r2, r3
 800989c:	d20a      	bcs.n	80098b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	607b      	str	r3, [r7, #4]
}
 80098b0:	bf00      	nop
 80098b2:	e7fe      	b.n	80098b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098b4:	4b0e      	ldr	r3, [pc, #56]	; (80098f0 <vPortValidateInterruptPriority+0x78>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098bc:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <vPortValidateInterruptPriority+0x7c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d90a      	bls.n	80098da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	603b      	str	r3, [r7, #0]
}
 80098d6:	bf00      	nop
 80098d8:	e7fe      	b.n	80098d8 <vPortValidateInterruptPriority+0x60>
	}
 80098da:	bf00      	nop
 80098dc:	3714      	adds	r7, #20
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	e000e3f0 	.word	0xe000e3f0
 80098ec:	20005098 	.word	0x20005098
 80098f0:	e000ed0c 	.word	0xe000ed0c
 80098f4:	2000509c 	.word	0x2000509c

080098f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08a      	sub	sp, #40	; 0x28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009900:	2300      	movs	r3, #0
 8009902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009904:	f7ff f8a0 	bl	8008a48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009908:	4b5b      	ldr	r3, [pc, #364]	; (8009a78 <pvPortMalloc+0x180>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009910:	f000 f920 	bl	8009b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009914:	4b59      	ldr	r3, [pc, #356]	; (8009a7c <pvPortMalloc+0x184>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	f040 8093 	bne.w	8009a48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d01d      	beq.n	8009964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009928:	2208      	movs	r2, #8
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4413      	add	r3, r2
 800992e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f003 0307 	and.w	r3, r3, #7
 8009936:	2b00      	cmp	r3, #0
 8009938:	d014      	beq.n	8009964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f023 0307 	bic.w	r3, r3, #7
 8009940:	3308      	adds	r3, #8
 8009942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00a      	beq.n	8009964 <pvPortMalloc+0x6c>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	617b      	str	r3, [r7, #20]
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d06e      	beq.n	8009a48 <pvPortMalloc+0x150>
 800996a:	4b45      	ldr	r3, [pc, #276]	; (8009a80 <pvPortMalloc+0x188>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	429a      	cmp	r2, r3
 8009972:	d869      	bhi.n	8009a48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009974:	4b43      	ldr	r3, [pc, #268]	; (8009a84 <pvPortMalloc+0x18c>)
 8009976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009978:	4b42      	ldr	r3, [pc, #264]	; (8009a84 <pvPortMalloc+0x18c>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800997e:	e004      	b.n	800998a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	429a      	cmp	r2, r3
 8009992:	d903      	bls.n	800999c <pvPortMalloc+0xa4>
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1f1      	bne.n	8009980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800999c:	4b36      	ldr	r3, [pc, #216]	; (8009a78 <pvPortMalloc+0x180>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d050      	beq.n	8009a48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2208      	movs	r2, #8
 80099ac:	4413      	add	r3, r2
 80099ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	2308      	movs	r3, #8
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d91f      	bls.n	8009a08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4413      	add	r3, r2
 80099ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	f003 0307 	and.w	r3, r3, #7
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00a      	beq.n	80099f0 <pvPortMalloc+0xf8>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	613b      	str	r3, [r7, #16]
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	1ad2      	subs	r2, r2, r3
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a02:	69b8      	ldr	r0, [r7, #24]
 8009a04:	f000 f908 	bl	8009c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a08:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <pvPortMalloc+0x188>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	4a1b      	ldr	r2, [pc, #108]	; (8009a80 <pvPortMalloc+0x188>)
 8009a14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a16:	4b1a      	ldr	r3, [pc, #104]	; (8009a80 <pvPortMalloc+0x188>)
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	4b1b      	ldr	r3, [pc, #108]	; (8009a88 <pvPortMalloc+0x190>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d203      	bcs.n	8009a2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a22:	4b17      	ldr	r3, [pc, #92]	; (8009a80 <pvPortMalloc+0x188>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a18      	ldr	r2, [pc, #96]	; (8009a88 <pvPortMalloc+0x190>)
 8009a28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	4b13      	ldr	r3, [pc, #76]	; (8009a7c <pvPortMalloc+0x184>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	431a      	orrs	r2, r3
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a3e:	4b13      	ldr	r3, [pc, #76]	; (8009a8c <pvPortMalloc+0x194>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3301      	adds	r3, #1
 8009a44:	4a11      	ldr	r2, [pc, #68]	; (8009a8c <pvPortMalloc+0x194>)
 8009a46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a48:	f7ff f80c 	bl	8008a64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	f003 0307 	and.w	r3, r3, #7
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00a      	beq.n	8009a6c <pvPortMalloc+0x174>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	60fb      	str	r3, [r7, #12]
}
 8009a68:	bf00      	nop
 8009a6a:	e7fe      	b.n	8009a6a <pvPortMalloc+0x172>
	return pvReturn;
 8009a6c:	69fb      	ldr	r3, [r7, #28]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3728      	adds	r7, #40	; 0x28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20009ec8 	.word	0x20009ec8
 8009a7c:	20009edc 	.word	0x20009edc
 8009a80:	20009ecc 	.word	0x20009ecc
 8009a84:	20009ec0 	.word	0x20009ec0
 8009a88:	20009ed0 	.word	0x20009ed0
 8009a8c:	20009ed4 	.word	0x20009ed4

08009a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d04d      	beq.n	8009b3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009aa2:	2308      	movs	r3, #8
 8009aa4:	425b      	negs	r3, r3
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	4b24      	ldr	r3, [pc, #144]	; (8009b48 <vPortFree+0xb8>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10a      	bne.n	8009ad4 <vPortFree+0x44>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	60fb      	str	r3, [r7, #12]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00a      	beq.n	8009af2 <vPortFree+0x62>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	60bb      	str	r3, [r7, #8]
}
 8009aee:	bf00      	nop
 8009af0:	e7fe      	b.n	8009af0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	4b14      	ldr	r3, [pc, #80]	; (8009b48 <vPortFree+0xb8>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4013      	ands	r3, r2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d01e      	beq.n	8009b3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d11a      	bne.n	8009b3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	4b0e      	ldr	r3, [pc, #56]	; (8009b48 <vPortFree+0xb8>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	43db      	mvns	r3, r3
 8009b12:	401a      	ands	r2, r3
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b18:	f7fe ff96 	bl	8008a48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	4b0a      	ldr	r3, [pc, #40]	; (8009b4c <vPortFree+0xbc>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4413      	add	r3, r2
 8009b26:	4a09      	ldr	r2, [pc, #36]	; (8009b4c <vPortFree+0xbc>)
 8009b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b2a:	6938      	ldr	r0, [r7, #16]
 8009b2c:	f000 f874 	bl	8009c18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b30:	4b07      	ldr	r3, [pc, #28]	; (8009b50 <vPortFree+0xc0>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	4a06      	ldr	r2, [pc, #24]	; (8009b50 <vPortFree+0xc0>)
 8009b38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b3a:	f7fe ff93 	bl	8008a64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b3e:	bf00      	nop
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20009edc 	.word	0x20009edc
 8009b4c:	20009ecc 	.word	0x20009ecc
 8009b50:	20009ed8 	.word	0x20009ed8

08009b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b5a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b60:	4b27      	ldr	r3, [pc, #156]	; (8009c00 <prvHeapInit+0xac>)
 8009b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00c      	beq.n	8009b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3307      	adds	r3, #7
 8009b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 0307 	bic.w	r3, r3, #7
 8009b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	4a1f      	ldr	r2, [pc, #124]	; (8009c00 <prvHeapInit+0xac>)
 8009b84:	4413      	add	r3, r2
 8009b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b8c:	4a1d      	ldr	r2, [pc, #116]	; (8009c04 <prvHeapInit+0xb0>)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b92:	4b1c      	ldr	r3, [pc, #112]	; (8009c04 <prvHeapInit+0xb0>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ba0:	2208      	movs	r2, #8
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	1a9b      	subs	r3, r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 0307 	bic.w	r3, r3, #7
 8009bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4a15      	ldr	r2, [pc, #84]	; (8009c08 <prvHeapInit+0xb4>)
 8009bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bb6:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <prvHeapInit+0xb4>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bbe:	4b12      	ldr	r3, [pc, #72]	; (8009c08 <prvHeapInit+0xb4>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	1ad2      	subs	r2, r2, r3
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bd4:	4b0c      	ldr	r3, [pc, #48]	; (8009c08 <prvHeapInit+0xb4>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	4a0a      	ldr	r2, [pc, #40]	; (8009c0c <prvHeapInit+0xb8>)
 8009be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4a09      	ldr	r2, [pc, #36]	; (8009c10 <prvHeapInit+0xbc>)
 8009bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bec:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <prvHeapInit+0xc0>)
 8009bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009bf2:	601a      	str	r2, [r3, #0]
}
 8009bf4:	bf00      	nop
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	200050a0 	.word	0x200050a0
 8009c04:	20009ec0 	.word	0x20009ec0
 8009c08:	20009ec8 	.word	0x20009ec8
 8009c0c:	20009ed0 	.word	0x20009ed0
 8009c10:	20009ecc 	.word	0x20009ecc
 8009c14:	20009edc 	.word	0x20009edc

08009c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c20:	4b28      	ldr	r3, [pc, #160]	; (8009cc4 <prvInsertBlockIntoFreeList+0xac>)
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e002      	b.n	8009c2c <prvInsertBlockIntoFreeList+0x14>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d8f7      	bhi.n	8009c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	4413      	add	r3, r2
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d108      	bne.n	8009c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	441a      	add	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	441a      	add	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d118      	bne.n	8009ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	4b15      	ldr	r3, [pc, #84]	; (8009cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d00d      	beq.n	8009c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	441a      	add	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	e008      	b.n	8009ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c96:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	e003      	b.n	8009ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d002      	beq.n	8009cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cb6:	bf00      	nop
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20009ec0 	.word	0x20009ec0
 8009cc8:	20009ec8 	.word	0x20009ec8

08009ccc <__errno>:
 8009ccc:	4b01      	ldr	r3, [pc, #4]	; (8009cd4 <__errno+0x8>)
 8009cce:	6818      	ldr	r0, [r3, #0]
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	20004024 	.word	0x20004024

08009cd8 <__libc_init_array>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	4d0d      	ldr	r5, [pc, #52]	; (8009d10 <__libc_init_array+0x38>)
 8009cdc:	4c0d      	ldr	r4, [pc, #52]	; (8009d14 <__libc_init_array+0x3c>)
 8009cde:	1b64      	subs	r4, r4, r5
 8009ce0:	10a4      	asrs	r4, r4, #2
 8009ce2:	2600      	movs	r6, #0
 8009ce4:	42a6      	cmp	r6, r4
 8009ce6:	d109      	bne.n	8009cfc <__libc_init_array+0x24>
 8009ce8:	4d0b      	ldr	r5, [pc, #44]	; (8009d18 <__libc_init_array+0x40>)
 8009cea:	4c0c      	ldr	r4, [pc, #48]	; (8009d1c <__libc_init_array+0x44>)
 8009cec:	f000 fd0c 	bl	800a708 <_init>
 8009cf0:	1b64      	subs	r4, r4, r5
 8009cf2:	10a4      	asrs	r4, r4, #2
 8009cf4:	2600      	movs	r6, #0
 8009cf6:	42a6      	cmp	r6, r4
 8009cf8:	d105      	bne.n	8009d06 <__libc_init_array+0x2e>
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}
 8009cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d00:	4798      	blx	r3
 8009d02:	3601      	adds	r6, #1
 8009d04:	e7ee      	b.n	8009ce4 <__libc_init_array+0xc>
 8009d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d0a:	4798      	blx	r3
 8009d0c:	3601      	adds	r6, #1
 8009d0e:	e7f2      	b.n	8009cf6 <__libc_init_array+0x1e>
 8009d10:	08036090 	.word	0x08036090
 8009d14:	08036090 	.word	0x08036090
 8009d18:	08036090 	.word	0x08036090
 8009d1c:	08036094 	.word	0x08036094

08009d20 <__retarget_lock_acquire_recursive>:
 8009d20:	4770      	bx	lr

08009d22 <__retarget_lock_release_recursive>:
 8009d22:	4770      	bx	lr

08009d24 <memcpy>:
 8009d24:	440a      	add	r2, r1
 8009d26:	4291      	cmp	r1, r2
 8009d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d2c:	d100      	bne.n	8009d30 <memcpy+0xc>
 8009d2e:	4770      	bx	lr
 8009d30:	b510      	push	{r4, lr}
 8009d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d3a:	4291      	cmp	r1, r2
 8009d3c:	d1f9      	bne.n	8009d32 <memcpy+0xe>
 8009d3e:	bd10      	pop	{r4, pc}

08009d40 <memset>:
 8009d40:	4402      	add	r2, r0
 8009d42:	4603      	mov	r3, r0
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d100      	bne.n	8009d4a <memset+0xa>
 8009d48:	4770      	bx	lr
 8009d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d4e:	e7f9      	b.n	8009d44 <memset+0x4>

08009d50 <sbrk_aligned>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	4e0e      	ldr	r6, [pc, #56]	; (8009d8c <sbrk_aligned+0x3c>)
 8009d54:	460c      	mov	r4, r1
 8009d56:	6831      	ldr	r1, [r6, #0]
 8009d58:	4605      	mov	r5, r0
 8009d5a:	b911      	cbnz	r1, 8009d62 <sbrk_aligned+0x12>
 8009d5c:	f000 f8f6 	bl	8009f4c <_sbrk_r>
 8009d60:	6030      	str	r0, [r6, #0]
 8009d62:	4621      	mov	r1, r4
 8009d64:	4628      	mov	r0, r5
 8009d66:	f000 f8f1 	bl	8009f4c <_sbrk_r>
 8009d6a:	1c43      	adds	r3, r0, #1
 8009d6c:	d00a      	beq.n	8009d84 <sbrk_aligned+0x34>
 8009d6e:	1cc4      	adds	r4, r0, #3
 8009d70:	f024 0403 	bic.w	r4, r4, #3
 8009d74:	42a0      	cmp	r0, r4
 8009d76:	d007      	beq.n	8009d88 <sbrk_aligned+0x38>
 8009d78:	1a21      	subs	r1, r4, r0
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f000 f8e6 	bl	8009f4c <_sbrk_r>
 8009d80:	3001      	adds	r0, #1
 8009d82:	d101      	bne.n	8009d88 <sbrk_aligned+0x38>
 8009d84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d88:	4620      	mov	r0, r4
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	20009ee8 	.word	0x20009ee8

08009d90 <_malloc_r>:
 8009d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d94:	1ccd      	adds	r5, r1, #3
 8009d96:	f025 0503 	bic.w	r5, r5, #3
 8009d9a:	3508      	adds	r5, #8
 8009d9c:	2d0c      	cmp	r5, #12
 8009d9e:	bf38      	it	cc
 8009da0:	250c      	movcc	r5, #12
 8009da2:	2d00      	cmp	r5, #0
 8009da4:	4607      	mov	r7, r0
 8009da6:	db01      	blt.n	8009dac <_malloc_r+0x1c>
 8009da8:	42a9      	cmp	r1, r5
 8009daa:	d905      	bls.n	8009db8 <_malloc_r+0x28>
 8009dac:	230c      	movs	r3, #12
 8009dae:	603b      	str	r3, [r7, #0]
 8009db0:	2600      	movs	r6, #0
 8009db2:	4630      	mov	r0, r6
 8009db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db8:	4e2e      	ldr	r6, [pc, #184]	; (8009e74 <_malloc_r+0xe4>)
 8009dba:	f000 f90b 	bl	8009fd4 <__malloc_lock>
 8009dbe:	6833      	ldr	r3, [r6, #0]
 8009dc0:	461c      	mov	r4, r3
 8009dc2:	bb34      	cbnz	r4, 8009e12 <_malloc_r+0x82>
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	f7ff ffc2 	bl	8009d50 <sbrk_aligned>
 8009dcc:	1c43      	adds	r3, r0, #1
 8009dce:	4604      	mov	r4, r0
 8009dd0:	d14d      	bne.n	8009e6e <_malloc_r+0xde>
 8009dd2:	6834      	ldr	r4, [r6, #0]
 8009dd4:	4626      	mov	r6, r4
 8009dd6:	2e00      	cmp	r6, #0
 8009dd8:	d140      	bne.n	8009e5c <_malloc_r+0xcc>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4638      	mov	r0, r7
 8009de0:	eb04 0803 	add.w	r8, r4, r3
 8009de4:	f000 f8b2 	bl	8009f4c <_sbrk_r>
 8009de8:	4580      	cmp	r8, r0
 8009dea:	d13a      	bne.n	8009e62 <_malloc_r+0xd2>
 8009dec:	6821      	ldr	r1, [r4, #0]
 8009dee:	3503      	adds	r5, #3
 8009df0:	1a6d      	subs	r5, r5, r1
 8009df2:	f025 0503 	bic.w	r5, r5, #3
 8009df6:	3508      	adds	r5, #8
 8009df8:	2d0c      	cmp	r5, #12
 8009dfa:	bf38      	it	cc
 8009dfc:	250c      	movcc	r5, #12
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4638      	mov	r0, r7
 8009e02:	f7ff ffa5 	bl	8009d50 <sbrk_aligned>
 8009e06:	3001      	adds	r0, #1
 8009e08:	d02b      	beq.n	8009e62 <_malloc_r+0xd2>
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	442b      	add	r3, r5
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	e00e      	b.n	8009e30 <_malloc_r+0xa0>
 8009e12:	6822      	ldr	r2, [r4, #0]
 8009e14:	1b52      	subs	r2, r2, r5
 8009e16:	d41e      	bmi.n	8009e56 <_malloc_r+0xc6>
 8009e18:	2a0b      	cmp	r2, #11
 8009e1a:	d916      	bls.n	8009e4a <_malloc_r+0xba>
 8009e1c:	1961      	adds	r1, r4, r5
 8009e1e:	42a3      	cmp	r3, r4
 8009e20:	6025      	str	r5, [r4, #0]
 8009e22:	bf18      	it	ne
 8009e24:	6059      	strne	r1, [r3, #4]
 8009e26:	6863      	ldr	r3, [r4, #4]
 8009e28:	bf08      	it	eq
 8009e2a:	6031      	streq	r1, [r6, #0]
 8009e2c:	5162      	str	r2, [r4, r5]
 8009e2e:	604b      	str	r3, [r1, #4]
 8009e30:	4638      	mov	r0, r7
 8009e32:	f104 060b 	add.w	r6, r4, #11
 8009e36:	f000 f8d3 	bl	8009fe0 <__malloc_unlock>
 8009e3a:	f026 0607 	bic.w	r6, r6, #7
 8009e3e:	1d23      	adds	r3, r4, #4
 8009e40:	1af2      	subs	r2, r6, r3
 8009e42:	d0b6      	beq.n	8009db2 <_malloc_r+0x22>
 8009e44:	1b9b      	subs	r3, r3, r6
 8009e46:	50a3      	str	r3, [r4, r2]
 8009e48:	e7b3      	b.n	8009db2 <_malloc_r+0x22>
 8009e4a:	6862      	ldr	r2, [r4, #4]
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	bf0c      	ite	eq
 8009e50:	6032      	streq	r2, [r6, #0]
 8009e52:	605a      	strne	r2, [r3, #4]
 8009e54:	e7ec      	b.n	8009e30 <_malloc_r+0xa0>
 8009e56:	4623      	mov	r3, r4
 8009e58:	6864      	ldr	r4, [r4, #4]
 8009e5a:	e7b2      	b.n	8009dc2 <_malloc_r+0x32>
 8009e5c:	4634      	mov	r4, r6
 8009e5e:	6876      	ldr	r6, [r6, #4]
 8009e60:	e7b9      	b.n	8009dd6 <_malloc_r+0x46>
 8009e62:	230c      	movs	r3, #12
 8009e64:	603b      	str	r3, [r7, #0]
 8009e66:	4638      	mov	r0, r7
 8009e68:	f000 f8ba 	bl	8009fe0 <__malloc_unlock>
 8009e6c:	e7a1      	b.n	8009db2 <_malloc_r+0x22>
 8009e6e:	6025      	str	r5, [r4, #0]
 8009e70:	e7de      	b.n	8009e30 <_malloc_r+0xa0>
 8009e72:	bf00      	nop
 8009e74:	20009ee4 	.word	0x20009ee4

08009e78 <cleanup_glue>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	6809      	ldr	r1, [r1, #0]
 8009e7e:	4605      	mov	r5, r0
 8009e80:	b109      	cbz	r1, 8009e86 <cleanup_glue+0xe>
 8009e82:	f7ff fff9 	bl	8009e78 <cleanup_glue>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4628      	mov	r0, r5
 8009e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e8e:	f000 b8ad 	b.w	8009fec <_free_r>
	...

08009e94 <_reclaim_reent>:
 8009e94:	4b2c      	ldr	r3, [pc, #176]	; (8009f48 <_reclaim_reent+0xb4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4283      	cmp	r3, r0
 8009e9a:	b570      	push	{r4, r5, r6, lr}
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	d051      	beq.n	8009f44 <_reclaim_reent+0xb0>
 8009ea0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009ea2:	b143      	cbz	r3, 8009eb6 <_reclaim_reent+0x22>
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d14a      	bne.n	8009f40 <_reclaim_reent+0xac>
 8009eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eac:	6819      	ldr	r1, [r3, #0]
 8009eae:	b111      	cbz	r1, 8009eb6 <_reclaim_reent+0x22>
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f000 f89b 	bl	8009fec <_free_r>
 8009eb6:	6961      	ldr	r1, [r4, #20]
 8009eb8:	b111      	cbz	r1, 8009ec0 <_reclaim_reent+0x2c>
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f000 f896 	bl	8009fec <_free_r>
 8009ec0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009ec2:	b111      	cbz	r1, 8009eca <_reclaim_reent+0x36>
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 f891 	bl	8009fec <_free_r>
 8009eca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ecc:	b111      	cbz	r1, 8009ed4 <_reclaim_reent+0x40>
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f000 f88c 	bl	8009fec <_free_r>
 8009ed4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009ed6:	b111      	cbz	r1, 8009ede <_reclaim_reent+0x4a>
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 f887 	bl	8009fec <_free_r>
 8009ede:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009ee0:	b111      	cbz	r1, 8009ee8 <_reclaim_reent+0x54>
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 f882 	bl	8009fec <_free_r>
 8009ee8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009eea:	b111      	cbz	r1, 8009ef2 <_reclaim_reent+0x5e>
 8009eec:	4620      	mov	r0, r4
 8009eee:	f000 f87d 	bl	8009fec <_free_r>
 8009ef2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009ef4:	b111      	cbz	r1, 8009efc <_reclaim_reent+0x68>
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 f878 	bl	8009fec <_free_r>
 8009efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009efe:	b111      	cbz	r1, 8009f06 <_reclaim_reent+0x72>
 8009f00:	4620      	mov	r0, r4
 8009f02:	f000 f873 	bl	8009fec <_free_r>
 8009f06:	69a3      	ldr	r3, [r4, #24]
 8009f08:	b1e3      	cbz	r3, 8009f44 <_reclaim_reent+0xb0>
 8009f0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	4798      	blx	r3
 8009f10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009f12:	b1b9      	cbz	r1, 8009f44 <_reclaim_reent+0xb0>
 8009f14:	4620      	mov	r0, r4
 8009f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f1a:	f7ff bfad 	b.w	8009e78 <cleanup_glue>
 8009f1e:	5949      	ldr	r1, [r1, r5]
 8009f20:	b941      	cbnz	r1, 8009f34 <_reclaim_reent+0xa0>
 8009f22:	3504      	adds	r5, #4
 8009f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f26:	2d80      	cmp	r5, #128	; 0x80
 8009f28:	68d9      	ldr	r1, [r3, #12]
 8009f2a:	d1f8      	bne.n	8009f1e <_reclaim_reent+0x8a>
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f000 f85d 	bl	8009fec <_free_r>
 8009f32:	e7ba      	b.n	8009eaa <_reclaim_reent+0x16>
 8009f34:	680e      	ldr	r6, [r1, #0]
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 f858 	bl	8009fec <_free_r>
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	e7ef      	b.n	8009f20 <_reclaim_reent+0x8c>
 8009f40:	2500      	movs	r5, #0
 8009f42:	e7ef      	b.n	8009f24 <_reclaim_reent+0x90>
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
 8009f46:	bf00      	nop
 8009f48:	20004024 	.word	0x20004024

08009f4c <_sbrk_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d06      	ldr	r5, [pc, #24]	; (8009f68 <_sbrk_r+0x1c>)
 8009f50:	2300      	movs	r3, #0
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	f7f9 fb24 	bl	80035a4 <_sbrk>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_sbrk_r+0x1a>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_sbrk_r+0x1a>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	20009eec 	.word	0x20009eec

08009f6c <siprintf>:
 8009f6c:	b40e      	push	{r1, r2, r3}
 8009f6e:	b500      	push	{lr}
 8009f70:	b09c      	sub	sp, #112	; 0x70
 8009f72:	ab1d      	add	r3, sp, #116	; 0x74
 8009f74:	9002      	str	r0, [sp, #8]
 8009f76:	9006      	str	r0, [sp, #24]
 8009f78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f7c:	4809      	ldr	r0, [pc, #36]	; (8009fa4 <siprintf+0x38>)
 8009f7e:	9107      	str	r1, [sp, #28]
 8009f80:	9104      	str	r1, [sp, #16]
 8009f82:	4909      	ldr	r1, [pc, #36]	; (8009fa8 <siprintf+0x3c>)
 8009f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f88:	9105      	str	r1, [sp, #20]
 8009f8a:	6800      	ldr	r0, [r0, #0]
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	a902      	add	r1, sp, #8
 8009f90:	f000 f8d4 	bl	800a13c <_svfiprintf_r>
 8009f94:	9b02      	ldr	r3, [sp, #8]
 8009f96:	2200      	movs	r2, #0
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	b01c      	add	sp, #112	; 0x70
 8009f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa0:	b003      	add	sp, #12
 8009fa2:	4770      	bx	lr
 8009fa4:	20004024 	.word	0x20004024
 8009fa8:	ffff0208 	.word	0xffff0208

08009fac <strncat>:
 8009fac:	b530      	push	{r4, r5, lr}
 8009fae:	4604      	mov	r4, r0
 8009fb0:	7825      	ldrb	r5, [r4, #0]
 8009fb2:	4623      	mov	r3, r4
 8009fb4:	3401      	adds	r4, #1
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	d1fa      	bne.n	8009fb0 <strncat+0x4>
 8009fba:	3a01      	subs	r2, #1
 8009fbc:	d304      	bcc.n	8009fc8 <strncat+0x1c>
 8009fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fc2:	f803 4b01 	strb.w	r4, [r3], #1
 8009fc6:	b904      	cbnz	r4, 8009fca <strncat+0x1e>
 8009fc8:	bd30      	pop	{r4, r5, pc}
 8009fca:	2a00      	cmp	r2, #0
 8009fcc:	d1f5      	bne.n	8009fba <strncat+0xe>
 8009fce:	701a      	strb	r2, [r3, #0]
 8009fd0:	e7f3      	b.n	8009fba <strncat+0xe>
	...

08009fd4 <__malloc_lock>:
 8009fd4:	4801      	ldr	r0, [pc, #4]	; (8009fdc <__malloc_lock+0x8>)
 8009fd6:	f7ff bea3 	b.w	8009d20 <__retarget_lock_acquire_recursive>
 8009fda:	bf00      	nop
 8009fdc:	20009ee0 	.word	0x20009ee0

08009fe0 <__malloc_unlock>:
 8009fe0:	4801      	ldr	r0, [pc, #4]	; (8009fe8 <__malloc_unlock+0x8>)
 8009fe2:	f7ff be9e 	b.w	8009d22 <__retarget_lock_release_recursive>
 8009fe6:	bf00      	nop
 8009fe8:	20009ee0 	.word	0x20009ee0

08009fec <_free_r>:
 8009fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fee:	2900      	cmp	r1, #0
 8009ff0:	d044      	beq.n	800a07c <_free_r+0x90>
 8009ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ff6:	9001      	str	r0, [sp, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8009ffe:	bfb8      	it	lt
 800a000:	18e4      	addlt	r4, r4, r3
 800a002:	f7ff ffe7 	bl	8009fd4 <__malloc_lock>
 800a006:	4a1e      	ldr	r2, [pc, #120]	; (800a080 <_free_r+0x94>)
 800a008:	9801      	ldr	r0, [sp, #4]
 800a00a:	6813      	ldr	r3, [r2, #0]
 800a00c:	b933      	cbnz	r3, 800a01c <_free_r+0x30>
 800a00e:	6063      	str	r3, [r4, #4]
 800a010:	6014      	str	r4, [r2, #0]
 800a012:	b003      	add	sp, #12
 800a014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a018:	f7ff bfe2 	b.w	8009fe0 <__malloc_unlock>
 800a01c:	42a3      	cmp	r3, r4
 800a01e:	d908      	bls.n	800a032 <_free_r+0x46>
 800a020:	6825      	ldr	r5, [r4, #0]
 800a022:	1961      	adds	r1, r4, r5
 800a024:	428b      	cmp	r3, r1
 800a026:	bf01      	itttt	eq
 800a028:	6819      	ldreq	r1, [r3, #0]
 800a02a:	685b      	ldreq	r3, [r3, #4]
 800a02c:	1949      	addeq	r1, r1, r5
 800a02e:	6021      	streq	r1, [r4, #0]
 800a030:	e7ed      	b.n	800a00e <_free_r+0x22>
 800a032:	461a      	mov	r2, r3
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	b10b      	cbz	r3, 800a03c <_free_r+0x50>
 800a038:	42a3      	cmp	r3, r4
 800a03a:	d9fa      	bls.n	800a032 <_free_r+0x46>
 800a03c:	6811      	ldr	r1, [r2, #0]
 800a03e:	1855      	adds	r5, r2, r1
 800a040:	42a5      	cmp	r5, r4
 800a042:	d10b      	bne.n	800a05c <_free_r+0x70>
 800a044:	6824      	ldr	r4, [r4, #0]
 800a046:	4421      	add	r1, r4
 800a048:	1854      	adds	r4, r2, r1
 800a04a:	42a3      	cmp	r3, r4
 800a04c:	6011      	str	r1, [r2, #0]
 800a04e:	d1e0      	bne.n	800a012 <_free_r+0x26>
 800a050:	681c      	ldr	r4, [r3, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	6053      	str	r3, [r2, #4]
 800a056:	4421      	add	r1, r4
 800a058:	6011      	str	r1, [r2, #0]
 800a05a:	e7da      	b.n	800a012 <_free_r+0x26>
 800a05c:	d902      	bls.n	800a064 <_free_r+0x78>
 800a05e:	230c      	movs	r3, #12
 800a060:	6003      	str	r3, [r0, #0]
 800a062:	e7d6      	b.n	800a012 <_free_r+0x26>
 800a064:	6825      	ldr	r5, [r4, #0]
 800a066:	1961      	adds	r1, r4, r5
 800a068:	428b      	cmp	r3, r1
 800a06a:	bf04      	itt	eq
 800a06c:	6819      	ldreq	r1, [r3, #0]
 800a06e:	685b      	ldreq	r3, [r3, #4]
 800a070:	6063      	str	r3, [r4, #4]
 800a072:	bf04      	itt	eq
 800a074:	1949      	addeq	r1, r1, r5
 800a076:	6021      	streq	r1, [r4, #0]
 800a078:	6054      	str	r4, [r2, #4]
 800a07a:	e7ca      	b.n	800a012 <_free_r+0x26>
 800a07c:	b003      	add	sp, #12
 800a07e:	bd30      	pop	{r4, r5, pc}
 800a080:	20009ee4 	.word	0x20009ee4

0800a084 <__ssputs_r>:
 800a084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a088:	688e      	ldr	r6, [r1, #8]
 800a08a:	429e      	cmp	r6, r3
 800a08c:	4682      	mov	sl, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	4690      	mov	r8, r2
 800a092:	461f      	mov	r7, r3
 800a094:	d838      	bhi.n	800a108 <__ssputs_r+0x84>
 800a096:	898a      	ldrh	r2, [r1, #12]
 800a098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a09c:	d032      	beq.n	800a104 <__ssputs_r+0x80>
 800a09e:	6825      	ldr	r5, [r4, #0]
 800a0a0:	6909      	ldr	r1, [r1, #16]
 800a0a2:	eba5 0901 	sub.w	r9, r5, r1
 800a0a6:	6965      	ldr	r5, [r4, #20]
 800a0a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	444b      	add	r3, r9
 800a0b4:	106d      	asrs	r5, r5, #1
 800a0b6:	429d      	cmp	r5, r3
 800a0b8:	bf38      	it	cc
 800a0ba:	461d      	movcc	r5, r3
 800a0bc:	0553      	lsls	r3, r2, #21
 800a0be:	d531      	bpl.n	800a124 <__ssputs_r+0xa0>
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7ff fe65 	bl	8009d90 <_malloc_r>
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	b950      	cbnz	r0, 800a0e0 <__ssputs_r+0x5c>
 800a0ca:	230c      	movs	r3, #12
 800a0cc:	f8ca 3000 	str.w	r3, [sl]
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0d6:	81a3      	strh	r3, [r4, #12]
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e0:	6921      	ldr	r1, [r4, #16]
 800a0e2:	464a      	mov	r2, r9
 800a0e4:	f7ff fe1e 	bl	8009d24 <memcpy>
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	6126      	str	r6, [r4, #16]
 800a0f6:	6165      	str	r5, [r4, #20]
 800a0f8:	444e      	add	r6, r9
 800a0fa:	eba5 0509 	sub.w	r5, r5, r9
 800a0fe:	6026      	str	r6, [r4, #0]
 800a100:	60a5      	str	r5, [r4, #8]
 800a102:	463e      	mov	r6, r7
 800a104:	42be      	cmp	r6, r7
 800a106:	d900      	bls.n	800a10a <__ssputs_r+0x86>
 800a108:	463e      	mov	r6, r7
 800a10a:	6820      	ldr	r0, [r4, #0]
 800a10c:	4632      	mov	r2, r6
 800a10e:	4641      	mov	r1, r8
 800a110:	f000 faa8 	bl	800a664 <memmove>
 800a114:	68a3      	ldr	r3, [r4, #8]
 800a116:	1b9b      	subs	r3, r3, r6
 800a118:	60a3      	str	r3, [r4, #8]
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	4433      	add	r3, r6
 800a11e:	6023      	str	r3, [r4, #0]
 800a120:	2000      	movs	r0, #0
 800a122:	e7db      	b.n	800a0dc <__ssputs_r+0x58>
 800a124:	462a      	mov	r2, r5
 800a126:	f000 fab7 	bl	800a698 <_realloc_r>
 800a12a:	4606      	mov	r6, r0
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d1e1      	bne.n	800a0f4 <__ssputs_r+0x70>
 800a130:	6921      	ldr	r1, [r4, #16]
 800a132:	4650      	mov	r0, sl
 800a134:	f7ff ff5a 	bl	8009fec <_free_r>
 800a138:	e7c7      	b.n	800a0ca <__ssputs_r+0x46>
	...

0800a13c <_svfiprintf_r>:
 800a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a140:	4698      	mov	r8, r3
 800a142:	898b      	ldrh	r3, [r1, #12]
 800a144:	061b      	lsls	r3, r3, #24
 800a146:	b09d      	sub	sp, #116	; 0x74
 800a148:	4607      	mov	r7, r0
 800a14a:	460d      	mov	r5, r1
 800a14c:	4614      	mov	r4, r2
 800a14e:	d50e      	bpl.n	800a16e <_svfiprintf_r+0x32>
 800a150:	690b      	ldr	r3, [r1, #16]
 800a152:	b963      	cbnz	r3, 800a16e <_svfiprintf_r+0x32>
 800a154:	2140      	movs	r1, #64	; 0x40
 800a156:	f7ff fe1b 	bl	8009d90 <_malloc_r>
 800a15a:	6028      	str	r0, [r5, #0]
 800a15c:	6128      	str	r0, [r5, #16]
 800a15e:	b920      	cbnz	r0, 800a16a <_svfiprintf_r+0x2e>
 800a160:	230c      	movs	r3, #12
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a168:	e0d1      	b.n	800a30e <_svfiprintf_r+0x1d2>
 800a16a:	2340      	movs	r3, #64	; 0x40
 800a16c:	616b      	str	r3, [r5, #20]
 800a16e:	2300      	movs	r3, #0
 800a170:	9309      	str	r3, [sp, #36]	; 0x24
 800a172:	2320      	movs	r3, #32
 800a174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a178:	f8cd 800c 	str.w	r8, [sp, #12]
 800a17c:	2330      	movs	r3, #48	; 0x30
 800a17e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a328 <_svfiprintf_r+0x1ec>
 800a182:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a186:	f04f 0901 	mov.w	r9, #1
 800a18a:	4623      	mov	r3, r4
 800a18c:	469a      	mov	sl, r3
 800a18e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a192:	b10a      	cbz	r2, 800a198 <_svfiprintf_r+0x5c>
 800a194:	2a25      	cmp	r2, #37	; 0x25
 800a196:	d1f9      	bne.n	800a18c <_svfiprintf_r+0x50>
 800a198:	ebba 0b04 	subs.w	fp, sl, r4
 800a19c:	d00b      	beq.n	800a1b6 <_svfiprintf_r+0x7a>
 800a19e:	465b      	mov	r3, fp
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4638      	mov	r0, r7
 800a1a6:	f7ff ff6d 	bl	800a084 <__ssputs_r>
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	f000 80aa 	beq.w	800a304 <_svfiprintf_r+0x1c8>
 800a1b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b2:	445a      	add	r2, fp
 800a1b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80a2 	beq.w	800a304 <_svfiprintf_r+0x1c8>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1ca:	f10a 0a01 	add.w	sl, sl, #1
 800a1ce:	9304      	str	r3, [sp, #16]
 800a1d0:	9307      	str	r3, [sp, #28]
 800a1d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1d6:	931a      	str	r3, [sp, #104]	; 0x68
 800a1d8:	4654      	mov	r4, sl
 800a1da:	2205      	movs	r2, #5
 800a1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e0:	4851      	ldr	r0, [pc, #324]	; (800a328 <_svfiprintf_r+0x1ec>)
 800a1e2:	f7f5 fffd 	bl	80001e0 <memchr>
 800a1e6:	9a04      	ldr	r2, [sp, #16]
 800a1e8:	b9d8      	cbnz	r0, 800a222 <_svfiprintf_r+0xe6>
 800a1ea:	06d0      	lsls	r0, r2, #27
 800a1ec:	bf44      	itt	mi
 800a1ee:	2320      	movmi	r3, #32
 800a1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1f4:	0711      	lsls	r1, r2, #28
 800a1f6:	bf44      	itt	mi
 800a1f8:	232b      	movmi	r3, #43	; 0x2b
 800a1fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a202:	2b2a      	cmp	r3, #42	; 0x2a
 800a204:	d015      	beq.n	800a232 <_svfiprintf_r+0xf6>
 800a206:	9a07      	ldr	r2, [sp, #28]
 800a208:	4654      	mov	r4, sl
 800a20a:	2000      	movs	r0, #0
 800a20c:	f04f 0c0a 	mov.w	ip, #10
 800a210:	4621      	mov	r1, r4
 800a212:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a216:	3b30      	subs	r3, #48	; 0x30
 800a218:	2b09      	cmp	r3, #9
 800a21a:	d94e      	bls.n	800a2ba <_svfiprintf_r+0x17e>
 800a21c:	b1b0      	cbz	r0, 800a24c <_svfiprintf_r+0x110>
 800a21e:	9207      	str	r2, [sp, #28]
 800a220:	e014      	b.n	800a24c <_svfiprintf_r+0x110>
 800a222:	eba0 0308 	sub.w	r3, r0, r8
 800a226:	fa09 f303 	lsl.w	r3, r9, r3
 800a22a:	4313      	orrs	r3, r2
 800a22c:	9304      	str	r3, [sp, #16]
 800a22e:	46a2      	mov	sl, r4
 800a230:	e7d2      	b.n	800a1d8 <_svfiprintf_r+0x9c>
 800a232:	9b03      	ldr	r3, [sp, #12]
 800a234:	1d19      	adds	r1, r3, #4
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	9103      	str	r1, [sp, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	bfbb      	ittet	lt
 800a23e:	425b      	neglt	r3, r3
 800a240:	f042 0202 	orrlt.w	r2, r2, #2
 800a244:	9307      	strge	r3, [sp, #28]
 800a246:	9307      	strlt	r3, [sp, #28]
 800a248:	bfb8      	it	lt
 800a24a:	9204      	strlt	r2, [sp, #16]
 800a24c:	7823      	ldrb	r3, [r4, #0]
 800a24e:	2b2e      	cmp	r3, #46	; 0x2e
 800a250:	d10c      	bne.n	800a26c <_svfiprintf_r+0x130>
 800a252:	7863      	ldrb	r3, [r4, #1]
 800a254:	2b2a      	cmp	r3, #42	; 0x2a
 800a256:	d135      	bne.n	800a2c4 <_svfiprintf_r+0x188>
 800a258:	9b03      	ldr	r3, [sp, #12]
 800a25a:	1d1a      	adds	r2, r3, #4
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	9203      	str	r2, [sp, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	bfb8      	it	lt
 800a264:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a268:	3402      	adds	r4, #2
 800a26a:	9305      	str	r3, [sp, #20]
 800a26c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a338 <_svfiprintf_r+0x1fc>
 800a270:	7821      	ldrb	r1, [r4, #0]
 800a272:	2203      	movs	r2, #3
 800a274:	4650      	mov	r0, sl
 800a276:	f7f5 ffb3 	bl	80001e0 <memchr>
 800a27a:	b140      	cbz	r0, 800a28e <_svfiprintf_r+0x152>
 800a27c:	2340      	movs	r3, #64	; 0x40
 800a27e:	eba0 000a 	sub.w	r0, r0, sl
 800a282:	fa03 f000 	lsl.w	r0, r3, r0
 800a286:	9b04      	ldr	r3, [sp, #16]
 800a288:	4303      	orrs	r3, r0
 800a28a:	3401      	adds	r4, #1
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a292:	4826      	ldr	r0, [pc, #152]	; (800a32c <_svfiprintf_r+0x1f0>)
 800a294:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a298:	2206      	movs	r2, #6
 800a29a:	f7f5 ffa1 	bl	80001e0 <memchr>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d038      	beq.n	800a314 <_svfiprintf_r+0x1d8>
 800a2a2:	4b23      	ldr	r3, [pc, #140]	; (800a330 <_svfiprintf_r+0x1f4>)
 800a2a4:	bb1b      	cbnz	r3, 800a2ee <_svfiprintf_r+0x1b2>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	3307      	adds	r3, #7
 800a2aa:	f023 0307 	bic.w	r3, r3, #7
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	9303      	str	r3, [sp, #12]
 800a2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b4:	4433      	add	r3, r6
 800a2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b8:	e767      	b.n	800a18a <_svfiprintf_r+0x4e>
 800a2ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2be:	460c      	mov	r4, r1
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	e7a5      	b.n	800a210 <_svfiprintf_r+0xd4>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	3401      	adds	r4, #1
 800a2c8:	9305      	str	r3, [sp, #20]
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	f04f 0c0a 	mov.w	ip, #10
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d6:	3a30      	subs	r2, #48	; 0x30
 800a2d8:	2a09      	cmp	r2, #9
 800a2da:	d903      	bls.n	800a2e4 <_svfiprintf_r+0x1a8>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0c5      	beq.n	800a26c <_svfiprintf_r+0x130>
 800a2e0:	9105      	str	r1, [sp, #20]
 800a2e2:	e7c3      	b.n	800a26c <_svfiprintf_r+0x130>
 800a2e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e7f0      	b.n	800a2d0 <_svfiprintf_r+0x194>
 800a2ee:	ab03      	add	r3, sp, #12
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	462a      	mov	r2, r5
 800a2f4:	4b0f      	ldr	r3, [pc, #60]	; (800a334 <_svfiprintf_r+0x1f8>)
 800a2f6:	a904      	add	r1, sp, #16
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f3af 8000 	nop.w
 800a2fe:	1c42      	adds	r2, r0, #1
 800a300:	4606      	mov	r6, r0
 800a302:	d1d6      	bne.n	800a2b2 <_svfiprintf_r+0x176>
 800a304:	89ab      	ldrh	r3, [r5, #12]
 800a306:	065b      	lsls	r3, r3, #25
 800a308:	f53f af2c 	bmi.w	800a164 <_svfiprintf_r+0x28>
 800a30c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a30e:	b01d      	add	sp, #116	; 0x74
 800a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a314:	ab03      	add	r3, sp, #12
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	462a      	mov	r2, r5
 800a31a:	4b06      	ldr	r3, [pc, #24]	; (800a334 <_svfiprintf_r+0x1f8>)
 800a31c:	a904      	add	r1, sp, #16
 800a31e:	4638      	mov	r0, r7
 800a320:	f000 f87a 	bl	800a418 <_printf_i>
 800a324:	e7eb      	b.n	800a2fe <_svfiprintf_r+0x1c2>
 800a326:	bf00      	nop
 800a328:	08036054 	.word	0x08036054
 800a32c:	0803605e 	.word	0x0803605e
 800a330:	00000000 	.word	0x00000000
 800a334:	0800a085 	.word	0x0800a085
 800a338:	0803605a 	.word	0x0803605a

0800a33c <_printf_common>:
 800a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	4616      	mov	r6, r2
 800a342:	4699      	mov	r9, r3
 800a344:	688a      	ldr	r2, [r1, #8]
 800a346:	690b      	ldr	r3, [r1, #16]
 800a348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a34c:	4293      	cmp	r3, r2
 800a34e:	bfb8      	it	lt
 800a350:	4613      	movlt	r3, r2
 800a352:	6033      	str	r3, [r6, #0]
 800a354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a358:	4607      	mov	r7, r0
 800a35a:	460c      	mov	r4, r1
 800a35c:	b10a      	cbz	r2, 800a362 <_printf_common+0x26>
 800a35e:	3301      	adds	r3, #1
 800a360:	6033      	str	r3, [r6, #0]
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	0699      	lsls	r1, r3, #26
 800a366:	bf42      	ittt	mi
 800a368:	6833      	ldrmi	r3, [r6, #0]
 800a36a:	3302      	addmi	r3, #2
 800a36c:	6033      	strmi	r3, [r6, #0]
 800a36e:	6825      	ldr	r5, [r4, #0]
 800a370:	f015 0506 	ands.w	r5, r5, #6
 800a374:	d106      	bne.n	800a384 <_printf_common+0x48>
 800a376:	f104 0a19 	add.w	sl, r4, #25
 800a37a:	68e3      	ldr	r3, [r4, #12]
 800a37c:	6832      	ldr	r2, [r6, #0]
 800a37e:	1a9b      	subs	r3, r3, r2
 800a380:	42ab      	cmp	r3, r5
 800a382:	dc26      	bgt.n	800a3d2 <_printf_common+0x96>
 800a384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a388:	1e13      	subs	r3, r2, #0
 800a38a:	6822      	ldr	r2, [r4, #0]
 800a38c:	bf18      	it	ne
 800a38e:	2301      	movne	r3, #1
 800a390:	0692      	lsls	r2, r2, #26
 800a392:	d42b      	bmi.n	800a3ec <_printf_common+0xb0>
 800a394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a398:	4649      	mov	r1, r9
 800a39a:	4638      	mov	r0, r7
 800a39c:	47c0      	blx	r8
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d01e      	beq.n	800a3e0 <_printf_common+0xa4>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	68e5      	ldr	r5, [r4, #12]
 800a3a6:	6832      	ldr	r2, [r6, #0]
 800a3a8:	f003 0306 	and.w	r3, r3, #6
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	bf08      	it	eq
 800a3b0:	1aad      	subeq	r5, r5, r2
 800a3b2:	68a3      	ldr	r3, [r4, #8]
 800a3b4:	6922      	ldr	r2, [r4, #16]
 800a3b6:	bf0c      	ite	eq
 800a3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3bc:	2500      	movne	r5, #0
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	bfc4      	itt	gt
 800a3c2:	1a9b      	subgt	r3, r3, r2
 800a3c4:	18ed      	addgt	r5, r5, r3
 800a3c6:	2600      	movs	r6, #0
 800a3c8:	341a      	adds	r4, #26
 800a3ca:	42b5      	cmp	r5, r6
 800a3cc:	d11a      	bne.n	800a404 <_printf_common+0xc8>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	e008      	b.n	800a3e4 <_printf_common+0xa8>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	4652      	mov	r2, sl
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	4638      	mov	r0, r7
 800a3da:	47c0      	blx	r8
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d103      	bne.n	800a3e8 <_printf_common+0xac>
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e8:	3501      	adds	r5, #1
 800a3ea:	e7c6      	b.n	800a37a <_printf_common+0x3e>
 800a3ec:	18e1      	adds	r1, r4, r3
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	2030      	movs	r0, #48	; 0x30
 800a3f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3f6:	4422      	add	r2, r4
 800a3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a400:	3302      	adds	r3, #2
 800a402:	e7c7      	b.n	800a394 <_printf_common+0x58>
 800a404:	2301      	movs	r3, #1
 800a406:	4622      	mov	r2, r4
 800a408:	4649      	mov	r1, r9
 800a40a:	4638      	mov	r0, r7
 800a40c:	47c0      	blx	r8
 800a40e:	3001      	adds	r0, #1
 800a410:	d0e6      	beq.n	800a3e0 <_printf_common+0xa4>
 800a412:	3601      	adds	r6, #1
 800a414:	e7d9      	b.n	800a3ca <_printf_common+0x8e>
	...

0800a418 <_printf_i>:
 800a418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	7e0f      	ldrb	r7, [r1, #24]
 800a41e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a420:	2f78      	cmp	r7, #120	; 0x78
 800a422:	4691      	mov	r9, r2
 800a424:	4680      	mov	r8, r0
 800a426:	460c      	mov	r4, r1
 800a428:	469a      	mov	sl, r3
 800a42a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a42e:	d807      	bhi.n	800a440 <_printf_i+0x28>
 800a430:	2f62      	cmp	r7, #98	; 0x62
 800a432:	d80a      	bhi.n	800a44a <_printf_i+0x32>
 800a434:	2f00      	cmp	r7, #0
 800a436:	f000 80d8 	beq.w	800a5ea <_printf_i+0x1d2>
 800a43a:	2f58      	cmp	r7, #88	; 0x58
 800a43c:	f000 80a3 	beq.w	800a586 <_printf_i+0x16e>
 800a440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a448:	e03a      	b.n	800a4c0 <_printf_i+0xa8>
 800a44a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a44e:	2b15      	cmp	r3, #21
 800a450:	d8f6      	bhi.n	800a440 <_printf_i+0x28>
 800a452:	a101      	add	r1, pc, #4	; (adr r1, 800a458 <_printf_i+0x40>)
 800a454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a458:	0800a4b1 	.word	0x0800a4b1
 800a45c:	0800a4c5 	.word	0x0800a4c5
 800a460:	0800a441 	.word	0x0800a441
 800a464:	0800a441 	.word	0x0800a441
 800a468:	0800a441 	.word	0x0800a441
 800a46c:	0800a441 	.word	0x0800a441
 800a470:	0800a4c5 	.word	0x0800a4c5
 800a474:	0800a441 	.word	0x0800a441
 800a478:	0800a441 	.word	0x0800a441
 800a47c:	0800a441 	.word	0x0800a441
 800a480:	0800a441 	.word	0x0800a441
 800a484:	0800a5d1 	.word	0x0800a5d1
 800a488:	0800a4f5 	.word	0x0800a4f5
 800a48c:	0800a5b3 	.word	0x0800a5b3
 800a490:	0800a441 	.word	0x0800a441
 800a494:	0800a441 	.word	0x0800a441
 800a498:	0800a5f3 	.word	0x0800a5f3
 800a49c:	0800a441 	.word	0x0800a441
 800a4a0:	0800a4f5 	.word	0x0800a4f5
 800a4a4:	0800a441 	.word	0x0800a441
 800a4a8:	0800a441 	.word	0x0800a441
 800a4ac:	0800a5bb 	.word	0x0800a5bb
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	1d1a      	adds	r2, r3, #4
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	602a      	str	r2, [r5, #0]
 800a4b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e0a3      	b.n	800a60c <_printf_i+0x1f4>
 800a4c4:	6820      	ldr	r0, [r4, #0]
 800a4c6:	6829      	ldr	r1, [r5, #0]
 800a4c8:	0606      	lsls	r6, r0, #24
 800a4ca:	f101 0304 	add.w	r3, r1, #4
 800a4ce:	d50a      	bpl.n	800a4e6 <_printf_i+0xce>
 800a4d0:	680e      	ldr	r6, [r1, #0]
 800a4d2:	602b      	str	r3, [r5, #0]
 800a4d4:	2e00      	cmp	r6, #0
 800a4d6:	da03      	bge.n	800a4e0 <_printf_i+0xc8>
 800a4d8:	232d      	movs	r3, #45	; 0x2d
 800a4da:	4276      	negs	r6, r6
 800a4dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e0:	485e      	ldr	r0, [pc, #376]	; (800a65c <_printf_i+0x244>)
 800a4e2:	230a      	movs	r3, #10
 800a4e4:	e019      	b.n	800a51a <_printf_i+0x102>
 800a4e6:	680e      	ldr	r6, [r1, #0]
 800a4e8:	602b      	str	r3, [r5, #0]
 800a4ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4ee:	bf18      	it	ne
 800a4f0:	b236      	sxthne	r6, r6
 800a4f2:	e7ef      	b.n	800a4d4 <_printf_i+0xbc>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	6820      	ldr	r0, [r4, #0]
 800a4f8:	1d19      	adds	r1, r3, #4
 800a4fa:	6029      	str	r1, [r5, #0]
 800a4fc:	0601      	lsls	r1, r0, #24
 800a4fe:	d501      	bpl.n	800a504 <_printf_i+0xec>
 800a500:	681e      	ldr	r6, [r3, #0]
 800a502:	e002      	b.n	800a50a <_printf_i+0xf2>
 800a504:	0646      	lsls	r6, r0, #25
 800a506:	d5fb      	bpl.n	800a500 <_printf_i+0xe8>
 800a508:	881e      	ldrh	r6, [r3, #0]
 800a50a:	4854      	ldr	r0, [pc, #336]	; (800a65c <_printf_i+0x244>)
 800a50c:	2f6f      	cmp	r7, #111	; 0x6f
 800a50e:	bf0c      	ite	eq
 800a510:	2308      	moveq	r3, #8
 800a512:	230a      	movne	r3, #10
 800a514:	2100      	movs	r1, #0
 800a516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a51a:	6865      	ldr	r5, [r4, #4]
 800a51c:	60a5      	str	r5, [r4, #8]
 800a51e:	2d00      	cmp	r5, #0
 800a520:	bfa2      	ittt	ge
 800a522:	6821      	ldrge	r1, [r4, #0]
 800a524:	f021 0104 	bicge.w	r1, r1, #4
 800a528:	6021      	strge	r1, [r4, #0]
 800a52a:	b90e      	cbnz	r6, 800a530 <_printf_i+0x118>
 800a52c:	2d00      	cmp	r5, #0
 800a52e:	d04d      	beq.n	800a5cc <_printf_i+0x1b4>
 800a530:	4615      	mov	r5, r2
 800a532:	fbb6 f1f3 	udiv	r1, r6, r3
 800a536:	fb03 6711 	mls	r7, r3, r1, r6
 800a53a:	5dc7      	ldrb	r7, [r0, r7]
 800a53c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a540:	4637      	mov	r7, r6
 800a542:	42bb      	cmp	r3, r7
 800a544:	460e      	mov	r6, r1
 800a546:	d9f4      	bls.n	800a532 <_printf_i+0x11a>
 800a548:	2b08      	cmp	r3, #8
 800a54a:	d10b      	bne.n	800a564 <_printf_i+0x14c>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	07de      	lsls	r6, r3, #31
 800a550:	d508      	bpl.n	800a564 <_printf_i+0x14c>
 800a552:	6923      	ldr	r3, [r4, #16]
 800a554:	6861      	ldr	r1, [r4, #4]
 800a556:	4299      	cmp	r1, r3
 800a558:	bfde      	ittt	le
 800a55a:	2330      	movle	r3, #48	; 0x30
 800a55c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a560:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a564:	1b52      	subs	r2, r2, r5
 800a566:	6122      	str	r2, [r4, #16]
 800a568:	f8cd a000 	str.w	sl, [sp]
 800a56c:	464b      	mov	r3, r9
 800a56e:	aa03      	add	r2, sp, #12
 800a570:	4621      	mov	r1, r4
 800a572:	4640      	mov	r0, r8
 800a574:	f7ff fee2 	bl	800a33c <_printf_common>
 800a578:	3001      	adds	r0, #1
 800a57a:	d14c      	bne.n	800a616 <_printf_i+0x1fe>
 800a57c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a580:	b004      	add	sp, #16
 800a582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a586:	4835      	ldr	r0, [pc, #212]	; (800a65c <_printf_i+0x244>)
 800a588:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a58c:	6829      	ldr	r1, [r5, #0]
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	f851 6b04 	ldr.w	r6, [r1], #4
 800a594:	6029      	str	r1, [r5, #0]
 800a596:	061d      	lsls	r5, r3, #24
 800a598:	d514      	bpl.n	800a5c4 <_printf_i+0x1ac>
 800a59a:	07df      	lsls	r7, r3, #31
 800a59c:	bf44      	itt	mi
 800a59e:	f043 0320 	orrmi.w	r3, r3, #32
 800a5a2:	6023      	strmi	r3, [r4, #0]
 800a5a4:	b91e      	cbnz	r6, 800a5ae <_printf_i+0x196>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	f023 0320 	bic.w	r3, r3, #32
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	2310      	movs	r3, #16
 800a5b0:	e7b0      	b.n	800a514 <_printf_i+0xfc>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	f043 0320 	orr.w	r3, r3, #32
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	2378      	movs	r3, #120	; 0x78
 800a5bc:	4828      	ldr	r0, [pc, #160]	; (800a660 <_printf_i+0x248>)
 800a5be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5c2:	e7e3      	b.n	800a58c <_printf_i+0x174>
 800a5c4:	0659      	lsls	r1, r3, #25
 800a5c6:	bf48      	it	mi
 800a5c8:	b2b6      	uxthmi	r6, r6
 800a5ca:	e7e6      	b.n	800a59a <_printf_i+0x182>
 800a5cc:	4615      	mov	r5, r2
 800a5ce:	e7bb      	b.n	800a548 <_printf_i+0x130>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	6826      	ldr	r6, [r4, #0]
 800a5d4:	6961      	ldr	r1, [r4, #20]
 800a5d6:	1d18      	adds	r0, r3, #4
 800a5d8:	6028      	str	r0, [r5, #0]
 800a5da:	0635      	lsls	r5, r6, #24
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	d501      	bpl.n	800a5e4 <_printf_i+0x1cc>
 800a5e0:	6019      	str	r1, [r3, #0]
 800a5e2:	e002      	b.n	800a5ea <_printf_i+0x1d2>
 800a5e4:	0670      	lsls	r0, r6, #25
 800a5e6:	d5fb      	bpl.n	800a5e0 <_printf_i+0x1c8>
 800a5e8:	8019      	strh	r1, [r3, #0]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	6123      	str	r3, [r4, #16]
 800a5ee:	4615      	mov	r5, r2
 800a5f0:	e7ba      	b.n	800a568 <_printf_i+0x150>
 800a5f2:	682b      	ldr	r3, [r5, #0]
 800a5f4:	1d1a      	adds	r2, r3, #4
 800a5f6:	602a      	str	r2, [r5, #0]
 800a5f8:	681d      	ldr	r5, [r3, #0]
 800a5fa:	6862      	ldr	r2, [r4, #4]
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	4628      	mov	r0, r5
 800a600:	f7f5 fdee 	bl	80001e0 <memchr>
 800a604:	b108      	cbz	r0, 800a60a <_printf_i+0x1f2>
 800a606:	1b40      	subs	r0, r0, r5
 800a608:	6060      	str	r0, [r4, #4]
 800a60a:	6863      	ldr	r3, [r4, #4]
 800a60c:	6123      	str	r3, [r4, #16]
 800a60e:	2300      	movs	r3, #0
 800a610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a614:	e7a8      	b.n	800a568 <_printf_i+0x150>
 800a616:	6923      	ldr	r3, [r4, #16]
 800a618:	462a      	mov	r2, r5
 800a61a:	4649      	mov	r1, r9
 800a61c:	4640      	mov	r0, r8
 800a61e:	47d0      	blx	sl
 800a620:	3001      	adds	r0, #1
 800a622:	d0ab      	beq.n	800a57c <_printf_i+0x164>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	079b      	lsls	r3, r3, #30
 800a628:	d413      	bmi.n	800a652 <_printf_i+0x23a>
 800a62a:	68e0      	ldr	r0, [r4, #12]
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	4298      	cmp	r0, r3
 800a630:	bfb8      	it	lt
 800a632:	4618      	movlt	r0, r3
 800a634:	e7a4      	b.n	800a580 <_printf_i+0x168>
 800a636:	2301      	movs	r3, #1
 800a638:	4632      	mov	r2, r6
 800a63a:	4649      	mov	r1, r9
 800a63c:	4640      	mov	r0, r8
 800a63e:	47d0      	blx	sl
 800a640:	3001      	adds	r0, #1
 800a642:	d09b      	beq.n	800a57c <_printf_i+0x164>
 800a644:	3501      	adds	r5, #1
 800a646:	68e3      	ldr	r3, [r4, #12]
 800a648:	9903      	ldr	r1, [sp, #12]
 800a64a:	1a5b      	subs	r3, r3, r1
 800a64c:	42ab      	cmp	r3, r5
 800a64e:	dcf2      	bgt.n	800a636 <_printf_i+0x21e>
 800a650:	e7eb      	b.n	800a62a <_printf_i+0x212>
 800a652:	2500      	movs	r5, #0
 800a654:	f104 0619 	add.w	r6, r4, #25
 800a658:	e7f5      	b.n	800a646 <_printf_i+0x22e>
 800a65a:	bf00      	nop
 800a65c:	08036065 	.word	0x08036065
 800a660:	08036076 	.word	0x08036076

0800a664 <memmove>:
 800a664:	4288      	cmp	r0, r1
 800a666:	b510      	push	{r4, lr}
 800a668:	eb01 0402 	add.w	r4, r1, r2
 800a66c:	d902      	bls.n	800a674 <memmove+0x10>
 800a66e:	4284      	cmp	r4, r0
 800a670:	4623      	mov	r3, r4
 800a672:	d807      	bhi.n	800a684 <memmove+0x20>
 800a674:	1e43      	subs	r3, r0, #1
 800a676:	42a1      	cmp	r1, r4
 800a678:	d008      	beq.n	800a68c <memmove+0x28>
 800a67a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a67e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a682:	e7f8      	b.n	800a676 <memmove+0x12>
 800a684:	4402      	add	r2, r0
 800a686:	4601      	mov	r1, r0
 800a688:	428a      	cmp	r2, r1
 800a68a:	d100      	bne.n	800a68e <memmove+0x2a>
 800a68c:	bd10      	pop	{r4, pc}
 800a68e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a696:	e7f7      	b.n	800a688 <memmove+0x24>

0800a698 <_realloc_r>:
 800a698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a69c:	4680      	mov	r8, r0
 800a69e:	4614      	mov	r4, r2
 800a6a0:	460e      	mov	r6, r1
 800a6a2:	b921      	cbnz	r1, 800a6ae <_realloc_r+0x16>
 800a6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	f7ff bb71 	b.w	8009d90 <_malloc_r>
 800a6ae:	b92a      	cbnz	r2, 800a6bc <_realloc_r+0x24>
 800a6b0:	f7ff fc9c 	bl	8009fec <_free_r>
 800a6b4:	4625      	mov	r5, r4
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6bc:	f000 f81b 	bl	800a6f6 <_malloc_usable_size_r>
 800a6c0:	4284      	cmp	r4, r0
 800a6c2:	4607      	mov	r7, r0
 800a6c4:	d802      	bhi.n	800a6cc <_realloc_r+0x34>
 800a6c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6ca:	d812      	bhi.n	800a6f2 <_realloc_r+0x5a>
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f7ff fb5e 	bl	8009d90 <_malloc_r>
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d0ed      	beq.n	800a6b6 <_realloc_r+0x1e>
 800a6da:	42bc      	cmp	r4, r7
 800a6dc:	4622      	mov	r2, r4
 800a6de:	4631      	mov	r1, r6
 800a6e0:	bf28      	it	cs
 800a6e2:	463a      	movcs	r2, r7
 800a6e4:	f7ff fb1e 	bl	8009d24 <memcpy>
 800a6e8:	4631      	mov	r1, r6
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	f7ff fc7e 	bl	8009fec <_free_r>
 800a6f0:	e7e1      	b.n	800a6b6 <_realloc_r+0x1e>
 800a6f2:	4635      	mov	r5, r6
 800a6f4:	e7df      	b.n	800a6b6 <_realloc_r+0x1e>

0800a6f6 <_malloc_usable_size_r>:
 800a6f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6fa:	1f18      	subs	r0, r3, #4
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	bfbc      	itt	lt
 800a700:	580b      	ldrlt	r3, [r1, r0]
 800a702:	18c0      	addlt	r0, r0, r3
 800a704:	4770      	bx	lr
	...

0800a708 <_init>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	bf00      	nop
 800a70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70e:	bc08      	pop	{r3}
 800a710:	469e      	mov	lr, r3
 800a712:	4770      	bx	lr

0800a714 <_fini>:
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	bf00      	nop
 800a718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a71a:	bc08      	pop	{r3}
 800a71c:	469e      	mov	lr, r3
 800a71e:	4770      	bx	lr
