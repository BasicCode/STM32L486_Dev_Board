
STM32_Dev_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b320  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002badc  0800b4b0  0800b4b0  0001b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036f8c  08036f8c  00054088  2**0
                  CONTENTS
  4 .ARM          00000008  08036f8c  08036f8c  00046f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08036f94  08036f94  00054088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08036f94  08036f94  00046f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08036f98  08036f98  00046f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004088  20000000  08036f9c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000061b8  20004088  0803b024  00054088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a240  0803b024  0005a240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00054088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265f5  00000000  00000000  000540b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c2c  00000000  00000000  0007a6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df0  00000000  00000000  000802e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b48  00000000  00000000  000820d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e5f5  00000000  00000000  00083c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a973  00000000  00000000  000b220d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103874  00000000  00000000  000dcb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e03f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080fc  00000000  00000000  001e0444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20004088 	.word	0x20004088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b498 	.word	0x0800b498

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000408c 	.word	0x2000408c
 80001cc:	0800b498 	.word	0x0800b498

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b974 	b.w	8000a08 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468e      	mov	lr, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14d      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000746:	428a      	cmp	r2, r1
 8000748:	4694      	mov	ip, r2
 800074a:	d969      	bls.n	8000820 <__udivmoddi4+0xe8>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b152      	cbz	r2, 8000768 <__udivmoddi4+0x30>
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	f1c2 0120 	rsb	r1, r2, #32
 800075a:	fa20 f101 	lsr.w	r1, r0, r1
 800075e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000762:	ea41 0e03 	orr.w	lr, r1, r3
 8000766:	4094      	lsls	r4, r2
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	0c21      	lsrs	r1, r4, #16
 800076e:	fbbe f6f8 	udiv	r6, lr, r8
 8000772:	fa1f f78c 	uxth.w	r7, ip
 8000776:	fb08 e316 	mls	r3, r8, r6, lr
 800077a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077e:	fb06 f107 	mul.w	r1, r6, r7
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800078e:	f080 811f 	bcs.w	80009d0 <__udivmoddi4+0x298>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 811c 	bls.w	80009d0 <__udivmoddi4+0x298>
 8000798:	3e02      	subs	r6, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f707 	mul.w	r7, r0, r7
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x92>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007bc:	f080 810a 	bcs.w	80009d4 <__udivmoddi4+0x29c>
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	f240 8107 	bls.w	80009d4 <__udivmoddi4+0x29c>
 80007c6:	4464      	add	r4, ip
 80007c8:	3802      	subs	r0, #2
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	1be4      	subs	r4, r4, r7
 80007d0:	2600      	movs	r6, #0
 80007d2:	b11d      	cbz	r5, 80007dc <__udivmoddi4+0xa4>
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	2300      	movs	r3, #0
 80007d8:	e9c5 4300 	strd	r4, r3, [r5]
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d909      	bls.n	80007fa <__udivmoddi4+0xc2>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 80ef 	beq.w	80009ca <__udivmoddi4+0x292>
 80007ec:	2600      	movs	r6, #0
 80007ee:	e9c5 0100 	strd	r0, r1, [r5]
 80007f2:	4630      	mov	r0, r6
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	fab3 f683 	clz	r6, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d14a      	bne.n	8000898 <__udivmoddi4+0x160>
 8000802:	428b      	cmp	r3, r1
 8000804:	d302      	bcc.n	800080c <__udivmoddi4+0xd4>
 8000806:	4282      	cmp	r2, r0
 8000808:	f200 80f9 	bhi.w	80009fe <__udivmoddi4+0x2c6>
 800080c:	1a84      	subs	r4, r0, r2
 800080e:	eb61 0303 	sbc.w	r3, r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	469e      	mov	lr, r3
 8000816:	2d00      	cmp	r5, #0
 8000818:	d0e0      	beq.n	80007dc <__udivmoddi4+0xa4>
 800081a:	e9c5 4e00 	strd	r4, lr, [r5]
 800081e:	e7dd      	b.n	80007dc <__udivmoddi4+0xa4>
 8000820:	b902      	cbnz	r2, 8000824 <__udivmoddi4+0xec>
 8000822:	deff      	udf	#255	; 0xff
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 8092 	bne.w	8000952 <__udivmoddi4+0x21a>
 800082e:	eba1 010c 	sub.w	r1, r1, ip
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	2601      	movs	r6, #1
 800083c:	0c20      	lsrs	r0, r4, #16
 800083e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000842:	fb07 1113 	mls	r1, r7, r3, r1
 8000846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800084a:	fb0e f003 	mul.w	r0, lr, r3
 800084e:	4288      	cmp	r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x12c>
 8000852:	eb1c 0101 	adds.w	r1, ip, r1
 8000856:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x12a>
 800085c:	4288      	cmp	r0, r1
 800085e:	f200 80cb 	bhi.w	80009f8 <__udivmoddi4+0x2c0>
 8000862:	4643      	mov	r3, r8
 8000864:	1a09      	subs	r1, r1, r0
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb1 f0f7 	udiv	r0, r1, r7
 800086c:	fb07 1110 	mls	r1, r7, r0, r1
 8000870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000874:	fb0e fe00 	mul.w	lr, lr, r0
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x156>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0x154>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f200 80bb 	bhi.w	8000a02 <__udivmoddi4+0x2ca>
 800088c:	4608      	mov	r0, r1
 800088e:	eba4 040e 	sub.w	r4, r4, lr
 8000892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000896:	e79c      	b.n	80007d2 <__udivmoddi4+0x9a>
 8000898:	f1c6 0720 	rsb	r7, r6, #32
 800089c:	40b3      	lsls	r3, r6
 800089e:	fa22 fc07 	lsr.w	ip, r2, r7
 80008a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a6:	fa20 f407 	lsr.w	r4, r0, r7
 80008aa:	fa01 f306 	lsl.w	r3, r1, r6
 80008ae:	431c      	orrs	r4, r3
 80008b0:	40f9      	lsrs	r1, r7
 80008b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80008be:	0c20      	lsrs	r0, r4, #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fb09 1118 	mls	r1, r9, r8, r1
 80008c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008cc:	fb08 f00e 	mul.w	r0, r8, lr
 80008d0:	4288      	cmp	r0, r1
 80008d2:	fa02 f206 	lsl.w	r2, r2, r6
 80008d6:	d90b      	bls.n	80008f0 <__udivmoddi4+0x1b8>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008e0:	f080 8088 	bcs.w	80009f4 <__udivmoddi4+0x2bc>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f240 8085 	bls.w	80009f4 <__udivmoddi4+0x2bc>
 80008ea:	f1a8 0802 	sub.w	r8, r8, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f8:	fb09 1110 	mls	r1, r9, r0, r1
 80008fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000900:	fb00 fe0e 	mul.w	lr, r0, lr
 8000904:	458e      	cmp	lr, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x1e2>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000910:	d26c      	bcs.n	80009ec <__udivmoddi4+0x2b4>
 8000912:	458e      	cmp	lr, r1
 8000914:	d96a      	bls.n	80009ec <__udivmoddi4+0x2b4>
 8000916:	3802      	subs	r0, #2
 8000918:	4461      	add	r1, ip
 800091a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091e:	fba0 9402 	umull	r9, r4, r0, r2
 8000922:	eba1 010e 	sub.w	r1, r1, lr
 8000926:	42a1      	cmp	r1, r4
 8000928:	46c8      	mov	r8, r9
 800092a:	46a6      	mov	lr, r4
 800092c:	d356      	bcc.n	80009dc <__udivmoddi4+0x2a4>
 800092e:	d053      	beq.n	80009d8 <__udivmoddi4+0x2a0>
 8000930:	b15d      	cbz	r5, 800094a <__udivmoddi4+0x212>
 8000932:	ebb3 0208 	subs.w	r2, r3, r8
 8000936:	eb61 010e 	sbc.w	r1, r1, lr
 800093a:	fa01 f707 	lsl.w	r7, r1, r7
 800093e:	fa22 f306 	lsr.w	r3, r2, r6
 8000942:	40f1      	lsrs	r1, r6
 8000944:	431f      	orrs	r7, r3
 8000946:	e9c5 7100 	strd	r7, r1, [r5]
 800094a:	2600      	movs	r6, #0
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	f1c2 0320 	rsb	r3, r2, #32
 8000956:	40d8      	lsrs	r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	fa21 f303 	lsr.w	r3, r1, r3
 8000960:	4091      	lsls	r1, r2
 8000962:	4301      	orrs	r1, r0
 8000964:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000968:	fa1f fe8c 	uxth.w	lr, ip
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3610 	mls	r6, r7, r0, r3
 8000974:	0c0b      	lsrs	r3, r1, #16
 8000976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800097a:	fb00 f60e 	mul.w	r6, r0, lr
 800097e:	429e      	cmp	r6, r3
 8000980:	fa04 f402 	lsl.w	r4, r4, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x260>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800098e:	d22f      	bcs.n	80009f0 <__udivmoddi4+0x2b8>
 8000990:	429e      	cmp	r6, r3
 8000992:	d92d      	bls.n	80009f0 <__udivmoddi4+0x2b8>
 8000994:	3802      	subs	r0, #2
 8000996:	4463      	add	r3, ip
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	b289      	uxth	r1, r1
 800099c:	fbb3 f6f7 	udiv	r6, r3, r7
 80009a0:	fb07 3316 	mls	r3, r7, r6, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x28a>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009b8:	d216      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d914      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 80009be:	3e02      	subs	r6, #2
 80009c0:	4461      	add	r1, ip
 80009c2:	1ac9      	subs	r1, r1, r3
 80009c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c8:	e738      	b.n	800083c <__udivmoddi4+0x104>
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e705      	b.n	80007dc <__udivmoddi4+0xa4>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e3      	b.n	800079c <__udivmoddi4+0x64>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6f8      	b.n	80007ca <__udivmoddi4+0x92>
 80009d8:	454b      	cmp	r3, r9
 80009da:	d2a9      	bcs.n	8000930 <__udivmoddi4+0x1f8>
 80009dc:	ebb9 0802 	subs.w	r8, r9, r2
 80009e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7a3      	b.n	8000930 <__udivmoddi4+0x1f8>
 80009e8:	4646      	mov	r6, r8
 80009ea:	e7ea      	b.n	80009c2 <__udivmoddi4+0x28a>
 80009ec:	4620      	mov	r0, r4
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e2>
 80009f0:	4640      	mov	r0, r8
 80009f2:	e7d1      	b.n	8000998 <__udivmoddi4+0x260>
 80009f4:	46d0      	mov	r8, sl
 80009f6:	e77b      	b.n	80008f0 <__udivmoddi4+0x1b8>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	e732      	b.n	8000864 <__udivmoddi4+0x12c>
 80009fe:	4630      	mov	r0, r6
 8000a00:	e709      	b.n	8000816 <__udivmoddi4+0xde>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	e742      	b.n	800088e <__udivmoddi4+0x156>

08000a08 <__aeabi_idiv0>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <DevBoardBegin>:
char timeString[9];

/**
 * Initialises the threads which run the various peripherals on this board.
 */
void DevBoardBegin() {
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
	//The draw task handles display updates. It should be a HIGH priority for fast refresh.
	osThreadDef(drawTask, DrawTask, osPriorityHigh, 0, 1024);
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <DevBoardBegin+0xa4>)
 8000a14:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a18:	461d      	mov	r5, r3
 8000a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	drawTaskHandle = osThreadCreate(osThread(drawTask), NULL);
 8000a26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f008 fa4d 	bl	8008ecc <osThreadCreate>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <DevBoardBegin+0xa8>)
 8000a36:	6013      	str	r3, [r2, #0]

	//Task which handles switching screens
	osThreadDef(changeScreenTask, ChangeScreenTask, osPriorityNormal, 0, 512);
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <DevBoardBegin+0xac>)
 8000a3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a3e:	461d      	mov	r5, r3
 8000a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	changeScreenTaskHandle = osThreadCreate(osThread(changeScreenTask), NULL);
 8000a4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f008 fa3a 	bl	8008ecc <osThreadCreate>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <DevBoardBegin+0xb0>)
 8000a5c:	6013      	str	r3, [r2, #0]

	//This task handles touching
	osThreadDef(touchTask, TouchTask, osPriorityNormal, 0, 512);
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <DevBoardBegin+0xb4>)
 8000a60:	f107 041c 	add.w	r4, r7, #28
 8000a64:	461d      	mov	r5, r3
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	touchTaskHandle = osThreadCreate(osThread(touchTask), NULL);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f008 fa27 	bl	8008ecc <osThreadCreate>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <DevBoardBegin+0xb8>)
 8000a82:	6013      	str	r3, [r2, #0]

	//Get the current time from the RTC chip
	osThreadDef(timeTask, TimeTask, osPriorityNormal, 0, 128);
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <DevBoardBegin+0xbc>)
 8000a86:	463c      	mov	r4, r7
 8000a88:	461d      	mov	r5, r3
 8000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	timeTaskHandle = osThreadCreate(osThread(timeTask), NULL);
 8000a96:	463b      	mov	r3, r7
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f008 fa16 	bl	8008ecc <osThreadCreate>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <DevBoardBegin+0xc0>)
 8000aa4:	6013      	str	r3, [r2, #0]

	return;
 8000aa6:	bf00      	nop
}
 8000aa8:	3770      	adds	r7, #112	; 0x70
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bdb0      	pop	{r4, r5, r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	0800b528 	.word	0x0800b528
 8000ab4:	200040a4 	.word	0x200040a4
 8000ab8:	0800b544 	.word	0x0800b544
 8000abc:	200040ac 	.word	0x200040ac
 8000ac0:	0800b560 	.word	0x0800b560
 8000ac4:	200040b0 	.word	0x200040b0
 8000ac8:	0800b57c 	.word	0x0800b57c
 8000acc:	200040b4 	.word	0x200040b4

08000ad0 <DrawTask>:
 * The Draw task handles display updates.
 * It just calls the DisplayManager draw function which decides
 * which elements need refreshing.
 */
void DrawTask(void const * argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//Do a display refresh
		DM_Draw();
 8000ad8:	f001 f806 	bl	8001ae8 <DM_Draw>
		//This is a HIGH priority task so we have to hand control back to the OS.
		osDelay(100);
 8000adc:	2064      	movs	r0, #100	; 0x64
 8000ade:	f008 fa4d 	bl	8008f7c <osDelay>
		DM_Draw();
 8000ae2:	e7f9      	b.n	8000ad8 <DrawTask+0x8>

08000ae4 <ChangeScreenTask>:

/**
 * Function which receives signals, usually from button callbacks, and changes
 * the display to the desired screen.
 */
void ChangeScreenTask(void const * arguments) {
 8000ae4:	b5b0      	push	{r4, r5, r7, lr}
 8000ae6:	b0a0      	sub	sp, #128	; 0x80
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

	//Any screens you want to display
	osThreadDef(deviceTestTask, DeviceTestTask, osPriorityNormal, 0, 1024);
 8000aec:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <ChangeScreenTask+0xfc>)
 8000aee:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000af2:	461d      	mov	r5, r3
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000afc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(mainMenuTask, MainMenuTask, osPriorityNormal, 0, 512);
 8000b00:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <ChangeScreenTask+0x100>)
 8000b02:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000b06:	461d      	mov	r5, r3
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(splashScreenTask, SplashScreenTask, osPriorityNormal, 0, 256);
	osThreadDef(settingsTask, SettingsTask, osPriorityNormal, 0, 512);
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <ChangeScreenTask+0x104>)
 8000b16:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000b1a:	461d      	mov	r5, r3
 8000b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(changeTimeTask, ChangeTimeTask, osPriorityNormal, 0, 512);
 8000b28:	4b30      	ldr	r3, [pc, #192]	; (8000bec <ChangeScreenTask+0x108>)
 8000b2a:	f107 040c 	add.w	r4, r7, #12
 8000b2e:	461d      	mov	r5, r3
 8000b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b38:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	//Initial entry screen
	currentScreenHandle = osThreadCreate(osThread(mainMenuTask), NULL);
 8000b3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f008 f9c2 	bl	8008ecc <osThreadCreate>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	4a29      	ldr	r2, [pc, #164]	; (8000bf0 <ChangeScreenTask+0x10c>)
 8000b4c:	6013      	str	r3, [r2, #0]

	int signal = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
	int event;
	while(1) {
			event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000b52:	f107 0208 	add.w	r2, r7, #8
 8000b56:	2300      	movs	r3, #0
 8000b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f009 f84b 	bl	8009bf8 <xTaskNotifyWait>
 8000b62:	67f8      	str	r0, [r7, #124]	; 0x7c

			if(event == pdTRUE) {
 8000b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d136      	bne.n	8000bd8 <ChangeScreenTask+0xf4>

				//Clear the display elements
				DM_Clear();
 8000b6a:	f001 f895 	bl	8001c98 <DM_Clear>

				//End the current screen thread
				osThreadTerminate(currentScreenHandle);
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <ChangeScreenTask+0x10c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f008 f9f6 	bl	8008f64 <osThreadTerminate>

				//Load the desired screen
				if(signal == MAIN_MENU)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d108      	bne.n	8000b90 <ChangeScreenTask+0xac>
					currentScreenHandle = osThreadCreate(osThread(mainMenuTask), NULL);
 8000b7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f008 f9a1 	bl	8008ecc <osThreadCreate>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <ChangeScreenTask+0x10c>)
 8000b8e:	6013      	str	r3, [r2, #0]

				if(signal == DEVICE_TEST)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d108      	bne.n	8000ba8 <ChangeScreenTask+0xc4>
					currentScreenHandle = osThreadCreate(osThread(deviceTestTask), NULL);
 8000b96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f008 f995 	bl	8008ecc <osThreadCreate>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <ChangeScreenTask+0x10c>)
 8000ba6:	6013      	str	r3, [r2, #0]

				if(signal == SETTINGS)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d108      	bne.n	8000bc0 <ChangeScreenTask+0xdc>
					currentScreenHandle = osThreadCreate(osThread(settingsTask), NULL);
 8000bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f008 f989 	bl	8008ecc <osThreadCreate>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <ChangeScreenTask+0x10c>)
 8000bbe:	6013      	str	r3, [r2, #0]

				if(signal == CHANGE_TIME_DATE)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d108      	bne.n	8000bd8 <ChangeScreenTask+0xf4>
					currentScreenHandle = osThreadCreate(osThread(changeTimeTask), NULL);
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f008 f97d 	bl	8008ecc <osThreadCreate>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <ChangeScreenTask+0x10c>)
 8000bd6:	6013      	str	r3, [r2, #0]

	    }

		//Give the OS time to do some other tasks
		osDelay(200);
 8000bd8:	20c8      	movs	r0, #200	; 0xc8
 8000bda:	f008 f9cf 	bl	8008f7c <osDelay>
			event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000bde:	e7b8      	b.n	8000b52 <ChangeScreenTask+0x6e>
 8000be0:	0800b598 	.word	0x0800b598
 8000be4:	0800b5b4 	.word	0x0800b5b4
 8000be8:	0800b5d0 	.word	0x0800b5d0
 8000bec:	0800b5ec 	.word	0x0800b5ec
 8000bf0:	200040a8 	.word	0x200040a8

08000bf4 <TouchTask>:
}

/**
 * Handles touch events and reports them to the display manager.
 */
void TouchTask(void const * argument) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	int event;
	int signal;

	for(;;) {
	    // wait for a signal
	    event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000bfc:	f107 0208 	add.w	r2, r7, #8
 8000c00:	2300      	movs	r3, #0
 8000c02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c06:	2000      	movs	r0, #0
 8000c08:	f008 fff6 	bl	8009bf8 <xTaskNotifyWait>
 8000c0c:	6278      	str	r0, [r7, #36]	; 0x24

	    //Signal received, get the touch coordinates
	    if (event == pdTRUE)  {
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d1f3      	bne.n	8000bfc <TouchTask+0x8>

	    	//Get the most recent touch point
	    	touch = FT5446_getTouch();
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fb7d 	bl	8003318 <FT5446_getTouch>

	    	//Envoke the pressed element
			DM_Do_Press(touch);
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c26:	f001 f973 	bl	8001f10 <DM_Do_Press>
	    event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000c2a:	e7e7      	b.n	8000bfc <TouchTask+0x8>

08000c2c <TimeTask>:
}

/**
 * Gets the time from the DS3231 RTC and updates the global time
 */
void TimeTask(void const * argument) {
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	6178      	str	r0, [r7, #20]

	while(1) {
		//Get the time from the RTC once per second
		time = RTC_get_time_date();
 8000c34:	4c0e      	ldr	r4, [pc, #56]	; (8000c70 <TimeTask+0x44>)
 8000c36:	463b      	mov	r3, r7
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fa45 	bl	80030c8 <RTC_get_time_date>
 8000c3e:	463b      	mov	r3, r7
 8000c40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		sprintf(timeString, "%2d%2d%2d", time.hours, time.minutes, time.seconds);
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <TimeTask+0x44>)
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <TimeTask+0x44>)
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	4619      	mov	r1, r3
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <TimeTask+0x44>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4905      	ldr	r1, [pc, #20]	; (8000c74 <TimeTask+0x48>)
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <TimeTask+0x4c>)
 8000c60:	f009 ffc0 	bl	800abe4 <siprintf>

		//Hand control back to the RTOS
		osDelay(1000);
 8000c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c68:	f008 f988 	bl	8008f7c <osDelay>
		time = RTC_get_time_date();
 8000c6c:	e7e2      	b.n	8000c34 <TimeTask+0x8>
 8000c6e:	bf00      	nop
 8000c70:	200040b8 	.word	0x200040b8
 8000c74:	0800b608 	.word	0x0800b608
 8000c78:	200040c4 	.word	0x200040c4

08000c7c <home_onPress>:
}

/**
 * Callback for any button that wants to return HOME
 */
void home_onPress(int id) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, MAIN_MENU, eSetValueWithOverwrite);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <home_onPress+0x20>)
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	f009 f813 	bl	8009cb8 <xTaskGenericNotify>

	return;
 8000c92:	bf00      	nop
}
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200040ac 	.word	0x200040ac

08000ca0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <vApplicationGetIdleTaskMemory+0x2c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <vApplicationGetIdleTaskMemory+0x30>)
 8000cb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200040d0 	.word	0x200040d0
 8000cd0:	20004184 	.word	0x20004184

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b5b0      	push	{r4, r5, r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f004 f8e6 	bl	8004eaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f835 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f000 f955 	bl	8000f90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ce6:	f000 f8a5 	bl	8000e34 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cea:	f000 f8e3 	bl	8000eb4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cee:	f000 f91f 	bl	8000f30 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000cf2:	f000 f87d 	bl	8000df0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  //Turn the Power LED on
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfc:	480f      	ldr	r0, [pc, #60]	; (8000d3c <main+0x68>)
 8000cfe:	f004 fca7 	bl	8005650 <HAL_GPIO_WritePin>

  //Initialise the display using the display manager
  DM_Init();
 8000d02:	f000 fee9 	bl	8001ad8 <DM_Init>

  //Bring the CTP out of reset
  //Dont' forget that the top half of PORTC is used by the LCD Data
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2140      	movs	r1, #64	; 0x40
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <main+0x6c>)
 8000d0c:	f004 fca0 	bl	8005650 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <main+0x70>)
 8000d12:	1d3c      	adds	r4, r7, #4
 8000d14:	461d      	mov	r5, r3
 8000d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f008 f8d0 	bl	8008ecc <osThreadCreate>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <main+0x74>)
 8000d30:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  //Initialise the threads which run the peripherals on this board
  DevBoardBegin();
 8000d32:	f7ff fe6b 	bl	8000a0c <DevBoardBegin>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d36:	f008 f8c2 	bl	8008ebe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <main+0x66>
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	48000800 	.word	0x48000800
 8000d44:	0800b634 	.word	0x0800b634
 8000d48:	200044e4 	.word	0x200044e4

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b096      	sub	sp, #88	; 0x58
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2244      	movs	r2, #68	; 0x44
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f009 fe2c 	bl	800a9b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	463b      	mov	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d72:	f005 fbb9 	bl	80064e8 <HAL_PWREx_ControlVoltageScaling>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d7c:	f000 f9c0 	bl	8001100 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d80:	2302      	movs	r3, #2
 8000d82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d92:	2302      	movs	r3, #2
 8000d94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fbf0 	bl	8006594 <HAL_RCC_OscConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dba:	f000 f9a1 	bl	8001100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 ffb8 	bl	8006d4c <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000de2:	f000 f98d 	bl	8001100 <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3758      	adds	r7, #88	; 0x58
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <MX_CRC_Init+0x3c>)
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <MX_CRC_Init+0x40>)
 8000df8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_CRC_Init+0x3c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_CRC_Init+0x3c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_CRC_Init+0x3c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_CRC_Init+0x3c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_CRC_Init+0x3c>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_CRC_Init+0x3c>)
 8000e1a:	f004 f985 	bl	8005128 <HAL_CRC_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e24:	f000 f96c 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20004384 	.word	0x20004384
 8000e30:	40023000 	.word	0x40023000

08000e34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <MX_I2C1_Init+0x78>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <MX_I2C1_Init+0x7c>)
 8000e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e6e:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e70:	f004 fc29 	bl	80056c6 <HAL_I2C_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e7a:	f000 f941 	bl	8001100 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e82:	f005 fa8b 	bl	800639c <HAL_I2CEx_ConfigAnalogFilter>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e8c:	f000 f938 	bl	8001100 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e90:	2100      	movs	r1, #0
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_I2C1_Init+0x74>)
 8000e94:	f005 facd 	bl	8006432 <HAL_I2CEx_ConfigDigitalFilter>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f000 f92f 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200043a8 	.word	0x200043a8
 8000eac:	40005400 	.word	0x40005400
 8000eb0:	10909cec 	.word	0x10909cec

08000eb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000eba:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <MX_SPI1_Init+0x78>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000ec0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ec4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000ece:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ed2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000f02:	2207      	movs	r2, #7
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000f0e:	2208      	movs	r2, #8
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_SPI1_Init+0x74>)
 8000f14:	f006 fe2c 	bl	8007b70 <HAL_SPI_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f1e:	f000 f8ef 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200043fc 	.word	0x200043fc
 8000f2c:	40013000 	.word	0x40013000

08000f30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <MX_USART1_UART_Init+0x5c>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART1_UART_Init+0x58>)
 8000f74:	f007 f970 	bl	8008258 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f7e:	f000 f8bf 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20004460 	.word	0x20004460
 8000f8c:	40013800 	.word	0x40013800

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <MX_GPIO_Init+0x134>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a46      	ldr	r2, [pc, #280]	; (80010c4 <MX_GPIO_Init+0x134>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b44      	ldr	r3, [pc, #272]	; (80010c4 <MX_GPIO_Init+0x134>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <MX_GPIO_Init+0x134>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a40      	ldr	r2, [pc, #256]	; (80010c4 <MX_GPIO_Init+0x134>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <MX_GPIO_Init+0x134>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <MX_GPIO_Init+0x134>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a3a      	ldr	r2, [pc, #232]	; (80010c4 <MX_GPIO_Init+0x134>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <MX_GPIO_Init+0x134>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD13_Pin|LCD14_Pin|LCD15_Pin|W25Q128_CS_Pin
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f64f 7120 	movw	r1, #65312	; 0xff20
 8000ff4:	4834      	ldr	r0, [pc, #208]	; (80010c8 <MX_GPIO_Init+0x138>)
 8000ff6:	f004 fb2b 	bl	8005650 <HAL_GPIO_WritePin>
                          |LCD8_Pin|LCD9_Pin|LCD10_Pin|LCD11_Pin
                          |LCD12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIO3_Pin|DIO4_Pin|DIO5_Pin|DIO6_Pin
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f64f 711f 	movw	r1, #65311	; 0xff1f
 8001000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001004:	f004 fb24 	bl	8005650 <HAL_GPIO_WritePin>
                          |DIO7_Pin|LCD0_Pin|LCD1_Pin|LCD2_Pin
                          |LCD3_Pin|LCD4_Pin|LCD5_Pin|LCD6_Pin
                          |LCD7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO0_Pin|DIO1_Pin|DIO2_Pin|PWR_LED_Pin
 8001008:	2200      	movs	r2, #0
 800100a:	f64f 413f 	movw	r1, #64575	; 0xfc3f
 800100e:	482f      	ldr	r0, [pc, #188]	; (80010cc <MX_GPIO_Init+0x13c>)
 8001010:	f004 fb1e 	bl	8005650 <HAL_GPIO_WritePin>
                          |LCD_RD_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_D_C_Pin
                          |LCD_CS_Pin|DIO8_Pin|DIO9_Pin|DIO10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	2140      	movs	r1, #64	; 0x40
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <MX_GPIO_Init+0x138>)
 800101a:	f004 fb19 	bl	8005650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD13_Pin LCD14_Pin LCD15_Pin W25Q128_CS_Pin
                           CTP_RST_Pin LCD8_Pin LCD9_Pin LCD10_Pin
                           LCD11_Pin LCD12_Pin */
  GPIO_InitStruct.Pin = LCD13_Pin|LCD14_Pin|LCD15_Pin|W25Q128_CS_Pin
 800101e:	f64f 7360 	movw	r3, #65376	; 0xff60
 8001022:	60fb      	str	r3, [r7, #12]
                          |CTP_RST_Pin|LCD8_Pin|LCD9_Pin|LCD10_Pin
                          |LCD11_Pin|LCD12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	4824      	ldr	r0, [pc, #144]	; (80010c8 <MX_GPIO_Init+0x138>)
 8001038:	f004 f960 	bl	80052fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_UP_Pin SW_DOWN_Pin SW_LEFT_Pin SW_MIDDLE_Pin
                           SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_UP_Pin|SW_DOWN_Pin|SW_LEFT_Pin|SW_MIDDLE_Pin
 800103c:	231f      	movs	r3, #31
 800103e:	60fb      	str	r3, [r7, #12]
                          |SW_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4619      	mov	r1, r3
 800104e:	481e      	ldr	r0, [pc, #120]	; (80010c8 <MX_GPIO_Init+0x138>)
 8001050:	f004 f954 	bl	80052fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO3_Pin DIO4_Pin DIO5_Pin DIO6_Pin
                           DIO7_Pin LCD0_Pin LCD1_Pin LCD2_Pin
                           LCD3_Pin LCD4_Pin LCD5_Pin LCD6_Pin
                           LCD7_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin|DIO4_Pin|DIO5_Pin|DIO6_Pin
 8001054:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8001058:	60fb      	str	r3, [r7, #12]
                          |DIO7_Pin|LCD0_Pin|LCD1_Pin|LCD2_Pin
                          |LCD3_Pin|LCD4_Pin|LCD5_Pin|LCD6_Pin
                          |LCD7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f004 f944 	bl	80052fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin DIO2_Pin PWR_LED_Pin
                           LCD_RD_Pin LCD_WR_Pin LCD_RST_Pin LCD_D_C_Pin
                           LCD_CS_Pin DIO8_Pin DIO9_Pin DIO10_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|PWR_LED_Pin
 8001074:	f64f 433f 	movw	r3, #64575	; 0xfc3f
 8001078:	60fb      	str	r3, [r7, #12]
                          |LCD_RD_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_D_C_Pin
                          |LCD_CS_Pin|DIO8_Pin|DIO9_Pin|DIO10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	480f      	ldr	r0, [pc, #60]	; (80010cc <MX_GPIO_Init+0x13c>)
 800108e:	f004 f935 	bl	80052fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <MX_GPIO_Init+0x138>)
 80010a8:	f004 f928 	bl	80052fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2105      	movs	r1, #5
 80010b0:	2017      	movs	r0, #23
 80010b2:	f004 f80f 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010b6:	2017      	movs	r0, #23
 80010b8:	f004 f828 	bl	800510c <HAL_NVIC_EnableIRQ>

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000800 	.word	0x48000800
 80010cc:	48000400 	.word	0x48000400

080010d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80010d8:	e7fe      	b.n	80010d8 <StartDefaultTask+0x8>
	...

080010dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ee:	f003 fef5 	bl	8004edc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40012c00 	.word	0x40012c00

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>
	...

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_MspInit+0x4c>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_MspInit+0x4c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6613      	str	r3, [r2, #96]	; 0x60
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_MspInit+0x4c>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_MspInit+0x4c>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_MspInit+0x4c>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	6593      	str	r3, [r2, #88]	; 0x58
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_MspInit+0x4c>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	210f      	movs	r1, #15
 8001146:	f06f 0001 	mvn.w	r0, #1
 800114a:	f003 ffc3 	bl	80050d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_CRC_MspInit+0x38>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10b      	bne.n	8001186 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_CRC_MspInit+0x3c>)
 8001170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_CRC_MspInit+0x3c>)
 8001174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001178:	6493      	str	r3, [r2, #72]	; 0x48
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_CRC_MspInit+0x3c>)
 800117c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023000 	.word	0x40023000
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0ac      	sub	sp, #176	; 0xb0
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2288      	movs	r2, #136	; 0x88
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f009 fbfb 	bl	800a9b8 <memset>
  if(hi2c->Instance==I2C1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <HAL_I2C_MspInit+0xb0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d13b      	bne.n	8001244 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011cc:	2340      	movs	r3, #64	; 0x40
 80011ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4618      	mov	r0, r3
 80011da:	f006 f80d 	bl	80071f8 <HAL_RCCEx_PeriphCLKConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011e4:	f7ff ff8c 	bl	8001100 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_I2C_MspInit+0xb4>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	4a18      	ldr	r2, [pc, #96]	; (8001250 <HAL_I2C_MspInit+0xb4>)
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_I2C_MspInit+0xb4>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001200:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001208:	2312      	movs	r3, #18
 800120a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121a:	2304      	movs	r3, #4
 800121c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001224:	4619      	mov	r1, r3
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <HAL_I2C_MspInit+0xb8>)
 8001228:	f004 f868 	bl	80052fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_I2C_MspInit+0xb4>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_I2C_MspInit+0xb4>)
 8001232:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001236:	6593      	str	r3, [r2, #88]	; 0x58
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_I2C_MspInit+0xb4>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	37b0      	adds	r7, #176	; 0xb0
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40005400 	.word	0x40005400
 8001250:	40021000 	.word	0x40021000
 8001254:	48000400 	.word	0x48000400

08001258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <HAL_SPI_MspInit+0x7c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d128      	bne.n	80012cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 8001280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001284:	6613      	str	r3, [r2, #96]	; 0x60
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_SPI_MspInit+0x80>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012aa:	23e0      	movs	r3, #224	; 0xe0
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ba:	2305      	movs	r3, #5
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c8:	f004 f818 	bl	80052fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40013000 	.word	0x40013000
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ac      	sub	sp, #176	; 0xb0
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2288      	movs	r2, #136	; 0x88
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f009 fb5b 	bl	800a9b8 <memset>
  if(huart->Instance==USART1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_UART_MspInit+0xb0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d13a      	bne.n	8001382 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800130c:	2301      	movs	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001310:	2300      	movs	r3, #0
 8001312:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4618      	mov	r0, r3
 800131a:	f005 ff6d 	bl	80071f8 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001324:	f7ff feec 	bl	8001100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_UART_MspInit+0xb4>)
 800132a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132c:	4a18      	ldr	r2, [pc, #96]	; (8001390 <HAL_UART_MspInit+0xb4>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001332:	6613      	str	r3, [r2, #96]	; 0x60
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <HAL_UART_MspInit+0xb4>)
 8001336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <HAL_UART_MspInit+0xb4>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	4a12      	ldr	r2, [pc, #72]	; (8001390 <HAL_UART_MspInit+0xb4>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <HAL_UART_MspInit+0xb4>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001358:	23c0      	movs	r3, #192	; 0xc0
 800135a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001370:	2307      	movs	r3, #7
 8001372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_UART_MspInit+0xb8>)
 800137e:	f003 ffbd 	bl	80052fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	37b0      	adds	r7, #176	; 0xb0
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40013800 	.word	0x40013800
 8001390:	40021000 	.word	0x40021000
 8001394:	48000400 	.word	0x48000400

08001398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_InitTick+0xc8>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	4a2d      	ldr	r2, [pc, #180]	; (8001460 <HAL_InitTick+0xc8>)
 80013ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b0:	6613      	str	r3, [r2, #96]	; 0x60
 80013b2:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_InitTick+0xc8>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013be:	f107 020c 	add.w	r2, r7, #12
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f005 fe83 	bl	80070d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013ce:	f005 fe6b 	bl	80070a8 <HAL_RCC_GetPCLK2Freq>
 80013d2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	4a23      	ldr	r2, [pc, #140]	; (8001464 <HAL_InitTick+0xcc>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	3b01      	subs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_InitTick+0xd0>)
 80013e4:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_InitTick+0xd4>)
 80013e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_InitTick+0xd0>)
 80013ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013f0:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <HAL_InitTick+0xd0>)
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_InitTick+0xd0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_InitTick+0xd0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_InitTick+0xd0>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <HAL_InitTick+0xd0>)
 800140a:	f006 fc54 	bl	8007cb6 <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11b      	bne.n	8001454 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800141c:	4812      	ldr	r0, [pc, #72]	; (8001468 <HAL_InitTick+0xd0>)
 800141e:	f006 fcab 	bl	8007d78 <HAL_TIM_Base_Start_IT>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800142c:	2b00      	cmp	r3, #0
 800142e:	d111      	bne.n	8001454 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001430:	2019      	movs	r0, #25
 8001432:	f003 fe6b 	bl	800510c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d808      	bhi.n	800144e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	2019      	movs	r0, #25
 8001442:	f003 fe47 	bl	80050d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_InitTick+0xd8>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e002      	b.n	8001454 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001454:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001458:	4618      	mov	r0, r3
 800145a:	3730      	adds	r7, #48	; 0x30
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	431bde83 	.word	0x431bde83
 8001468:	200044e8 	.word	0x200044e8
 800146c:	40012c00 	.word	0x40012c00
 8001470:	20004018 	.word	0x20004018

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	//Touch screen interrupt has occured. Notify the touch screen thread.
	xTaskNotifyFromISR( touchTaskHandle, 0, eSetValueWithOverwrite, pdFALSE);
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <EXTI9_5_IRQHandler+0x24>)
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2300      	movs	r3, #0
 80014b0:	2203      	movs	r2, #3
 80014b2:	2100      	movs	r1, #0
 80014b4:	f008 fcbe 	bl	8009e34 <xTaskGenericNotifyFromISR>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 80014b8:	2080      	movs	r0, #128	; 0x80
 80014ba:	f004 f8e1 	bl	8005680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200040b0 	.word	0x200040b0

080014c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80014ce:	f006 fcc3 	bl	8007e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200044e8 	.word	0x200044e8

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f009 fa1a 	bl	800a944 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20018000 	.word	0x20018000
 800153c:	00000400 	.word	0x00000400
 8001540:	20004534 	.word	0x20004534
 8001544:	2000a240 	.word	0x2000a240

08001548 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <SystemInit+0x20>)
 800154e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <SystemInit+0x20>)
 8001554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <DM_New_Animation>:
 * Creates a new animation element.
 * bitmaps - an array of pointers to bitmaps for each frame
 * selected - the current frame being displayed
 * numChildren - the number of frames in the array
 */
struct DisplayElement DM_New_Animation(int x1, int y1, int scale, unsigned int **bitmaps, int numFrames) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b09c      	sub	sp, #112	; 0x70
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
	struct DisplayElement animation = getDefaultElement();
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fd8a 	bl	8002098 <getDefaultElement>
	animation.type = ANIMATION;
 8001584:	230a      	movs	r3, #10
 8001586:	617b      	str	r3, [r7, #20]
	animation.x1 = x1; animation.y1 = y1;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	b29b      	uxth	r3, r3
 800158c:	833b      	strh	r3, [r7, #24]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	b29b      	uxth	r3, r3
 8001592:	837b      	strh	r3, [r7, #26]
	//Get the animation dimensions
	animation.x2 = x1 + (bitmaps[0][0] * scale);
 8001594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29a      	uxth	r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	fb12 f303 	smulbb	r3, r2, r3
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	83bb      	strh	r3, [r7, #28]
	animation.y2 = y1 + (bitmaps[0][1] * scale);
 80015b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3304      	adds	r3, #4
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	fb12 f303 	smulbb	r3, r2, r3
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	83fb      	strh	r3, [r7, #30]
	animation.size = scale;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	623b      	str	r3, [r7, #32]
	animation.bitmaps = bitmaps;
 80015d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015d4:	63bb      	str	r3, [r7, #56]	; 0x38
	animation.selected = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
	animation.animationTicks = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	66bb      	str	r3, [r7, #104]	; 0x68
	animation.ticksPerFrame = TICKS_PER_FRAME;
 80015de:	2302      	movs	r3, #2
 80015e0:	66fb      	str	r3, [r7, #108]	; 0x6c
	animation.refresh = ALWAYS;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	animation.draw = DM_Animation;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <DM_New_Animation+0x9c>)
 80015ea:	657b      	str	r3, [r7, #84]	; 0x54
	animation.numChildren = numFrames;
 80015ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015ee:	667b      	str	r3, [r7, #100]	; 0x64

	return animation;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	225c      	movs	r2, #92	; 0x5c
 80015fa:	4619      	mov	r1, r3
 80015fc:	f009 f9ce 	bl	800a99c <memcpy>
}
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	3770      	adds	r7, #112	; 0x70
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	0800160d 	.word	0x0800160d

0800160c <DM_Animation>:

/**
 * Draws an animation frame to the display.
 */
void DM_Animation(int id) {
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	draw_bitmap(elements[id].x1, elements[id].y1, elements[id].size, elements[id].bitmaps[elements[id].selected]);
 8001614:	4a1a      	ldr	r2, [pc, #104]	; (8001680 <DM_Animation+0x74>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	215c      	movs	r1, #92	; 0x5c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	3304      	adds	r3, #4
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	461d      	mov	r5, r3
 8001626:	4a16      	ldr	r2, [pc, #88]	; (8001680 <DM_Animation+0x74>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	215c      	movs	r1, #92	; 0x5c
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	3306      	adds	r3, #6
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	461e      	mov	r6, r3
 8001638:	4a11      	ldr	r2, [pc, #68]	; (8001680 <DM_Animation+0x74>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	215c      	movs	r1, #92	; 0x5c
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	330c      	adds	r3, #12
 8001646:	6819      	ldr	r1, [r3, #0]
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <DM_Animation+0x74>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	205c      	movs	r0, #92	; 0x5c
 800164e:	fb00 f303 	mul.w	r3, r0, r3
 8001652:	4413      	add	r3, r2
 8001654:	3324      	adds	r3, #36	; 0x24
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4809      	ldr	r0, [pc, #36]	; (8001680 <DM_Animation+0x74>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	245c      	movs	r4, #92	; 0x5c
 800165e:	fb04 f303 	mul.w	r3, r4, r3
 8001662:	4403      	add	r3, r0
 8001664:	3310      	adds	r3, #16
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	460a      	mov	r2, r1
 8001670:	4631      	mov	r1, r6
 8001672:	4628      	mov	r0, r5
 8001674:	f002 fa3c 	bl	8003af0 <draw_bitmap>
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001680:	20004538 	.word	0x20004538

08001684 <DM_New_Bitmap>:


/**
 * Create a bitmap element and add it to the queue.
 */
struct DisplayElement DM_New_Bitmap(int x, int y, int scale, const unsigned int *src){
 8001684:	b580      	push	{r7, lr}
 8001686:	b09c      	sub	sp, #112	; 0x70
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
	  struct DisplayElement bitmap = getDefaultElement();
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fcfe 	bl	8002098 <getDefaultElement>
	  bitmap.type = BITMAP;
 800169c:	2305      	movs	r3, #5
 800169e:	617b      	str	r3, [r7, #20]
	  bitmap.x1 = x; bitmap.y1 = y;
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	833b      	strh	r3, [r7, #24]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	837b      	strh	r3, [r7, #26]
	  //Calculate the bitmap size for proper collision detection
	  bitmap.x2 = x + src[0] * scale; bitmap.y2 = y + src[1] * scale;
 80016ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	fb12 f303 	smulbb	r3, r2, r3
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	83bb      	strh	r3, [r7, #28]
 80016c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016c8:	3304      	adds	r3, #4
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	fb12 f303 	smulbb	r3, r2, r3
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	83fb      	strh	r3, [r7, #30]
	  bitmap.size = scale;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	623b      	str	r3, [r7, #32]
	  bitmap.bitmap = src;
 80016e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
	  bitmap.draw = DM_Bitmap;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <DM_New_Bitmap+0x88>)
 80016ec:	657b      	str	r3, [r7, #84]	; 0x54
	  bitmap.refresh = ONCE;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	  return bitmap;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	225c      	movs	r2, #92	; 0x5c
 80016fe:	4619      	mov	r1, r3
 8001700:	f009 f94c 	bl	800a99c <memcpy>
}
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	3770      	adds	r7, #112	; 0x70
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	08001711 	.word	0x08001711

08001710 <DM_Bitmap>:

/**
 * Draws a bitmap to the display
 */
void DM_Bitmap(int id) {
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	draw_bitmap(elements[id].x1, elements[id].y1, elements[id].size, elements[id].bitmap);
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <DM_Bitmap+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	215c      	movs	r1, #92	; 0x5c
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	3304      	adds	r3, #4
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	461c      	mov	r4, r3
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <DM_Bitmap+0x5c>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	215c      	movs	r1, #92	; 0x5c
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	3306      	adds	r3, #6
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	461d      	mov	r5, r3
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <DM_Bitmap+0x5c>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	215c      	movs	r1, #92	; 0x5c
 8001742:	fb01 f303 	mul.w	r3, r1, r3
 8001746:	4413      	add	r3, r2
 8001748:	330c      	adds	r3, #12
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <DM_Bitmap+0x5c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	205c      	movs	r0, #92	; 0x5c
 8001752:	fb00 f303 	mul.w	r3, r0, r3
 8001756:	440b      	add	r3, r1
 8001758:	3320      	adds	r3, #32
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4629      	mov	r1, r5
 800175e:	4620      	mov	r0, r4
 8001760:	f002 f9c6 	bl	8003af0 <draw_bitmap>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bdb0      	pop	{r4, r5, r7, pc}
 800176c:	20004538 	.word	0x20004538

08001770 <DM_New_Button>:
void DM_Button_onPress(int id);

/**
 * Create a new button and add it to the queue
 */
struct DisplayElement DM_New_Button(int x, int y, char *text, State state){
 8001770:	b580      	push	{r7, lr}
 8001772:	b09e      	sub	sp, #120	; 0x78
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
	int width = 120;
 800177e:	2378      	movs	r3, #120	; 0x78
 8001780:	677b      	str	r3, [r7, #116]	; 0x74
	int height = 40;
 8001782:	2328      	movs	r3, #40	; 0x28
 8001784:	673b      	str	r3, [r7, #112]	; 0x70
	//If the string is long, then increase button width
	int len = DM_StrLen(text, 64);
 8001786:	2140      	movs	r1, #64	; 0x40
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	f000 fb03 	bl	8001d94 <DM_StrLen>
 800178e:	66f8      	str	r0, [r7, #108]	; 0x6c
	if(len > 8) {
 8001790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001792:	2b08      	cmp	r3, #8
 8001794:	dd0c      	ble.n	80017b0 <DM_New_Button+0x40>
		width = len * 12;
 8001796:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	677b      	str	r3, [r7, #116]	; 0x74
		//if this button is on the right-hand edge, then move it back a bit
		if(x > BTN_MIDDLE_X)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2bbe      	cmp	r3, #190	; 0xbe
 80017a6:	dd03      	ble.n	80017b0 <DM_New_Button+0x40>
			x = WIDTH - width - 10;
 80017a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017aa:	f5c3 73eb 	rsb	r3, r3, #470	; 0x1d6
 80017ae:	60bb      	str	r3, [r7, #8]
	}
	struct DisplayElement button = getDefaultElement();
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 fc6f 	bl	8002098 <getDefaultElement>
	button.type = BUTTON;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
	button.x1 = x; button.y1 = y; button.x2 = x + width; button.y2 = y + height;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	82bb      	strh	r3, [r7, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	82fb      	strh	r3, [r7, #22]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	833b      	strh	r3, [r7, #24]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	837b      	strh	r3, [r7, #26]
	button.text = text;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	button.state = state;
 80017ea:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80017ee:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	button.oldState = state - 1; //Will only refresh when the states DONT match.
 80017f2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	button.draw = DM_Button;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <DM_New_Button+0xb4>)
 8001800:	653b      	str	r3, [r7, #80]	; 0x50
	button.onPress = NULL;
 8001802:	2300      	movs	r3, #0
 8001804:	657b      	str	r3, [r7, #84]	; 0x54
	button.refresh = ALWAYS;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	return button;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4618      	mov	r0, r3
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	225c      	movs	r2, #92	; 0x5c
 8001816:	4619      	mov	r1, r3
 8001818:	f009 f8c0 	bl	800a99c <memcpy>
}
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	3778      	adds	r7, #120	; 0x78
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	08001829 	.word	0x08001829

08001828 <DM_Button>:

/**
 * A button looking thing
 */
void DM_Button(int id) {
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af02      	add	r7, sp, #8
 800182e:	6078      	str	r0, [r7, #4]
	int outlineColour = COLOR_GRAY;
 8001830:	f248 4310 	movw	r3, #33808	; 0x8410
 8001834:	61fb      	str	r3, [r7, #28]
	int fillColour = COLOR_LIGHTGRAY;
 8001836:	f24c 6318 	movw	r3, #50712	; 0xc618
 800183a:	61bb      	str	r3, [r7, #24]
	int textColour = COLOR_BLACK;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
	if(elements[id].state == DISABLED) {
 8001840:	4a95      	ldr	r2, [pc, #596]	; (8001a98 <DM_Button+0x270>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	215c      	movs	r1, #92	; 0x5c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3330      	adds	r3, #48	; 0x30
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d108      	bne.n	8001866 <DM_Button+0x3e>
		fillColour = COLOR_WHITE;
 8001854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001858:	61bb      	str	r3, [r7, #24]
		outlineColour = COLOR_LIGHTGRAY;
 800185a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800185e:	61fb      	str	r3, [r7, #28]
		textColour = COLOR_LIGHTGRAY;
 8001860:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001864:	617b      	str	r3, [r7, #20]
	}
	if(elements[id].state == SELECTED) {
 8001866:	4a8c      	ldr	r2, [pc, #560]	; (8001a98 <DM_Button+0x270>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	215c      	movs	r1, #92	; 0x5c
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	3330      	adds	r3, #48	; 0x30
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d102      	bne.n	8001880 <DM_Button+0x58>
		fillColour = COLOR_LIGHTBLUE;
 800187a:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 800187e:	61bb      	str	r3, [r7, #24]
	}
	//Draw the background
	fill_rectangle(elements[id].x1 + 1, elements[id].y1 + 1, elements[id].x2 - 1, elements[id].y2 - 1, fillColour);
 8001880:	4a85      	ldr	r2, [pc, #532]	; (8001a98 <DM_Button+0x270>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	215c      	movs	r1, #92	; 0x5c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3304      	adds	r3, #4
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	1c58      	adds	r0, r3, #1
 8001892:	4a81      	ldr	r2, [pc, #516]	; (8001a98 <DM_Button+0x270>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	215c      	movs	r1, #92	; 0x5c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3306      	adds	r3, #6
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	1c59      	adds	r1, r3, #1
 80018a4:	4a7c      	ldr	r2, [pc, #496]	; (8001a98 <DM_Button+0x270>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	245c      	movs	r4, #92	; 0x5c
 80018aa:	fb04 f303 	mul.w	r3, r4, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3308      	adds	r3, #8
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	4c78      	ldr	r4, [pc, #480]	; (8001a98 <DM_Button+0x270>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	255c      	movs	r5, #92	; 0x5c
 80018bc:	fb05 f303 	mul.w	r3, r5, r3
 80018c0:	4423      	add	r3, r4
 80018c2:	330a      	adds	r3, #10
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	1e5c      	subs	r4, r3, #1
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	4623      	mov	r3, r4
 80018ce:	f001 ff8f 	bl	80037f0 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(elements[id].x1 + 1, elements[id].y1, elements[id].x2, elements[id].y1 + 1, outlineColour);
 80018d2:	4a71      	ldr	r2, [pc, #452]	; (8001a98 <DM_Button+0x270>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	215c      	movs	r1, #92	; 0x5c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	3304      	adds	r3, #4
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	1c58      	adds	r0, r3, #1
 80018e4:	4a6c      	ldr	r2, [pc, #432]	; (8001a98 <DM_Button+0x270>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	215c      	movs	r1, #92	; 0x5c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	3306      	adds	r3, #6
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	461c      	mov	r4, r3
 80018f6:	4a68      	ldr	r2, [pc, #416]	; (8001a98 <DM_Button+0x270>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	215c      	movs	r1, #92	; 0x5c
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	3308      	adds	r3, #8
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	461d      	mov	r5, r3
 8001908:	4a63      	ldr	r2, [pc, #396]	; (8001a98 <DM_Button+0x270>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	215c      	movs	r1, #92	; 0x5c
 800190e:	fb01 f303 	mul.w	r3, r1, r3
 8001912:	4413      	add	r3, r2
 8001914:	3306      	adds	r3, #6
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	462a      	mov	r2, r5
 8001922:	4621      	mov	r1, r4
 8001924:	f001 ff64 	bl	80037f0 <fill_rectangle>
	//Left border
	fill_rectangle(elements[id].x1, elements[id].y1 + 1, elements[id].x1 + 1, elements[id].y2, outlineColour);
 8001928:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <DM_Button+0x270>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	215c      	movs	r1, #92	; 0x5c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3304      	adds	r3, #4
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	461d      	mov	r5, r3
 800193a:	4a57      	ldr	r2, [pc, #348]	; (8001a98 <DM_Button+0x270>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	215c      	movs	r1, #92	; 0x5c
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	3306      	adds	r3, #6
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	1c59      	adds	r1, r3, #1
 800194c:	4a52      	ldr	r2, [pc, #328]	; (8001a98 <DM_Button+0x270>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	205c      	movs	r0, #92	; 0x5c
 8001952:	fb00 f303 	mul.w	r3, r0, r3
 8001956:	4413      	add	r3, r2
 8001958:	3304      	adds	r3, #4
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	484e      	ldr	r0, [pc, #312]	; (8001a98 <DM_Button+0x270>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	245c      	movs	r4, #92	; 0x5c
 8001964:	fb04 f303 	mul.w	r3, r4, r3
 8001968:	4403      	add	r3, r0
 800196a:	330a      	adds	r3, #10
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	4603      	mov	r3, r0
 8001976:	4628      	mov	r0, r5
 8001978:	f001 ff3a 	bl	80037f0 <fill_rectangle>
	//Bottom border
	fill_rectangle(elements[id].x1 + 1, elements[id].y2, elements[id].x2, elements[id].y2 + 1, outlineColour);
 800197c:	4a46      	ldr	r2, [pc, #280]	; (8001a98 <DM_Button+0x270>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	215c      	movs	r1, #92	; 0x5c
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	3304      	adds	r3, #4
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	1c58      	adds	r0, r3, #1
 800198e:	4a42      	ldr	r2, [pc, #264]	; (8001a98 <DM_Button+0x270>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	215c      	movs	r1, #92	; 0x5c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	330a      	adds	r3, #10
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	461c      	mov	r4, r3
 80019a0:	4a3d      	ldr	r2, [pc, #244]	; (8001a98 <DM_Button+0x270>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	215c      	movs	r1, #92	; 0x5c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3308      	adds	r3, #8
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	461d      	mov	r5, r3
 80019b2:	4a39      	ldr	r2, [pc, #228]	; (8001a98 <DM_Button+0x270>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	215c      	movs	r1, #92	; 0x5c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	330a      	adds	r3, #10
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	462a      	mov	r2, r5
 80019cc:	4621      	mov	r1, r4
 80019ce:	f001 ff0f 	bl	80037f0 <fill_rectangle>
	//Right border
	fill_rectangle(elements[id].x2, elements[id].y1 + 1, elements[id].x2 + 1, elements[id].y2, outlineColour);
 80019d2:	4a31      	ldr	r2, [pc, #196]	; (8001a98 <DM_Button+0x270>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	215c      	movs	r1, #92	; 0x5c
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	4413      	add	r3, r2
 80019de:	3308      	adds	r3, #8
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	461d      	mov	r5, r3
 80019e4:	4a2c      	ldr	r2, [pc, #176]	; (8001a98 <DM_Button+0x270>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	215c      	movs	r1, #92	; 0x5c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3306      	adds	r3, #6
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	1c59      	adds	r1, r3, #1
 80019f6:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <DM_Button+0x270>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	205c      	movs	r0, #92	; 0x5c
 80019fc:	fb00 f303 	mul.w	r3, r0, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	3308      	adds	r3, #8
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	4823      	ldr	r0, [pc, #140]	; (8001a98 <DM_Button+0x270>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	245c      	movs	r4, #92	; 0x5c
 8001a0e:	fb04 f303 	mul.w	r3, r4, r3
 8001a12:	4403      	add	r3, r0
 8001a14:	330a      	adds	r3, #10
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4628      	mov	r0, r5
 8001a22:	f001 fee5 	bl	80037f0 <fill_rectangle>

	//Calculate the length of the string to center the text
	int strLen = DM_StrLen(elements[id].text, 18);
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <DM_Button+0x270>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	215c      	movs	r1, #92	; 0x5c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	332c      	adds	r3, #44	; 0x2c
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2112      	movs	r1, #18
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f9ab 	bl	8001d94 <DM_StrLen>
 8001a3e:	6138      	str	r0, [r7, #16]

	//Each char will be 8px wide
	int halfWidth = strLen * 3;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
	//Write the text
	draw_fast_string(elements[id].x1 + 50 - halfWidth, elements[id].y1 + 16, textColour, fillColour, elements[id].text);
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <DM_Button+0x270>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	215c      	movs	r1, #92	; 0x5c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3304      	adds	r3, #4
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad0      	subs	r0, r2, r3
 8001a62:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <DM_Button+0x270>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	215c      	movs	r1, #92	; 0x5c
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3306      	adds	r3, #6
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	f103 0110 	add.w	r1, r3, #16
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <DM_Button+0x270>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	245c      	movs	r4, #92	; 0x5c
 8001a7c:	fb04 f303 	mul.w	r3, r4, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	332c      	adds	r3, #44	; 0x2c
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	f002 f806 	bl	8003a9c <draw_fast_string>
}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bdb0      	pop	{r4, r5, r7, pc}
 8001a98:	20004538 	.word	0x20004538

08001a9c <DM_Button_onPress>:

/**
 * Intrinsic button press function. Any global behaviours for all buttons should go here.
 */
void DM_Button_onPress(int id) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	if(elements[id].onPress)
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <DM_Button_onPress+0x38>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	215c      	movs	r1, #92	; 0x5c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3344      	adds	r3, #68	; 0x44
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <DM_Button_onPress+0x30>
		elements[id].onPress(id);
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <DM_Button_onPress+0x38>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	215c      	movs	r1, #92	; 0x5c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3344      	adds	r3, #68	; 0x44
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	4798      	blx	r3
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20004538 	.word	0x20004538

08001ad8 <DM_Init>:
int previously_touched_element = 0;

/**
 * Initialises the LCD device, and allocates any memory required.
 */
void DM_Init() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	lcd_init_parallel();
 8001adc:	f001 fd14 	bl	8003508 <lcd_init_parallel>
	DM_Clear();
 8001ae0:	f000 f8da 	bl	8001c98 <DM_Clear>
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <DM_Draw>:

/**
 * Draw the whole queue.
 */
void DM_Draw() {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	//Draw each element int he array of display elements
	for(int i = 0; i < numElements; i++) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	e0c2      	b.n	8001c7a <DM_Draw+0x192>
		//Only draw elements flagged for update
		if(elements[i].refresh == ONCE) {
 8001af4:	4a66      	ldr	r2, [pc, #408]	; (8001c90 <DM_Draw+0x1a8>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	215c      	movs	r1, #92	; 0x5c
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	333c      	adds	r3, #60	; 0x3c
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d112      	bne.n	8001b2e <DM_Draw+0x46>
			//Draw this element once then clear the refresh flag
			elements[i].draw(i);
 8001b08:	4a61      	ldr	r2, [pc, #388]	; (8001c90 <DM_Draw+0x1a8>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	215c      	movs	r1, #92	; 0x5c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	3340      	adds	r3, #64	; 0x40
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4798      	blx	r3
			elements[i].refresh = NEVER;
 8001b1c:	4a5c      	ldr	r2, [pc, #368]	; (8001c90 <DM_Draw+0x1a8>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	215c      	movs	r1, #92	; 0x5c
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	333c      	adds	r3, #60	; 0x3c
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	701a      	strb	r2, [r3, #0]
		}
		if(elements[i].refresh == ALWAYS) {
 8001b2e:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <DM_Draw+0x1a8>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	215c      	movs	r1, #92	; 0x5c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	333c      	adds	r3, #60	; 0x3c
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 8098 	bne.w	8001c74 <DM_Draw+0x18c>
			//For elements that ALWAYS draw, check if the state has changed.
			//Only draw if the state has changed.
			if(elements[i].oldState != elements[i].state) {
 8001b44:	4a52      	ldr	r2, [pc, #328]	; (8001c90 <DM_Draw+0x1a8>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	215c      	movs	r1, #92	; 0x5c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3331      	adds	r3, #49	; 0x31
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	494e      	ldr	r1, [pc, #312]	; (8001c90 <DM_Draw+0x1a8>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	205c      	movs	r0, #92	; 0x5c
 8001b5a:	fb00 f303 	mul.w	r3, r0, r3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3330      	adds	r3, #48	; 0x30
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d01a      	beq.n	8001b9e <DM_Draw+0xb6>
				elements[i].draw(i);
 8001b68:	4a49      	ldr	r2, [pc, #292]	; (8001c90 <DM_Draw+0x1a8>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	215c      	movs	r1, #92	; 0x5c
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	3340      	adds	r3, #64	; 0x40
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
				//Update the oldState
				elements[i].oldState = elements[i].state;
 8001b7c:	4a44      	ldr	r2, [pc, #272]	; (8001c90 <DM_Draw+0x1a8>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	215c      	movs	r1, #92	; 0x5c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3330      	adds	r3, #48	; 0x30
 8001b8a:	7818      	ldrb	r0, [r3, #0]
 8001b8c:	4a40      	ldr	r2, [pc, #256]	; (8001c90 <DM_Draw+0x1a8>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	215c      	movs	r1, #92	; 0x5c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	3331      	adds	r3, #49	; 0x31
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	701a      	strb	r2, [r3, #0]
			}

			//Advance the ticks of an animation
			//Once the tick counter is reached, the animation advances to the next frame
			if(elements[i].type == ANIMATION) {
 8001b9e:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <DM_Draw+0x1a8>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	215c      	movs	r1, #92	; 0x5c
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	4413      	add	r3, r2
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b0a      	cmp	r3, #10
 8001bae:	d161      	bne.n	8001c74 <DM_Draw+0x18c>
				elements[i].animationTicks++;
 8001bb0:	4a37      	ldr	r2, [pc, #220]	; (8001c90 <DM_Draw+0x1a8>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	215c      	movs	r1, #92	; 0x5c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3354      	adds	r3, #84	; 0x54
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	4933      	ldr	r1, [pc, #204]	; (8001c90 <DM_Draw+0x1a8>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	205c      	movs	r0, #92	; 0x5c
 8001bc8:	fb00 f303 	mul.w	r3, r0, r3
 8001bcc:	440b      	add	r3, r1
 8001bce:	3354      	adds	r3, #84	; 0x54
 8001bd0:	601a      	str	r2, [r3, #0]
				//If this element is due to advance to the next frame
				if(elements[i].animationTicks >= elements[i].ticksPerFrame) {
 8001bd2:	4a2f      	ldr	r2, [pc, #188]	; (8001c90 <DM_Draw+0x1a8>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	215c      	movs	r1, #92	; 0x5c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3354      	adds	r3, #84	; 0x54
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	492b      	ldr	r1, [pc, #172]	; (8001c90 <DM_Draw+0x1a8>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	205c      	movs	r0, #92	; 0x5c
 8001be8:	fb00 f303 	mul.w	r3, r0, r3
 8001bec:	440b      	add	r3, r1
 8001bee:	3358      	adds	r3, #88	; 0x58
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	db3e      	blt.n	8001c74 <DM_Draw+0x18c>
					//Draw the frame
					elements[i].draw(i);
 8001bf6:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <DM_Draw+0x1a8>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	215c      	movs	r1, #92	; 0x5c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3340      	adds	r3, #64	; 0x40
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3

					//Advance the frame and reset the counters
					elements[i].animationTicks = 0;
 8001c0a:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <DM_Draw+0x1a8>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	215c      	movs	r1, #92	; 0x5c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3354      	adds	r3, #84	; 0x54
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
					elements[i].selected++;
 8001c1c:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <DM_Draw+0x1a8>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	215c      	movs	r1, #92	; 0x5c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	3310      	adds	r3, #16
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	4918      	ldr	r1, [pc, #96]	; (8001c90 <DM_Draw+0x1a8>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	205c      	movs	r0, #92	; 0x5c
 8001c34:	fb00 f303 	mul.w	r3, r0, r3
 8001c38:	440b      	add	r3, r1
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	601a      	str	r2, [r3, #0]
					if(elements[i].selected >= elements[i].numChildren)
 8001c3e:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <DM_Draw+0x1a8>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	215c      	movs	r1, #92	; 0x5c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3310      	adds	r3, #16
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4910      	ldr	r1, [pc, #64]	; (8001c90 <DM_Draw+0x1a8>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	205c      	movs	r0, #92	; 0x5c
 8001c54:	fb00 f303 	mul.w	r3, r0, r3
 8001c58:	440b      	add	r3, r1
 8001c5a:	3350      	adds	r3, #80	; 0x50
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	db08      	blt.n	8001c74 <DM_Draw+0x18c>
						elements[i].selected = 0;
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <DM_Draw+0x1a8>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	215c      	movs	r1, #92	; 0x5c
 8001c68:	fb01 f303 	mul.w	r3, r1, r3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3310      	adds	r3, #16
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < numElements; i++) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <DM_Draw+0x1ac>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f6ff af37 	blt.w	8001af4 <DM_Draw+0xc>
				}
			}
		}

	}
}
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20004538 	.word	0x20004538
 8001c94:	200050b8 	.word	0x200050b8

08001c98 <DM_Clear>:

/**
 * Clears the array of elements to draw, and clears the screen.
 */
void DM_Clear() {
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b09b      	sub	sp, #108	; 0x6c
 8001c9c:	af02      	add	r7, sp, #8
	//Add a blank screen element to the start of the display
	elements[0] = DM_New_Fill_Rectangle(0, 0, WIDTH, HEIGHT, BG_COLOUR);
 8001c9e:	4c0d      	ldr	r4, [pc, #52]	; (8001cd4 <DM_Clear+0x3c>)
 8001ca0:	4638      	mov	r0, r7
 8001ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	f000 fa35 	bl	8002124 <DM_New_Fill_Rectangle>
 8001cba:	4620      	mov	r0, r4
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	225c      	movs	r2, #92	; 0x5c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f008 fe6b 	bl	800a99c <memcpy>

	//Use a background image instead
	//elements[0] = DM_New_Bitmap(0, 0, 2, BGImage);

	//Reset the array counter
	numElements = 1;
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <DM_Clear+0x40>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	3764      	adds	r7, #100	; 0x64
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}
 8001cd4:	20004538 	.word	0x20004538
 8001cd8:	200050b8 	.word	0x200050b8

08001cdc <DM_Refresh_Element>:
}

/**
 * Register an element for refresh on next cycle.
 */
void DM_Refresh_Element(int id) {
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	elements[id].refresh = ONCE;
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <DM_Refresh_Element+0x28>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	215c      	movs	r1, #92	; 0x5c
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	333c      	adds	r3, #60	; 0x3c
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20004538 	.word	0x20004538

08001d08 <DM_Add_Element>:

/**
 * Adds an element to the queue to be drawn later.
 */
int DM_Add_Element(struct DisplayElement newElement) {
 8001d08:	b084      	sub	sp, #16
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	f107 0c08 	add.w	ip, r7, #8
 8001d12:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	elements[numElements++] = newElement;
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <DM_Add_Element+0x44>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	490b      	ldr	r1, [pc, #44]	; (8001d4c <DM_Add_Element+0x44>)
 8001d1e:	600a      	str	r2, [r1, #0]
 8001d20:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <DM_Add_Element+0x48>)
 8001d22:	215c      	movs	r1, #92	; 0x5c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	225c      	movs	r2, #92	; 0x5c
 8001d32:	4619      	mov	r1, r3
 8001d34:	f008 fe32 	bl	800a99c <memcpy>

	return numElements - 1;
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <DM_Add_Element+0x44>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3b01      	subs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d46:	b004      	add	sp, #16
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	200050b8 	.word	0x200050b8
 8001d50:	20004538 	.word	0x20004538

08001d54 <DM_Replace_Element>:

/**
 * Replaces a specific element in the queue with a new one
 */
void DM_Replace_Element(int id, struct DisplayElement newElement) {
 8001d54:	b084      	sub	sp, #16
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	f107 0014 	add.w	r0, r7, #20
 8001d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	elements[id] = newElement;
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <DM_Replace_Element+0x3c>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	215c      	movs	r1, #92	; 0x5c
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	225c      	movs	r2, #92	; 0x5c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f008 fe0e 	bl	800a99c <memcpy>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d8a:	b004      	add	sp, #16
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20004538 	.word	0x20004538

08001d94 <DM_StrLen>:

/**
 * Calculate the length of a string up to a maximum length.
 * Returns the maximum length if length is exceeded.
 */
int DM_StrLen(char *str, int length) {
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	int strLen = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < length; i++) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	e00b      	b.n	8001dc0 <DM_StrLen+0x2c>
		if(str[i] == '\0') {
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <DM_StrLen+0x26>
			strLen = i;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60fb      	str	r3, [r7, #12]
			break;
 8001db8:	e006      	b.n	8001dc8 <DM_StrLen+0x34>
	for(int i = 0; i < length; i++) {
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dbef      	blt.n	8001da8 <DM_StrLen+0x14>
		}
	}

	return strLen;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <DM_Remove_Element>:
 * Contrary to the name, this does not actually remove the element,
 * it just tells the element not to refresh anymore, and then
 * draws a box over it.
 * The element can still be referenced.
 */
void DM_Remove_Element(int id) {
 8001dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dda:	b0af      	sub	sp, #188	; 0xbc
 8001ddc:	af14      	add	r7, sp, #80	; 0x50
 8001dde:	6078      	str	r0, [r7, #4]
	elements[id].refresh = NEVER;
 8001de0:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <DM_Remove_Element+0x98>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	215c      	movs	r1, #92	; 0x5c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	333c      	adds	r3, #60	; 0x3c
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]
	DM_Add_Element(DM_New_Fill_Rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, BG_COLOUR));
 8001df2:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <DM_Remove_Element+0x98>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	215c      	movs	r1, #92	; 0x5c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3304      	adds	r3, #4
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	461c      	mov	r4, r3
 8001e04:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <DM_Remove_Element+0x98>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	215c      	movs	r1, #92	; 0x5c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3306      	adds	r3, #6
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	461d      	mov	r5, r3
 8001e16:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <DM_Remove_Element+0x98>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	215c      	movs	r1, #92	; 0x5c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	3308      	adds	r3, #8
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	461e      	mov	r6, r3
 8001e28:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <DM_Remove_Element+0x98>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	215c      	movs	r1, #92	; 0x5c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	330a      	adds	r3, #10
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f107 000c 	add.w	r0, r7, #12
 8001e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	9200      	str	r2, [sp, #0]
 8001e46:	4633      	mov	r3, r6
 8001e48:	462a      	mov	r2, r5
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	f000 f96a 	bl	8002124 <DM_New_Fill_Rectangle>
 8001e50:	4668      	mov	r0, sp
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	224c      	movs	r2, #76	; 0x4c
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f008 fd9f 	bl	800a99c <memcpy>
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e64:	f7ff ff50 	bl	8001d08 <DM_Add_Element>
}
 8001e68:	bf00      	nop
 8001e6a:	376c      	adds	r7, #108	; 0x6c
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e70:	20004538 	.word	0x20004538

08001e74 <DM_Parse_Press>:
 *
 * Remember that most of the time element 0 is the background.
 *
 * Returns -1 if nothing is detected.
 */
int DM_Parse_Press(int x, int y) {
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	//Check each element to determine if the x,y coordinates are within it's bounds
	for(int i = numElements; i >= 0; i--) {
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <DM_Parse_Press+0x94>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e034      	b.n	8001ef0 <DM_Parse_Press+0x7c>
		if(x > elements[i].x1 && y > elements[i].y1 && x < elements[i].x2 && y < elements[i].y2) {
 8001e86:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <DM_Parse_Press+0x98>)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	215c      	movs	r1, #92	; 0x5c
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	dd25      	ble.n	8001eea <DM_Parse_Press+0x76>
 8001e9e:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <DM_Parse_Press+0x98>)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	215c      	movs	r1, #92	; 0x5c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3306      	adds	r3, #6
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	dd19      	ble.n	8001eea <DM_Parse_Press+0x76>
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <DM_Parse_Press+0x98>)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	215c      	movs	r1, #92	; 0x5c
 8001ebc:	fb01 f303 	mul.w	r3, r1, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	da0d      	bge.n	8001eea <DM_Parse_Press+0x76>
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <DM_Parse_Press+0x98>)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	215c      	movs	r1, #92	; 0x5c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	330a      	adds	r3, #10
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	da01      	bge.n	8001eea <DM_Parse_Press+0x76>
			return i;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	e007      	b.n	8001efa <DM_Parse_Press+0x86>
	for(int i = numElements; i >= 0; i--) {
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	dac7      	bge.n	8001e86 <DM_Parse_Press+0x12>
		}
	}

	return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	200050b8 	.word	0x200050b8
 8001f0c:	20004538 	.word	0x20004538

08001f10 <DM_Do_Press>:
 * context highlighting etc., as well as an externally defined onPress() function to handle
 * specific tasks.
 *
 * Returns the ID of the element touched, or -1 if no element was touched.
 */
int DM_Do_Press(struct Touch touch) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Find the touched element, if any
	int id = DM_Parse_Press(touch.X, touch.Y);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ffa6 	bl	8001e74 <DM_Parse_Press>
 8001f28:	6178      	str	r0, [r7, #20]

	//If no element was found then return right away
	if(id < 0)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da01      	bge.n	8001f34 <DM_Do_Press+0x24>
		return id;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	e0a5      	b.n	8002080 <DM_Do_Press+0x170>

	//Call any onPress function for this element on RELEASE.
	//Check that the element we released on was the one we pressed originally
	if(touch.state == 0x01 && id == previously_touched_element) {
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d150      	bne.n	8001fdc <DM_Do_Press+0xcc>
 8001f3a:	4b53      	ldr	r3, [pc, #332]	; (8002088 <DM_Do_Press+0x178>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d14b      	bne.n	8001fdc <DM_Do_Press+0xcc>
		//Revert the element's state
		elements[previously_touched_element].state = ENABLED;
 8001f44:	4b50      	ldr	r3, [pc, #320]	; (8002088 <DM_Do_Press+0x178>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a50      	ldr	r2, [pc, #320]	; (800208c <DM_Do_Press+0x17c>)
 8001f4a:	215c      	movs	r1, #92	; 0x5c
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	3330      	adds	r3, #48	; 0x30
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]

		//Call the relevant intrinsic onPress function
		switch(elements[id].type) {
 8001f58:	4a4c      	ldr	r2, [pc, #304]	; (800208c <DM_Do_Press+0x17c>)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	215c      	movs	r1, #92	; 0x5c
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b0d      	cmp	r3, #13
 8001f68:	d834      	bhi.n	8001fd4 <DM_Do_Press+0xc4>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <DM_Do_Press+0x60>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001fa9 	.word	0x08001fa9
 8001f74:	08001fd5 	.word	0x08001fd5
 8001f78:	08001fd5 	.word	0x08001fd5
 8001f7c:	08001fd5 	.word	0x08001fd5
 8001f80:	08001fd5 	.word	0x08001fd5
 8001f84:	08001fd5 	.word	0x08001fd5
 8001f88:	08001fd5 	.word	0x08001fd5
 8001f8c:	08001fd5 	.word	0x08001fd5
 8001f90:	08001fd5 	.word	0x08001fd5
 8001f94:	08001fb1 	.word	0x08001fb1
 8001f98:	08001fd5 	.word	0x08001fd5
 8001f9c:	08001fbf 	.word	0x08001fbf
 8001fa0:	08001fd5 	.word	0x08001fd5
 8001fa4:	08001fcd 	.word	0x08001fcd
		case BUTTON:
			DM_Button_onPress(id);
 8001fa8:	6978      	ldr	r0, [r7, #20]
 8001faa:	f7ff fd77 	bl	8001a9c <DM_Button_onPress>
			break;
 8001fae:	e011      	b.n	8001fd4 <DM_Do_Press+0xc4>
		case LIST:
			DM_List_onPress(id, touch.X, touch.Y);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f000 f9a6 	bl	8002308 <DM_List_onPress>
			break;
 8001fbc:	e00a      	b.n	8001fd4 <DM_Do_Press+0xc4>
		case NUMPAD:
			DM_NumPad_onPress(id, touch.X, touch.Y);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6978      	ldr	r0, [r7, #20]
 8001fc6:	f000 fb63 	bl	8002690 <DM_NumPad_onPress>
			break;
 8001fca:	e003      	b.n	8001fd4 <DM_Do_Press+0xc4>
		case TEXTBOX:
			DM_TextBox_onPress(id);
 8001fcc:	6978      	ldr	r0, [r7, #20]
 8001fce:	f000 fe9d 	bl	8002d0c <DM_TextBox_onPress>
			break;
 8001fd2:	bf00      	nop
		}

		//The controller seems to put extra RELEASE events, so invalidate the previously_touched_element
		previously_touched_element = -1;
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <DM_Do_Press+0x178>)
 8001fd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fda:	601a      	str	r2, [r3, #0]
	}

	//A press has been recorded, or moved, but has not been released yet
	if(touch.state == 0x00 && elements[id].state != DISABLED) {
 8001fdc:	7bbb      	ldrb	r3, [r7, #14]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d13b      	bne.n	800205a <DM_Do_Press+0x14a>
 8001fe2:	4a2a      	ldr	r2, [pc, #168]	; (800208c <DM_Do_Press+0x17c>)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	215c      	movs	r1, #92	; 0x5c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	3330      	adds	r3, #48	; 0x30
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d031      	beq.n	800205a <DM_Do_Press+0x14a>
		//Update the "current touched element"
		previously_touched_element = id;
 8001ff6:	4a24      	ldr	r2, [pc, #144]	; (8002088 <DM_Do_Press+0x178>)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	6013      	str	r3, [r2, #0]
		//Set the state of the helement for context highlighting
		elements[id].state = SELECTED;
 8001ffc:	4a23      	ldr	r2, [pc, #140]	; (800208c <DM_Do_Press+0x17c>)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	215c      	movs	r1, #92	; 0x5c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	3330      	adds	r3, #48	; 0x30
 800200a:	2202      	movs	r2, #2
 800200c:	701a      	strb	r2, [r3, #0]


		//If an element can take focus, then take it
		if(elements[id].canFocus) {
 800200e:	4a1f      	ldr	r2, [pc, #124]	; (800208c <DM_Do_Press+0x17c>)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	215c      	movs	r1, #92	; 0x5c
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	3334      	adds	r3, #52	; 0x34
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01b      	beq.n	800205a <DM_Do_Press+0x14a>
			oldFocusedElement = focusedElement;
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <DM_Do_Press+0x180>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <DM_Do_Press+0x184>)
 8002028:	6013      	str	r3, [r2, #0]
			focusedElement = id;
 800202a:	4a19      	ldr	r2, [pc, #100]	; (8002090 <DM_Do_Press+0x180>)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	6013      	str	r3, [r2, #0]
			//Tell the previously focused element to update
			if(elements[oldFocusedElement].canFocus)
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <DM_Do_Press+0x184>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a15      	ldr	r2, [pc, #84]	; (800208c <DM_Do_Press+0x17c>)
 8002036:	215c      	movs	r1, #92	; 0x5c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3334      	adds	r3, #52	; 0x34
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <DM_Do_Press+0x14a>
				elements[oldFocusedElement].refresh = ONCE;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <DM_Do_Press+0x184>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <DM_Do_Press+0x17c>)
 800204c:	215c      	movs	r1, #92	; 0x5c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	333c      	adds	r3, #60	; 0x3c
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
		}
	}

	//Finally, if the touch was released, but it is no longer on the element, then revert the element state
	if(touch.state == 0x01 && id != previously_touched_element){
 800205a:	7bbb      	ldrb	r3, [r7, #14]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d10e      	bne.n	800207e <DM_Do_Press+0x16e>
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <DM_Do_Press+0x178>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	429a      	cmp	r2, r3
 8002068:	d009      	beq.n	800207e <DM_Do_Press+0x16e>
		//Un-select the previously touched element
		elements[previously_touched_element].state = ENABLED;
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <DM_Do_Press+0x178>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <DM_Do_Press+0x17c>)
 8002070:	215c      	movs	r1, #92	; 0x5c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3330      	adds	r3, #48	; 0x30
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
	}

	return id;
 800207e:	697b      	ldr	r3, [r7, #20]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200050c4 	.word	0x200050c4
 800208c:	20004538 	.word	0x20004538
 8002090:	200050bc 	.word	0x200050bc
 8002094:	200050c0 	.word	0x200050c0

08002098 <getDefaultElement>:

/**
 * Returns an empty element with everything set to either zero, or NULL.
 * Use this to build a new element safely without random memory.
 */
struct DisplayElement getDefaultElement() {
 8002098:	b580      	push	{r7, lr}
 800209a:	b09a      	sub	sp, #104	; 0x68
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	struct DisplayElement newElement;
	newElement.type;
	newElement.x1 = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	823b      	strh	r3, [r7, #16]
	newElement.y1 = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	827b      	strh	r3, [r7, #18]
	newElement.x2 = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	82bb      	strh	r3, [r7, #20]
	newElement.y2 = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	82fb      	strh	r3, [r7, #22]
	newElement.size = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
	newElement.selected = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
	newElement.colour = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
	newElement.bgColour = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
	newElement.orientation = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	newElement.bitmap = NULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	newElement.bitmaps = NULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
	newElement.title = NULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
	newElement.text = NULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	63bb      	str	r3, [r7, #56]	; 0x38
	newElement.state = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	newElement.oldState = -1;
 80020dc:	23ff      	movs	r3, #255	; 0xff
 80020de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	newElement.canFocus = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	643b      	str	r3, [r7, #64]	; 0x40
	newElement.maxLength = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	647b      	str	r3, [r7, #68]	; 0x44
	newElement.refresh = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	newElement.draw = NULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	newElement.onPress = NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	653b      	str	r3, [r7, #80]	; 0x50
	newElement.onDrag = NULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	657b      	str	r3, [r7, #84]	; 0x54
	newElement.children = NULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	65bb      	str	r3, [r7, #88]	; 0x58
	newElement.numChildren = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	65fb      	str	r3, [r7, #92]	; 0x5c
	newElement.animationTicks = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	663b      	str	r3, [r7, #96]	; 0x60
	newElement.ticksPerFrame = TICKS_PER_FRAME;
 8002108:	2302      	movs	r3, #2
 800210a:	667b      	str	r3, [r7, #100]	; 0x64

	return newElement;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	225c      	movs	r2, #92	; 0x5c
 8002116:	4619      	mov	r1, r3
 8002118:	f008 fc40 	bl	800a99c <memcpy>
}
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	3768      	adds	r7, #104	; 0x68
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <DM_New_Fill_Rectangle>:
void DM_Fill_Gradient(int id);

/**
 * Create a rectangle display element and add it to the queue
 */
struct DisplayElement DM_New_Fill_Rectangle(int x1, int y1, int x2, int y2, int colour) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b09c      	sub	sp, #112	; 0x70
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
	struct DisplayElement box = getDefaultElement();
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ffae 	bl	8002098 <getDefaultElement>
	box.type = FILLRECTANGLE;
 800213c:	2301      	movs	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
	box.x1 = x1; box.y1 = y1; box.x2 = x2; box.y2 = y2;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	b29b      	uxth	r3, r3
 8002144:	833b      	strh	r3, [r7, #24]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	b29b      	uxth	r3, r3
 800214a:	837b      	strh	r3, [r7, #26]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	83bb      	strh	r3, [r7, #28]
 8002152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002154:	b29b      	uxth	r3, r3
 8002156:	83fb      	strh	r3, [r7, #30]
	box.colour = colour;
 8002158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
	box.draw = DM_Fill_Rectangle;
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <DM_New_Fill_Rectangle+0x5c>)
 800215e:	657b      	str	r3, [r7, #84]	; 0x54
	box.refresh = ONCE;
 8002160:	2301      	movs	r3, #1
 8002162:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	return box;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4618      	mov	r0, r3
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	225c      	movs	r2, #92	; 0x5c
 8002170:	4619      	mov	r1, r3
 8002172:	f008 fc13 	bl	800a99c <memcpy>
}
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	3770      	adds	r7, #112	; 0x70
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	08002185 	.word	0x08002185

08002184 <DM_Fill_Rectangle>:

/**
 * A display element that draws a box
 */
void DM_Fill_Rectangle(int id) {
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	b085      	sub	sp, #20
 8002188:	af02      	add	r7, sp, #8
 800218a:	6078      	str	r0, [r7, #4]
	fill_rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, elements[id].colour);
 800218c:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <DM_Fill_Rectangle+0x74>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	215c      	movs	r1, #92	; 0x5c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3304      	adds	r3, #4
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <DM_Fill_Rectangle+0x74>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	215c      	movs	r1, #92	; 0x5c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3306      	adds	r3, #6
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	461c      	mov	r4, r3
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <DM_Fill_Rectangle+0x74>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	215c      	movs	r1, #92	; 0x5c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	3308      	adds	r3, #8
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	461d      	mov	r5, r3
 80021c2:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <DM_Fill_Rectangle+0x74>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	215c      	movs	r1, #92	; 0x5c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	330a      	adds	r3, #10
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	461e      	mov	r6, r3
 80021d4:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <DM_Fill_Rectangle+0x74>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	215c      	movs	r1, #92	; 0x5c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3314      	adds	r3, #20
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4633      	mov	r3, r6
 80021e8:	462a      	mov	r2, r5
 80021ea:	4621      	mov	r1, r4
 80021ec:	f001 fb00 	bl	80037f0 <fill_rectangle>
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f8:	20004538 	.word	0x20004538

080021fc <DM_New_Fill_Gradient>:


/**
 * Creates a gradient filled rectangle element between two colours.
 */
struct DisplayElement DM_New_Fill_Gradient(int x1, int y1, int x2, int y2, unsigned int startColour, unsigned int endColour, Orientation orientation) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b09c      	sub	sp, #112	; 0x70
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
	struct DisplayElement box = getDefaultElement();
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff42 	bl	8002098 <getDefaultElement>
	box.type = FILLGRADIENT;
 8002214:	2308      	movs	r3, #8
 8002216:	617b      	str	r3, [r7, #20]
	box.x1 = x1; box.y1 = y1; box.x2 = x2; box.y2 = y2;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	b29b      	uxth	r3, r3
 800221c:	833b      	strh	r3, [r7, #24]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	b29b      	uxth	r3, r3
 8002222:	837b      	strh	r3, [r7, #26]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	83bb      	strh	r3, [r7, #28]
 800222a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800222c:	b29b      	uxth	r3, r3
 800222e:	83fb      	strh	r3, [r7, #30]
	box.colour = startColour;
 8002230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
	box.bgColour = endColour;
 8002234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
	box.orientation = orientation;
 800223a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800223e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	box.draw = DM_Fill_Gradient;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <DM_New_Fill_Gradient+0x68>)
 8002244:	657b      	str	r3, [r7, #84]	; 0x54
	box.refresh = ONCE;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	return box;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4618      	mov	r0, r3
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	225c      	movs	r2, #92	; 0x5c
 8002256:	4619      	mov	r1, r3
 8002258:	f008 fba0 	bl	800a99c <memcpy>
}
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	3770      	adds	r7, #112	; 0x70
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	08002269 	.word	0x08002269

08002268 <DM_Fill_Gradient>:

/**
 * Draws a gradient filled rectangle to the display.
 */
void DM_Fill_Gradient(int id) {
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	b087      	sub	sp, #28
 800226c:	af04      	add	r7, sp, #16
 800226e:	6078      	str	r0, [r7, #4]
	fill_gradient(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, elements[id].colour, elements[id].bgColour, elements[id].orientation);
 8002270:	4a24      	ldr	r2, [pc, #144]	; (8002304 <DM_Fill_Gradient+0x9c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	215c      	movs	r1, #92	; 0x5c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3304      	adds	r3, #4
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	461d      	mov	r5, r3
 8002282:	4a20      	ldr	r2, [pc, #128]	; (8002304 <DM_Fill_Gradient+0x9c>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	215c      	movs	r1, #92	; 0x5c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	3306      	adds	r3, #6
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	461e      	mov	r6, r3
 8002294:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <DM_Fill_Gradient+0x9c>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	215c      	movs	r1, #92	; 0x5c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3308      	adds	r3, #8
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	469c      	mov	ip, r3
 80022a6:	4a17      	ldr	r2, [pc, #92]	; (8002304 <DM_Fill_Gradient+0x9c>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	215c      	movs	r1, #92	; 0x5c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	330a      	adds	r3, #10
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	469e      	mov	lr, r3
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <DM_Fill_Gradient+0x9c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	215c      	movs	r1, #92	; 0x5c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3314      	adds	r3, #20
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <DM_Fill_Gradient+0x9c>)
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	205c      	movs	r0, #92	; 0x5c
 80022ce:	fb00 f202 	mul.w	r2, r0, r2
 80022d2:	440a      	add	r2, r1
 80022d4:	3218      	adds	r2, #24
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	480a      	ldr	r0, [pc, #40]	; (8002304 <DM_Fill_Gradient+0x9c>)
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	245c      	movs	r4, #92	; 0x5c
 80022de:	fb04 f101 	mul.w	r1, r4, r1
 80022e2:	4401      	add	r1, r0
 80022e4:	311c      	adds	r1, #28
 80022e6:	7809      	ldrb	r1, [r1, #0]
 80022e8:	9102      	str	r1, [sp, #8]
 80022ea:	9201      	str	r2, [sp, #4]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	4673      	mov	r3, lr
 80022f0:	4662      	mov	r2, ip
 80022f2:	4631      	mov	r1, r6
 80022f4:	4628      	mov	r0, r5
 80022f6:	f001 fc73 	bl	8003be0 <fill_gradient>
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002302:	bf00      	nop
 8002304:	20004538 	.word	0x20004538

08002308 <DM_List_onPress>:

/**
 * Called by the touch handler when the list is pressed. Determines which element
 * was pressed.
 */
void DM_List_onPress(int id, int x, int y) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
	const int lineHeight = 30;
 8002314:	231e      	movs	r3, #30
 8002316:	617b      	str	r3, [r7, #20]

	elements[id].state = SELECTED;
 8002318:	4a20      	ldr	r2, [pc, #128]	; (800239c <DM_List_onPress+0x94>)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	215c      	movs	r1, #92	; 0x5c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	3330      	adds	r3, #48	; 0x30
 8002326:	2202      	movs	r2, #2
 8002328:	701a      	strb	r2, [r3, #0]
	elements[id].refresh = ONCE;
 800232a:	4a1c      	ldr	r2, [pc, #112]	; (800239c <DM_List_onPress+0x94>)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	215c      	movs	r1, #92	; 0x5c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	333c      	adds	r3, #60	; 0x3c
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
	//Report which item is selected
	int index = (int)((y - elements[id].y1) / lineHeight);
 800233c:	4a17      	ldr	r2, [pc, #92]	; (800239c <DM_List_onPress+0x94>)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	215c      	movs	r1, #92	; 0x5c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3306      	adds	r3, #6
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	1a9a      	subs	r2, r3, r2
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fb92 f3f3 	sdiv	r3, r2, r3
 8002358:	613b      	str	r3, [r7, #16]

	elements[id].selected = index;
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <DM_List_onPress+0x94>)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	215c      	movs	r1, #92	; 0x5c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3310      	adds	r3, #16
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	601a      	str	r2, [r3, #0]

	if(elements[id].onPress)
 800236c:	4a0b      	ldr	r2, [pc, #44]	; (800239c <DM_List_onPress+0x94>)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	215c      	movs	r1, #92	; 0x5c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3344      	adds	r3, #68	; 0x44
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <DM_List_onPress+0x8c>
		elements[id].onPress(id);
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <DM_List_onPress+0x94>)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	215c      	movs	r1, #92	; 0x5c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3344      	adds	r3, #68	; 0x44
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	4798      	blx	r3
}
 8002394:	bf00      	nop
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20004538 	.word	0x20004538

080023a0 <DM_New_NumPad>:
 * Create a new number pad element.
 *
 * A number pad will always fill the right-hand half of the display.
 * Design your components appropriately.
 */
struct DisplayElement DM_New_NumPad() {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b09a      	sub	sp, #104	; 0x68
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	struct DisplayElement numPad = getDefaultElement();
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fe73 	bl	8002098 <getDefaultElement>
	numPad.type = NUMPAD;
 80023b2:	230b      	movs	r3, #11
 80023b4:	60fb      	str	r3, [r7, #12]
	numPad.x1 = WIDTH - (60 * 3);
 80023b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80023ba:	823b      	strh	r3, [r7, #16]
	numPad.y1 = 50;
 80023bc:	2332      	movs	r3, #50	; 0x32
 80023be:	827b      	strh	r3, [r7, #18]
	numPad.x2 = WIDTH;
 80023c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80023c4:	82bb      	strh	r3, [r7, #20]
	numPad.y2 = HEIGHT;
 80023c6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023ca:	82fb      	strh	r3, [r7, #22]

	numPad.state = ENABLED;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	numPad.selected = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
	numPad.onPress = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	653b      	str	r3, [r7, #80]	; 0x50
	numPad.refresh = ALWAYS;
 80023da:	2300      	movs	r3, #0
 80023dc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	numPad.draw = DM_NumPad;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <DM_New_NumPad+0x5c>)
 80023e2:	64fb      	str	r3, [r7, #76]	; 0x4c

	return numPad;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	225c      	movs	r2, #92	; 0x5c
 80023ee:	4619      	mov	r1, r3
 80023f0:	f008 fad4 	bl	800a99c <memcpy>
}
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	3768      	adds	r7, #104	; 0x68
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	08002401 	.word	0x08002401

08002400 <DM_NumPad>:

/**
 * Draws a number pad to the display;
 */
void DM_NumPad(int id) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	const int buttonSpace = 60;
 8002408:	233c      	movs	r3, #60	; 0x3c
 800240a:	613b      	str	r3, [r7, #16]
	//Draw a few buttons
	State state = ENABLED;
 800240c:	2300      	movs	r3, #0
 800240e:	77fb      	strb	r3, [r7, #31]
	//Each vertical row
	for(int y = 0; y < 3; y++) {
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	e050      	b.n	80024b8 <DM_NumPad+0xb8>
		//..And Each horizontal row
		for(int x = 0; x < 3; x++) {
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e047      	b.n	80024ac <DM_NumPad+0xac>
			//Figure out which digit this is
			int thisDigit = x + (y * 3) + 1;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	441a      	add	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	4413      	add	r3, r2
 8002428:	3301      	adds	r3, #1
 800242a:	60fb      	str	r3, [r7, #12]

			//Is this particular digit selected
			if(elements[id].selected == thisDigit && elements[id].state == SELECTED)
 800242c:	4a5c      	ldr	r2, [pc, #368]	; (80025a0 <DM_NumPad+0x1a0>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	215c      	movs	r1, #92	; 0x5c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3310      	adds	r3, #16
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	429a      	cmp	r2, r3
 8002440:	d10c      	bne.n	800245c <DM_NumPad+0x5c>
 8002442:	4a57      	ldr	r2, [pc, #348]	; (80025a0 <DM_NumPad+0x1a0>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	215c      	movs	r1, #92	; 0x5c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	3330      	adds	r3, #48	; 0x30
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d102      	bne.n	800245c <DM_NumPad+0x5c>
				state = SELECTED;
 8002456:	2302      	movs	r3, #2
 8002458:	77fb      	strb	r3, [r7, #31]
 800245a:	e001      	b.n	8002460 <DM_NumPad+0x60>
			else
				state = ENABLED;
 800245c:	2300      	movs	r3, #0
 800245e:	77fb      	strb	r3, [r7, #31]

			//Put the digit with its ASCII to the display
			DM_NumPad_Button(elements[id].x1 + (x * buttonSpace), elements[id].y1 + (y * buttonSpace), thisDigit + 48, state);
 8002460:	4a4f      	ldr	r2, [pc, #316]	; (80025a0 <DM_NumPad+0x1a0>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	215c      	movs	r1, #92	; 0x5c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	18c8      	adds	r0, r1, r3
 800247c:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <DM_NumPad+0x1a0>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	215c      	movs	r1, #92	; 0x5c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	3306      	adds	r3, #6
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	4419      	add	r1, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3330      	adds	r3, #48	; 0x30
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	7ffb      	ldrb	r3, [r7, #31]
 80024a2:	f000 f87f 	bl	80025a4 <DM_NumPad_Button>
		for(int x = 0; x < 3; x++) {
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3301      	adds	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	ddb4      	ble.n	800241c <DM_NumPad+0x1c>
	for(int y = 0; y < 3; y++) {
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3301      	adds	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	ddab      	ble.n	8002416 <DM_NumPad+0x16>
		}
	}

	//zero at the very bottom
	if(elements[id].selected == 11 && elements[id].state == SELECTED)
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <DM_NumPad+0x1a0>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	215c      	movs	r1, #92	; 0x5c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	3310      	adds	r3, #16
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b0b      	cmp	r3, #11
 80024d0:	d10c      	bne.n	80024ec <DM_NumPad+0xec>
 80024d2:	4a33      	ldr	r2, [pc, #204]	; (80025a0 <DM_NumPad+0x1a0>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	215c      	movs	r1, #92	; 0x5c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	3330      	adds	r3, #48	; 0x30
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d102      	bne.n	80024ec <DM_NumPad+0xec>
		state = SELECTED;
 80024e6:	2302      	movs	r3, #2
 80024e8:	77fb      	strb	r3, [r7, #31]
 80024ea:	e001      	b.n	80024f0 <DM_NumPad+0xf0>
	else
		state = ENABLED;
 80024ec:	2300      	movs	r3, #0
 80024ee:	77fb      	strb	r3, [r7, #31]
	DM_NumPad_Button(elements[id].x1 + (1 * buttonSpace), elements[id].y1 + (3 * buttonSpace), '0', state);
 80024f0:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <DM_NumPad+0x1a0>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	215c      	movs	r1, #92	; 0x5c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3304      	adds	r3, #4
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	18d0      	adds	r0, r2, r3
 8002506:	4a26      	ldr	r2, [pc, #152]	; (80025a0 <DM_NumPad+0x1a0>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	215c      	movs	r1, #92	; 0x5c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3306      	adds	r3, #6
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	4619      	mov	r1, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	4419      	add	r1, r3
 8002522:	7ffb      	ldrb	r3, [r7, #31]
 8002524:	2230      	movs	r2, #48	; 0x30
 8002526:	f000 f83d 	bl	80025a4 <DM_NumPad_Button>
	//And a backspace button
	if(elements[id].selected == 12 && elements[id].state == SELECTED)
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <DM_NumPad+0x1a0>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	215c      	movs	r1, #92	; 0x5c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3310      	adds	r3, #16
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d10c      	bne.n	8002558 <DM_NumPad+0x158>
 800253e:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <DM_NumPad+0x1a0>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	215c      	movs	r1, #92	; 0x5c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3330      	adds	r3, #48	; 0x30
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d102      	bne.n	8002558 <DM_NumPad+0x158>
		state = SELECTED;
 8002552:	2302      	movs	r3, #2
 8002554:	77fb      	strb	r3, [r7, #31]
 8002556:	e001      	b.n	800255c <DM_NumPad+0x15c>
	else
		state = ENABLED;
 8002558:	2300      	movs	r3, #0
 800255a:	77fb      	strb	r3, [r7, #31]
	DM_NumPad_Button(elements[id].x1 + (2 * buttonSpace), elements[id].y1 + (3 * buttonSpace), '<', state);
 800255c:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <DM_NumPad+0x1a0>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	215c      	movs	r1, #92	; 0x5c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	18d0      	adds	r0, r2, r3
 8002574:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <DM_NumPad+0x1a0>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	215c      	movs	r1, #92	; 0x5c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3306      	adds	r3, #6
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	4419      	add	r1, r3
 8002590:	7ffb      	ldrb	r3, [r7, #31]
 8002592:	223c      	movs	r2, #60	; 0x3c
 8002594:	f000 f806 	bl	80025a4 <DM_NumPad_Button>

}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20004538 	.word	0x20004538

080025a4 <DM_NumPad_Button>:

/**
 * Draws an individual number button to the numpad.
 */
void DM_NumPad_Button(int x1, int y1, char c, State state) {
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b08d      	sub	sp, #52	; 0x34
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	4611      	mov	r1, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	460b      	mov	r3, r1
 80025b4:	71fb      	strb	r3, [r7, #7]
 80025b6:	4613      	mov	r3, r2
 80025b8:	71bb      	strb	r3, [r7, #6]
	const int buttonSize = 50;
 80025ba:	2332      	movs	r3, #50	; 0x32
 80025bc:	61bb      	str	r3, [r7, #24]
	int x2 = x1 + buttonSize;
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
	int y2 = y1 + buttonSize;
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	4413      	add	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
	int outlineColour = COLOR_GRAY;
 80025ce:	f248 4310 	movw	r3, #33808	; 0x8410
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
	int fillColour = COLOR_LIGHTGRAY;
 80025d4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80025d8:	623b      	str	r3, [r7, #32]
	int textColour = COLOR_BLACK;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
	if(state == DISABLED) {
 80025de:	79bb      	ldrb	r3, [r7, #6]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d108      	bne.n	80025f6 <DM_NumPad_Button+0x52>
		fillColour = COLOR_WHITE;
 80025e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e8:	623b      	str	r3, [r7, #32]
		outlineColour = COLOR_LIGHTGRAY;
 80025ea:	f24c 6318 	movw	r3, #50712	; 0xc618
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
		textColour = COLOR_LIGHTGRAY;
 80025f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80025f4:	61fb      	str	r3, [r7, #28]
	}
	if(state == SELECTED) {
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d102      	bne.n	8002602 <DM_NumPad_Button+0x5e>
		fillColour = COLOR_LIGHTBLUE;
 80025fc:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 8002600:	623b      	str	r3, [r7, #32]
	}
	//Draw the background
	fill_rectangle(x1 + 1, y1 + 1, x2 - 1, y2 - 1, fillColour);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1c58      	adds	r0, r3, #1
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1c59      	adds	r1, r3, #1
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1e5c      	subs	r4, r3, #1
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4623      	mov	r3, r4
 8002618:	f001 f8ea 	bl	80037f0 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(x1 + 1, y1, x2, y1 + 1, outlineColour);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1c58      	adds	r0, r3, #1
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	f001 f8df 	bl	80037f0 <fill_rectangle>
	//Left border
	fill_rectangle(x1, y1 + 1, x1 + 1, y2, outlineColour);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1c59      	adds	r1, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f001 f8d5 	bl	80037f0 <fill_rectangle>
	//Bottom border
	fill_rectangle(x1 + 1, y2, x2, y2 + 1, outlineColour);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1c58      	adds	r0, r3, #1
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	6939      	ldr	r1, [r7, #16]
 8002658:	f001 f8ca 	bl	80037f0 <fill_rectangle>
	//Right border
	fill_rectangle(x2, y1 + 1, x2 + 1, y2, outlineColour);
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	6978      	ldr	r0, [r7, #20]
 800266c:	f001 f8c0 	bl	80037f0 <fill_rectangle>
	//Write the text
	draw_fast_char(x1 + 12, y1 + 16, c, textColour, fillColour);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f103 000c 	add.w	r0, r3, #12
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f103 0110 	add.w	r1, r3, #16
 800267c:	79fa      	ldrb	r2, [r7, #7]
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f001 f972 	bl	800396c <draw_fast_char>
}
 8002688:	bf00      	nop
 800268a:	372c      	adds	r7, #44	; 0x2c
 800268c:	46bd      	mov	sp, r7
 800268e:	bd90      	pop	{r4, r7, pc}

08002690 <DM_NumPad_onPress>:

/**
 * Intrinsic onPress function for the number pad. Determines which button was pressed
 * then hands off to the user-defined onPress function.
 */
void DM_NumPad_onPress(int id, int x, int y) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
	const int buttonSize = 50;
 800269c:	2332      	movs	r3, #50	; 0x32
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
	const int buttonMargin = 10;
 80026a0:	230a      	movs	r3, #10
 80026a2:	623b      	str	r3, [r7, #32]

	//Figure out which number was pressed.
	//The number are arranged in a 3x4

	//Calculate the X and Y axis location in button-space
	int xIndex = (int) ((x - elements[id].x1) / (buttonSize + buttonMargin));
 80026a4:	4a2d      	ldr	r2, [pc, #180]	; (800275c <DM_NumPad_onPress+0xcc>)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	215c      	movs	r1, #92	; 0x5c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3304      	adds	r3, #4
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1a9a      	subs	r2, r3, r2
 80026ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	440b      	add	r3, r1
 80026c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80026c4:	61fb      	str	r3, [r7, #28]
	int yIndex = (int) ((y - elements[id].y1) / (buttonSize + buttonMargin));
 80026c6:	4a25      	ldr	r2, [pc, #148]	; (800275c <DM_NumPad_onPress+0xcc>)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	215c      	movs	r1, #92	; 0x5c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	3306      	adds	r3, #6
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	1a9a      	subs	r2, r3, r2
 80026dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	440b      	add	r3, r1
 80026e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80026e6:	61bb      	str	r3, [r7, #24]

	//Work out the index
	int index = xIndex + (yIndex * 3) + 1;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	441a      	add	r2, r3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	3301      	adds	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]

	//Report the number that's selected
	elements[id].selected = index;
 80026f8:	4a18      	ldr	r2, [pc, #96]	; (800275c <DM_NumPad_onPress+0xcc>)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	215c      	movs	r1, #92	; 0x5c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3310      	adds	r3, #16
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]

	//If a text box is selected, then update its string
	if(elements[focusedElement].type == TEXTBOX) {
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <DM_NumPad_onPress+0xd0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a13      	ldr	r2, [pc, #76]	; (800275c <DM_NumPad_onPress+0xcc>)
 8002710:	215c      	movs	r1, #92	; 0x5c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b0d      	cmp	r3, #13
 800271c:	d105      	bne.n	800272a <DM_NumPad_onPress+0x9a>
		updateTextBox(focusedElement, index);
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <DM_NumPad_onPress+0xd0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6979      	ldr	r1, [r7, #20]
 8002724:	4618      	mov	r0, r3
 8002726:	f000 f81d 	bl	8002764 <updateTextBox>
	}

	//Call any user-defind onPress function
	if(elements[id].onPress)
 800272a:	4a0c      	ldr	r2, [pc, #48]	; (800275c <DM_NumPad_onPress+0xcc>)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	215c      	movs	r1, #92	; 0x5c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	3344      	adds	r3, #68	; 0x44
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <DM_NumPad_onPress+0xc2>
		elements[id].onPress(id);
 800273e:	4a07      	ldr	r2, [pc, #28]	; (800275c <DM_NumPad_onPress+0xcc>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	215c      	movs	r1, #92	; 0x5c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3344      	adds	r3, #68	; 0x44
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	4798      	blx	r3
}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	; 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20004538 	.word	0x20004538
 8002760:	200050bc 	.word	0x200050bc

08002764 <updateTextBox>:

/**
 * Updates the currently selected text box with the button press
 */
void updateTextBox(int id, int num) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]

	int len = strlen(elements[id].text);
 800276e:	4a24      	ldr	r2, [pc, #144]	; (8002800 <updateTextBox+0x9c>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	215c      	movs	r1, #92	; 0x5c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	332c      	adds	r3, #44	; 0x2c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fd26 	bl	80001d0 <strlen>
 8002784:	4603      	mov	r3, r0
 8002786:	60fb      	str	r3, [r7, #12]

	//convert the index to a character
	//The numbers count up from 1, with 0 being reserved as NULL.
	//So the number zero is actually 11, and backspace is 12.
	if(num == 11)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b0b      	cmp	r3, #11
 800278c:	d101      	bne.n	8002792 <updateTextBox+0x2e>
		num = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	603b      	str	r3, [r7, #0]

	//If the num is 12 then it's a backspace, otherwise it's a digit
	if(num == 12) {
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d10d      	bne.n	80027b4 <updateTextBox+0x50>
		//Change the last character to null
		elements[id].text[len - 1] = '\0';
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <updateTextBox+0x9c>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	215c      	movs	r1, #92	; 0x5c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	332c      	adds	r3, #44	; 0x2c
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e01d      	b.n	80027f0 <updateTextBox+0x8c>
	} else {
		//Check we don't overrun the maxLength of the box
		if(len < elements[id].maxLength) {
 80027b4:	4a12      	ldr	r2, [pc, #72]	; (8002800 <updateTextBox+0x9c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	215c      	movs	r1, #92	; 0x5c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3338      	adds	r3, #56	; 0x38
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	da12      	bge.n	80027f0 <updateTextBox+0x8c>
			//Calculate the new char and add it to the text string
			char c = num + 48;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	3330      	adds	r3, #48	; 0x30
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	72fb      	strb	r3, [r7, #11]
			strncat(elements[id].text, &c, 1);
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <updateTextBox+0x9c>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	215c      	movs	r1, #92	; 0x5c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	332c      	adds	r3, #44	; 0x2c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f107 010b 	add.w	r1, r7, #11
 80027e8:	2201      	movs	r2, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f008 fa1a 	bl	800ac24 <strncat>
		}
	}

	//Register the element for update.
	DM_Refresh_Element(id);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff fa73 	bl	8001cdc <DM_Refresh_Element>
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20004538 	.word	0x20004538

08002804 <DM_New_Text>:
void DM_Fast_Text(int id);

/**
 * Various string drawing elements. Just puts the string on teh screen with nothing extra.
 */
struct DisplayElement DM_New_Text(int x, int y, int colour, int size, char* text){
 8002804:	b580      	push	{r7, lr}
 8002806:	b09c      	sub	sp, #112	; 0x70
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
	struct DisplayElement string = getDefaultElement();
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fc3e 	bl	8002098 <getDefaultElement>
	string.type = TEXT;
 800281c:	2302      	movs	r3, #2
 800281e:	613b      	str	r3, [r7, #16]
	string.x1 = x; string.y1 = y;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	b29b      	uxth	r3, r3
 8002824:	82bb      	strh	r3, [r7, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	b29b      	uxth	r3, r3
 800282a:	82fb      	strh	r3, [r7, #22]
	//Have to calculate the length to make a prpoer hit box
	int strLen = DM_StrLen(text, 128);
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002830:	f7ff fab0 	bl	8001d94 <DM_StrLen>
 8002834:	66f8      	str	r0, [r7, #108]	; 0x6c
	string.x2 = x + ((strLen + 1) * 8); string.y2 = y + 14;
 8002836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002838:	3301      	adds	r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	b29a      	uxth	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4413      	add	r3, r2
 8002846:	b29b      	uxth	r3, r3
 8002848:	833b      	strh	r3, [r7, #24]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	b29b      	uxth	r3, r3
 800284e:	330e      	adds	r3, #14
 8002850:	b29b      	uxth	r3, r3
 8002852:	837b      	strh	r3, [r7, #26]
	string.size = size;
 8002854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002856:	61fb      	str	r3, [r7, #28]
	string.colour = colour;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
	string.text = text;
 800285c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
	string.draw = DM_Text;
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <DM_New_Text+0x80>)
 8002862:	653b      	str	r3, [r7, #80]	; 0x50
	string.refresh = ONCE;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	return string;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4618      	mov	r0, r3
 800286e:	f107 0310 	add.w	r3, r7, #16
 8002872:	225c      	movs	r2, #92	; 0x5c
 8002874:	4619      	mov	r1, r3
 8002876:	f008 f891 	bl	800a99c <memcpy>
}
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	3770      	adds	r7, #112	; 0x70
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	08002889 	.word	0x08002889

08002888 <DM_Text>:
void DM_Text(int id){
 8002888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288a:	b085      	sub	sp, #20
 800288c:	af02      	add	r7, sp, #8
 800288e:	6078      	str	r0, [r7, #4]
	draw_string(elements[id].x1, elements[id].y1, elements[id].colour, elements[id].size, elements[id].text);
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <DM_Text+0x70>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	215c      	movs	r1, #92	; 0x5c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3304      	adds	r3, #4
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	461d      	mov	r5, r3
 80028a2:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <DM_Text+0x70>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	215c      	movs	r1, #92	; 0x5c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3306      	adds	r3, #6
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	461e      	mov	r6, r3
 80028b4:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <DM_Text+0x70>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	215c      	movs	r1, #92	; 0x5c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3314      	adds	r3, #20
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <DM_Text+0x70>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	205c      	movs	r0, #92	; 0x5c
 80028ca:	fb00 f303 	mul.w	r3, r0, r3
 80028ce:	440b      	add	r3, r1
 80028d0:	330c      	adds	r3, #12
 80028d2:	6819      	ldr	r1, [r3, #0]
 80028d4:	4808      	ldr	r0, [pc, #32]	; (80028f8 <DM_Text+0x70>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	245c      	movs	r4, #92	; 0x5c
 80028da:	fb04 f303 	mul.w	r3, r4, r3
 80028de:	4403      	add	r3, r0
 80028e0:	332c      	adds	r3, #44	; 0x2c
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	460b      	mov	r3, r1
 80028e8:	4631      	mov	r1, r6
 80028ea:	4628      	mov	r0, r5
 80028ec:	f001 f8a6 	bl	8003a3c <draw_string>
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f8:	20004538 	.word	0x20004538

080028fc <DM_New_Fast_Text>:
struct DisplayElement DM_New_Fast_Text(int x, int y, int colour, int backgroundColour, char* text){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b09c      	sub	sp, #112	; 0x70
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
	struct DisplayElement string = getDefaultElement();
 800290a:	f107 0310 	add.w	r3, r7, #16
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fbc2 	bl	8002098 <getDefaultElement>
	string.type = FASTTEXT;
 8002914:	2303      	movs	r3, #3
 8002916:	613b      	str	r3, [r7, #16]
	string.x1 = x; string.y1 = y;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	b29b      	uxth	r3, r3
 800291c:	82bb      	strh	r3, [r7, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	b29b      	uxth	r3, r3
 8002922:	82fb      	strh	r3, [r7, #22]
	//Have to calculate the length to make a prpoer hit box
	int strLen = DM_StrLen(text, 128);
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002928:	f7ff fa34 	bl	8001d94 <DM_StrLen>
 800292c:	66f8      	str	r0, [r7, #108]	; 0x6c
	string.x2 = x + ((strLen + 1) * 8); string.y2 = y + 14;
 800292e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002930:	3301      	adds	r3, #1
 8002932:	b29b      	uxth	r3, r3
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	b29a      	uxth	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	b29b      	uxth	r3, r3
 800293c:	4413      	add	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	833b      	strh	r3, [r7, #24]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	b29b      	uxth	r3, r3
 8002946:	330e      	adds	r3, #14
 8002948:	b29b      	uxth	r3, r3
 800294a:	837b      	strh	r3, [r7, #26]
	string.colour = colour;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
	string.bgColour = backgroundColour;
 8002950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
	string.text = text;
 8002954:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c
	string.draw = DM_Fast_Text;
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <DM_New_Fast_Text+0x80>)
 800295a:	653b      	str	r3, [r7, #80]	; 0x50
	string.refresh = ONCE;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	return string;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4618      	mov	r0, r3
 8002966:	f107 0310 	add.w	r3, r7, #16
 800296a:	225c      	movs	r2, #92	; 0x5c
 800296c:	4619      	mov	r1, r3
 800296e:	f008 f815 	bl	800a99c <memcpy>
}
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	3770      	adds	r7, #112	; 0x70
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	08002981 	.word	0x08002981

08002980 <DM_Fast_Text>:
void DM_Fast_Text(int id){
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af02      	add	r7, sp, #8
 8002986:	6078      	str	r0, [r7, #4]
	draw_fast_string(elements[id].x1, elements[id].y1, elements[id].colour, elements[id].bgColour, elements[id].text);
 8002988:	4a19      	ldr	r2, [pc, #100]	; (80029f0 <DM_Fast_Text+0x70>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	215c      	movs	r1, #92	; 0x5c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3304      	adds	r3, #4
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	461d      	mov	r5, r3
 800299a:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <DM_Fast_Text+0x70>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	215c      	movs	r1, #92	; 0x5c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3306      	adds	r3, #6
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	461e      	mov	r6, r3
 80029ac:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <DM_Fast_Text+0x70>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	215c      	movs	r1, #92	; 0x5c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3314      	adds	r3, #20
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	490c      	ldr	r1, [pc, #48]	; (80029f0 <DM_Fast_Text+0x70>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	205c      	movs	r0, #92	; 0x5c
 80029c2:	fb00 f303 	mul.w	r3, r0, r3
 80029c6:	440b      	add	r3, r1
 80029c8:	3318      	adds	r3, #24
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	4808      	ldr	r0, [pc, #32]	; (80029f0 <DM_Fast_Text+0x70>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	245c      	movs	r4, #92	; 0x5c
 80029d2:	fb04 f303 	mul.w	r3, r4, r3
 80029d6:	4403      	add	r3, r0
 80029d8:	332c      	adds	r3, #44	; 0x2c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	460b      	mov	r3, r1
 80029e0:	4631      	mov	r1, r6
 80029e2:	4628      	mov	r0, r5
 80029e4:	f001 f85a 	bl	8003a9c <draw_fast_string>
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f0:	20004538 	.word	0x20004538

080029f4 <DM_New_TextBox>:

/**
 * Creates a Text Box display element for use in the elements array.
 * NOTE: the "Title" property is used for Placeholder Text in this case.
 */
struct DisplayElement DM_New_TextBox(int x, int y, int length, char *placeholderText, char *text) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b09c      	sub	sp, #112	; 0x70
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
	struct DisplayElement textBox = getDefaultElement();
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fb46 	bl	8002098 <getDefaultElement>
	textBox.type = TEXTBOX;
 8002a0c:	230d      	movs	r3, #13
 8002a0e:	617b      	str	r3, [r7, #20]
	textBox.x1 = x; textBox.y1 = y;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	833b      	strh	r3, [r7, #24]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	837b      	strh	r3, [r7, #26]
	textBox.x2 = x + (length * 18) + 10;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	00d2      	lsls	r2, r2, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	330a      	adds	r3, #10
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	83bb      	strh	r3, [r7, #28]
	textBox.y2 = y + 30;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	331e      	adds	r3, #30
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	83fb      	strh	r3, [r7, #30]

	textBox.selected = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
	textBox.size = 2;
 8002a46:	2302      	movs	r3, #2
 8002a48:	623b      	str	r3, [r7, #32]
	textBox.text = text;
 8002a4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a4c:	643b      	str	r3, [r7, #64]	; 0x40
	textBox.title = placeholderText;
 8002a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a50:	63fb      	str	r3, [r7, #60]	; 0x3c
	textBox.draw = DM_TextBox;
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <DM_New_TextBox+0x88>)
 8002a54:	657b      	str	r3, [r7, #84]	; 0x54
	textBox.refresh = ALWAYS;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	textBox.canFocus = 1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	64bb      	str	r3, [r7, #72]	; 0x48
	textBox.maxLength = length;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c

	return textBox;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	225c      	movs	r2, #92	; 0x5c
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f007 ff94 	bl	800a99c <memcpy>
}
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	3770      	adds	r7, #112	; 0x70
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	08002a81 	.word	0x08002a81

08002a80 <DM_TextBox>:

void DM_TextBox(int id) {
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	6078      	str	r0, [r7, #4]
	//Select some appropriate colours
	int fillColour = COLOR_WHITE;
 8002a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8c:	617b      	str	r3, [r7, #20]
	if(elements[id].selected != 0 && focusedElement == id)
 8002a8e:	4a9d      	ldr	r2, [pc, #628]	; (8002d04 <DM_TextBox+0x284>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	215c      	movs	r1, #92	; 0x5c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <DM_TextBox+0x32>
 8002aa2:	4b99      	ldr	r3, [pc, #612]	; (8002d08 <DM_TextBox+0x288>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d102      	bne.n	8002ab2 <DM_TextBox+0x32>
		fillColour = COLOR_LIGHTBLUE;
 8002aac:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 8002ab0:	617b      	str	r3, [r7, #20]

	int textColour = COLOR_BLACK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
	int placeholderTextColour = COLOR_LIGHTGRAY;
 8002ab6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002aba:	60fb      	str	r3, [r7, #12]
	int outlineColour = COLOR_GRAY;
 8002abc:	f248 4310 	movw	r3, #33808	; 0x8410
 8002ac0:	60bb      	str	r3, [r7, #8]

	//Draw a nice box
	//Draw the background
	fill_rectangle(elements[id].x1 + 1, elements[id].y1 + 1, elements[id].x2 - 1, elements[id].y2 - 1, fillColour);
 8002ac2:	4a90      	ldr	r2, [pc, #576]	; (8002d04 <DM_TextBox+0x284>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	215c      	movs	r1, #92	; 0x5c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	1c58      	adds	r0, r3, #1
 8002ad4:	4a8b      	ldr	r2, [pc, #556]	; (8002d04 <DM_TextBox+0x284>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	215c      	movs	r1, #92	; 0x5c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3306      	adds	r3, #6
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	1c59      	adds	r1, r3, #1
 8002ae6:	4a87      	ldr	r2, [pc, #540]	; (8002d04 <DM_TextBox+0x284>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	245c      	movs	r4, #92	; 0x5c
 8002aec:	fb04 f303 	mul.w	r3, r4, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3308      	adds	r3, #8
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	4c82      	ldr	r4, [pc, #520]	; (8002d04 <DM_TextBox+0x284>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	255c      	movs	r5, #92	; 0x5c
 8002afe:	fb05 f303 	mul.w	r3, r5, r3
 8002b02:	4423      	add	r3, r4
 8002b04:	330a      	adds	r3, #10
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	1e5c      	subs	r4, r3, #1
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	4623      	mov	r3, r4
 8002b10:	f000 fe6e 	bl	80037f0 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(elements[id].x1 + 1, elements[id].y1, elements[id].x2, elements[id].y1 + 1, outlineColour);
 8002b14:	4a7b      	ldr	r2, [pc, #492]	; (8002d04 <DM_TextBox+0x284>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	215c      	movs	r1, #92	; 0x5c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	1c58      	adds	r0, r3, #1
 8002b26:	4a77      	ldr	r2, [pc, #476]	; (8002d04 <DM_TextBox+0x284>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	215c      	movs	r1, #92	; 0x5c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3306      	adds	r3, #6
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	461c      	mov	r4, r3
 8002b38:	4a72      	ldr	r2, [pc, #456]	; (8002d04 <DM_TextBox+0x284>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	215c      	movs	r1, #92	; 0x5c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3308      	adds	r3, #8
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	461d      	mov	r5, r3
 8002b4a:	4a6e      	ldr	r2, [pc, #440]	; (8002d04 <DM_TextBox+0x284>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	215c      	movs	r1, #92	; 0x5c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3306      	adds	r3, #6
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	462a      	mov	r2, r5
 8002b64:	4621      	mov	r1, r4
 8002b66:	f000 fe43 	bl	80037f0 <fill_rectangle>
	//Left border
	fill_rectangle(elements[id].x1, elements[id].y1 + 1, elements[id].x1 + 1, elements[id].y2, outlineColour);
 8002b6a:	4a66      	ldr	r2, [pc, #408]	; (8002d04 <DM_TextBox+0x284>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	215c      	movs	r1, #92	; 0x5c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3304      	adds	r3, #4
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	4a61      	ldr	r2, [pc, #388]	; (8002d04 <DM_TextBox+0x284>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	215c      	movs	r1, #92	; 0x5c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3306      	adds	r3, #6
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	1c59      	adds	r1, r3, #1
 8002b8e:	4a5d      	ldr	r2, [pc, #372]	; (8002d04 <DM_TextBox+0x284>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	205c      	movs	r0, #92	; 0x5c
 8002b94:	fb00 f303 	mul.w	r3, r0, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	4858      	ldr	r0, [pc, #352]	; (8002d04 <DM_TextBox+0x284>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	245c      	movs	r4, #92	; 0x5c
 8002ba6:	fb04 f303 	mul.w	r3, r4, r3
 8002baa:	4403      	add	r3, r0
 8002bac:	330a      	adds	r3, #10
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f000 fe19 	bl	80037f0 <fill_rectangle>
	//Bottom border
	fill_rectangle(elements[id].x1 + 1, elements[id].y2, elements[id].x2, elements[id].y2 + 1, outlineColour);
 8002bbe:	4a51      	ldr	r2, [pc, #324]	; (8002d04 <DM_TextBox+0x284>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	215c      	movs	r1, #92	; 0x5c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	1c58      	adds	r0, r3, #1
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	; (8002d04 <DM_TextBox+0x284>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	215c      	movs	r1, #92	; 0x5c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	330a      	adds	r3, #10
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	461c      	mov	r4, r3
 8002be2:	4a48      	ldr	r2, [pc, #288]	; (8002d04 <DM_TextBox+0x284>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	215c      	movs	r1, #92	; 0x5c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3308      	adds	r3, #8
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	461d      	mov	r5, r3
 8002bf4:	4a43      	ldr	r2, [pc, #268]	; (8002d04 <DM_TextBox+0x284>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	215c      	movs	r1, #92	; 0x5c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	330a      	adds	r3, #10
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	462a      	mov	r2, r5
 8002c0e:	4621      	mov	r1, r4
 8002c10:	f000 fdee 	bl	80037f0 <fill_rectangle>
	//Right border
	fill_rectangle(elements[id].x2, elements[id].y1 + 1, elements[id].x2 + 1, elements[id].y2, outlineColour);
 8002c14:	4a3b      	ldr	r2, [pc, #236]	; (8002d04 <DM_TextBox+0x284>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	215c      	movs	r1, #92	; 0x5c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3308      	adds	r3, #8
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	461d      	mov	r5, r3
 8002c26:	4a37      	ldr	r2, [pc, #220]	; (8002d04 <DM_TextBox+0x284>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	215c      	movs	r1, #92	; 0x5c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3306      	adds	r3, #6
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	4a32      	ldr	r2, [pc, #200]	; (8002d04 <DM_TextBox+0x284>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	205c      	movs	r0, #92	; 0x5c
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3308      	adds	r3, #8
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	482e      	ldr	r0, [pc, #184]	; (8002d04 <DM_TextBox+0x284>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	245c      	movs	r4, #92	; 0x5c
 8002c50:	fb04 f303 	mul.w	r3, r4, r3
 8002c54:	4403      	add	r3, r0
 8002c56:	330a      	adds	r3, #10
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4603      	mov	r3, r0
 8002c62:	4628      	mov	r0, r5
 8002c64:	f000 fdc4 	bl	80037f0 <fill_rectangle>

	//Draw the placeholder text or string
	if(elements[id].text[0] == '\0') {
 8002c68:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <DM_TextBox+0x284>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	215c      	movs	r1, #92	; 0x5c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	332c      	adds	r3, #44	; 0x2c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11f      	bne.n	8002cbe <DM_TextBox+0x23e>
		//If there is no main text, then draw the placeholder
		draw_string(elements[id].x1 + 5, elements[id].y1 + 4, placeholderTextColour, 2, elements[id].title);
 8002c7e:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <DM_TextBox+0x284>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	215c      	movs	r1, #92	; 0x5c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	1d58      	adds	r0, r3, #5
 8002c90:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <DM_TextBox+0x284>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	215c      	movs	r1, #92	; 0x5c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3306      	adds	r3, #6
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	1d19      	adds	r1, r3, #4
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <DM_TextBox+0x284>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	245c      	movs	r4, #92	; 0x5c
 8002ca8:	fb04 f303 	mul.w	r3, r4, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	3328      	adds	r3, #40	; 0x28
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	f000 fec0 	bl	8003a3c <draw_string>
	} else {
		draw_string(elements[id].x1 + 5, elements[id].y1 + 4, textColour, 2, elements[id].text);
	}
}
 8002cbc:	e01e      	b.n	8002cfc <DM_TextBox+0x27c>
		draw_string(elements[id].x1 + 5, elements[id].y1 + 4, textColour, 2, elements[id].text);
 8002cbe:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <DM_TextBox+0x284>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	215c      	movs	r1, #92	; 0x5c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3304      	adds	r3, #4
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	1d58      	adds	r0, r3, #5
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <DM_TextBox+0x284>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	215c      	movs	r1, #92	; 0x5c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3306      	adds	r3, #6
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	1d19      	adds	r1, r3, #4
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <DM_TextBox+0x284>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	245c      	movs	r4, #92	; 0x5c
 8002ce8:	fb04 f303 	mul.w	r3, r4, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	332c      	adds	r3, #44	; 0x2c
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	f000 fea0 	bl	8003a3c <draw_string>
}
 8002cfc:	bf00      	nop
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bdb0      	pop	{r4, r5, r7, pc}
 8002d04:	20004538 	.word	0x20004538
 8002d08:	200050bc 	.word	0x200050bc

08002d0c <DM_TextBox_onPress>:

/**
 * Handles highlighting a text box when it is selected
 */
void DM_TextBox_onPress(int id) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b0ae      	sub	sp, #184	; 0xb8
 8002d10:	af14      	add	r7, sp, #80	; 0x50
 8002d12:	6078      	str	r0, [r7, #4]
	//Report that this box is selected
	elements[id].selected = 1;
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <DM_TextBox_onPress+0x44>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	215c      	movs	r1, #92	; 0x5c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3310      	adds	r3, #16
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

	//Add a number pad to the screen for typing
	DM_Add_Element(DM_New_NumPad());
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fb38 	bl	80023a0 <DM_New_NumPad>
 8002d30:	4668      	mov	r0, sp
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	224c      	movs	r2, #76	; 0x4c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f007 fe2f 	bl	800a99c <memcpy>
 8002d3e:	f107 030c 	add.w	r3, r7, #12
 8002d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d44:	f7fe ffe0 	bl	8001d08 <DM_Add_Element>
}
 8002d48:	bf00      	nop
 8002d4a:	3768      	adds	r7, #104	; 0x68
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20004538 	.word	0x20004538

08002d54 <DM_New_Title_Bar>:
void DM_Title_Bar(int id);

/**
 * Add a title bar to the top of the screen
 */
struct DisplayElement DM_New_Title_Bar(char *title) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b09a      	sub	sp, #104	; 0x68
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
	int height = 40;
 8002d5e:	2328      	movs	r3, #40	; 0x28
 8002d60:	667b      	str	r3, [r7, #100]	; 0x64
	struct DisplayElement titleBar = getDefaultElement();
 8002d62:	f107 0308 	add.w	r3, r7, #8
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f996 	bl	8002098 <getDefaultElement>
	titleBar.type = TITLEBAR;
 8002d6c:	2307      	movs	r3, #7
 8002d6e:	60bb      	str	r3, [r7, #8]
	titleBar.x1 = 0; titleBar.y1 = 0; titleBar.x2 = WIDTH; titleBar.y2 = height;
 8002d70:	2300      	movs	r3, #0
 8002d72:	81bb      	strh	r3, [r7, #12]
 8002d74:	2300      	movs	r3, #0
 8002d76:	81fb      	strh	r3, [r7, #14]
 8002d78:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002d7c:	823b      	strh	r3, [r7, #16]
 8002d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	827b      	strh	r3, [r7, #18]
	titleBar.title = title;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
	titleBar.draw = DM_Title_Bar;
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <DM_New_Title_Bar+0x58>)
 8002d8a:	64bb      	str	r3, [r7, #72]	; 0x48
	titleBar.refresh = ONCE;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	return titleBar;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	225c      	movs	r2, #92	; 0x5c
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f007 fdfd 	bl	800a99c <memcpy>
}
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	3768      	adds	r7, #104	; 0x68
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	08002db1 	.word	0x08002db1

08002db0 <DM_Title_Bar>:

void DM_Title_Bar(int id) {
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af04      	add	r7, sp, #16
 8002db6:	6078      	str	r0, [r7, #4]
	int backgroundColour = COLOR_LIGHTBLUE;
 8002db8:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 8002dbc:	617b      	str	r3, [r7, #20]
	int foregroundColour = COLOR_WHITE;
 8002dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dc2:	613b      	str	r3, [r7, #16]
	int halfWidth = (int)((elements[id].x2 - elements[id].x1) / 2);
 8002dc4:	4a3a      	ldr	r2, [pc, #232]	; (8002eb0 <DM_Title_Bar+0x100>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	215c      	movs	r1, #92	; 0x5c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	4a36      	ldr	r2, [pc, #216]	; (8002eb0 <DM_Title_Bar+0x100>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	215c      	movs	r1, #92	; 0x5c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3304      	adds	r3, #4
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	1ac3      	subs	r3, r0, r3
 8002de8:	0fda      	lsrs	r2, r3, #31
 8002dea:	4413      	add	r3, r2
 8002dec:	105b      	asrs	r3, r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]

	//Draw the background
	//fill_rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, backgroundColour);
	fill_gradient(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, COLOR_NAVY, backgroundColour, HORIZONTAL);
 8002df0:	4a2f      	ldr	r2, [pc, #188]	; (8002eb0 <DM_Title_Bar+0x100>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	215c      	movs	r1, #92	; 0x5c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <DM_Title_Bar+0x100>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	215c      	movs	r1, #92	; 0x5c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3306      	adds	r3, #6
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	461c      	mov	r4, r3
 8002e14:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <DM_Title_Bar+0x100>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	215c      	movs	r1, #92	; 0x5c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3308      	adds	r3, #8
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	461d      	mov	r5, r3
 8002e26:	4a22      	ldr	r2, [pc, #136]	; (8002eb0 <DM_Title_Bar+0x100>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	215c      	movs	r1, #92	; 0x5c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	330a      	adds	r3, #10
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9302      	str	r3, [sp, #8]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	230f      	movs	r3, #15
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	462a      	mov	r2, r5
 8002e48:	4621      	mov	r1, r4
 8002e4a:	f000 fec9 	bl	8003be0 <fill_gradient>
	//And a line
	//fill_rectangle(elements[id].x1, elements[id].y2, elements[id].x2, elements[id].y2 + 1, COLOR_GRAY);

	//Center the text
	int titleLen = DM_StrLen(elements[id].title, 32);
 8002e4e:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <DM_Title_Bar+0x100>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	215c      	movs	r1, #92	; 0x5c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	3328      	adds	r3, #40	; 0x28
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2120      	movs	r1, #32
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe ff97 	bl	8001d94 <DM_StrLen>
 8002e66:	60b8      	str	r0, [r7, #8]
	draw_string(halfWidth - (titleLen * 9), elements[id].y1 + 10, foregroundColour, 2, elements[id].title);
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	075b      	lsls	r3, r3, #29
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	1a9a      	subs	r2, r3, r2
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	18d0      	adds	r0, r2, r3
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <DM_Title_Bar+0x100>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	215c      	movs	r1, #92	; 0x5c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3306      	adds	r3, #6
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	f103 010a 	add.w	r1, r3, #10
 8002e8c:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <DM_Title_Bar+0x100>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	245c      	movs	r4, #92	; 0x5c
 8002e92:	fb04 f303 	mul.w	r3, r4, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	3328      	adds	r3, #40	; 0x28
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	f000 fdcb 	bl	8003a3c <draw_string>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bdb0      	pop	{r4, r5, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20004538 	.word	0x20004538

08002eb4 <DFPlayer_sendByte>:
#include "drivers/DFPlayer.h"

/**
 * Send a byte to the UART with flow control.
 */
void DFPlayer_sendByte(unsigned char data) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, &data, 1, 100);
 8002ebe:	1df9      	adds	r1, r7, #7
 8002ec0:	2364      	movs	r3, #100	; 0x64
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <DFPlayer_sendByte+0x20>)
 8002ec6:	f005 fa15 	bl	80082f4 <HAL_UART_Transmit>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20004460 	.word	0x20004460

08002ed8 <DFPlayer_calculateChecksum>:
 * the commands look like yet)
 * 
 * Checksum = 0 - (0xFF + 0x06 + command + ACK + dataH + dataL) & 0xFFFF
 * 
 */
unsigned int DFPlayer_calculateChecksum(unsigned char command, unsigned char dataH, unsigned char dataL) {
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	71bb      	strb	r3, [r7, #6]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	717b      	strb	r3, [r7, #5]
    unsigned int checksum = 0 - (0xFF + 0x06 + command + dataH + dataL);
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	f203 1205 	addw	r2, r3, #261	; 0x105
 8002ef0:	79bb      	ldrb	r3, [r7, #6]
 8002ef2:	441a      	add	r2, r3
 8002ef4:	797b      	ldrb	r3, [r7, #5]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	425b      	negs	r3, r3
 8002efa:	60fb      	str	r3, [r7, #12]
    checksum = checksum & 0xFFFF;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	60fb      	str	r3, [r7, #12]
    
    return checksum;
 8002f02:	68fb      	ldr	r3, [r7, #12]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <DFPlayer_sendCommand>:
/**
 * Send a command to the DFPlayer mini
 * Sends two data bytes.
 * Overloaded with another function to send only a single byte.
 */
void DFPlayer_sendCommand(unsigned char command, unsigned char dataH, unsigned char dataL) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	71bb      	strb	r3, [r7, #6]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	717b      	strb	r3, [r7, #5]
    //Get the checksum
    unsigned int checksum = DFPlayer_calculateChecksum(command, dataH, dataL);
 8002f22:	797a      	ldrb	r2, [r7, #5]
 8002f24:	79b9      	ldrb	r1, [r7, #6]
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ffd5 	bl	8002ed8 <DFPlayer_calculateChecksum>
 8002f2e:	60f8      	str	r0, [r7, #12]
    
    //Normal command structure
    DFPlayer_sendByte(0x7E);
 8002f30:	207e      	movs	r0, #126	; 0x7e
 8002f32:	f7ff ffbf 	bl	8002eb4 <DFPlayer_sendByte>
    DFPlayer_sendByte(0xFF);
 8002f36:	20ff      	movs	r0, #255	; 0xff
 8002f38:	f7ff ffbc 	bl	8002eb4 <DFPlayer_sendByte>
    DFPlayer_sendByte(0x06);
 8002f3c:	2006      	movs	r0, #6
 8002f3e:	f7ff ffb9 	bl	8002eb4 <DFPlayer_sendByte>
    DFPlayer_sendByte(command);
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ffb5 	bl	8002eb4 <DFPlayer_sendByte>
    DFPlayer_sendByte(0x00); //No ACK needed
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7ff ffb2 	bl	8002eb4 <DFPlayer_sendByte>
    DFPlayer_sendByte(dataH);
 8002f50:	79bb      	ldrb	r3, [r7, #6]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ffae 	bl	8002eb4 <DFPlayer_sendByte>
    DFPlayer_sendByte(dataL);
 8002f58:	797b      	ldrb	r3, [r7, #5]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ffaa 	bl	8002eb4 <DFPlayer_sendByte>
    DFPlayer_sendByte(checksum >> 8); //Checksum High byte
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ffa4 	bl	8002eb4 <DFPlayer_sendByte>
    DFPlayer_sendByte(checksum & 0xFF); //Checksum low byte
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff9f 	bl	8002eb4 <DFPlayer_sendByte>
    DFPlayer_sendByte(0xEF);
 8002f76:	20ef      	movs	r0, #239	; 0xef
 8002f78:	f7ff ff9c 	bl	8002eb4 <DFPlayer_sendByte>
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <DFPlayer_getResponse>:
/**
 * Sends a specified command to the module and then awaits a reply
 * 
 * BYO data buffer array
 */
void DFPlayer_getResponse(unsigned char command, unsigned char dataH, unsigned char dataL, unsigned char buff[]) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	71fb      	strb	r3, [r7, #7]
 8002f90:	460b      	mov	r3, r1
 8002f92:	71bb      	strb	r3, [r7, #6]
 8002f94:	4613      	mov	r3, r2
 8002f96:	717b      	strb	r3, [r7, #5]
    //Send the request command
    DFPlayer_sendCommand(command, dataH, dataL);
 8002f98:	797a      	ldrb	r2, [r7, #5]
 8002f9a:	79b9      	ldrb	r1, [r7, #6]
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ffb6 	bl	8002f10 <DFPlayer_sendCommand>
    /*
    for(int num_bytes = 0; num_bytes < 10; num_bytes++) 
        buff[num_bytes] = DFPlayer_getByte();
        */
    HAL_UART_Receive(&huart1, buff, 10, 250);
 8002fa4:	23fa      	movs	r3, #250	; 0xfa
 8002fa6:	220a      	movs	r2, #10
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <DFPlayer_getResponse+0x34>)
 8002fac:	f005 fa36 	bl	800841c <HAL_UART_Receive>
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20004460 	.word	0x20004460

08002fbc <DFPlayer_setPause>:
}

/**
 * Just sends the PAUSE command. No other data.
 */
void DFPlayer_setPause() {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
    DFPlayer_sendCommand(PAUSE, 0x00, 0x00);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	200e      	movs	r0, #14
 8002fc6:	f7ff ffa3 	bl	8002f10 <DFPlayer_sendCommand>
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <DFPlayer_getStatus>:
}

/**
 * Get the current status of the device
 */
int DFPlayer_getStatus() {
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
    unsigned char data[10];
    //Feed the response in to the array
    DFPlayer_getResponse(QUERY_STATUS, 0x00, 0x00, data);
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	2042      	movs	r0, #66	; 0x42
 8002fdc:	f7ff ffd2 	bl	8002f84 <DFPlayer_getResponse>
    
    //Return the interesting part of the returned data
    return data[6];
 8002fe0:	7abb      	ldrb	r3, [r7, #10]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <DFPlayer_getTracksInFolder>:
}

/**
 * Queries the number of tracks in a specified folder
 */
int DFPlayer_getTracksInFolder(int folder) {
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
    unsigned char data[10];
    //Feed the response in to the array
    DFPlayer_getResponse(QUERY_TRACKS_IN_FOLDER, (folder >> 8), (folder & 0xFF), data);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	121b      	asrs	r3, r3, #8
 8002ff6:	b2d9      	uxtb	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	204e      	movs	r0, #78	; 0x4e
 8003002:	f7ff ffbf 	bl	8002f84 <DFPlayer_getResponse>
    
    //Return the interesting part of the returned data
    return data[6];
 8003006:	7cbb      	ldrb	r3, [r7, #18]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <DFPlayer_resetModule>:

/**
 * Sends the soft reset command
 */
void DFPlayer_resetModule() {
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
    DFPlayer_sendCommand(RESET, 0x00, 0x00);
 8003014:	2200      	movs	r2, #0
 8003016:	2100      	movs	r1, #0
 8003018:	200c      	movs	r0, #12
 800301a:	f7ff ff79 	bl	8002f10 <DFPlayer_sendCommand>
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <RTC_update_clock>:
const int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

/*
 * Updates the RTC with a new time and date
 */
void RTC_update_clock(struct Time newTime) {
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af04      	add	r7, sp, #16
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    //Convert data to a format friendly for the device
	unsigned char newData[7];
    newData[0] = RTC_convert_decimal_to_seconds(newTime.seconds);
 8003030:	793b      	ldrb	r3, [r7, #4]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f8f1 	bl	800321a <RTC_convert_decimal_to_seconds>
 8003038:	4603      	mov	r3, r0
 800303a:	743b      	strb	r3, [r7, #16]
    newData[1] = RTC_convert_decimal_to_seconds(newTime.minutes);
 800303c:	797b      	ldrb	r3, [r7, #5]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f8eb 	bl	800321a <RTC_convert_decimal_to_seconds>
 8003044:	4603      	mov	r3, r0
 8003046:	747b      	strb	r3, [r7, #17]
    newData[2] = RTC_convert_decimal_to_seconds(newTime.hours);
 8003048:	79bb      	ldrb	r3, [r7, #6]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f8e5 	bl	800321a <RTC_convert_decimal_to_seconds>
 8003050:	4603      	mov	r3, r0
 8003052:	74bb      	strb	r3, [r7, #18]
    newData[3] = dayOfTheWeek(newTime) + 1;
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800305a:	f000 f8fd 	bl	8003258 <dayOfTheWeek>
 800305e:	4603      	mov	r3, r0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	74fb      	strb	r3, [r7, #19]
    newData[4] = RTC_convert_decimal_to_seconds(newTime.day);
 8003068:	7a3b      	ldrb	r3, [r7, #8]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f8d5 	bl	800321a <RTC_convert_decimal_to_seconds>
 8003070:	4603      	mov	r3, r0
 8003072:	753b      	strb	r3, [r7, #20]
    newData[5] = RTC_convert_decimal_to_seconds(newTime.month);
 8003074:	7a7b      	ldrb	r3, [r7, #9]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f8cf 	bl	800321a <RTC_convert_decimal_to_seconds>
 800307c:	4603      	mov	r3, r0
 800307e:	757b      	strb	r3, [r7, #21]
    newData[6] = RTC_convert_decimal_to_seconds(newTime.year - 2000);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f8c7 	bl	800321a <RTC_convert_decimal_to_seconds>
 800308c:	4603      	mov	r3, r0
 800308e:	75bb      	strb	r3, [r7, #22]
    
	if(HAL_I2C_IsDeviceReady (&hi2c1, DS3231_ADDR << 1, 10, 250) == HAL_OK) {
 8003090:	23fa      	movs	r3, #250	; 0xfa
 8003092:	220a      	movs	r2, #10
 8003094:	21d0      	movs	r1, #208	; 0xd0
 8003096:	480b      	ldr	r0, [pc, #44]	; (80030c4 <RTC_update_clock+0xa0>)
 8003098:	f002 fdd2 	bl	8005c40 <HAL_I2C_IsDeviceReady>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <RTC_update_clock+0x98>
			//Write the new time/date data to the clock
			HAL_I2C_Mem_Write (&hi2c1, DS3231_ADDR << 1, DS3231_SECONDS, I2C_MEMADD_SIZE_8BIT, newData, 7, 250);
 80030a2:	23fa      	movs	r3, #250	; 0xfa
 80030a4:	9302      	str	r3, [sp, #8]
 80030a6:	2307      	movs	r3, #7
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	f107 0310 	add.w	r3, r7, #16
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2301      	movs	r3, #1
 80030b2:	2200      	movs	r2, #0
 80030b4:	21d0      	movs	r1, #208	; 0xd0
 80030b6:	4803      	ldr	r0, [pc, #12]	; (80030c4 <RTC_update_clock+0xa0>)
 80030b8:	f002 fb94 	bl	80057e4 <HAL_I2C_Mem_Write>
	}
}
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	200043a8 	.word	0x200043a8

080030c8 <RTC_get_time_date>:

/*
 * Returns a time struct of the current time and date
 */
struct Time RTC_get_time_date() {
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b08d      	sub	sp, #52	; 0x34
 80030cc:	af04      	add	r7, sp, #16
 80030ce:	6078      	str	r0, [r7, #4]
    unsigned char timeDate[7];
    struct Time newTime;
    
    //Get the whole chunk of ram as one stream
	if(HAL_I2C_IsDeviceReady (&hi2c1, DS3231_ADDR << 1, 10, 250) == HAL_OK)
 80030d0:	23fa      	movs	r3, #250	; 0xfa
 80030d2:	220a      	movs	r2, #10
 80030d4:	21d0      	movs	r1, #208	; 0xd0
 80030d6:	4827      	ldr	r0, [pc, #156]	; (8003174 <RTC_get_time_date+0xac>)
 80030d8:	f002 fdb2 	bl	8005c40 <HAL_I2C_IsDeviceReady>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <RTC_get_time_date+0x34>
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR << 1, DS3231_SECONDS, I2C_MEMADD_SIZE_8BIT, timeDate, 7, 250);
 80030e2:	23fa      	movs	r3, #250	; 0xfa
 80030e4:	9302      	str	r3, [sp, #8]
 80030e6:	2307      	movs	r3, #7
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	f107 0318 	add.w	r3, r7, #24
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2301      	movs	r3, #1
 80030f2:	2200      	movs	r2, #0
 80030f4:	21d0      	movs	r1, #208	; 0xd0
 80030f6:	481f      	ldr	r0, [pc, #124]	; (8003174 <RTC_get_time_date+0xac>)
 80030f8:	f002 fc88 	bl	8005a0c <HAL_I2C_Mem_Read>
    
    //Have to convert these numbers from the weird HEX format to regular
    //decimal format.
    newTime.seconds = RTC_convert_seconds_to_decimal(timeDate[0]);
 80030fc:	7e3b      	ldrb	r3, [r7, #24]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f83a 	bl	8003178 <RTC_convert_seconds_to_decimal>
 8003104:	4603      	mov	r3, r0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	733b      	strb	r3, [r7, #12]
    newTime.minutes = RTC_convert_seconds_to_decimal(timeDate[1]);
 800310a:	7e7b      	ldrb	r3, [r7, #25]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f833 	bl	8003178 <RTC_convert_seconds_to_decimal>
 8003112:	4603      	mov	r3, r0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	737b      	strb	r3, [r7, #13]
    newTime.hours = RTC_convert_hours_to_decimal(timeDate[2]);
 8003118:	7ebb      	ldrb	r3, [r7, #26]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f847 	bl	80031ae <RTC_convert_hours_to_decimal>
 8003120:	4603      	mov	r3, r0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	73bb      	strb	r3, [r7, #14]
    newTime.weekday = timeDate[3] - 1;
 8003126:	7efb      	ldrb	r3, [r7, #27]
 8003128:	3b01      	subs	r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	73fb      	strb	r3, [r7, #15]
    newTime.day = RTC_convert_date_to_decimal(timeDate[4]);
 800312e:	7f3b      	ldrb	r3, [r7, #28]
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f857 	bl	80031e4 <RTC_convert_date_to_decimal>
 8003136:	4603      	mov	r3, r0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	743b      	strb	r3, [r7, #16]
    //We can re-use the hours and seconds conversion here.
    newTime.month = RTC_convert_hours_to_decimal(timeDate[5]);
 800313c:	7f7b      	ldrb	r3, [r7, #29]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f835 	bl	80031ae <RTC_convert_hours_to_decimal>
 8003144:	4603      	mov	r3, r0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	747b      	strb	r3, [r7, #17]
    newTime.year = RTC_convert_seconds_to_decimal(timeDate[6]) + 2000;
 800314a:	7fbb      	ldrb	r3, [r7, #30]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f813 	bl	8003178 <RTC_convert_seconds_to_decimal>
 8003152:	4603      	mov	r3, r0
 8003154:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003158:	617b      	str	r3, [r7, #20]
    
    return newTime;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	461c      	mov	r4, r3
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}
 8003172:	bf00      	nop
 8003174:	200043a8 	.word	0x200043a8

08003178 <RTC_convert_seconds_to_decimal>:

/*
 * Converts a value from the RTC's werid memory format in to a regular
 * decimal number.
 */
int RTC_convert_seconds_to_decimal(unsigned char data) {
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0xF0) >> 4) * 10;
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
    int seconds = data & 0x0F;
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	60bb      	str	r3, [r7, #8]
    
    return tens + seconds;
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4413      	add	r3, r2
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <RTC_convert_hours_to_decimal>:
/*
 * Converts the hours register to a decimal value
 */
int RTC_convert_hours_to_decimal(unsigned char data) {
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4603      	mov	r3, r0
 80031b6:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0x30) >> 4) * 10;
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	111b      	asrs	r3, r3, #4
 80031bc:	f003 0203 	and.w	r2, r3, #3
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
    int digits = data & 0x0F;
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	60bb      	str	r3, [r7, #8]
    
    return tens + digits;
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4413      	add	r3, r2
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <RTC_convert_date_to_decimal>:
/*
 * Converts the DATE register in to a decimal representation
 */
int RTC_convert_date_to_decimal(unsigned char data) {
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0x30) >> 4) * 10;
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	111b      	asrs	r3, r3, #4
 80031f2:	f003 0203 	and.w	r2, r3, #3
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
    int digits = data & 0x0F;
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	60bb      	str	r3, [r7, #8]
    
    return tens + digits;
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4413      	add	r3, r2
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <RTC_convert_decimal_to_seconds>:
/*
 * Converts an integer in to the the format needed for the RTC
 * seconds, minutes, and years register
 */
unsigned char RTC_convert_decimal_to_seconds(int data) {
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
    int tens = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
    //Count the number of tens
    while(data > 9) {
 8003226:	e005      	b.n	8003234 <RTC_convert_decimal_to_seconds+0x1a>
        data -= 10;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b0a      	subs	r3, #10
 800322c:	607b      	str	r3, [r7, #4]
        tens++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3301      	adds	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
    while(data > 9) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b09      	cmp	r3, #9
 8003238:	dcf6      	bgt.n	8003228 <RTC_convert_decimal_to_seconds+0xe>
    }
    
    //Number of seconds is is whatever is left over
    
    return (tens << 4) | data;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	b25a      	sxtb	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	b25b      	sxtb	r3, r3
 8003244:	4313      	orrs	r3, r2
 8003246:	b25b      	sxtb	r3, r3
 8003248:	b2db      	uxtb	r3, r3
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <dayOfTheWeek>:
/*
 * Calculates the day of the week.
 * Returns the day of the week as an integer beginning at
 * Sunday = 0
 */
int dayOfTheWeek(struct Time thisTime) {
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int adjustment, mm, yy;
    
 
	adjustment = (14 - thisTime.month) / 12;
 8003264:	7a7b      	ldrb	r3, [r7, #9]
 8003266:	f1c3 030e 	rsb	r3, r3, #14
 800326a:	4a27      	ldr	r2, [pc, #156]	; (8003308 <dayOfTheWeek+0xb0>)
 800326c:	fb82 1203 	smull	r1, r2, r2, r3
 8003270:	1052      	asrs	r2, r2, #1
 8003272:	17db      	asrs	r3, r3, #31
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	61fb      	str	r3, [r7, #28]
	mm = thisTime.month + 12 * adjustment - 2;
 8003278:	7a7b      	ldrb	r3, [r7, #9]
 800327a:	4619      	mov	r1, r3
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3b02      	subs	r3, #2
 800328a:	61bb      	str	r3, [r7, #24]
	yy = thisTime.year - adjustment;
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	617b      	str	r3, [r7, #20]
	return (thisTime.day + (13 * mm - 1) / 5 +
 8003294:	7a3b      	ldrb	r3, [r7, #8]
 8003296:	4619      	mov	r1, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	3b01      	subs	r3, #1
 80032a6:	4a19      	ldr	r2, [pc, #100]	; (800330c <dayOfTheWeek+0xb4>)
 80032a8:	fb82 0203 	smull	r0, r2, r2, r3
 80032ac:	1052      	asrs	r2, r2, #1
 80032ae:	17db      	asrs	r3, r3, #31
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	18ca      	adds	r2, r1, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	441a      	add	r2, r3
		yy + yy / 4 - yy / 100 + yy / 400) % 7;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	da00      	bge.n	80032c0 <dayOfTheWeek+0x68>
 80032be:	3303      	adds	r3, #3
 80032c0:	109b      	asrs	r3, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4912      	ldr	r1, [pc, #72]	; (8003310 <dayOfTheWeek+0xb8>)
 80032c8:	fb81 0103 	smull	r0, r1, r1, r3
 80032cc:	1149      	asrs	r1, r1, #5
 80032ce:	17db      	asrs	r3, r3, #31
 80032d0:	1a5b      	subs	r3, r3, r1
 80032d2:	441a      	add	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	490e      	ldr	r1, [pc, #56]	; (8003310 <dayOfTheWeek+0xb8>)
 80032d8:	fb81 0103 	smull	r0, r1, r1, r3
 80032dc:	11c9      	asrs	r1, r1, #7
 80032de:	17db      	asrs	r3, r3, #31
 80032e0:	1acb      	subs	r3, r1, r3
 80032e2:	441a      	add	r2, r3
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <dayOfTheWeek+0xbc>)
 80032e6:	fb83 1302 	smull	r1, r3, r3, r2
 80032ea:	4413      	add	r3, r2
 80032ec:	1099      	asrs	r1, r3, #2
 80032ee:	17d3      	asrs	r3, r2, #31
 80032f0:	1ac9      	subs	r1, r1, r3
 80032f2:	460b      	mov	r3, r1
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	1a5b      	subs	r3, r3, r1
 80032f8:	1ad1      	subs	r1, r2, r3
 80032fa:	460b      	mov	r3, r1
    
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3724      	adds	r7, #36	; 0x24
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	2aaaaaab 	.word	0x2aaaaaab
 800330c:	66666667 	.word	0x66666667
 8003310:	51eb851f 	.word	0x51eb851f
 8003314:	92492493 	.word	0x92492493

08003318 <FT5446_getTouch>:
 *      Author: tommy
 */

#include "drivers/FT5446.h"

struct Touch FT5446_getTouch() {
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b08d      	sub	sp, #52	; 0x34
 800331c:	af04      	add	r7, sp, #16
 800331e:	6078      	str	r0, [r7, #4]
	struct Touch touch;
	unsigned char touchData[6];

	//Get number of touches
	//Wait for device to be ready
	if(HAL_I2C_IsDeviceReady (&hi2c1, FT5446_ADDR << 1, 10, 250) == HAL_OK) {
 8003320:	23fa      	movs	r3, #250	; 0xfa
 8003322:	220a      	movs	r2, #10
 8003324:	2170      	movs	r1, #112	; 0x70
 8003326:	481a      	ldr	r0, [pc, #104]	; (8003390 <FT5446_getTouch+0x78>)
 8003328:	f002 fc8a 	bl	8005c40 <HAL_I2C_IsDeviceReady>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d122      	bne.n	8003378 <FT5446_getTouch+0x60>
		//Get the CTP ram
		HAL_I2C_Mem_Read (&hi2c1, FT5446_ADDR << 1, FT5446_GESTURE_ADDR, I2C_MEMADD_SIZE_8BIT, touchData, 6, 250);
 8003332:	23fa      	movs	r3, #250	; 0xfa
 8003334:	9302      	str	r3, [sp, #8]
 8003336:	2306      	movs	r3, #6
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	f107 030c 	add.w	r3, r7, #12
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2301      	movs	r3, #1
 8003342:	2201      	movs	r2, #1
 8003344:	2170      	movs	r1, #112	; 0x70
 8003346:	4812      	ldr	r0, [pc, #72]	; (8003390 <FT5446_getTouch+0x78>)
 8003348:	f002 fb60 	bl	8005a0c <HAL_I2C_Mem_Read>
		//Combine in to regular human numbers
		touch.Y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 800334c:	7bbb      	ldrb	r3, [r7, #14]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
		touch.X = ((touchData[4] & 0x0F) << 8) | touchData[5];
 800335a:	7c3b      	ldrb	r3, [r7, #16]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003362:	7c7a      	ldrb	r2, [r7, #17]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

		//Get the gesture and n touches values
		touch.gesture = touchData[0];
 8003368:	7b3b      	ldrb	r3, [r7, #12]
 800336a:	773b      	strb	r3, [r7, #28]
		touch.nTouches = touchData[1];
 800336c:	7b7b      	ldrb	r3, [r7, #13]
 800336e:	777b      	strb	r3, [r7, #29]
		touch.state = touchData[2] >> 6;
 8003370:	7bbb      	ldrb	r3, [r7, #14]
 8003372:	099b      	lsrs	r3, r3, #6
 8003374:	b2db      	uxtb	r3, r3
 8003376:	77bb      	strb	r3, [r7, #30]
	}

	return touch;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	461c      	mov	r4, r3
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	3724      	adds	r7, #36	; 0x24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd90      	pop	{r4, r7, pc}
 8003390:	200043a8 	.word	0x200043a8

08003394 <parallel_write>:
#include "font.h"

/**
 * Writes data to an 16-bit parallel bus.
 */
void parallel_write(unsigned int data) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	//In this particular example I'm using PA8:15 and PC8:15
    HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_RESET);
 800339c:	2200      	movs	r2, #0
 800339e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033a2:	4810      	ldr	r0, [pc, #64]	; (80033e4 <parallel_write+0x50>)
 80033a4:	f002 f954 	bl	8005650 <HAL_GPIO_WritePin>
	GPIOC->ODR = (data & 0xFF00) | (GPIOC->ODR & 0x00FF); //Remember, we're using the lower half of these pins for other things.
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <parallel_write+0x54>)
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	; (80033e8 <parallel_write+0x54>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	614b      	str	r3, [r1, #20]
	GPIOA->ODR = ((data << 8) & 0xFF00) | (GPIOA->ODR & 0x00FF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	b29a      	uxth	r2, r3
 80033c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80033cc:	4313      	orrs	r3, r2
 80033ce:	614b      	str	r3, [r1, #20]
    HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_SET);
 80033d0:	2201      	movs	r2, #1
 80033d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033d6:	4803      	ldr	r0, [pc, #12]	; (80033e4 <parallel_write+0x50>)
 80033d8:	f002 f93a 	bl	8005650 <HAL_GPIO_WritePin>
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	48000400 	.word	0x48000400
 80033e8:	48000800 	.word	0x48000800

080033ec <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned int data) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80033f4:	2201      	movs	r2, #1
 80033f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033fa:	480b      	ldr	r0, [pc, #44]	; (8003428 <lcd_write_data+0x3c>)
 80033fc:	f002 f928 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003400:	2200      	movs	r2, #0
 8003402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003406:	4808      	ldr	r0, [pc, #32]	; (8003428 <lcd_write_data+0x3c>)
 8003408:	f002 f922 	bl	8005650 <HAL_GPIO_WritePin>
	parallel_write(data);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff ffc1 	bl	8003394 <parallel_write>
    //HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003412:	2201      	movs	r2, #1
 8003414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003418:	4803      	ldr	r0, [pc, #12]	; (8003428 <lcd_write_data+0x3c>)
 800341a:	f002 f919 	bl	8005650 <HAL_GPIO_WritePin>
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	48000400 	.word	0x48000400

0800342c <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8003436:	2200      	movs	r2, #0
 8003438:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800343c:	480b      	ldr	r0, [pc, #44]	; (800346c <lcd_write_command+0x40>)
 800343e:	f002 f907 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003442:	2200      	movs	r2, #0
 8003444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003448:	4808      	ldr	r0, [pc, #32]	; (800346c <lcd_write_command+0x40>)
 800344a:	f002 f901 	bl	8005650 <HAL_GPIO_WritePin>
	parallel_write(data);
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff9f 	bl	8003394 <parallel_write>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003456:	2201      	movs	r2, #1
 8003458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800345c:	4803      	ldr	r0, [pc, #12]	; (800346c <lcd_write_command+0x40>)
 800345e:	f002 f8f7 	bl	8005650 <HAL_GPIO_WritePin>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	48000400 	.word	0x48000400

08003470 <swap_int>:
}

/*
 * Swaps two 16-bit integers
 */
void swap_int(unsigned int *num1, unsigned int *num2) {
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
    int temp = *num2;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
    *num2 = *num1;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	601a      	str	r2, [r3, #0]
    *num1 = temp;
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 800349c:	b5b0      	push	{r4, r5, r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	ed87 0b00 	vstr	d0, [r7]
    int multiplier = 4;
 80034a6:	2304      	movs	r3, #4
 80034a8:	617b      	str	r3, [r7, #20]
    double counter = millis;
 80034aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 80034b2:	e01c      	b.n	80034ee <delay_ms+0x52>
        while(counter--);
 80034b4:	bf00      	nop
 80034b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <delay_ms+0x68>)
 80034c0:	4620      	mov	r0, r4
 80034c2:	4629      	mov	r1, r5
 80034c4:	f7fc fee0 	bl	8000288 <__aeabi_dsub>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	4620      	mov	r0, r4
 80034da:	4629      	mov	r1, r5
 80034dc:	f7fd f8e2 	bl	80006a4 <__aeabi_dcmpeq>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0e7      	beq.n	80034b6 <delay_ms+0x1a>
        counter = millis;
 80034e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1e5a      	subs	r2, r3, #1
 80034f2:	617a      	str	r2, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1dd      	bne.n	80034b4 <delay_ms+0x18>
    }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bdb0      	pop	{r4, r5, r7, pc}
 8003502:	bf00      	nop
 8003504:	3ff00000 	.word	0x3ff00000

08003508 <lcd_init_parallel>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init_parallel() {
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0

    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH (Active LOW)
 800350c:	2201      	movs	r2, #1
 800350e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003512:	481d      	ldr	r0, [pc, #116]	; (8003588 <lcd_init_parallel+0x80>)
 8003514:	f002 f89c 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET); //Chip Select Active LOW
 8003518:	2201      	movs	r2, #1
 800351a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800351e:	481a      	ldr	r0, [pc, #104]	; (8003588 <lcd_init_parallel+0x80>)
 8003520:	f002 f896 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET); //Data / Command select Active LOW
 8003524:	2201      	movs	r2, #1
 8003526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800352a:	4817      	ldr	r0, [pc, #92]	; (8003588 <lcd_init_parallel+0x80>)
 800352c:	f002 f890 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RD_PORT, RD_PIN, GPIO_PIN_SET); //READ pin HIGH (active LOW)
 8003530:	2201      	movs	r2, #1
 8003532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003536:	4814      	ldr	r0, [pc, #80]	; (8003588 <lcd_init_parallel+0x80>)
 8003538:	f002 f88a 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_SET); //WRITE pin HIGH (active LOW)
 800353c:	2201      	movs	r2, #1
 800353e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003542:	4811      	ldr	r0, [pc, #68]	; (8003588 <lcd_init_parallel+0x80>)
 8003544:	f002 f884 	bl	8005650 <HAL_GPIO_WritePin>
    //Cycle reset pin
    delay_ms(100);
 8003548:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8003580 <lcd_init_parallel+0x78>
 800354c:	f7ff ffa6 	bl	800349c <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8003550:	2200      	movs	r2, #0
 8003552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003556:	480c      	ldr	r0, [pc, #48]	; (8003588 <lcd_init_parallel+0x80>)
 8003558:	f002 f87a 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800355c:	2064      	movs	r0, #100	; 0x64
 800355e:	f001 fcdd 	bl	8004f1c <HAL_Delay>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8003562:	2201      	movs	r2, #1
 8003564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003568:	4807      	ldr	r0, [pc, #28]	; (8003588 <lcd_init_parallel+0x80>)
 800356a:	f002 f871 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800356e:	2064      	movs	r0, #100	; 0x64
 8003570:	f001 fcd4 	bl	8004f1c <HAL_Delay>

    lcd_init_command_list();
 8003574:	f000 f80a 	bl	800358c <lcd_init_command_list>

}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}
 800357c:	f3af 8000 	nop.w
 8003580:	00000000 	.word	0x00000000
 8003584:	40590000 	.word	0x40590000
 8003588:	48000400 	.word	0x48000400

0800358c <lcd_init_command_list>:

/**
 * This is the magic initialisation routine.
 */
void lcd_init_command_list(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0

	//********Start Initial Sequence*******//
	lcd_write_command(0xE0); //P-Gamma
 8003590:	20e0      	movs	r0, #224	; 0xe0
 8003592:	f7ff ff4b 	bl	800342c <lcd_write_command>
	lcd_write_data(0x00);
 8003596:	2000      	movs	r0, #0
 8003598:	f7ff ff28 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x13);
 800359c:	2013      	movs	r0, #19
 800359e:	f7ff ff25 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x18);
 80035a2:	2018      	movs	r0, #24
 80035a4:	f7ff ff22 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x04);
 80035a8:	2004      	movs	r0, #4
 80035aa:	f7ff ff1f 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x0F);
 80035ae:	200f      	movs	r0, #15
 80035b0:	f7ff ff1c 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x06);
 80035b4:	2006      	movs	r0, #6
 80035b6:	f7ff ff19 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x3A);
 80035ba:	203a      	movs	r0, #58	; 0x3a
 80035bc:	f7ff ff16 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x56);
 80035c0:	2056      	movs	r0, #86	; 0x56
 80035c2:	f7ff ff13 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x4D);
 80035c6:	204d      	movs	r0, #77	; 0x4d
 80035c8:	f7ff ff10 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x03);
 80035cc:	2003      	movs	r0, #3
 80035ce:	f7ff ff0d 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x0A);
 80035d2:	200a      	movs	r0, #10
 80035d4:	f7ff ff0a 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x06);
 80035d8:	2006      	movs	r0, #6
 80035da:	f7ff ff07 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x30);
 80035de:	2030      	movs	r0, #48	; 0x30
 80035e0:	f7ff ff04 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x3E);
 80035e4:	203e      	movs	r0, #62	; 0x3e
 80035e6:	f7ff ff01 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x0F);
 80035ea:	200f      	movs	r0, #15
 80035ec:	f7ff fefe 	bl	80033ec <lcd_write_data>
	lcd_write_command(0XE1); //N-Gamma
 80035f0:	20e1      	movs	r0, #225	; 0xe1
 80035f2:	f7ff ff1b 	bl	800342c <lcd_write_command>
	lcd_write_data(0x00);
 80035f6:	2000      	movs	r0, #0
 80035f8:	f7ff fef8 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x13);
 80035fc:	2013      	movs	r0, #19
 80035fe:	f7ff fef5 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x18);
 8003602:	2018      	movs	r0, #24
 8003604:	f7ff fef2 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x01);
 8003608:	2001      	movs	r0, #1
 800360a:	f7ff feef 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x11);
 800360e:	2011      	movs	r0, #17
 8003610:	f7ff feec 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x06);
 8003614:	2006      	movs	r0, #6
 8003616:	f7ff fee9 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x38);
 800361a:	2038      	movs	r0, #56	; 0x38
 800361c:	f7ff fee6 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x34);
 8003620:	2034      	movs	r0, #52	; 0x34
 8003622:	f7ff fee3 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x4D);
 8003626:	204d      	movs	r0, #77	; 0x4d
 8003628:	f7ff fee0 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x06);
 800362c:	2006      	movs	r0, #6
 800362e:	f7ff fedd 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x0D);
 8003632:	200d      	movs	r0, #13
 8003634:	f7ff feda 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x0B);
 8003638:	200b      	movs	r0, #11
 800363a:	f7ff fed7 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x31);
 800363e:	2031      	movs	r0, #49	; 0x31
 8003640:	f7ff fed4 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x37);
 8003644:	2037      	movs	r0, #55	; 0x37
 8003646:	f7ff fed1 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x0F);
 800364a:	200f      	movs	r0, #15
 800364c:	f7ff fece 	bl	80033ec <lcd_write_data>
	lcd_write_command(0xC0);
 8003650:	20c0      	movs	r0, #192	; 0xc0
 8003652:	f7ff feeb 	bl	800342c <lcd_write_command>
	lcd_write_data(0x18);
 8003656:	2018      	movs	r0, #24
 8003658:	f7ff fec8 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x16);
 800365c:	2016      	movs	r0, #22
 800365e:	f7ff fec5 	bl	80033ec <lcd_write_data>
	lcd_write_command(0xC1);
 8003662:	20c1      	movs	r0, #193	; 0xc1
 8003664:	f7ff fee2 	bl	800342c <lcd_write_command>
	lcd_write_data(0x45);
 8003668:	2045      	movs	r0, #69	; 0x45
 800366a:	f7ff febf 	bl	80033ec <lcd_write_data>
	lcd_write_command(0xC5); //VCOM
 800366e:	20c5      	movs	r0, #197	; 0xc5
 8003670:	f7ff fedc 	bl	800342c <lcd_write_command>
	lcd_write_data(0x00);
 8003674:	2000      	movs	r0, #0
 8003676:	f7ff feb9 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x63);
 800367a:	2063      	movs	r0, #99	; 0x63
 800367c:	f7ff feb6 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x01);
 8003680:	2001      	movs	r0, #1
 8003682:	f7ff feb3 	bl	80033ec <lcd_write_data>

	lcd_write_command(0x36); //RAM address mode
 8003686:	2036      	movs	r0, #54	; 0x36
 8003688:	f7ff fed0 	bl	800342c <lcd_write_command>
	//0xF8 and 0x3C are landscape mode. 0x5C and 0x9C for portrait mode.
	if(LANDSCAPE)
		lcd_write_data(0xF8);
 800368c:	20f8      	movs	r0, #248	; 0xf8
 800368e:	f7ff fead 	bl	80033ec <lcd_write_data>
	else
		lcd_write_data(0x5C);

	lcd_write_command(0x3A); //Interface Mode Control
 8003692:	203a      	movs	r0, #58	; 0x3a
 8003694:	f7ff feca 	bl	800342c <lcd_write_command>
	lcd_write_data(0x55); //x55 for 16-bit mode OR 0x66 for 18-bit serial mode
 8003698:	2055      	movs	r0, #85	; 0x55
 800369a:	f7ff fea7 	bl	80033ec <lcd_write_data>
	lcd_write_command(0xB0); //Interface Mode Control
 800369e:	20b0      	movs	r0, #176	; 0xb0
 80036a0:	f7ff fec4 	bl	800342c <lcd_write_command>
	lcd_write_data(0x80); //SDO not in use
 80036a4:	2080      	movs	r0, #128	; 0x80
 80036a6:	f7ff fea1 	bl	80033ec <lcd_write_data>
	lcd_write_command(0xB1); //Frame rate 70HZ
 80036aa:	20b1      	movs	r0, #177	; 0xb1
 80036ac:	f7ff febe 	bl	800342c <lcd_write_command>
	lcd_write_data(0x00); //
 80036b0:	2000      	movs	r0, #0
 80036b2:	f7ff fe9b 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x10);
 80036b6:	2010      	movs	r0, #16
 80036b8:	f7ff fe98 	bl	80033ec <lcd_write_data>
	lcd_write_command(0xB4);
 80036bc:	20b4      	movs	r0, #180	; 0xb4
 80036be:	f7ff feb5 	bl	800342c <lcd_write_command>
	lcd_write_data(0x02);
 80036c2:	2002      	movs	r0, #2
 80036c4:	f7ff fe92 	bl	80033ec <lcd_write_data>

	lcd_write_command(0xB6); //RGB/MCU Interface Control
 80036c8:	20b6      	movs	r0, #182	; 0xb6
 80036ca:	f7ff feaf 	bl	800342c <lcd_write_command>
	lcd_write_data(0x02);
 80036ce:	2002      	movs	r0, #2
 80036d0:	f7ff fe8c 	bl	80033ec <lcd_write_data>
	//lcd_write_data(0x22);

	lcd_write_command(0xE9);
 80036d4:	20e9      	movs	r0, #233	; 0xe9
 80036d6:	f7ff fea9 	bl	800342c <lcd_write_command>
	lcd_write_data(0x00);
 80036da:	2000      	movs	r0, #0
 80036dc:	f7ff fe86 	bl	80033ec <lcd_write_data>
	lcd_write_command(0xF7);
 80036e0:	20f7      	movs	r0, #247	; 0xf7
 80036e2:	f7ff fea3 	bl	800342c <lcd_write_command>
	lcd_write_data(0xA9);
 80036e6:	20a9      	movs	r0, #169	; 0xa9
 80036e8:	f7ff fe80 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x51);
 80036ec:	2051      	movs	r0, #81	; 0x51
 80036ee:	f7ff fe7d 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x2C);
 80036f2:	202c      	movs	r0, #44	; 0x2c
 80036f4:	f7ff fe7a 	bl	80033ec <lcd_write_data>
	lcd_write_data(0x82);
 80036f8:	2082      	movs	r0, #130	; 0x82
 80036fa:	f7ff fe77 	bl	80033ec <lcd_write_data>
	lcd_write_command(0x11);
 80036fe:	2011      	movs	r0, #17
 8003700:	f7ff fe94 	bl	800342c <lcd_write_command>
	HAL_Delay(120);
 8003704:	2078      	movs	r0, #120	; 0x78
 8003706:	f001 fc09 	bl	8004f1c <HAL_Delay>
	lcd_write_command(0x21);
 800370a:	2021      	movs	r0, #33	; 0x21
 800370c:	f7ff fe8e 	bl	800342c <lcd_write_command>


	HAL_Delay(120);
 8003710:	2078      	movs	r0, #120	; 0x78
 8003712:	f001 fc03 	bl	8004f1c <HAL_Delay>
	lcd_write_command(0x29);
 8003716:	2029      	movs	r0, #41	; 0x29
 8003718:	f7ff fe88 	bl	800342c <lcd_write_command>
}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}

08003720 <set_draw_window>:
/*
 * Sets the X,Y position for following commands on the display.
 * Should only be called within a function that draws something
 * to the display.
 */
void set_draw_window(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]

    //Check that the values are in order
    if(x2 < x1)
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	429a      	cmp	r2, r3
 8003734:	d206      	bcs.n	8003744 <set_draw_window+0x24>
        swap_int(&x2, &x1);
 8003736:	f107 020c 	add.w	r2, r7, #12
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fe96 	bl	8003470 <swap_int>
    if(y2 < y1)
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	d206      	bcs.n	800375a <set_draw_window+0x3a>
        swap_int(&y2, &y1);
 800374c:	f107 0208 	add.w	r2, r7, #8
 8003750:	463b      	mov	r3, r7
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fe8b 	bl	8003470 <swap_int>

    lcd_write_command(ILI9488_CASET);
 800375a:	202a      	movs	r0, #42	; 0x2a
 800375c:	f7ff fe66 	bl	800342c <lcd_write_command>
    lcd_write_data(x1 >> 8);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fe41 	bl	80033ec <lcd_write_data>
    lcd_write_data(x1 & 0xFF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fe3c 	bl	80033ec <lcd_write_data>

    lcd_write_data(x2 >> 8);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fe37 	bl	80033ec <lcd_write_data>
    lcd_write_data(x2 & 0xFF);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fe32 	bl	80033ec <lcd_write_data>

    lcd_write_command(ILI9488_PASET);
 8003788:	202b      	movs	r0, #43	; 0x2b
 800378a:	f7ff fe4f 	bl	800342c <lcd_write_command>
    lcd_write_data(y1 >> 8);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fe2a 	bl	80033ec <lcd_write_data>
    lcd_write_data(y1 & 0xFF);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fe25 	bl	80033ec <lcd_write_data>

    lcd_write_data(y2 >> 8);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fe20 	bl	80033ec <lcd_write_data>
    lcd_write_data(y2 & 0xFF);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fe1b 	bl	80033ec <lcd_write_data>

    lcd_write_command(ILI9488_RAMWR);
 80037b6:	202c      	movs	r0, #44	; 0x2c
 80037b8:	f7ff fe38 	bl	800342c <lcd_write_command>
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with
 * Colour.
 *
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(unsigned int x, unsigned int y, unsigned int colour) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]

    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	3301      	adds	r3, #1
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff ffa0 	bl	8003720 <set_draw_window>
    lcd_write_data(colour);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fe03 	bl	80033ec <lcd_write_data>
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int colour) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]


    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff ff8b 	bl	8003720 <set_draw_window>

    // data sections but I don't trust it.)
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800380a:	2201      	movs	r2, #1
 800380c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003810:	4817      	ldr	r0, [pc, #92]	; (8003870 <fill_rectangle+0x80>)
 8003812:	f001 ff1d 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003816:	2200      	movs	r2, #0
 8003818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800381c:	4814      	ldr	r0, [pc, #80]	; (8003870 <fill_rectangle+0x80>)
 800381e:	f001 ff17 	bl	8005650 <HAL_GPIO_WritePin>


    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e012      	b.n	800384e <fill_rectangle+0x5e>
        for(int x = 0; x < x2-x1+1; x++) {
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	e005      	b.n	800383a <fill_rectangle+0x4a>
        	parallel_write(colour);
 800382e:	6a38      	ldr	r0, [r7, #32]
 8003830:	f7ff fdb0 	bl	8003394 <parallel_write>
        for(int x = 0; x < x2-x1+1; x++) {
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3301      	adds	r3, #1
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d8f2      	bhi.n	800382e <fill_rectangle+0x3e>
    for(int y = 0; y < y2-y1+1 ; y++) {
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	429a      	cmp	r2, r3
 800385a:	d8e5      	bhi.n	8003828 <fill_rectangle+0x38>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800385c:	2201      	movs	r2, #1
 800385e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003862:	4803      	ldr	r0, [pc, #12]	; (8003870 <fill_rectangle+0x80>)
 8003864:	f001 fef4 	bl	8005650 <HAL_GPIO_WritePin>
}
 8003868:	bf00      	nop
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	48000400 	.word	0x48000400

08003874 <draw_char>:

/*
 * Draws a single char to the screen.
 */
void draw_char(unsigned int x, unsigned int y, char c, unsigned int colour, char size) {
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b08b      	sub	sp, #44	; 0x2c
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	71fb      	strb	r3, [r7, #7]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	3b20      	subs	r3, #32
 8003888:	617b      	str	r3, [r7, #20]

    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e062      	b.n	8003956 <draw_char+0xe2>

        line = FontLarge[font_index][12 - i];
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f1c3 010c 	rsb	r1, r3, #12
 8003896:	4834      	ldr	r0, [pc, #208]	; (8003968 <draw_char+0xf4>)
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	4403      	add	r3, r0
 80038a6:	440b      	add	r3, r1
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	74fb      	strb	r3, [r7, #19]

        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 80038ac:	2300      	movs	r3, #0
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	e04b      	b.n	800394a <draw_char+0xd6>
            if(line & (0x01 << j)) {
 80038b2:	7cfa      	ldrb	r2, [r7, #19]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	fa42 f303 	asr.w	r3, r2, r3
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d040      	beq.n	8003944 <draw_char+0xd0>
                if(size == 1) {
 80038c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10c      	bne.n	80038e4 <draw_char+0x70>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f103 0008 	add.w	r0, r3, #8
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4413      	add	r3, r2
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	4619      	mov	r1, r3
 80038de:	f7ff ff71 	bl	80037c4 <draw_pixel>
 80038e2:	e02f      	b.n	8003944 <draw_char+0xd0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f1c3 0308 	rsb	r3, r3, #8
 80038ea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	18d0      	adds	r0, r2, r3
 80038f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	18d1      	adds	r1, r2, r3
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f1c3 0308 	rsb	r3, r3, #8
 800390e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	441a      	add	r2, r3
 800391c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003920:	18d4      	adds	r4, r2, r3
 8003922:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	441a      	add	r2, r3
 8003932:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003936:	441a      	add	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	4622      	mov	r2, r4
 8003940:	f7ff ff56 	bl	80037f0 <fill_rectangle>
        for(j=0; j<8; j++) {
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	3301      	adds	r3, #1
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b07      	cmp	r3, #7
 800394e:	ddb0      	ble.n	80038b2 <draw_char+0x3e>
    for(i=0; i<13; i++ ) {
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	3301      	adds	r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	2b0c      	cmp	r3, #12
 800395a:	dd99      	ble.n	8003890 <draw_char+0x1c>
                }
            }
        }
    }
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	3724      	adds	r7, #36	; 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}
 8003966:	bf00      	nop
 8003968:	0800b82c 	.word	0x0800b82c

0800396c <draw_fast_char>:
 * than drawing individual pixels.
 * This will draw over any background image though.
 *
 * NOTE: This sends 130 bytes for a regular sized char
 */
void draw_fast_char(unsigned int x, unsigned int y, char c, unsigned int colour, unsigned int bg_colour) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	71fb      	strb	r3, [r7, #7]
    char line;
    char width = 8;
 800397c:	2308      	movs	r3, #8
 800397e:	76fb      	strb	r3, [r7, #27]
    char height = 13;
 8003980:	230d      	movs	r3, #13
 8003982:	76bb      	strb	r3, [r7, #26]
    unsigned int font_index = (c - 32);
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	3b20      	subs	r3, #32
 8003988:	617b      	str	r3, [r7, #20]
    unsigned int this_px = bg_colour;
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	627b      	str	r3, [r7, #36]	; 0x24

    //Set the drawing region
    set_draw_window(x, y, x + width - 1, y + height);
 800398e:	7efa      	ldrb	r2, [r7, #27]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	1e59      	subs	r1, r3, #1
 8003996:	7eba      	ldrb	r2, [r7, #26]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4413      	add	r3, r2
 800399c:	460a      	mov	r2, r1
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff febd 	bl	8003720 <set_draw_window>

    //We will do the SPI write manually here for speed
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80039a6:	2201      	movs	r2, #1
 80039a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039ac:	4821      	ldr	r0, [pc, #132]	; (8003a34 <draw_fast_char+0xc8>)
 80039ae:	f001 fe4f 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80039b2:	2200      	movs	r2, #0
 80039b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039b8:	481e      	ldr	r0, [pc, #120]	; (8003a34 <draw_fast_char+0xc8>)
 80039ba:	f001 fe49 	bl	8005650 <HAL_GPIO_WritePin>

    //Get the line of pixels from the font file
    for(int i=0; i < height; i++ ) {
 80039be:	2300      	movs	r3, #0
 80039c0:	623b      	str	r3, [r7, #32]
 80039c2:	e029      	b.n	8003a18 <draw_fast_char+0xac>
        line = FontLarge[font_index][12 - i];
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f1c3 010c 	rsb	r1, r3, #12
 80039ca:	481b      	ldr	r0, [pc, #108]	; (8003a38 <draw_fast_char+0xcc>)
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4613      	mov	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	4403      	add	r3, r0
 80039da:	440b      	add	r3, r1
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	74fb      	strb	r3, [r7, #19]

        //Draw the pixels to screen
        for(int j = width-1; j >= 0; j--) {
 80039e0:	7efb      	ldrb	r3, [r7, #27]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	e011      	b.n	8003a0c <draw_fast_char+0xa0>
            //Default pixel colour is the background colour, unless changed below
            this_px = bg_colour;
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
			if((line >> (j)) & 0x01)
 80039ec:	7cfa      	ldrb	r2, [r7, #19]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	fa42 f303 	asr.w	r3, r2, r3
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <draw_fast_char+0x94>
				this_px = colour;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
			parallel_write(this_px);
 8003a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a02:	f7ff fcc7 	bl	8003394 <parallel_write>
        for(int j = width-1; j >= 0; j--) {
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	daea      	bge.n	80039e8 <draw_fast_char+0x7c>
    for(int i=0; i < height; i++ ) {
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	3301      	adds	r3, #1
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	7ebb      	ldrb	r3, [r7, #26]
 8003a1a:	6a3a      	ldr	r2, [r7, #32]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	dbd1      	blt.n	80039c4 <draw_fast_char+0x58>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003a20:	2201      	movs	r2, #1
 8003a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a26:	4803      	ldr	r0, [pc, #12]	; (8003a34 <draw_fast_char+0xc8>)
 8003a28:	f001 fe12 	bl	8005650 <HAL_GPIO_WritePin>
}
 8003a2c:	bf00      	nop
 8003a2e:	3728      	adds	r7, #40	; 0x28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	48000400 	.word	0x48000400
 8003a38:	0800b82c 	.word	0x0800b82c

08003a3c <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with
 * a given colour and size.
 */
void draw_string(unsigned int x, unsigned int y, unsigned int colour, char size, char *str) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	70fb      	strb	r3, [r7, #3]

    //Work out the size of each character
    int char_width = size * 9;
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
    //Iterate through each character in the string
    int counter = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]
    while(str[counter] != '\0') {
 8003a58:	e015      	b.n	8003a86 <draw_string+0x4a>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 8003a6a:	6978      	ldr	r0, [r7, #20]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a70:	4413      	add	r3, r2
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	f7ff fefa 	bl	8003874 <draw_char>
        //Next character
        counter++;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
    while(str[counter] != '\0') {
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a8a:	4413      	add	r3, r2
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e3      	bne.n	8003a5a <draw_string+0x1e>
    }
}
 8003a92:	bf00      	nop
 8003a94:	bf00      	nop
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <draw_fast_string>:
 * Draws a string using the draw_fast_char() function.
 * This will not preserve any background image and so a custom background
 * colour should be provided.
 * NOTE: Can only be the regular sized font. No scaling.
 */
void draw_fast_string(unsigned int x, unsigned int y, unsigned int colour, unsigned int bg_colour, char *str) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
    //Iterate through each character in the string
    int counter = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8003aae:	e013      	b.n	8003ad8 <draw_fast_string+0x3c>
        //Write char to the display
        draw_fast_char(x + (counter * 9), y, str[counter], colour, bg_colour);
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	18d0      	adds	r0, r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	f7ff ff4d 	bl	800396c <draw_fast_char>
        //Next character
        counter++;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	6a3a      	ldr	r2, [r7, #32]
 8003adc:	4413      	add	r3, r2
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e5      	bne.n	8003ab0 <draw_fast_string+0x14>
    }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <draw_bitmap>:
 * Draws a bitmap by directly writing the byte stream to the LCD.
 *
 * So the scaling is done strangely here because writing individual pixels
 * has an overhead of 26 bytes each.
 */
void draw_bitmap(unsigned int x1, unsigned int y1, int scale, const unsigned int *bmp) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08e      	sub	sp, #56	; 0x38
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
	int width = bmp[0];
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
	int height = bmp[1];
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	3304      	adds	r3, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	623b      	str	r3, [r7, #32]
	unsigned int this_byte;
	int x2 = x1 + (width * scale);
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	61fb      	str	r3, [r7, #28]
	int y2 = y1 + (height * scale);
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4413      	add	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]

	//Set the drawing region
	set_draw_window(x1, y1, x2 + scale - 2, y2);
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	3b02      	subs	r3, #2
 8003b34:	461a      	mov	r2, r3
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f7ff fdf0 	bl	8003720 <set_draw_window>

	//We will do the SPI write manually here for speed
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003b40:	2201      	movs	r2, #1
 8003b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b46:	4825      	ldr	r0, [pc, #148]	; (8003bdc <draw_bitmap+0xec>)
 8003b48:	f001 fd82 	bl	8005650 <HAL_GPIO_WritePin>
	//CS low to begin data
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b52:	4822      	ldr	r0, [pc, #136]	; (8003bdc <draw_bitmap+0xec>)
 8003b54:	f001 fd7c 	bl	8005650 <HAL_GPIO_WritePin>

	//Write colour to each pixel
	for (int y = 0; y < height; y++) {
 8003b58:	2300      	movs	r3, #0
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5c:	e02f      	b.n	8003bbe <draw_bitmap+0xce>
		//this loop does the vertical axis scaling (two of each line))
		for (int sv = 0; sv < scale; sv++) {
 8003b5e:	2300      	movs	r3, #0
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
 8003b62:	e025      	b.n	8003bb0 <draw_bitmap+0xc0>
			for (int x = 0; x < width; x++) {
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b68:	e01b      	b.n	8003ba2 <draw_bitmap+0xb2>
				//Choose which byte to display depending on the screen orientation
				//NOTE: We add 2 bytes because of the first two bytes being dimension data in the array
				this_byte = bmp[(width * (y)) + x + 2];
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b6e:	fb03 f202 	mul.w	r2, r3, r2
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	4413      	add	r3, r2
 8003b76:	3302      	adds	r3, #2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	617b      	str	r3, [r7, #20]

				//And this loop does the horizontal axis scale (three bytes per pixel))
				for (int sh = 0; sh < scale; sh++) {
 8003b82:	2300      	movs	r3, #0
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b86:	e005      	b.n	8003b94 <draw_bitmap+0xa4>
					parallel_write(this_byte);
 8003b88:	6978      	ldr	r0, [r7, #20]
 8003b8a:	f7ff fc03 	bl	8003394 <parallel_write>
				for (int sh = 0; sh < scale; sh++) {
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	3301      	adds	r3, #1
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	dbf5      	blt.n	8003b88 <draw_bitmap+0x98>
			for (int x = 0; x < width; x++) {
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	dbdf      	blt.n	8003b6a <draw_bitmap+0x7a>
		for (int sv = 0; sv < scale; sv++) {
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	3301      	adds	r3, #1
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	dbd5      	blt.n	8003b64 <draw_bitmap+0x74>
	for (int y = 0; y < height; y++) {
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bba:	3301      	adds	r3, #1
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	dbcb      	blt.n	8003b5e <draw_bitmap+0x6e>
			}
		}
	}

	//Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bcc:	4803      	ldr	r0, [pc, #12]	; (8003bdc <draw_bitmap+0xec>)
 8003bce:	f001 fd3f 	bl	8005650 <HAL_GPIO_WritePin>

}
 8003bd2:	bf00      	nop
 8003bd4:	3738      	adds	r7, #56	; 0x38
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	48000400 	.word	0x48000400

08003be0 <fill_gradient>:
}

/**
 * Fills a rectangle with a gradient between two colours.
 */
void fill_gradient(int x1, int y1, int x2, int y2, unsigned int startColour, unsigned int endColour, Orientation orientation) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b090      	sub	sp, #64	; 0x40
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
	//Calculate each colour channel
	unsigned char rStart = (startColour >> 11) & 0x1F;
 8003bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf0:	0adb      	lsrs	r3, r3, #11
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    unsigned char gStart = (startColour >> 5) & 0x3F;
 8003bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    unsigned char bStart = (startColour) & 0x1F;
 8003c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	unsigned char rEnd = (endColour >> 11) & 0x1F;
 8003c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c18:	0adb      	lsrs	r3, r3, #11
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    unsigned char gEnd = (endColour >> 5) & 0x3F;
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char bEnd = (endColour) & 0x1F;
 8003c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	//Number of incremental steps are we doing
    //Depends on orientation
    int steps = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(orientation == HORIZONTAL)
 8003c42:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d103      	bne.n	8003c52 <fill_gradient+0x72>
		steps = (x2 - x1);
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(orientation == VERTICAL)
 8003c52:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d103      	bne.n	8003c62 <fill_gradient+0x82>
    	steps = (y2 - y1);
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Calculate difference between each colour channel
	float dR = ((float)(rEnd - rStart) / steps);
 8003c62:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c82:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float dG = ((float)(gEnd - gStart) / steps);
 8003c86:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003c8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	ee07 3a90 	vmov	s15, r3
 8003c94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca6:	edc7 7a08 	vstr	s15, [r7, #32]
	float dB = ((float)(bEnd - bStart) / steps);
 8003caa:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8003cae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cca:	edc7 7a07 	vstr	s15, [r7, #28]

	//Figure out how often to change the colour
	unsigned int thisR = rStart;
 8003cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cd2:	61bb      	str	r3, [r7, #24]
	unsigned int thisG = gStart;
 8003cd4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003cd8:	617b      	str	r3, [r7, #20]
	unsigned int thisB = bStart;
 8003cda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cde:	613b      	str	r3, [r7, #16]

	//Doing a normal rectangle fill but we change the colour as we go
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	f7ff fd1a 	bl	8003720 <set_draw_window>
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003cec:	2201      	movs	r2, #1
 8003cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cf2:	4857      	ldr	r0, [pc, #348]	; (8003e50 <fill_gradient+0x270>)
 8003cf4:	f001 fcac 	bl	8005650 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cfe:	4854      	ldr	r0, [pc, #336]	; (8003e50 <fill_gradient+0x270>)
 8003d00:	f001 fca6 	bl	8005650 <HAL_GPIO_WritePin>

    //Write colour to each pixel
    unsigned int colour = startColour;
 8003d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
    for(int y = 0; y < y2-y1 ; y++) {
 8003d08:	2300      	movs	r3, #0
 8003d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d0c:	e08f      	b.n	8003e2e <fill_gradient+0x24e>
        for(int x = 0; x < x2-x1; x++) {
 8003d0e:	2300      	movs	r3, #0
 8003d10:	633b      	str	r3, [r7, #48]	; 0x30
 8003d12:	e044      	b.n	8003d9e <fill_gradient+0x1be>
        	//Send them to the display
        	parallel_write(colour);
 8003d14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d16:	f7ff fb3d 	bl	8003394 <parallel_write>

        	//For a horizontal gradient, update on each X increment
            if(orientation == HORIZONTAL) {
 8003d1a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d13a      	bne.n	8003d98 <fill_gradient+0x1b8>
    			//Increment the colours
    			thisR = rStart + (int)(dR * x);
 8003d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d28:	ee07 2a90 	vmov	s15, r2
 8003d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d3c:	ee17 2a90 	vmov	r2, s15
 8003d40:	4413      	add	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
    			thisG = gStart + (int)(dG * x);
 8003d44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4a:	ee07 2a90 	vmov	s15, r2
 8003d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d52:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d5e:	ee17 2a90 	vmov	r2, s15
 8003d62:	4413      	add	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
    			thisB = bStart + (int)(dB * x);
 8003d66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6c:	ee07 2a90 	vmov	s15, r2
 8003d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d74:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d80:	ee17 2a90 	vmov	r2, s15
 8003d84:	4413      	add	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
    			//Combine them to RGB565
    			colour = (thisR << 11) | (thisG << 5) | (thisB);
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	02da      	lsls	r2, r3, #11
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	015b      	lsls	r3, r3, #5
 8003d90:	4313      	orrs	r3, r2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	63bb      	str	r3, [r7, #56]	; 0x38
        for(int x = 0; x < x2-x1; x++) {
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da6:	429a      	cmp	r2, r3
 8003da8:	dbb4      	blt.n	8003d14 <fill_gradient+0x134>
            }

        }

        //For a vertical gradient, change on each Y increment
        if(orientation == VERTICAL) {
 8003daa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d13a      	bne.n	8003e28 <fill_gradient+0x248>
			//Increment the colours
			thisR = rStart + (int)(dR * y);
 8003db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db8:	ee07 2a90 	vmov	s15, r2
 8003dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dcc:	ee17 2a90 	vmov	r2, s15
 8003dd0:	4413      	add	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
			thisG = gStart + (int)(dG * y);
 8003dd4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dda:	ee07 2a90 	vmov	s15, r2
 8003dde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003de2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dee:	ee17 2a90 	vmov	r2, s15
 8003df2:	4413      	add	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
			thisB = bStart + (int)(dB * y);
 8003df6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dfc:	ee07 2a90 	vmov	s15, r2
 8003e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e04:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e10:	ee17 2a90 	vmov	r2, s15
 8003e14:	4413      	add	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
			//Combine them to RGB565
			colour = (thisR << 11) | (thisG << 5) | (thisB);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	02da      	lsls	r2, r3, #11
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	015b      	lsls	r3, r3, #5
 8003e20:	4313      	orrs	r3, r2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
    for(int y = 0; y < y2-y1 ; y++) {
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e36:	429a      	cmp	r2, r3
 8003e38:	f6ff af69 	blt.w	8003d0e <fill_gradient+0x12e>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e42:	4803      	ldr	r0, [pc, #12]	; (8003e50 <fill_gradient+0x270>)
 8003e44:	f001 fc04 	bl	8005650 <HAL_GPIO_WritePin>
}
 8003e48:	bf00      	nop
 8003e4a:	3740      	adds	r7, #64	; 0x40
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	48000400 	.word	0x48000400

08003e54 <ChangeTimeTask>:


/**
 * Main task to display the settings screen.
 */
void ChangeTimeTask(void const * args) {
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 8003e5a:	af14      	add	r7, sp, #80	; 0x50
 8003e5c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003e60:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8003e64:	6018      	str	r0, [r3, #0]
	//Some default values
	int textColour = COLOR_GRAY;
 8003e66:	f248 4310 	movw	r3, #33808	; 0x8410
 8003e6a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	char hrs[3] = "\0  ";
 8003e6e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003e72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e76:	4ac8      	ldr	r2, [pc, #800]	; (8004198 <ChangeTimeTask+0x344>)
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	8019      	strh	r1, [r3, #0]
 8003e7e:	3302      	adds	r3, #2
 8003e80:	0c12      	lsrs	r2, r2, #16
 8003e82:	701a      	strb	r2, [r3, #0]
	char mins[3] = "\0  ";
 8003e84:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003e88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003e8c:	4ac2      	ldr	r2, [pc, #776]	; (8004198 <ChangeTimeTask+0x344>)
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	4611      	mov	r1, r2
 8003e92:	8019      	strh	r1, [r3, #0]
 8003e94:	3302      	adds	r3, #2
 8003e96:	0c12      	lsrs	r2, r2, #16
 8003e98:	701a      	strb	r2, [r3, #0]
	char day[3] = "\0  ";
 8003e9a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003e9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ea2:	4abd      	ldr	r2, [pc, #756]	; (8004198 <ChangeTimeTask+0x344>)
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	8019      	strh	r1, [r3, #0]
 8003eaa:	3302      	adds	r3, #2
 8003eac:	0c12      	lsrs	r2, r2, #16
 8003eae:	701a      	strb	r2, [r3, #0]
	char month[3] = "\0  ";
 8003eb0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003eb8:	4ab7      	ldr	r2, [pc, #732]	; (8004198 <ChangeTimeTask+0x344>)
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	8019      	strh	r1, [r3, #0]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	0c12      	lsrs	r2, r2, #16
 8003ec4:	701a      	strb	r2, [r3, #0]
	char year[5] = "\0    ";
 8003ec6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003eca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ece:	4ab3      	ldr	r2, [pc, #716]	; (800419c <ChangeTimeTask+0x348>)
 8003ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ed4:	6018      	str	r0, [r3, #0]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	7019      	strb	r1, [r3, #0]

	//Add some dummy display elements
	DM_Add_Element(DM_New_Title_Bar("Change Time/Date"));
 8003eda:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003ede:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ee2:	49af      	ldr	r1, [pc, #700]	; (80041a0 <ChangeTimeTask+0x34c>)
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe ff35 	bl	8002d54 <DM_New_Title_Bar>
 8003eea:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003eee:	f5a3 748e 	sub.w	r4, r3, #284	; 0x11c
 8003ef2:	4668      	mov	r0, sp
 8003ef4:	f104 0310 	add.w	r3, r4, #16
 8003ef8:	224c      	movs	r2, #76	; 0x4c
 8003efa:	4619      	mov	r1, r3
 8003efc:	f006 fd4e 	bl	800a99c <memcpy>
 8003f00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f04:	f7fd ff00 	bl	8001d08 <DM_Add_Element>

	//HOME
	struct DisplayElement okBtn = DM_New_Button(BTN_LEFT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 8003f08:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003f0c:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8003f10:	2300      	movs	r3, #0
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4ba3      	ldr	r3, [pc, #652]	; (80041a4 <ChangeTimeTask+0x350>)
 8003f16:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003f1a:	210a      	movs	r1, #10
 8003f1c:	f7fd fc28 	bl	8001770 <DM_New_Button>
	okBtn.onPress = home_onPress;
 8003f20:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003f24:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f28:	4a9f      	ldr	r2, [pc, #636]	; (80041a8 <ChangeTimeTask+0x354>)
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44
	int okBtnId = DM_Add_Element(okBtn);
 8003f2c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003f30:	f5a3 74c8 	sub.w	r4, r3, #400	; 0x190
 8003f34:	4668      	mov	r0, sp
 8003f36:	f104 0310 	add.w	r3, r4, #16
 8003f3a:	224c      	movs	r2, #76	; 0x4c
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f006 fd2d 	bl	800a99c <memcpy>
 8003f42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f46:	f7fd fedf 	bl	8001d08 <DM_Add_Element>
 8003f4a:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250

	//Save button
	struct DisplayElement saveBtn = DM_New_Button(BTN_MIDDLE_X, BTN_BOTTOM_Y, "SAVE", ENABLED);
 8003f4e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003f52:	f5a3 70f6 	sub.w	r0, r3, #492	; 0x1ec
 8003f56:	2300      	movs	r3, #0
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	4b94      	ldr	r3, [pc, #592]	; (80041ac <ChangeTimeTask+0x358>)
 8003f5c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003f60:	21be      	movs	r1, #190	; 0xbe
 8003f62:	f7fd fc05 	bl	8001770 <DM_New_Button>
	saveBtn.onPress = save_onPress;
 8003f66:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003f6a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f6e:	4a90      	ldr	r2, [pc, #576]	; (80041b0 <ChangeTimeTask+0x35c>)
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(saveBtn);
 8003f72:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003f76:	f5a3 74f6 	sub.w	r4, r3, #492	; 0x1ec
 8003f7a:	4668      	mov	r0, sp
 8003f7c:	f104 0310 	add.w	r3, r4, #16
 8003f80:	224c      	movs	r2, #76	; 0x4c
 8003f82:	4619      	mov	r1, r3
 8003f84:	f006 fd0a 	bl	800a99c <memcpy>
 8003f88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f8c:	f7fd febc 	bl	8001d08 <DM_Add_Element>

	//The current time in text boxes
	DM_Add_Element(DM_New_Text(10, 45, textColour, 1, "Time:"));
 8003f90:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8003f94:	4b87      	ldr	r3, [pc, #540]	; (80041b4 <ChangeTimeTask+0x360>)
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	2301      	movs	r3, #1
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003fa0:	222d      	movs	r2, #45	; 0x2d
 8003fa2:	210a      	movs	r1, #10
 8003fa4:	f7fe fc2e 	bl	8002804 <DM_New_Text>
 8003fa8:	4668      	mov	r0, sp
 8003faa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003fae:	224c      	movs	r2, #76	; 0x4c
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f006 fcf3 	bl	800a99c <memcpy>
 8003fb6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fbc:	f7fd fea4 	bl	8001d08 <DM_Add_Element>
	hrsBox = DM_New_TextBox(10, 55, 2, "HH", hrs);
 8003fc0:	4c7d      	ldr	r4, [pc, #500]	; (80041b8 <ChangeTimeTask+0x364>)
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	4b7c      	ldr	r3, [pc, #496]	; (80041bc <ChangeTimeTask+0x368>)
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2302      	movs	r3, #2
 8003fd0:	2237      	movs	r2, #55	; 0x37
 8003fd2:	210a      	movs	r1, #10
 8003fd4:	f7fe fd0e 	bl	80029f4 <DM_New_TextBox>
 8003fd8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003fdc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	235c      	movs	r3, #92	; 0x5c
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f006 fcd8 	bl	800a99c <memcpy>
	sprintf(hrsBox.text, "%d", time.hours);
 8003fec:	4b72      	ldr	r3, [pc, #456]	; (80041b8 <ChangeTimeTask+0x364>)
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	4a73      	ldr	r2, [pc, #460]	; (80041c0 <ChangeTimeTask+0x36c>)
 8003ff2:	7892      	ldrb	r2, [r2, #2]
 8003ff4:	4973      	ldr	r1, [pc, #460]	; (80041c4 <ChangeTimeTask+0x370>)
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f006 fdf4 	bl	800abe4 <siprintf>
	DM_Add_Element(hrsBox);
 8003ffc:	4c6e      	ldr	r4, [pc, #440]	; (80041b8 <ChangeTimeTask+0x364>)
 8003ffe:	4668      	mov	r0, sp
 8004000:	f104 0310 	add.w	r3, r4, #16
 8004004:	224c      	movs	r2, #76	; 0x4c
 8004006:	4619      	mov	r1, r3
 8004008:	f006 fcc8 	bl	800a99c <memcpy>
 800400c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004010:	f7fd fe7a 	bl	8001d08 <DM_Add_Element>
	minsBox = DM_New_TextBox(60, 55, 2, "MM", mins);
 8004014:	4c6c      	ldr	r4, [pc, #432]	; (80041c8 <ChangeTimeTask+0x374>)
 8004016:	4638      	mov	r0, r7
 8004018:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	4b6b      	ldr	r3, [pc, #428]	; (80041cc <ChangeTimeTask+0x378>)
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2302      	movs	r3, #2
 8004024:	2237      	movs	r2, #55	; 0x37
 8004026:	213c      	movs	r1, #60	; 0x3c
 8004028:	f7fe fce4 	bl	80029f4 <DM_New_TextBox>
 800402c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004030:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004034:	4620      	mov	r0, r4
 8004036:	4619      	mov	r1, r3
 8004038:	235c      	movs	r3, #92	; 0x5c
 800403a:	461a      	mov	r2, r3
 800403c:	f006 fcae 	bl	800a99c <memcpy>
	sprintf(minsBox.text, "%d", time.minutes);
 8004040:	4b61      	ldr	r3, [pc, #388]	; (80041c8 <ChangeTimeTask+0x374>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4a5e      	ldr	r2, [pc, #376]	; (80041c0 <ChangeTimeTask+0x36c>)
 8004046:	7852      	ldrb	r2, [r2, #1]
 8004048:	495e      	ldr	r1, [pc, #376]	; (80041c4 <ChangeTimeTask+0x370>)
 800404a:	4618      	mov	r0, r3
 800404c:	f006 fdca 	bl	800abe4 <siprintf>
	DM_Add_Element(minsBox);
 8004050:	4c5d      	ldr	r4, [pc, #372]	; (80041c8 <ChangeTimeTask+0x374>)
 8004052:	4668      	mov	r0, sp
 8004054:	f104 0310 	add.w	r3, r4, #16
 8004058:	224c      	movs	r2, #76	; 0x4c
 800405a:	4619      	mov	r1, r3
 800405c:	f006 fc9e 	bl	800a99c <memcpy>
 8004060:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004064:	f7fd fe50 	bl	8001d08 <DM_Add_Element>

	//Current date text boxes
	DM_Add_Element(DM_New_Text(10, 95, textColour, 1, "Date:"));
 8004068:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 800406c:	4b58      	ldr	r3, [pc, #352]	; (80041d0 <ChangeTimeTask+0x37c>)
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	2301      	movs	r3, #1
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004078:	225f      	movs	r2, #95	; 0x5f
 800407a:	210a      	movs	r1, #10
 800407c:	f7fe fbc2 	bl	8002804 <DM_New_Text>
 8004080:	4668      	mov	r0, sp
 8004082:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8004086:	224c      	movs	r2, #76	; 0x4c
 8004088:	4619      	mov	r1, r3
 800408a:	f006 fc87 	bl	800a99c <memcpy>
 800408e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8004092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004094:	f7fd fe38 	bl	8001d08 <DM_Add_Element>
	dayBox = DM_New_TextBox(10, 105, 2, "DD", day);
 8004098:	4c4e      	ldr	r4, [pc, #312]	; (80041d4 <ChangeTimeTask+0x380>)
 800409a:	4638      	mov	r0, r7
 800409c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	4b4d      	ldr	r3, [pc, #308]	; (80041d8 <ChangeTimeTask+0x384>)
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2302      	movs	r3, #2
 80040a8:	2269      	movs	r2, #105	; 0x69
 80040aa:	210a      	movs	r1, #10
 80040ac:	f7fe fca2 	bl	80029f4 <DM_New_TextBox>
 80040b0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80040b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040b8:	4620      	mov	r0, r4
 80040ba:	4619      	mov	r1, r3
 80040bc:	235c      	movs	r3, #92	; 0x5c
 80040be:	461a      	mov	r2, r3
 80040c0:	f006 fc6c 	bl	800a99c <memcpy>
	sprintf(dayBox.text, "%d", time.day);
 80040c4:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <ChangeTimeTask+0x380>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a3d      	ldr	r2, [pc, #244]	; (80041c0 <ChangeTimeTask+0x36c>)
 80040ca:	7912      	ldrb	r2, [r2, #4]
 80040cc:	493d      	ldr	r1, [pc, #244]	; (80041c4 <ChangeTimeTask+0x370>)
 80040ce:	4618      	mov	r0, r3
 80040d0:	f006 fd88 	bl	800abe4 <siprintf>
	DM_Add_Element(dayBox);
 80040d4:	4c3f      	ldr	r4, [pc, #252]	; (80041d4 <ChangeTimeTask+0x380>)
 80040d6:	4668      	mov	r0, sp
 80040d8:	f104 0310 	add.w	r3, r4, #16
 80040dc:	224c      	movs	r2, #76	; 0x4c
 80040de:	4619      	mov	r1, r3
 80040e0:	f006 fc5c 	bl	800a99c <memcpy>
 80040e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80040e8:	f7fd fe0e 	bl	8001d08 <DM_Add_Element>
	monthBox = DM_New_TextBox(60, 105, 2, "MM", month);
 80040ec:	4c3b      	ldr	r4, [pc, #236]	; (80041dc <ChangeTimeTask+0x388>)
 80040ee:	4638      	mov	r0, r7
 80040f0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	4b35      	ldr	r3, [pc, #212]	; (80041cc <ChangeTimeTask+0x378>)
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	2302      	movs	r3, #2
 80040fc:	2269      	movs	r2, #105	; 0x69
 80040fe:	213c      	movs	r1, #60	; 0x3c
 8004100:	f7fe fc78 	bl	80029f4 <DM_New_TextBox>
 8004104:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004108:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800410c:	4620      	mov	r0, r4
 800410e:	4619      	mov	r1, r3
 8004110:	235c      	movs	r3, #92	; 0x5c
 8004112:	461a      	mov	r2, r3
 8004114:	f006 fc42 	bl	800a99c <memcpy>
	sprintf(monthBox.text, "%d", time.month);
 8004118:	4b30      	ldr	r3, [pc, #192]	; (80041dc <ChangeTimeTask+0x388>)
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	4a28      	ldr	r2, [pc, #160]	; (80041c0 <ChangeTimeTask+0x36c>)
 800411e:	7952      	ldrb	r2, [r2, #5]
 8004120:	4928      	ldr	r1, [pc, #160]	; (80041c4 <ChangeTimeTask+0x370>)
 8004122:	4618      	mov	r0, r3
 8004124:	f006 fd5e 	bl	800abe4 <siprintf>
	DM_Add_Element(monthBox);
 8004128:	4c2c      	ldr	r4, [pc, #176]	; (80041dc <ChangeTimeTask+0x388>)
 800412a:	4668      	mov	r0, sp
 800412c:	f104 0310 	add.w	r3, r4, #16
 8004130:	224c      	movs	r2, #76	; 0x4c
 8004132:	4619      	mov	r1, r3
 8004134:	f006 fc32 	bl	800a99c <memcpy>
 8004138:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800413c:	f7fd fde4 	bl	8001d08 <DM_Add_Element>
	yearBox = DM_New_TextBox(110, 105, 4, "YYYY", year);
 8004140:	4c27      	ldr	r4, [pc, #156]	; (80041e0 <ChangeTimeTask+0x38c>)
 8004142:	4638      	mov	r0, r7
 8004144:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <ChangeTimeTask+0x390>)
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	2304      	movs	r3, #4
 8004150:	2269      	movs	r2, #105	; 0x69
 8004152:	216e      	movs	r1, #110	; 0x6e
 8004154:	f7fe fc4e 	bl	80029f4 <DM_New_TextBox>
 8004158:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800415c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004160:	4620      	mov	r0, r4
 8004162:	4619      	mov	r1, r3
 8004164:	235c      	movs	r3, #92	; 0x5c
 8004166:	461a      	mov	r2, r3
 8004168:	f006 fc18 	bl	800a99c <memcpy>
	sprintf(yearBox.text, "%d", time.year);
 800416c:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <ChangeTimeTask+0x38c>)
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <ChangeTimeTask+0x36c>)
 8004172:	6892      	ldr	r2, [r2, #8]
 8004174:	4913      	ldr	r1, [pc, #76]	; (80041c4 <ChangeTimeTask+0x370>)
 8004176:	4618      	mov	r0, r3
 8004178:	f006 fd34 	bl	800abe4 <siprintf>
	DM_Add_Element(yearBox);
 800417c:	4c18      	ldr	r4, [pc, #96]	; (80041e0 <ChangeTimeTask+0x38c>)
 800417e:	4668      	mov	r0, sp
 8004180:	f104 0310 	add.w	r3, r4, #16
 8004184:	224c      	movs	r2, #76	; 0x4c
 8004186:	4619      	mov	r1, r3
 8004188:	f006 fc08 	bl	800a99c <memcpy>
 800418c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004190:	f7fd fdba 	bl	8001d08 <DM_Add_Element>


	while(1);
 8004194:	e7fe      	b.n	8004194 <ChangeTimeTask+0x340>
 8004196:	bf00      	nop
 8004198:	0800b69c 	.word	0x0800b69c
 800419c:	0800b6a0 	.word	0x0800b6a0
 80041a0:	0800b650 	.word	0x0800b650
 80041a4:	0800b664 	.word	0x0800b664
 80041a8:	08000c7d 	.word	0x08000c7d
 80041ac:	0800b66c 	.word	0x0800b66c
 80041b0:	080041e9 	.word	0x080041e9
 80041b4:	0800b674 	.word	0x0800b674
 80041b8:	200050c8 	.word	0x200050c8
 80041bc:	0800b67c 	.word	0x0800b67c
 80041c0:	200040b8 	.word	0x200040b8
 80041c4:	0800b680 	.word	0x0800b680
 80041c8:	20005124 	.word	0x20005124
 80041cc:	0800b684 	.word	0x0800b684
 80041d0:	0800b688 	.word	0x0800b688
 80041d4:	20005180 	.word	0x20005180
 80041d8:	0800b690 	.word	0x0800b690
 80041dc:	200051dc 	.word	0x200051dc
 80041e0:	20005238 	.word	0x20005238
 80041e4:	0800b694 	.word	0x0800b694

080041e8 <save_onPress>:
}

/**
 * Saves the selected time to the RTC
 */
void save_onPress(int id) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08c      	sub	sp, #48	; 0x30
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	//Get the time as actual numbers from the text boxes
	int hrs = atoi(hrsBox.text);
 80041f0:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <save_onPress+0xe8>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4618      	mov	r0, r3
 80041f6:	f006 fba1 	bl	800a93c <atoi>
 80041fa:	62f8      	str	r0, [r7, #44]	; 0x2c
	int mins = atoi(minsBox.text);
 80041fc:	4b35      	ldr	r3, [pc, #212]	; (80042d4 <save_onPress+0xec>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	4618      	mov	r0, r3
 8004202:	f006 fb9b 	bl	800a93c <atoi>
 8004206:	62b8      	str	r0, [r7, #40]	; 0x28
	int secs = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	61bb      	str	r3, [r7, #24]
	int day = atoi(dayBox.text);
 800420c:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <save_onPress+0xf0>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4618      	mov	r0, r3
 8004212:	f006 fb93 	bl	800a93c <atoi>
 8004216:	6278      	str	r0, [r7, #36]	; 0x24
	int month = atoi(monthBox.text);
 8004218:	4b30      	ldr	r3, [pc, #192]	; (80042dc <save_onPress+0xf4>)
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	4618      	mov	r0, r3
 800421e:	f006 fb8d 	bl	800a93c <atoi>
 8004222:	6238      	str	r0, [r7, #32]
	int year = atoi(yearBox.text);
 8004224:	4b2e      	ldr	r3, [pc, #184]	; (80042e0 <save_onPress+0xf8>)
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4618      	mov	r0, r3
 800422a:	f006 fb87 	bl	800a93c <atoi>
 800422e:	61f8      	str	r0, [r7, #28]

	//Check bounds
	if(hrs < 0 || hrs > 23) {
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	2b00      	cmp	r3, #0
 8004234:	db02      	blt.n	800423c <save_onPress+0x54>
 8004236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004238:	2b17      	cmp	r3, #23
 800423a:	dd01      	ble.n	8004240 <save_onPress+0x58>
		//Some sort of error
		hrs = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if(mins < 0 || mins > 59) {
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	db02      	blt.n	800424c <save_onPress+0x64>
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	2b3b      	cmp	r3, #59	; 0x3b
 800424a:	dd01      	ble.n	8004250 <save_onPress+0x68>
		mins = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if(day < 1 || day > 31) {
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	dd02      	ble.n	800425c <save_onPress+0x74>
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	2b1f      	cmp	r3, #31
 800425a:	dd01      	ble.n	8004260 <save_onPress+0x78>
		day = 1;
 800425c:	2301      	movs	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(month < 1 || month > 12) {
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	2b00      	cmp	r3, #0
 8004264:	dd02      	ble.n	800426c <save_onPress+0x84>
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	2b0c      	cmp	r3, #12
 800426a:	dd01      	ble.n	8004270 <save_onPress+0x88>
		month = 1;
 800426c:	2301      	movs	r3, #1
 800426e:	623b      	str	r3, [r7, #32]
	}
	if(year < 2022) {
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8004276:	4293      	cmp	r3, r2
 8004278:	dc02      	bgt.n	8004280 <save_onPress+0x98>
		year = 2022;
 800427a:	f240 73e6 	movw	r3, #2022	; 0x7e6
 800427e:	61fb      	str	r3, [r7, #28]
	}

	//Get the current time, then update the struct
	struct Time thisTime = RTC_get_time_date();
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe ff1f 	bl	80030c8 <RTC_get_time_date>
	//Change the old time to the new time
	thisTime.hours = hrs;
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	b2db      	uxtb	r3, r3
 800428e:	73bb      	strb	r3, [r7, #14]
	thisTime.minutes = mins;
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	b2db      	uxtb	r3, r3
 8004294:	737b      	strb	r3, [r7, #13]
	thisTime.seconds = secs;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	733b      	strb	r3, [r7, #12]
	thisTime.day = day;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	743b      	strb	r3, [r7, #16]
	thisTime.month = month;
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	747b      	strb	r3, [r7, #17]
	thisTime.year = year;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	617b      	str	r3, [r7, #20]

	//Send it to the device
	RTC_update_clock(thisTime);
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042b4:	f7fe feb6 	bl	8003024 <RTC_update_clock>

	//Return to main menu
	xTaskNotify(changeScreenTaskHandle, MAIN_MENU, eSetValueWithOverwrite);
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <save_onPress+0xfc>)
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	2300      	movs	r3, #0
 80042be:	2203      	movs	r2, #3
 80042c0:	2102      	movs	r1, #2
 80042c2:	f005 fcf9 	bl	8009cb8 <xTaskGenericNotify>

	return;
 80042c6:	bf00      	nop
}
 80042c8:	3730      	adds	r7, #48	; 0x30
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200050c8 	.word	0x200050c8
 80042d4:	20005124 	.word	0x20005124
 80042d8:	20005180 	.word	0x20005180
 80042dc:	200051dc 	.word	0x200051dc
 80042e0:	20005238 	.word	0x20005238
 80042e4:	200040ac 	.word	0x200040ac

080042e8 <DeviceTestTask>:
void OK_Press(int id);

/**
 * The main task.
 */
void DeviceTestTask(void const * arguments) {
 80042e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ea:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
 80042ee:	af14      	add	r7, sp, #80	; 0x50
 80042f0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80042f4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80042f8:	6018      	str	r0, [r3, #0]

	const unsigned int textColour = COLOR_BLACK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

	//Add some dummy display elements
	DM_Add_Element(DM_New_Title_Bar("Device Test"));
 8004300:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004304:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8004308:	49b9      	ldr	r1, [pc, #740]	; (80045f0 <DeviceTestTask+0x308>)
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fd22 	bl	8002d54 <DM_New_Title_Bar>
 8004310:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004314:	f5a3 7412 	sub.w	r4, r3, #584	; 0x248
 8004318:	4668      	mov	r0, sp
 800431a:	f104 0310 	add.w	r3, r4, #16
 800431e:	224c      	movs	r2, #76	; 0x4c
 8004320:	4619      	mov	r1, r3
 8004322:	f006 fb3b 	bl	800a99c <memcpy>
 8004326:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800432a:	f7fd fced 	bl	8001d08 <DM_Add_Element>

	//Show a loding animation while we test peripherals
	int loadingText = DM_Add_Element(DM_New_Text(208, 160, textColour, 1, "Loading..."));
 800432e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8004332:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004336:	f5a2 70f6 	sub.w	r0, r2, #492	; 0x1ec
 800433a:	4aae      	ldr	r2, [pc, #696]	; (80045f4 <DeviceTestTask+0x30c>)
 800433c:	9201      	str	r2, [sp, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	9200      	str	r2, [sp, #0]
 8004342:	22a0      	movs	r2, #160	; 0xa0
 8004344:	21d0      	movs	r1, #208	; 0xd0
 8004346:	f7fe fa5d 	bl	8002804 <DM_New_Text>
 800434a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800434e:	f5a3 74f6 	sub.w	r4, r3, #492	; 0x1ec
 8004352:	4668      	mov	r0, sp
 8004354:	f104 0310 	add.w	r3, r4, #16
 8004358:	224c      	movs	r2, #76	; 0x4c
 800435a:	4619      	mov	r1, r3
 800435c:	f006 fb1e 	bl	800a99c <memcpy>
 8004360:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004364:	f7fd fcd0 	bl	8001d08 <DM_Add_Element>
 8004368:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
	int loadingAnimation = DM_Add_Element(DM_New_Animation(218, 180, 1, myAnimation, 3));
 800436c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004370:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8004374:	2303      	movs	r3, #3
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	4b9f      	ldr	r3, [pc, #636]	; (80045f8 <DeviceTestTask+0x310>)
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	2301      	movs	r3, #1
 800437e:	22b4      	movs	r2, #180	; 0xb4
 8004380:	21da      	movs	r1, #218	; 0xda
 8004382:	f7fd f8f3 	bl	800156c <DM_New_Animation>
 8004386:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800438a:	f5a3 74c8 	sub.w	r4, r3, #400	; 0x190
 800438e:	4668      	mov	r0, sp
 8004390:	f104 0310 	add.w	r3, r4, #16
 8004394:	224c      	movs	r2, #76	; 0x4c
 8004396:	4619      	mov	r1, r3
 8004398:	f006 fb00 	bl	800a99c <memcpy>
 800439c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80043a0:	f7fd fcb2 	bl	8001d08 <DM_Add_Element>
 80043a4:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0

	//Reset the MP3 player module
	DFPlayer_resetModule();
 80043a8:	f7fe fe32 	bl	8003010 <DFPlayer_resetModule>
	//Wait for the device to reset... It's slow
	osDelay(1000);
 80043ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043b0:	f004 fde4 	bl	8008f7c <osDelay>
	//Test communication with the player
    int status = DFPlayer_getStatus();
 80043b4:	f7fe fe0b 	bl	8002fce <DFPlayer_getStatus>
 80043b8:	f8c7 03dc 	str.w	r0, [r7, #988]	; 0x3dc
    int timeout = 10;
 80043bc:	230a      	movs	r3, #10
 80043be:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    int songs = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    while(timeout--) {
 80043c8:	e008      	b.n	80043dc <DeviceTestTask+0xf4>
    	songs = DFPlayer_getTracksInFolder(0);
 80043ca:	2000      	movs	r0, #0
 80043cc:	f7fe fe0d 	bl	8002fea <DFPlayer_getTracksInFolder>
 80043d0:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
    	if(songs > 0)
 80043d4:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	dc07      	bgt.n	80043ec <DeviceTestTask+0x104>
    while(timeout--) {
 80043dc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80043e0:	1e5a      	subs	r2, r3, #1
 80043e2:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1ef      	bne.n	80043ca <DeviceTestTask+0xe2>
 80043ea:	e000      	b.n	80043ee <DeviceTestTask+0x106>
    		break;
 80043ec:	bf00      	nop
    }
    char numSongs[64];
    sprintf(numSongs, "DFPlayer Status: %d, with %d songs.", status, songs);
 80043ee:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 80043f2:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80043f6:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 80043fa:	4980      	ldr	r1, [pc, #512]	; (80045fc <DeviceTestTask+0x314>)
 80043fc:	f006 fbf2 	bl	800abe4 <siprintf>


	//Make a list of I2C devices
	char deviceString[128] = "I2C Devices:";
 8004400:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004404:	f5a3 7542 	sub.w	r5, r3, #776	; 0x308
 8004408:	4b7d      	ldr	r3, [pc, #500]	; (8004600 <DeviceTestTask+0x318>)
 800440a:	462c      	mov	r4, r5
 800440c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800440e:	c407      	stmia	r4!, {r0, r1, r2}
 8004410:	7023      	strb	r3, [r4, #0]
 8004412:	f105 030d 	add.w	r3, r5, #13
 8004416:	2273      	movs	r2, #115	; 0x73
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f006 facc 	bl	800a9b8 <memset>
	for(char i = 0; i < 128; i++) {
 8004420:	2300      	movs	r3, #0
 8004422:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
 8004426:	e01a      	b.n	800445e <DeviceTestTask+0x176>
		if(HAL_I2C_IsDeviceReady (&hi2c1, i << 1, 10, 250) == HAL_OK) {
 8004428:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 800442c:	b29b      	uxth	r3, r3
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	b299      	uxth	r1, r3
 8004432:	23fa      	movs	r3, #250	; 0xfa
 8004434:	220a      	movs	r2, #10
 8004436:	4873      	ldr	r0, [pc, #460]	; (8004604 <DeviceTestTask+0x31c>)
 8004438:	f001 fc02 	bl	8005c40 <HAL_I2C_IsDeviceReady>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d108      	bne.n	8004454 <DeviceTestTask+0x16c>
			sprintf(deviceString, "%s %d", deviceString, i);
 8004442:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 8004446:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800444a:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800444e:	496e      	ldr	r1, [pc, #440]	; (8004608 <DeviceTestTask+0x320>)
 8004450:	f006 fbc8 	bl	800abe4 <siprintf>
	for(char i = 0; i < 128; i++) {
 8004454:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 8004458:	3301      	adds	r3, #1
 800445a:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
 800445e:	f997 33ef 	ldrsb.w	r3, [r7, #1007]	; 0x3ef
 8004462:	2b00      	cmp	r3, #0
 8004464:	dae0      	bge.n	8004428 <DeviceTestTask+0x140>
		}
	}

	//Confirm communication with the RTC
	struct Time thisTime = RTC_get_time_date();
 8004466:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800446a:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fe2a 	bl	80030c8 <RTC_get_time_date>
	char timeDateString[128];
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8004474:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004478:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800447c:	78db      	ldrb	r3, [r3, #3]
 800447e:	461a      	mov	r2, r3
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4a60      	ldr	r2, [pc, #384]	; (800460c <DeviceTestTask+0x324>)
 800448a:	1899      	adds	r1, r3, r2
 800448c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004490:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004494:	791b      	ldrb	r3, [r3, #4]
 8004496:	469c      	mov	ip, r3
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 8004498:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800449c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80044a0:	795b      	ldrb	r3, [r3, #5]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 80044a2:	461c      	mov	r4, r3
 80044a4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80044a8:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80044ac:	689b      	ldr	r3, [r3, #8]
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 80044ae:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80044b2:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 80044b6:	7892      	ldrb	r2, [r2, #2]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 80044b8:	4615      	mov	r5, r2
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 80044ba:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80044be:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 80044c2:	7852      	ldrb	r2, [r2, #1]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 80044c4:	4616      	mov	r6, r2
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 80044c6:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80044ca:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 80044ce:	7812      	ldrb	r2, [r2, #0]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 80044d0:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80044d4:	9204      	str	r2, [sp, #16]
 80044d6:	9603      	str	r6, [sp, #12]
 80044d8:	9502      	str	r5, [sp, #8]
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	9400      	str	r4, [sp, #0]
 80044de:	4663      	mov	r3, ip
 80044e0:	460a      	mov	r2, r1
 80044e2:	494b      	ldr	r1, [pc, #300]	; (8004610 <DeviceTestTask+0x328>)
 80044e4:	f006 fb7e 	bl	800abe4 <siprintf>


	//List of I2C devices found
	DM_Add_Element(DM_New_Text(10, 45, textColour, 1, deviceString));
 80044e8:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80044ec:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80044f0:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80044f4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	2301      	movs	r3, #1
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	4613      	mov	r3, r2
 8004500:	222d      	movs	r2, #45	; 0x2d
 8004502:	210a      	movs	r1, #10
 8004504:	f7fe f97e 	bl	8002804 <DM_New_Text>
 8004508:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800450c:	f5a3 749a 	sub.w	r4, r3, #308	; 0x134
 8004510:	4668      	mov	r0, sp
 8004512:	f104 0310 	add.w	r3, r4, #16
 8004516:	224c      	movs	r2, #76	; 0x4c
 8004518:	4619      	mov	r1, r3
 800451a:	f006 fa3f 	bl	800a99c <memcpy>
 800451e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004522:	f7fd fbf1 	bl	8001d08 <DM_Add_Element>
	//List tracks on MP3
	DM_Add_Element(DM_New_Text(10, 60, textColour, 1, numSongs));
 8004526:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800452a:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800452e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	2301      	movs	r3, #1
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	223c      	movs	r2, #60	; 0x3c
 800453c:	210a      	movs	r1, #10
 800453e:	f7fe f961 	bl	8002804 <DM_New_Text>
 8004542:	4668      	mov	r0, sp
 8004544:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8004548:	224c      	movs	r2, #76	; 0x4c
 800454a:	4619      	mov	r1, r3
 800454c:	f006 fa26 	bl	800a99c <memcpy>
 8004550:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8004554:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004556:	f7fd fbd7 	bl	8001d08 <DM_Add_Element>
	//List current time on the clock
	DM_Add_Element(DM_New_Text(10, 75, textColour, 1, timeDateString));
 800455a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800455e:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 8004562:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	2301      	movs	r3, #1
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	224b      	movs	r2, #75	; 0x4b
 8004570:	210a      	movs	r1, #10
 8004572:	f7fe f947 	bl	8002804 <DM_New_Text>
 8004576:	4668      	mov	r0, sp
 8004578:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800457c:	224c      	movs	r2, #76	; 0x4c
 800457e:	4619      	mov	r1, r3
 8004580:	f006 fa0c 	bl	800a99c <memcpy>
 8004584:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8004588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800458a:	f7fd fbbd 	bl	8001d08 <DM_Add_Element>

	//Remove the loading animations
	DM_Remove_Element(loadingText);
 800458e:	f8d7 03e4 	ldr.w	r0, [r7, #996]	; 0x3e4
 8004592:	f7fd fc21 	bl	8001dd8 <DM_Remove_Element>
	DM_Remove_Element(loadingAnimation);
 8004596:	f8d7 03e0 	ldr.w	r0, [r7, #992]	; 0x3e0
 800459a:	f7fd fc1d 	bl	8001dd8 <DM_Remove_Element>

	//OK button
	struct DisplayElement okBtn = DM_New_Button(BTN_RIGHT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 800459e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80045a2:	f5a3 707c 	sub.w	r0, r3, #1008	; 0x3f0
 80045a6:	2300      	movs	r3, #0
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <DeviceTestTask+0x32c>)
 80045ac:	f44f 7288 	mov.w	r2, #272	; 0x110
 80045b0:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80045b4:	f7fd f8dc 	bl	8001770 <DM_New_Button>
	okBtn.onPress = OK_Press;
 80045b8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80045bc:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <DeviceTestTask+0x330>)
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44
	int okBtnId = DM_Add_Element(okBtn);
 80045c4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80045c8:	f5a3 747c 	sub.w	r4, r3, #1008	; 0x3f0
 80045cc:	4668      	mov	r0, sp
 80045ce:	f104 0310 	add.w	r3, r4, #16
 80045d2:	224c      	movs	r2, #76	; 0x4c
 80045d4:	4619      	mov	r1, r3
 80045d6:	f006 f9e1 	bl	800a99c <memcpy>
 80045da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045de:	f7fd fb93 	bl	8001d08 <DM_Add_Element>
 80045e2:	f8c7 03d8 	str.w	r0, [r7, #984]	; 0x3d8

	while(1) {
		osDelay(1000);
 80045e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045ea:	f004 fcc7 	bl	8008f7c <osDelay>
 80045ee:	e7fa      	b.n	80045e6 <DeviceTestTask+0x2fe>
 80045f0:	0800b6a8 	.word	0x0800b6a8
 80045f4:	0800b6b4 	.word	0x0800b6b4
 80045f8:	20000004 	.word	0x20000004
 80045fc:	0800b6c0 	.word	0x0800b6c0
 8004600:	0800b710 	.word	0x0800b710
 8004604:	200043a8 	.word	0x200043a8
 8004608:	0800b6e4 	.word	0x0800b6e4
 800460c:	0800bd00 	.word	0x0800bd00
 8004610:	0800b6ec 	.word	0x0800b6ec
 8004614:	0800b708 	.word	0x0800b708
 8004618:	0800461d 	.word	0x0800461d

0800461c <OK_Press>:
	}
}

void OK_Press(int id) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	//Stop the music playing
	DFPlayer_setPause();
 8004624:	f7fe fcca 	bl	8002fbc <DFPlayer_setPause>

	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, MAIN_MENU, eSetValueWithOverwrite);
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <OK_Press+0x24>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	2300      	movs	r3, #0
 800462e:	2203      	movs	r2, #3
 8004630:	2102      	movs	r1, #2
 8004632:	f005 fb41 	bl	8009cb8 <xTaskGenericNotify>
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200040ac 	.word	0x200040ac

08004644 <MainMenuTask>:

/**
 * The main display which is currently a clock. Called Main Menu
 * for historical reasons. Is not actually a menu.
 */
void MainMenuTask(void const * arguments) {
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 800464a:	af14      	add	r7, sp, #80	; 0x50
 800464c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004650:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8004654:	6018      	str	r0, [r3, #0]

	const unsigned int textColour = COLOR_LIGHTGRAY;
 8004656:	f24c 6318 	movw	r3, #50712	; 0xc618
 800465a:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0

	//Put the current date at the top of the screen
	sprintf(fancyDateString, "%s %d / %d / %d", dayName[time.weekday], time.day, time.month, time.year);
 800465e:	4be5      	ldr	r3, [pc, #916]	; (80049f4 <MainMenuTask+0x3b0>)
 8004660:	78db      	ldrb	r3, [r3, #3]
 8004662:	461a      	mov	r2, r3
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4ae2      	ldr	r2, [pc, #904]	; (80049f8 <MainMenuTask+0x3b4>)
 800466e:	441a      	add	r2, r3
 8004670:	4be0      	ldr	r3, [pc, #896]	; (80049f4 <MainMenuTask+0x3b0>)
 8004672:	791b      	ldrb	r3, [r3, #4]
 8004674:	4618      	mov	r0, r3
 8004676:	4bdf      	ldr	r3, [pc, #892]	; (80049f4 <MainMenuTask+0x3b0>)
 8004678:	795b      	ldrb	r3, [r3, #5]
 800467a:	4619      	mov	r1, r3
 800467c:	4bdd      	ldr	r3, [pc, #884]	; (80049f4 <MainMenuTask+0x3b0>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	9100      	str	r1, [sp, #0]
 8004684:	4603      	mov	r3, r0
 8004686:	49dd      	ldr	r1, [pc, #884]	; (80049fc <MainMenuTask+0x3b8>)
 8004688:	48dd      	ldr	r0, [pc, #884]	; (8004a00 <MainMenuTask+0x3bc>)
 800468a:	f006 faab 	bl	800abe4 <siprintf>
	dateTextId = DM_Add_Element(DM_New_Fast_Text(150, 10, textColour, COLOR_WHITE, fancyDateString));
 800468e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8004692:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8004696:	f5a2 70d2 	sub.w	r0, r2, #420	; 0x1a4
 800469a:	4ad9      	ldr	r2, [pc, #868]	; (8004a00 <MainMenuTask+0x3bc>)
 800469c:	9201      	str	r2, [sp, #4]
 800469e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046a2:	9200      	str	r2, [sp, #0]
 80046a4:	220a      	movs	r2, #10
 80046a6:	2196      	movs	r1, #150	; 0x96
 80046a8:	f7fe f928 	bl	80028fc <DM_New_Fast_Text>
 80046ac:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80046b0:	f5a3 74d2 	sub.w	r4, r3, #420	; 0x1a4
 80046b4:	4668      	mov	r0, sp
 80046b6:	f104 0310 	add.w	r3, r4, #16
 80046ba:	224c      	movs	r2, #76	; 0x4c
 80046bc:	4619      	mov	r1, r3
 80046be:	f006 f96d 	bl	800a99c <memcpy>
 80046c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046c6:	f7fd fb1f 	bl	8001d08 <DM_Add_Element>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4acd      	ldr	r2, [pc, #820]	; (8004a04 <MainMenuTask+0x3c0>)
 80046ce:	6013      	str	r3, [r2, #0]

	//Double gradient effect
	DM_Add_Element(DM_New_Fill_Gradient(0, 90, WIDTH, 120, COLOR_WHITE, COLOR_BLACK, VERTICAL));
 80046d0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80046d4:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 80046d8:	2301      	movs	r3, #1
 80046da:	9303      	str	r3, [sp, #12]
 80046dc:	2300      	movs	r3, #0
 80046de:	9302      	str	r3, [sp, #8]
 80046e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	2378      	movs	r3, #120	; 0x78
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80046ee:	225a      	movs	r2, #90	; 0x5a
 80046f0:	2100      	movs	r1, #0
 80046f2:	f7fd fd83 	bl	80021fc <DM_New_Fill_Gradient>
 80046f6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80046fa:	f5a3 74a4 	sub.w	r4, r3, #328	; 0x148
 80046fe:	4668      	mov	r0, sp
 8004700:	f104 0310 	add.w	r3, r4, #16
 8004704:	224c      	movs	r2, #76	; 0x4c
 8004706:	4619      	mov	r1, r3
 8004708:	f006 f948 	bl	800a99c <memcpy>
 800470c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004710:	f7fd fafa 	bl	8001d08 <DM_Add_Element>
	DM_Add_Element(DM_New_Fill_Rectangle(0, 120, WIDTH, 184, COLOR_BLACK));
 8004714:	f507 707f 	add.w	r0, r7, #1020	; 0x3fc
 8004718:	2300      	movs	r3, #0
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	23b8      	movs	r3, #184	; 0xb8
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004724:	2278      	movs	r2, #120	; 0x78
 8004726:	2100      	movs	r1, #0
 8004728:	f7fd fcfc 	bl	8002124 <DM_New_Fill_Rectangle>
 800472c:	4668      	mov	r0, sp
 800472e:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8004732:	224c      	movs	r2, #76	; 0x4c
 8004734:	4619      	mov	r1, r3
 8004736:	f006 f931 	bl	800a99c <memcpy>
 800473a:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800473e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004740:	f7fd fae2 	bl	8001d08 <DM_Add_Element>
	DM_Add_Element(DM_New_Fill_Gradient(0, 184, WIDTH, 214, COLOR_BLACK, COLOR_WHITE, VERTICAL));
 8004744:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 8004748:	2301      	movs	r3, #1
 800474a:	9303      	str	r3, [sp, #12]
 800474c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004750:	9302      	str	r3, [sp, #8]
 8004752:	2300      	movs	r3, #0
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	23d6      	movs	r3, #214	; 0xd6
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800475e:	22b8      	movs	r2, #184	; 0xb8
 8004760:	2100      	movs	r1, #0
 8004762:	f7fd fd4b 	bl	80021fc <DM_New_Fill_Gradient>
 8004766:	4668      	mov	r0, sp
 8004768:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800476c:	224c      	movs	r2, #76	; 0x4c
 800476e:	4619      	mov	r1, r3
 8004770:	f006 f914 	bl	800a99c <memcpy>
 8004774:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800477a:	f7fd fac5 	bl	8001d08 <DM_Add_Element>

	//Draw some digits
	const int xMargin = 16;
 800477e:	2310      	movs	r3, #16
 8004780:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
	const int digitWidth = 64;
 8004784:	2340      	movs	r3, #64	; 0x40
 8004786:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
	const int colonWidth = 16;
 800478a:	2310      	movs	r3, #16
 800478c:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4

	struct DisplayElement digit1 = DM_New_Bitmap(xMargin, 120, 1, num_1);
 8004790:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004794:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 8004798:	4b9b      	ldr	r3, [pc, #620]	; (8004a08 <MainMenuTask+0x3c4>)
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2301      	movs	r3, #1
 800479e:	2278      	movs	r2, #120	; 0x78
 80047a0:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 80047a4:	f7fc ff6e 	bl	8001684 <DM_New_Bitmap>
	struct DisplayElement digit2 = DM_New_Bitmap(xMargin + digitWidth, 120, 1, num_5);
 80047a8:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 80047ac:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 80047b0:	18d1      	adds	r1, r2, r3
 80047b2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80047b6:	f5a3 7017 	sub.w	r0, r3, #604	; 0x25c
 80047ba:	4b94      	ldr	r3, [pc, #592]	; (8004a0c <MainMenuTask+0x3c8>)
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2301      	movs	r3, #1
 80047c0:	2278      	movs	r2, #120	; 0x78
 80047c2:	f7fc ff5f 	bl	8001684 <DM_New_Bitmap>
	struct DisplayElement colon1 = DM_New_Bitmap(xMargin + (digitWidth * 2) - colonWidth, 120, 1, colon);
 80047c6:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 80047ca:	005a      	lsls	r2, r3, #1
 80047cc:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80047d0:	441a      	add	r2, r3
 80047d2:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80047d6:	1ad1      	subs	r1, r2, r3
 80047d8:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80047dc:	f5a3 702e 	sub.w	r0, r3, #696	; 0x2b8
 80047e0:	4b8b      	ldr	r3, [pc, #556]	; (8004a10 <MainMenuTask+0x3cc>)
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2301      	movs	r3, #1
 80047e6:	2278      	movs	r2, #120	; 0x78
 80047e8:	f7fc ff4c 	bl	8001684 <DM_New_Bitmap>
	struct DisplayElement digit3 = DM_New_Bitmap(xMargin + (2 * digitWidth) + (2 * colonWidth), 120, 1, num_2);
 80047ec:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 80047f0:	005a      	lsls	r2, r3, #1
 80047f2:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80047f6:	441a      	add	r2, r3
 80047f8:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	18d1      	adds	r1, r2, r3
 8004800:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004804:	f5a3 7045 	sub.w	r0, r3, #788	; 0x314
 8004808:	4b82      	ldr	r3, [pc, #520]	; (8004a14 <MainMenuTask+0x3d0>)
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	2301      	movs	r3, #1
 800480e:	2278      	movs	r2, #120	; 0x78
 8004810:	f7fc ff38 	bl	8001684 <DM_New_Bitmap>
	struct DisplayElement digit4 = DM_New_Bitmap(xMargin + (3 * digitWidth) + (2 * colonWidth), 120, 1, num_4);
 8004814:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	441a      	add	r2, r3
 800481e:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8004822:	441a      	add	r2, r3
 8004824:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	18d1      	adds	r1, r2, r3
 800482c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004830:	f5a3 705c 	sub.w	r0, r3, #880	; 0x370
 8004834:	4b78      	ldr	r3, [pc, #480]	; (8004a18 <MainMenuTask+0x3d4>)
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	2301      	movs	r3, #1
 800483a:	2278      	movs	r2, #120	; 0x78
 800483c:	f7fc ff22 	bl	8001684 <DM_New_Bitmap>
	struct DisplayElement colon2 = DM_New_Bitmap(xMargin + (digitWidth * 4) + colonWidth, 120, 1, colon);
 8004840:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8004844:	009a      	lsls	r2, r3, #2
 8004846:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 800484a:	441a      	add	r2, r3
 800484c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8004850:	18d1      	adds	r1, r2, r3
 8004852:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004856:	f5a3 7073 	sub.w	r0, r3, #972	; 0x3cc
 800485a:	4b6d      	ldr	r3, [pc, #436]	; (8004a10 <MainMenuTask+0x3cc>)
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	2301      	movs	r3, #1
 8004860:	2278      	movs	r2, #120	; 0x78
 8004862:	f7fc ff0f 	bl	8001684 <DM_New_Bitmap>
	struct DisplayElement digit5 = DM_New_Bitmap(xMargin + (5 * digitWidth), 120, 1, num_5);
 8004866:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8004874:	18d1      	adds	r1, r2, r3
 8004876:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800487a:	f5a3 6085 	sub.w	r0, r3, #1064	; 0x428
 800487e:	4b63      	ldr	r3, [pc, #396]	; (8004a0c <MainMenuTask+0x3c8>)
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	2301      	movs	r3, #1
 8004884:	2278      	movs	r2, #120	; 0x78
 8004886:	f7fc fefd 	bl	8001684 <DM_New_Bitmap>
	struct DisplayElement digit6 = DM_New_Bitmap(xMargin + (6 * digitWidth), 120, 1, num_7);
 800488a:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800488e:	4613      	mov	r3, r2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4413      	add	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	461a      	mov	r2, r3
 8004898:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 800489c:	18d1      	adds	r1, r2, r3
 800489e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80048a2:	f2a3 4084 	subw	r0, r3, #1156	; 0x484
 80048a6:	4b5d      	ldr	r3, [pc, #372]	; (8004a1c <MainMenuTask+0x3d8>)
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	2301      	movs	r3, #1
 80048ac:	2278      	movs	r2, #120	; 0x78
 80048ae:	f7fc fee9 	bl	8001684 <DM_New_Bitmap>


	int digit1Id = DM_Add_Element(digit1);
 80048b2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80048b6:	f5a3 7400 	sub.w	r4, r3, #512	; 0x200
 80048ba:	4668      	mov	r0, sp
 80048bc:	f104 0310 	add.w	r3, r4, #16
 80048c0:	224c      	movs	r2, #76	; 0x4c
 80048c2:	4619      	mov	r1, r3
 80048c4:	f006 f86a 	bl	800a99c <memcpy>
 80048c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048cc:	f7fd fa1c 	bl	8001d08 <DM_Add_Element>
 80048d0:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
	int colon1Id = DM_Add_Element(colon1); //colon
 80048d4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80048d8:	f5a3 742e 	sub.w	r4, r3, #696	; 0x2b8
 80048dc:	4668      	mov	r0, sp
 80048de:	f104 0310 	add.w	r3, r4, #16
 80048e2:	224c      	movs	r2, #76	; 0x4c
 80048e4:	4619      	mov	r1, r3
 80048e6:	f006 f859 	bl	800a99c <memcpy>
 80048ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048ee:	f7fd fa0b 	bl	8001d08 <DM_Add_Element>
 80048f2:	f8c7 04cc 	str.w	r0, [r7, #1228]	; 0x4cc
	int digit2Id = DM_Add_Element(digit2);
 80048f6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80048fa:	f5a3 7417 	sub.w	r4, r3, #604	; 0x25c
 80048fe:	4668      	mov	r0, sp
 8004900:	f104 0310 	add.w	r3, r4, #16
 8004904:	224c      	movs	r2, #76	; 0x4c
 8004906:	4619      	mov	r1, r3
 8004908:	f006 f848 	bl	800a99c <memcpy>
 800490c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004910:	f7fd f9fa 	bl	8001d08 <DM_Add_Element>
 8004914:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8

	int digit3Id = DM_Add_Element(digit3);
 8004918:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800491c:	f5a3 7445 	sub.w	r4, r3, #788	; 0x314
 8004920:	4668      	mov	r0, sp
 8004922:	f104 0310 	add.w	r3, r4, #16
 8004926:	224c      	movs	r2, #76	; 0x4c
 8004928:	4619      	mov	r1, r3
 800492a:	f006 f837 	bl	800a99c <memcpy>
 800492e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004932:	f7fd f9e9 	bl	8001d08 <DM_Add_Element>
 8004936:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4
	int colon2Id = DM_Add_Element(colon2); //colon
 800493a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800493e:	f5a3 7473 	sub.w	r4, r3, #972	; 0x3cc
 8004942:	4668      	mov	r0, sp
 8004944:	f104 0310 	add.w	r3, r4, #16
 8004948:	224c      	movs	r2, #76	; 0x4c
 800494a:	4619      	mov	r1, r3
 800494c:	f006 f826 	bl	800a99c <memcpy>
 8004950:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004954:	f7fd f9d8 	bl	8001d08 <DM_Add_Element>
 8004958:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
	int digit4Id = DM_Add_Element(digit4);
 800495c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004960:	f5a3 745c 	sub.w	r4, r3, #880	; 0x370
 8004964:	4668      	mov	r0, sp
 8004966:	f104 0310 	add.w	r3, r4, #16
 800496a:	224c      	movs	r2, #76	; 0x4c
 800496c:	4619      	mov	r1, r3
 800496e:	f006 f815 	bl	800a99c <memcpy>
 8004972:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004976:	f7fd f9c7 	bl	8001d08 <DM_Add_Element>
 800497a:	f8c7 04bc 	str.w	r0, [r7, #1212]	; 0x4bc

	int digit5Id = DM_Add_Element(digit5);
 800497e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004982:	f5a3 6485 	sub.w	r4, r3, #1064	; 0x428
 8004986:	4668      	mov	r0, sp
 8004988:	f104 0310 	add.w	r3, r4, #16
 800498c:	224c      	movs	r2, #76	; 0x4c
 800498e:	4619      	mov	r1, r3
 8004990:	f006 f804 	bl	800a99c <memcpy>
 8004994:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004998:	f7fd f9b6 	bl	8001d08 <DM_Add_Element>
 800499c:	f8c7 04b8 	str.w	r0, [r7, #1208]	; 0x4b8
	int digit6Id = DM_Add_Element(digit6);
 80049a0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80049a4:	f2a3 4484 	subw	r4, r3, #1156	; 0x484
 80049a8:	4668      	mov	r0, sp
 80049aa:	f104 0310 	add.w	r3, r4, #16
 80049ae:	224c      	movs	r2, #76	; 0x4c
 80049b0:	4619      	mov	r1, r3
 80049b2:	f005 fff3 	bl	800a99c <memcpy>
 80049b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049ba:	f7fd f9a5 	bl	8001d08 <DM_Add_Element>
 80049be:	f8c7 04b4 	str.w	r0, [r7, #1204]	; 0x4b4

	//Button for settings
	struct DisplayElement button2 = DM_New_Button(BTN_MIDDLE_X, BTN_BOTTOM_Y, "MENU", ENABLED);
 80049c2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80049c6:	f5a3 609c 	sub.w	r0, r3, #1248	; 0x4e0
 80049ca:	2300      	movs	r3, #0
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <MainMenuTask+0x3dc>)
 80049d0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80049d4:	21be      	movs	r1, #190	; 0xbe
 80049d6:	f7fc fecb 	bl	8001770 <DM_New_Button>
	button2.onPress = settingsScreen_onPress;
 80049da:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80049de:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80049e2:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <MainMenuTask+0x3e0>)
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(button2);
 80049e6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80049ea:	f5a3 649c 	sub.w	r4, r3, #1248	; 0x4e0
 80049ee:	4668      	mov	r0, sp
 80049f0:	e01a      	b.n	8004a28 <MainMenuTask+0x3e4>
 80049f2:	bf00      	nop
 80049f4:	200040b8 	.word	0x200040b8
 80049f8:	0800ed60 	.word	0x0800ed60
 80049fc:	0800b790 	.word	0x0800b790
 8004a00:	20005294 	.word	0x20005294
 8004a04:	200052b4 	.word	0x200052b4
 8004a08:	08012db0 	.word	0x08012db0
 8004a0c:	08022dd0 	.word	0x08022dd0
 8004a10:	20000010 	.word	0x20000010
 8004a14:	08016db8 	.word	0x08016db8
 8004a18:	0801edc8 	.word	0x0801edc8
 8004a1c:	0802ade0 	.word	0x0802ade0
 8004a20:	0800b7a0 	.word	0x0800b7a0
 8004a24:	08004c49 	.word	0x08004c49
 8004a28:	f104 0310 	add.w	r3, r4, #16
 8004a2c:	224c      	movs	r2, #76	; 0x4c
 8004a2e:	4619      	mov	r1, r3
 8004a30:	f005 ffb4 	bl	800a99c <memcpy>
 8004a34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a38:	f7fd f966 	bl	8001d08 <DM_Add_Element>

	//Previous time to compare to new time and decide to update
	char oldMin = '0';
 8004a3c:	2330      	movs	r3, #48	; 0x30
 8004a3e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7

	//The main loop
	while(1) {
		//Update the bitmaps with the new time
		//check if we need to update the whole lot, or just seconds
		if(oldMin != timeString[3]) {
 8004a42:	4b7b      	ldr	r3, [pc, #492]	; (8004c30 <MainMenuTask+0x5ec>)
 8004a44:	78db      	ldrb	r3, [r3, #3]
 8004a46:	f897 24e7 	ldrb.w	r2, [r7, #1255]	; 0x4e7
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	f000 80af 	beq.w	8004bae <MainMenuTask+0x56a>
			digit1.bitmap = Char_To_Bmp(timeString[0]);
 8004a50:	4b77      	ldr	r3, [pc, #476]	; (8004c30 <MainMenuTask+0x5ec>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 f909 	bl	8004c6c <Char_To_Bmp>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004a60:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8004a64:	621a      	str	r2, [r3, #32]
			digit2.bitmap = Char_To_Bmp(timeString[1]);
 8004a66:	4b72      	ldr	r3, [pc, #456]	; (8004c30 <MainMenuTask+0x5ec>)
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f8fe 	bl	8004c6c <Char_To_Bmp>
 8004a70:	4602      	mov	r2, r0
 8004a72:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004a76:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004a7a:	621a      	str	r2, [r3, #32]
			DM_Replace_Element(digit1Id, digit1);
 8004a7c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004a80:	f5a3 7400 	sub.w	r4, r3, #512	; 0x200
 8004a84:	4668      	mov	r0, sp
 8004a86:	f104 030c 	add.w	r3, r4, #12
 8004a8a:	2250      	movs	r2, #80	; 0x50
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f005 ff85 	bl	800a99c <memcpy>
 8004a92:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004a96:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 8004a9a:	f7fd f95b 	bl	8001d54 <DM_Replace_Element>
			DM_Replace_Element(colon1Id, colon1);
 8004a9e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004aa2:	f5a3 742e 	sub.w	r4, r3, #696	; 0x2b8
 8004aa6:	4668      	mov	r0, sp
 8004aa8:	f104 030c 	add.w	r3, r4, #12
 8004aac:	2250      	movs	r2, #80	; 0x50
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f005 ff74 	bl	800a99c <memcpy>
 8004ab4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004ab8:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 8004abc:	f7fd f94a 	bl	8001d54 <DM_Replace_Element>
			DM_Replace_Element(digit2Id, digit2);
 8004ac0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004ac4:	f5a3 7417 	sub.w	r4, r3, #604	; 0x25c
 8004ac8:	4668      	mov	r0, sp
 8004aca:	f104 030c 	add.w	r3, r4, #12
 8004ace:	2250      	movs	r2, #80	; 0x50
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f005 ff63 	bl	800a99c <memcpy>
 8004ad6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004ada:	f8d7 04c8 	ldr.w	r0, [r7, #1224]	; 0x4c8
 8004ade:	f7fd f939 	bl	8001d54 <DM_Replace_Element>

			digit3.bitmap = Char_To_Bmp(timeString[2]);
 8004ae2:	4b53      	ldr	r3, [pc, #332]	; (8004c30 <MainMenuTask+0x5ec>)
 8004ae4:	789b      	ldrb	r3, [r3, #2]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f8c0 	bl	8004c6c <Char_To_Bmp>
 8004aec:	4602      	mov	r2, r0
 8004aee:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004af2:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004af6:	621a      	str	r2, [r3, #32]
			digit4.bitmap = Char_To_Bmp(timeString[3]);
 8004af8:	4b4d      	ldr	r3, [pc, #308]	; (8004c30 <MainMenuTask+0x5ec>)
 8004afa:	78db      	ldrb	r3, [r3, #3]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 f8b5 	bl	8004c6c <Char_To_Bmp>
 8004b02:	4602      	mov	r2, r0
 8004b04:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004b08:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8004b0c:	621a      	str	r2, [r3, #32]
			DM_Replace_Element(digit3Id, digit3);
 8004b0e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004b12:	f5a3 7445 	sub.w	r4, r3, #788	; 0x314
 8004b16:	4668      	mov	r0, sp
 8004b18:	f104 030c 	add.w	r3, r4, #12
 8004b1c:	2250      	movs	r2, #80	; 0x50
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f005 ff3c 	bl	800a99c <memcpy>
 8004b24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004b28:	f8d7 04c4 	ldr.w	r0, [r7, #1220]	; 0x4c4
 8004b2c:	f7fd f912 	bl	8001d54 <DM_Replace_Element>
			DM_Replace_Element(colon2Id, colon2);
 8004b30:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004b34:	f5a3 7473 	sub.w	r4, r3, #972	; 0x3cc
 8004b38:	4668      	mov	r0, sp
 8004b3a:	f104 030c 	add.w	r3, r4, #12
 8004b3e:	2250      	movs	r2, #80	; 0x50
 8004b40:	4619      	mov	r1, r3
 8004b42:	f005 ff2b 	bl	800a99c <memcpy>
 8004b46:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004b4a:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	; 0x4c0
 8004b4e:	f7fd f901 	bl	8001d54 <DM_Replace_Element>
			DM_Replace_Element(digit4Id, digit4);
 8004b52:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004b56:	f5a3 745c 	sub.w	r4, r3, #880	; 0x370
 8004b5a:	4668      	mov	r0, sp
 8004b5c:	f104 030c 	add.w	r3, r4, #12
 8004b60:	2250      	movs	r2, #80	; 0x50
 8004b62:	4619      	mov	r1, r3
 8004b64:	f005 ff1a 	bl	800a99c <memcpy>
 8004b68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004b6c:	f8d7 04bc 	ldr.w	r0, [r7, #1212]	; 0x4bc
 8004b70:	f7fd f8f0 	bl	8001d54 <DM_Replace_Element>

			//Update the date string and register the text for update
			sprintf(fancyDateString, "%s %d / %d / %d", dayName[time.weekday], time.day, time.month, time.year);
 8004b74:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <MainMenuTask+0x5f0>)
 8004b76:	78db      	ldrb	r3, [r3, #3]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	4a2d      	ldr	r2, [pc, #180]	; (8004c38 <MainMenuTask+0x5f4>)
 8004b84:	441a      	add	r2, r3
 8004b86:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <MainMenuTask+0x5f0>)
 8004b88:	791b      	ldrb	r3, [r3, #4]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <MainMenuTask+0x5f0>)
 8004b8e:	795b      	ldrb	r3, [r3, #5]
 8004b90:	4619      	mov	r1, r3
 8004b92:	4b28      	ldr	r3, [pc, #160]	; (8004c34 <MainMenuTask+0x5f0>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	9100      	str	r1, [sp, #0]
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4927      	ldr	r1, [pc, #156]	; (8004c3c <MainMenuTask+0x5f8>)
 8004b9e:	4828      	ldr	r0, [pc, #160]	; (8004c40 <MainMenuTask+0x5fc>)
 8004ba0:	f006 f820 	bl	800abe4 <siprintf>
			DM_Refresh_Element(dateTextId);
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <MainMenuTask+0x600>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fd f897 	bl	8001cdc <DM_Refresh_Element>
		}
		//Update the seconds componetnts
		digit5.bitmap = Char_To_Bmp(timeString[4]);
 8004bae:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <MainMenuTask+0x5ec>)
 8004bb0:	791b      	ldrb	r3, [r3, #4]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f85a 	bl	8004c6c <Char_To_Bmp>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004bbe:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8004bc2:	621a      	str	r2, [r3, #32]
		digit6.bitmap = Char_To_Bmp(timeString[5]);
 8004bc4:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <MainMenuTask+0x5ec>)
 8004bc6:	795b      	ldrb	r3, [r3, #5]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f84f 	bl	8004c6c <Char_To_Bmp>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004bd4:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8004bd8:	621a      	str	r2, [r3, #32]
		DM_Replace_Element(digit5Id, digit5);
 8004bda:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004bde:	f5a3 6485 	sub.w	r4, r3, #1064	; 0x428
 8004be2:	4668      	mov	r0, sp
 8004be4:	f104 030c 	add.w	r3, r4, #12
 8004be8:	2250      	movs	r2, #80	; 0x50
 8004bea:	4619      	mov	r1, r3
 8004bec:	f005 fed6 	bl	800a99c <memcpy>
 8004bf0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004bf4:	f8d7 04b8 	ldr.w	r0, [r7, #1208]	; 0x4b8
 8004bf8:	f7fd f8ac 	bl	8001d54 <DM_Replace_Element>
		DM_Replace_Element(digit6Id, digit6);
 8004bfc:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004c00:	f2a3 4484 	subw	r4, r3, #1156	; 0x484
 8004c04:	4668      	mov	r0, sp
 8004c06:	f104 030c 	add.w	r3, r4, #12
 8004c0a:	2250      	movs	r2, #80	; 0x50
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f005 fec5 	bl	800a99c <memcpy>
 8004c12:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004c16:	f8d7 04b4 	ldr.w	r0, [r7, #1204]	; 0x4b4
 8004c1a:	f7fd f89b 	bl	8001d54 <DM_Replace_Element>

		//Update the old minutes flag for the next update
		oldMin = timeString[3];
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <MainMenuTask+0x5ec>)
 8004c20:	78db      	ldrb	r3, [r3, #3]
 8004c22:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7

		osDelay(1000);
 8004c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c2a:	f004 f9a7 	bl	8008f7c <osDelay>
		if(oldMin != timeString[3]) {
 8004c2e:	e708      	b.n	8004a42 <MainMenuTask+0x3fe>
 8004c30:	200040c4 	.word	0x200040c4
 8004c34:	200040b8 	.word	0x200040b8
 8004c38:	0800ed60 	.word	0x0800ed60
 8004c3c:	0800b790 	.word	0x0800b790
 8004c40:	20005294 	.word	0x20005294
 8004c44:	200052b4 	.word	0x200052b4

08004c48 <settingsScreen_onPress>:
}

/**
 * onPress callback for the settings screen button
 */
void settingsScreen_onPress(int id) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	xTaskNotify(changeScreenTaskHandle, SETTINGS, eSetValueWithOverwrite);
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <settingsScreen_onPress+0x20>)
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	2300      	movs	r3, #0
 8004c56:	2203      	movs	r2, #3
 8004c58:	2103      	movs	r1, #3
 8004c5a:	f005 f82d 	bl	8009cb8 <xTaskGenericNotify>
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	200040ac 	.word	0x200040ac

08004c6c <Char_To_Bmp>:
}

/**
 * Converts a char to a bitmap represnting that number.
 */
unsigned int* Char_To_Bmp(char c) {
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
	switch(c) {
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	3b30      	subs	r3, #48	; 0x30
 8004c7a:	2b09      	cmp	r3, #9
 8004c7c:	d82a      	bhi.n	8004cd4 <Char_To_Bmp+0x68>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <Char_To_Bmp+0x18>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb5 	.word	0x08004cb5
 8004c90:	08004cb9 	.word	0x08004cb9
 8004c94:	08004cbd 	.word	0x08004cbd
 8004c98:	08004cc1 	.word	0x08004cc1
 8004c9c:	08004cc5 	.word	0x08004cc5
 8004ca0:	08004cc9 	.word	0x08004cc9
 8004ca4:	08004ccd 	.word	0x08004ccd
 8004ca8:	08004cd1 	.word	0x08004cd1
	case '0':
		return num_0;
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <Char_To_Bmp+0x78>)
 8004cae:	e012      	b.n	8004cd6 <Char_To_Bmp+0x6a>
	case '1':
		return num_1;
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <Char_To_Bmp+0x7c>)
 8004cb2:	e010      	b.n	8004cd6 <Char_To_Bmp+0x6a>
	case '2':
		return num_2;
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <Char_To_Bmp+0x80>)
 8004cb6:	e00e      	b.n	8004cd6 <Char_To_Bmp+0x6a>
	case '3':
		return num_3;
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <Char_To_Bmp+0x84>)
 8004cba:	e00c      	b.n	8004cd6 <Char_To_Bmp+0x6a>
	case '4':
		return num_4;
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <Char_To_Bmp+0x88>)
 8004cbe:	e00a      	b.n	8004cd6 <Char_To_Bmp+0x6a>
	case '5':
		return num_5;
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <Char_To_Bmp+0x8c>)
 8004cc2:	e008      	b.n	8004cd6 <Char_To_Bmp+0x6a>
	case '6':
		return num_6;
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <Char_To_Bmp+0x90>)
 8004cc6:	e006      	b.n	8004cd6 <Char_To_Bmp+0x6a>
	case '7':
		return num_7;
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <Char_To_Bmp+0x94>)
 8004cca:	e004      	b.n	8004cd6 <Char_To_Bmp+0x6a>
	case '8':
		return num_8;
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <Char_To_Bmp+0x98>)
 8004cce:	e002      	b.n	8004cd6 <Char_To_Bmp+0x6a>
	case '9':
		return num_9;
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <Char_To_Bmp+0x9c>)
 8004cd2:	e000      	b.n	8004cd6 <Char_To_Bmp+0x6a>
	}

	return num_0;
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <Char_To_Bmp+0x78>)
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	0800eda8 	.word	0x0800eda8
 8004ce8:	08012db0 	.word	0x08012db0
 8004cec:	08016db8 	.word	0x08016db8
 8004cf0:	0801adc0 	.word	0x0801adc0
 8004cf4:	0801edc8 	.word	0x0801edc8
 8004cf8:	08022dd0 	.word	0x08022dd0
 8004cfc:	08026dd8 	.word	0x08026dd8
 8004d00:	0802ade0 	.word	0x0802ade0
 8004d04:	0802ede8 	.word	0x0802ede8
 8004d08:	08032df0 	.word	0x08032df0

08004d0c <SettingsTask>:
void changeTime_onPress(int id);

/**
 * Main task to display the settings screen.
 */
void SettingsTask(void const * args) {
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b0f3      	sub	sp, #460	; 0x1cc
 8004d10:	af14      	add	r7, sp, #80	; 0x50
 8004d12:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004d16:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d1a:	6018      	str	r0, [r3, #0]
	//Add some dummy display elements
	DM_Add_Element(DM_New_Title_Bar("Settings"));
 8004d1c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8004d20:	4934      	ldr	r1, [pc, #208]	; (8004df4 <SettingsTask+0xe8>)
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe f816 	bl	8002d54 <DM_New_Title_Bar>
 8004d28:	4668      	mov	r0, sp
 8004d2a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004d2e:	224c      	movs	r2, #76	; 0x4c
 8004d30:	4619      	mov	r1, r3
 8004d32:	f005 fe33 	bl	800a99c <memcpy>
 8004d36:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8004d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d3c:	f7fc ffe4 	bl	8001d08 <DM_Add_Element>

	//HOME
	struct DisplayElement okBtn = DM_New_Button(BTN_LEFT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 8004d40:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <SettingsTask+0xec>)
 8004d4a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004d4e:	210a      	movs	r1, #10
 8004d50:	f7fc fd0e 	bl	8001770 <DM_New_Button>
	okBtn.onPress = home_onPress;
 8004d54:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <SettingsTask+0xf0>)
 8004d56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	DM_Add_Element(okBtn);
 8004d5a:	4668      	mov	r0, sp
 8004d5c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004d60:	224c      	movs	r2, #76	; 0x4c
 8004d62:	4619      	mov	r1, r3
 8004d64:	f005 fe1a 	bl	800a99c <memcpy>
 8004d68:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d6e:	f7fc ffcb 	bl	8001d08 <DM_Add_Element>

	//Change time/date button
	struct DisplayElement changeTimeBtn = DM_New_Button(BTN_LEFT_X, 45, "Change Time/Date", ENABLED);
 8004d72:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004d76:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <SettingsTask+0xf4>)
 8004d80:	222d      	movs	r2, #45	; 0x2d
 8004d82:	210a      	movs	r1, #10
 8004d84:	f7fc fcf4 	bl	8001770 <DM_New_Button>
	changeTimeBtn.onPress = changeTime_onPress;
 8004d88:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004d8c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d90:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <SettingsTask+0xf8>)
 8004d92:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(changeTimeBtn);
 8004d94:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004d98:	f5a3 748a 	sub.w	r4, r3, #276	; 0x114
 8004d9c:	4668      	mov	r0, sp
 8004d9e:	f104 0310 	add.w	r3, r4, #16
 8004da2:	224c      	movs	r2, #76	; 0x4c
 8004da4:	4619      	mov	r1, r3
 8004da6:	f005 fdf9 	bl	800a99c <memcpy>
 8004daa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004dae:	f7fc ffab 	bl	8001d08 <DM_Add_Element>


	//Button for the device test
	struct DisplayElement button1 = DM_New_Button(BTN_LEFT_X, 100, "Test Device", ENABLED);
 8004db2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004db6:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <SettingsTask+0xfc>)
 8004dc0:	2264      	movs	r2, #100	; 0x64
 8004dc2:	210a      	movs	r1, #10
 8004dc4:	f7fc fcd4 	bl	8001770 <DM_New_Button>
	button1.onPress = deviceTest_onPress;
 8004dc8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004dcc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004dd0:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <SettingsTask+0x100>)
 8004dd2:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(button1);
 8004dd4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004dd8:	f5a3 74b8 	sub.w	r4, r3, #368	; 0x170
 8004ddc:	4668      	mov	r0, sp
 8004dde:	f104 0310 	add.w	r3, r4, #16
 8004de2:	224c      	movs	r2, #76	; 0x4c
 8004de4:	4619      	mov	r1, r3
 8004de6:	f005 fdd9 	bl	800a99c <memcpy>
 8004dea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004dee:	f7fc ff8b 	bl	8001d08 <DM_Add_Element>

	while(1);
 8004df2:	e7fe      	b.n	8004df2 <SettingsTask+0xe6>
 8004df4:	0800b7a8 	.word	0x0800b7a8
 8004df8:	0800b7b4 	.word	0x0800b7b4
 8004dfc:	08000c7d 	.word	0x08000c7d
 8004e00:	0800b7bc 	.word	0x0800b7bc
 8004e04:	08004e11 	.word	0x08004e11
 8004e08:	0800b7d0 	.word	0x0800b7d0
 8004e0c:	08004e35 	.word	0x08004e35

08004e10 <changeTime_onPress>:
}

/**
 * Goes to the change time/date screen
 */
void changeTime_onPress(int id) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	//Go to the change time/date screen
	xTaskNotify(changeScreenTaskHandle, CHANGE_TIME_DATE, eSetValueWithOverwrite);
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <changeTime_onPress+0x20>)
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2203      	movs	r2, #3
 8004e20:	2104      	movs	r1, #4
 8004e22:	f004 ff49 	bl	8009cb8 <xTaskGenericNotify>

	return;
 8004e26:	bf00      	nop
}
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	200040ac 	.word	0x200040ac

08004e34 <deviceTest_onPress>:


/**
 * Callback for the Test Device button
 */
void deviceTest_onPress(int id) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, DEVICE_TEST, eSetValueWithOverwrite);
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <deviceTest_onPress+0x20>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	2203      	movs	r2, #3
 8004e44:	2100      	movs	r1, #0
 8004e46:	f004 ff37 	bl	8009cb8 <xTaskGenericNotify>
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200040ac 	.word	0x200040ac

08004e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e5c:	f7fc fb74 	bl	8001548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e60:	480c      	ldr	r0, [pc, #48]	; (8004e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8004e62:	490d      	ldr	r1, [pc, #52]	; (8004e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e64:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <LoopForever+0xe>)
  movs r3, #0
 8004e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e68:	e002      	b.n	8004e70 <LoopCopyDataInit>

08004e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e6e:	3304      	adds	r3, #4

08004e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e74:	d3f9      	bcc.n	8004e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e78:	4c0a      	ldr	r4, [pc, #40]	; (8004ea4 <LoopForever+0x16>)
  movs r3, #0
 8004e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e7c:	e001      	b.n	8004e82 <LoopFillZerobss>

08004e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e80:	3204      	adds	r2, #4

08004e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e84:	d3fb      	bcc.n	8004e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e86:	f005 fd63 	bl	800a950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e8a:	f7fb ff23 	bl	8000cd4 <main>

08004e8e <LoopForever>:

LoopForever:
    b LoopForever
 8004e8e:	e7fe      	b.n	8004e8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004e90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e98:	20004088 	.word	0x20004088
  ldr r2, =_sidata
 8004e9c:	08036f9c 	.word	0x08036f9c
  ldr r2, =_sbss
 8004ea0:	20004088 	.word	0x20004088
  ldr r4, =_ebss
 8004ea4:	2000a240 	.word	0x2000a240

08004ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ea8:	e7fe      	b.n	8004ea8 <ADC1_2_IRQHandler>

08004eaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eb4:	2003      	movs	r0, #3
 8004eb6:	f000 f902 	bl	80050be <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004eba:	200f      	movs	r0, #15
 8004ebc:	f7fc fa6c 	bl	8001398 <HAL_InitTick>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	71fb      	strb	r3, [r7, #7]
 8004eca:	e001      	b.n	8004ed0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ecc:	f7fc f91e 	bl	800110c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <HAL_IncTick+0x20>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_IncTick+0x24>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4413      	add	r3, r2
 8004eec:	4a04      	ldr	r2, [pc, #16]	; (8004f00 <HAL_IncTick+0x24>)
 8004eee:	6013      	str	r3, [r2, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	2000401c 	.word	0x2000401c
 8004f00:	200052b8 	.word	0x200052b8

08004f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  return uwTick;
 8004f08:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <HAL_GetTick+0x14>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	200052b8 	.word	0x200052b8

08004f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f24:	f7ff ffee 	bl	8004f04 <HAL_GetTick>
 8004f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f34:	d005      	beq.n	8004f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <HAL_Delay+0x44>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f42:	bf00      	nop
 8004f44:	f7ff ffde 	bl	8004f04 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d8f7      	bhi.n	8004f44 <HAL_Delay+0x28>
  {
  }
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	2000401c 	.word	0x2000401c

08004f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f74:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f80:	4013      	ands	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f96:	4a04      	ldr	r2, [pc, #16]	; (8004fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	60d3      	str	r3, [r2, #12]
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fb0:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	0a1b      	lsrs	r3, r3, #8
 8004fb6:	f003 0307 	and.w	r3, r3, #7
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000ed00 	.word	0xe000ed00

08004fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	db0b      	blt.n	8004ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	f003 021f 	and.w	r2, r3, #31
 8004fe0:	4907      	ldr	r1, [pc, #28]	; (8005000 <__NVIC_EnableIRQ+0x38>)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	2001      	movs	r0, #1
 8004fea:	fa00 f202 	lsl.w	r2, r0, r2
 8004fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	e000e100 	.word	0xe000e100

08005004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	6039      	str	r1, [r7, #0]
 800500e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005014:	2b00      	cmp	r3, #0
 8005016:	db0a      	blt.n	800502e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	490c      	ldr	r1, [pc, #48]	; (8005050 <__NVIC_SetPriority+0x4c>)
 800501e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005022:	0112      	lsls	r2, r2, #4
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	440b      	add	r3, r1
 8005028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800502c:	e00a      	b.n	8005044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	4908      	ldr	r1, [pc, #32]	; (8005054 <__NVIC_SetPriority+0x50>)
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	3b04      	subs	r3, #4
 800503c:	0112      	lsls	r2, r2, #4
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	440b      	add	r3, r1
 8005042:	761a      	strb	r2, [r3, #24]
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	e000e100 	.word	0xe000e100
 8005054:	e000ed00 	.word	0xe000ed00

08005058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f1c3 0307 	rsb	r3, r3, #7
 8005072:	2b04      	cmp	r3, #4
 8005074:	bf28      	it	cs
 8005076:	2304      	movcs	r3, #4
 8005078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3304      	adds	r3, #4
 800507e:	2b06      	cmp	r3, #6
 8005080:	d902      	bls.n	8005088 <NVIC_EncodePriority+0x30>
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3b03      	subs	r3, #3
 8005086:	e000      	b.n	800508a <NVIC_EncodePriority+0x32>
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800508c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43da      	mvns	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	401a      	ands	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	fa01 f303 	lsl.w	r3, r1, r3
 80050aa:	43d9      	mvns	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b0:	4313      	orrs	r3, r2
         );
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3724      	adds	r7, #36	; 0x24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff ff4c 	bl	8004f64 <__NVIC_SetPriorityGrouping>
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050e6:	f7ff ff61 	bl	8004fac <__NVIC_GetPriorityGrouping>
 80050ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	6978      	ldr	r0, [r7, #20]
 80050f2:	f7ff ffb1 	bl	8005058 <NVIC_EncodePriority>
 80050f6:	4602      	mov	r2, r0
 80050f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ff80 	bl	8005004 <__NVIC_SetPriority>
}
 8005104:	bf00      	nop
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff ff54 	bl	8004fc8 <__NVIC_EnableIRQ>
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e054      	b.n	80051e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	7f5b      	ldrb	r3, [r3, #29]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d105      	bne.n	8005150 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fc f806 	bl	800115c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	791b      	ldrb	r3, [r3, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10c      	bne.n	8005178 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a22      	ldr	r2, [pc, #136]	; (80051ec <HAL_CRC_Init+0xc4>)
 8005164:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0218 	bic.w	r2, r2, #24
 8005174:	609a      	str	r2, [r3, #8]
 8005176:	e00c      	b.n	8005192 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6899      	ldr	r1, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	461a      	mov	r2, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f834 	bl	80051f0 <HAL_CRCEx_Polynomial_Set>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e028      	b.n	80051e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	795b      	ldrb	r3, [r3, #5]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d105      	bne.n	80051a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051a2:	611a      	str	r2, [r3, #16]
 80051a4:	e004      	b.n	80051b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6912      	ldr	r2, [r2, #16]
 80051ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699a      	ldr	r2, [r3, #24]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	04c11db7 	.word	0x04c11db7

080051f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005200:	231f      	movs	r3, #31
 8005202:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005204:	bf00      	nop
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1e5a      	subs	r2, r3, #1
 800520a:	613a      	str	r2, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <HAL_CRCEx_Polynomial_Set+0x34>
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b18      	cmp	r3, #24
 8005228:	d846      	bhi.n	80052b8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <HAL_CRCEx_Polynomial_Set+0x40>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	080052bf 	.word	0x080052bf
 8005234:	080052b9 	.word	0x080052b9
 8005238:	080052b9 	.word	0x080052b9
 800523c:	080052b9 	.word	0x080052b9
 8005240:	080052b9 	.word	0x080052b9
 8005244:	080052b9 	.word	0x080052b9
 8005248:	080052b9 	.word	0x080052b9
 800524c:	080052b9 	.word	0x080052b9
 8005250:	080052ad 	.word	0x080052ad
 8005254:	080052b9 	.word	0x080052b9
 8005258:	080052b9 	.word	0x080052b9
 800525c:	080052b9 	.word	0x080052b9
 8005260:	080052b9 	.word	0x080052b9
 8005264:	080052b9 	.word	0x080052b9
 8005268:	080052b9 	.word	0x080052b9
 800526c:	080052b9 	.word	0x080052b9
 8005270:	080052a1 	.word	0x080052a1
 8005274:	080052b9 	.word	0x080052b9
 8005278:	080052b9 	.word	0x080052b9
 800527c:	080052b9 	.word	0x080052b9
 8005280:	080052b9 	.word	0x080052b9
 8005284:	080052b9 	.word	0x080052b9
 8005288:	080052b9 	.word	0x080052b9
 800528c:	080052b9 	.word	0x080052b9
 8005290:	08005295 	.word	0x08005295
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b06      	cmp	r3, #6
 8005298:	d913      	bls.n	80052c2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800529e:	e010      	b.n	80052c2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b07      	cmp	r3, #7
 80052a4:	d90f      	bls.n	80052c6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80052aa:	e00c      	b.n	80052c6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	d90b      	bls.n	80052ca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80052b6:	e008      	b.n	80052ca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	75fb      	strb	r3, [r7, #23]
      break;
 80052bc:	e006      	b.n	80052cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052be:	bf00      	nop
 80052c0:	e004      	b.n	80052cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052c2:	bf00      	nop
 80052c4:	e002      	b.n	80052cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052c6:	bf00      	nop
 80052c8:	e000      	b.n	80052cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052ca:	bf00      	nop
  }
  if (status == HAL_OK)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f023 0118 	bic.w	r1, r3, #24
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800530a:	e17f      	b.n	800560c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	2101      	movs	r1, #1
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	fa01 f303 	lsl.w	r3, r1, r3
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8171 	beq.w	8005606 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d005      	beq.n	800533c <HAL_GPIO_Init+0x40>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d130      	bne.n	800539e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	2203      	movs	r2, #3
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	43db      	mvns	r3, r3
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4013      	ands	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005372:	2201      	movs	r2, #1
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	43db      	mvns	r3, r3
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4013      	ands	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	f003 0201 	and.w	r2, r3, #1
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d118      	bne.n	80053dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80053b0:	2201      	movs	r2, #1
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4013      	ands	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	08db      	lsrs	r3, r3, #3
 80053c6:	f003 0201 	and.w	r2, r3, #1
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d017      	beq.n	8005418 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	2203      	movs	r2, #3
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4013      	ands	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d123      	bne.n	800546c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	08da      	lsrs	r2, r3, #3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3208      	adds	r2, #8
 800542c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005430:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	220f      	movs	r2, #15
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4013      	ands	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	08da      	lsrs	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3208      	adds	r2, #8
 8005466:	6939      	ldr	r1, [r7, #16]
 8005468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	2203      	movs	r2, #3
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	43db      	mvns	r3, r3
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4013      	ands	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f003 0203 	and.w	r2, r3, #3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80ac 	beq.w	8005606 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ae:	4b5f      	ldr	r3, [pc, #380]	; (800562c <HAL_GPIO_Init+0x330>)
 80054b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b2:	4a5e      	ldr	r2, [pc, #376]	; (800562c <HAL_GPIO_Init+0x330>)
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	6613      	str	r3, [r2, #96]	; 0x60
 80054ba:	4b5c      	ldr	r3, [pc, #368]	; (800562c <HAL_GPIO_Init+0x330>)
 80054bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054c6:	4a5a      	ldr	r2, [pc, #360]	; (8005630 <HAL_GPIO_Init+0x334>)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	3302      	adds	r3, #2
 80054ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	220f      	movs	r2, #15
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43db      	mvns	r3, r3
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4013      	ands	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054f0:	d025      	beq.n	800553e <HAL_GPIO_Init+0x242>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a4f      	ldr	r2, [pc, #316]	; (8005634 <HAL_GPIO_Init+0x338>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01f      	beq.n	800553a <HAL_GPIO_Init+0x23e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a4e      	ldr	r2, [pc, #312]	; (8005638 <HAL_GPIO_Init+0x33c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d019      	beq.n	8005536 <HAL_GPIO_Init+0x23a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a4d      	ldr	r2, [pc, #308]	; (800563c <HAL_GPIO_Init+0x340>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <HAL_GPIO_Init+0x236>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a4c      	ldr	r2, [pc, #304]	; (8005640 <HAL_GPIO_Init+0x344>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00d      	beq.n	800552e <HAL_GPIO_Init+0x232>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a4b      	ldr	r2, [pc, #300]	; (8005644 <HAL_GPIO_Init+0x348>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <HAL_GPIO_Init+0x22e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a4a      	ldr	r2, [pc, #296]	; (8005648 <HAL_GPIO_Init+0x34c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d101      	bne.n	8005526 <HAL_GPIO_Init+0x22a>
 8005522:	2306      	movs	r3, #6
 8005524:	e00c      	b.n	8005540 <HAL_GPIO_Init+0x244>
 8005526:	2307      	movs	r3, #7
 8005528:	e00a      	b.n	8005540 <HAL_GPIO_Init+0x244>
 800552a:	2305      	movs	r3, #5
 800552c:	e008      	b.n	8005540 <HAL_GPIO_Init+0x244>
 800552e:	2304      	movs	r3, #4
 8005530:	e006      	b.n	8005540 <HAL_GPIO_Init+0x244>
 8005532:	2303      	movs	r3, #3
 8005534:	e004      	b.n	8005540 <HAL_GPIO_Init+0x244>
 8005536:	2302      	movs	r3, #2
 8005538:	e002      	b.n	8005540 <HAL_GPIO_Init+0x244>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_GPIO_Init+0x244>
 800553e:	2300      	movs	r3, #0
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	f002 0203 	and.w	r2, r2, #3
 8005546:	0092      	lsls	r2, r2, #2
 8005548:	4093      	lsls	r3, r2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005550:	4937      	ldr	r1, [pc, #220]	; (8005630 <HAL_GPIO_Init+0x334>)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	089b      	lsrs	r3, r3, #2
 8005556:	3302      	adds	r3, #2
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800555e:	4b3b      	ldr	r3, [pc, #236]	; (800564c <HAL_GPIO_Init+0x350>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	43db      	mvns	r3, r3
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4013      	ands	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005582:	4a32      	ldr	r2, [pc, #200]	; (800564c <HAL_GPIO_Init+0x350>)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005588:	4b30      	ldr	r3, [pc, #192]	; (800564c <HAL_GPIO_Init+0x350>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	43db      	mvns	r3, r3
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4013      	ands	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055ac:	4a27      	ldr	r2, [pc, #156]	; (800564c <HAL_GPIO_Init+0x350>)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80055b2:	4b26      	ldr	r3, [pc, #152]	; (800564c <HAL_GPIO_Init+0x350>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	43db      	mvns	r3, r3
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4013      	ands	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055d6:	4a1d      	ldr	r2, [pc, #116]	; (800564c <HAL_GPIO_Init+0x350>)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80055dc:	4b1b      	ldr	r3, [pc, #108]	; (800564c <HAL_GPIO_Init+0x350>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4013      	ands	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005600:	4a12      	ldr	r2, [pc, #72]	; (800564c <HAL_GPIO_Init+0x350>)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	3301      	adds	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	fa22 f303 	lsr.w	r3, r2, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f ae78 	bne.w	800530c <HAL_GPIO_Init+0x10>
  }
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40021000 	.word	0x40021000
 8005630:	40010000 	.word	0x40010000
 8005634:	48000400 	.word	0x48000400
 8005638:	48000800 	.word	0x48000800
 800563c:	48000c00 	.word	0x48000c00
 8005640:	48001000 	.word	0x48001000
 8005644:	48001400 	.word	0x48001400
 8005648:	48001800 	.word	0x48001800
 800564c:	40010400 	.word	0x40010400

08005650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	807b      	strh	r3, [r7, #2]
 800565c:	4613      	mov	r3, r2
 800565e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005660:	787b      	ldrb	r3, [r7, #1]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005666:	887a      	ldrh	r2, [r7, #2]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800566c:	e002      	b.n	8005674 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800566e:	887a      	ldrh	r2, [r7, #2]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800568a:	4b08      	ldr	r3, [pc, #32]	; (80056ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d006      	beq.n	80056a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005696:	4a05      	ldr	r2, [pc, #20]	; (80056ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005698:	88fb      	ldrh	r3, [r7, #6]
 800569a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f806 	bl	80056b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40010400 	.word	0x40010400

080056b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e081      	b.n	80057dc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fb fd55 	bl	800119c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2224      	movs	r2, #36	; 0x24
 80056f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0201 	bic.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005716:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005726:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d107      	bne.n	8005740 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800573c:	609a      	str	r2, [r3, #8]
 800573e:	e006      	b.n	800574e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800574c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d104      	bne.n	8005760 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800575e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800576e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005772:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005782:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69d9      	ldr	r1, [r3, #28]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0201 	orr.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	4608      	mov	r0, r1
 80057ee:	4611      	mov	r1, r2
 80057f0:	461a      	mov	r2, r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	817b      	strh	r3, [r7, #10]
 80057f6:	460b      	mov	r3, r1
 80057f8:	813b      	strh	r3, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b20      	cmp	r3, #32
 8005808:	f040 80f9 	bne.w	80059fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_I2C_Mem_Write+0x34>
 8005812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0ed      	b.n	8005a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_I2C_Mem_Write+0x4e>
 800582e:	2302      	movs	r3, #2
 8005830:	e0e6      	b.n	8005a00 <HAL_I2C_Mem_Write+0x21c>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800583a:	f7ff fb63 	bl	8004f04 <HAL_GetTick>
 800583e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	2319      	movs	r3, #25
 8005846:	2201      	movs	r2, #1
 8005848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fbcb 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0d1      	b.n	8005a00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2221      	movs	r2, #33	; 0x21
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2240      	movs	r2, #64	; 0x40
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a3a      	ldr	r2, [r7, #32]
 8005876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800587c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005884:	88f8      	ldrh	r0, [r7, #6]
 8005886:	893a      	ldrh	r2, [r7, #8]
 8005888:	8979      	ldrh	r1, [r7, #10]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	4603      	mov	r3, r0
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fadb 	bl	8005e50 <I2C_RequestMemoryWrite>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0a9      	b.n	8005a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2bff      	cmp	r3, #255	; 0xff
 80058b4:	d90e      	bls.n	80058d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	22ff      	movs	r2, #255	; 0xff
 80058ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	8979      	ldrh	r1, [r7, #10]
 80058c4:	2300      	movs	r3, #0
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fd33 	bl	8006338 <I2C_TransferConfig>
 80058d2:	e00f      	b.n	80058f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	8979      	ldrh	r1, [r7, #10]
 80058e6:	2300      	movs	r3, #0
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fd22 	bl	8006338 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 fbb5 	bl	8006068 <I2C_WaitOnTXISFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e07b      	b.n	8005a00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	781a      	ldrb	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d034      	beq.n	80059ac <HAL_I2C_Mem_Write+0x1c8>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d130      	bne.n	80059ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	2200      	movs	r2, #0
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fb47 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e04d      	b.n	8005a00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	2bff      	cmp	r3, #255	; 0xff
 800596c:	d90e      	bls.n	800598c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005978:	b2da      	uxtb	r2, r3
 800597a:	8979      	ldrh	r1, [r7, #10]
 800597c:	2300      	movs	r3, #0
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fcd7 	bl	8006338 <I2C_TransferConfig>
 800598a:	e00f      	b.n	80059ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599a:	b2da      	uxtb	r2, r3
 800599c:	8979      	ldrh	r1, [r7, #10]
 800599e:	2300      	movs	r3, #0
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fcc6 	bl	8006338 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d19e      	bne.n	80058f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fb94 	bl	80060e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e01a      	b.n	8005a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2220      	movs	r2, #32
 80059d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6859      	ldr	r1, [r3, #4]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <HAL_I2C_Mem_Write+0x224>)
 80059de:	400b      	ands	r3, r1
 80059e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e000      	b.n	8005a00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
  }
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	fe00e800 	.word	0xfe00e800

08005a0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	4608      	mov	r0, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	817b      	strh	r3, [r7, #10]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	813b      	strh	r3, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	f040 80fd 	bne.w	8005c2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_I2C_Mem_Read+0x34>
 8005a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0f1      	b.n	8005c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_I2C_Mem_Read+0x4e>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e0ea      	b.n	8005c30 <HAL_I2C_Mem_Read+0x224>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a62:	f7ff fa4f 	bl	8004f04 <HAL_GetTick>
 8005a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	2319      	movs	r3, #25
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fab7 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0d5      	b.n	8005c30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2222      	movs	r2, #34	; 0x22
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2240      	movs	r2, #64	; 0x40
 8005a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aac:	88f8      	ldrh	r0, [r7, #6]
 8005aae:	893a      	ldrh	r2, [r7, #8]
 8005ab0:	8979      	ldrh	r1, [r7, #10]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4603      	mov	r3, r0
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fa1b 	bl	8005ef8 <I2C_RequestMemoryRead>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0ad      	b.n	8005c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2bff      	cmp	r3, #255	; 0xff
 8005adc:	d90e      	bls.n	8005afc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	22ff      	movs	r2, #255	; 0xff
 8005ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	8979      	ldrh	r1, [r7, #10]
 8005aec:	4b52      	ldr	r3, [pc, #328]	; (8005c38 <HAL_I2C_Mem_Read+0x22c>)
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fc1f 	bl	8006338 <I2C_TransferConfig>
 8005afa:	e00f      	b.n	8005b1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	8979      	ldrh	r1, [r7, #10]
 8005b0e:	4b4a      	ldr	r3, [pc, #296]	; (8005c38 <HAL_I2C_Mem_Read+0x22c>)
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fc0e 	bl	8006338 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	2200      	movs	r2, #0
 8005b24:	2104      	movs	r1, #4
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fa5e 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e07c      	b.n	8005c30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d034      	beq.n	8005bdc <HAL_I2C_Mem_Read+0x1d0>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d130      	bne.n	8005bdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	2200      	movs	r2, #0
 8005b82:	2180      	movs	r1, #128	; 0x80
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fa2f 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e04d      	b.n	8005c30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2bff      	cmp	r3, #255	; 0xff
 8005b9c:	d90e      	bls.n	8005bbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	22ff      	movs	r2, #255	; 0xff
 8005ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	8979      	ldrh	r1, [r7, #10]
 8005bac:	2300      	movs	r3, #0
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fbbf 	bl	8006338 <I2C_TransferConfig>
 8005bba:	e00f      	b.n	8005bdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	8979      	ldrh	r1, [r7, #10]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 fbae 	bl	8006338 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d19a      	bne.n	8005b1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fa7c 	bl	80060e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e01a      	b.n	8005c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6859      	ldr	r1, [r3, #4]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <HAL_I2C_Mem_Read+0x230>)
 8005c0e:	400b      	ands	r3, r1
 8005c10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	e000      	b.n	8005c30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c2e:	2302      	movs	r3, #2
  }
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	80002400 	.word	0x80002400
 8005c3c:	fe00e800 	.word	0xfe00e800

08005c40 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	; 0x28
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	f040 80f1 	bne.w	8005e44 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c70:	d101      	bne.n	8005c76 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005c72:	2302      	movs	r3, #2
 8005c74:	e0e7      	b.n	8005e46 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_I2C_IsDeviceReady+0x44>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e0e0      	b.n	8005e46 <HAL_I2C_IsDeviceReady+0x206>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2224      	movs	r2, #36	; 0x24
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d107      	bne.n	8005cb2 <HAL_I2C_IsDeviceReady+0x72>
 8005ca2:	897b      	ldrh	r3, [r7, #10]
 8005ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cb0:	e004      	b.n	8005cbc <HAL_I2C_IsDeviceReady+0x7c>
 8005cb2:	897b      	ldrh	r3, [r7, #10]
 8005cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cb8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	6812      	ldr	r2, [r2, #0]
 8005cc0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005cc2:	f7ff f91f 	bl	8004f04 <HAL_GetTick>
 8005cc6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2301      	moveq	r3, #1
 8005cd8:	2300      	movne	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005cf4:	e034      	b.n	8005d60 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cfc:	d01a      	beq.n	8005d34 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005cfe:	f7ff f901 	bl	8004f04 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d302      	bcc.n	8005d14 <HAL_I2C_IsDeviceReady+0xd4>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10f      	bne.n	8005d34 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d20:	f043 0220 	orr.w	r2, r3, #32
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e088      	b.n	8005e46 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	bf0c      	ite	eq
 8005d42:	2301      	moveq	r3, #1
 8005d44:	2300      	movne	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	bf0c      	ite	eq
 8005d58:	2301      	moveq	r3, #1
 8005d5a:	2300      	movne	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005d60:	7ffb      	ldrb	r3, [r7, #31]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <HAL_I2C_IsDeviceReady+0x12c>
 8005d66:	7fbb      	ldrb	r3, [r7, #30]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0c4      	beq.n	8005cf6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d01a      	beq.n	8005db0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2200      	movs	r2, #0
 8005d82:	2120      	movs	r1, #32
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f92f 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e058      	b.n	8005e46 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e04a      	b.n	8005e46 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2200      	movs	r2, #0
 8005db8:	2120      	movs	r1, #32
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f914 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e03d      	b.n	8005e46 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2210      	movs	r2, #16
 8005dd0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d118      	bne.n	8005e14 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005df0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2120      	movs	r1, #32
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f8f3 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e01c      	b.n	8005e46 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2220      	movs	r2, #32
 8005e12:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3301      	adds	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	f63f af3b 	bhi.w	8005c9a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
  }
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	817b      	strh	r3, [r7, #10]
 8005e62:	460b      	mov	r3, r1
 8005e64:	813b      	strh	r3, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	8979      	ldrh	r1, [r7, #10]
 8005e70:	4b20      	ldr	r3, [pc, #128]	; (8005ef4 <I2C_RequestMemoryWrite+0xa4>)
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 fa5d 	bl	8006338 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	69b9      	ldr	r1, [r7, #24]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f8f0 	bl	8006068 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e02c      	b.n	8005eec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d105      	bne.n	8005ea4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e98:	893b      	ldrh	r3, [r7, #8]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28
 8005ea2:	e015      	b.n	8005ed0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ea4:	893b      	ldrh	r3, [r7, #8]
 8005ea6:	0a1b      	lsrs	r3, r3, #8
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	69b9      	ldr	r1, [r7, #24]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f8d6 	bl	8006068 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e012      	b.n	8005eec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ec6:	893b      	ldrh	r3, [r7, #8]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2180      	movs	r1, #128	; 0x80
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f884 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	80002000 	.word	0x80002000

08005ef8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	817b      	strh	r3, [r7, #10]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	813b      	strh	r3, [r7, #8]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	8979      	ldrh	r1, [r7, #10]
 8005f18:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <I2C_RequestMemoryRead+0xa4>)
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fa0a 	bl	8006338 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	69b9      	ldr	r1, [r7, #24]
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f89d 	bl	8006068 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e02c      	b.n	8005f92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f38:	88fb      	ldrh	r3, [r7, #6]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d105      	bne.n	8005f4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f3e:	893b      	ldrh	r3, [r7, #8]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28
 8005f48:	e015      	b.n	8005f76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f4a:	893b      	ldrh	r3, [r7, #8]
 8005f4c:	0a1b      	lsrs	r3, r3, #8
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	69b9      	ldr	r1, [r7, #24]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f883 	bl	8006068 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e012      	b.n	8005f92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f6c:	893b      	ldrh	r3, [r7, #8]
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2140      	movs	r1, #64	; 0x40
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f831 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	80002000 	.word	0x80002000

08005fa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d103      	bne.n	8005fbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d007      	beq.n	8005fdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	619a      	str	r2, [r3, #24]
  }
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ff8:	e022      	b.n	8006040 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006000:	d01e      	beq.n	8006040 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006002:	f7fe ff7f 	bl	8004f04 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d302      	bcc.n	8006018 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d113      	bne.n	8006040 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e00f      	b.n	8006060 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4013      	ands	r3, r2
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	429a      	cmp	r2, r3
 800604e:	bf0c      	ite	eq
 8006050:	2301      	moveq	r3, #1
 8006052:	2300      	movne	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	429a      	cmp	r2, r3
 800605c:	d0cd      	beq.n	8005ffa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006074:	e02c      	b.n	80060d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f870 	bl	8006160 <I2C_IsErrorOccurred>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e02a      	b.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006090:	d01e      	beq.n	80060d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006092:	f7fe ff37 	bl	8004f04 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d302      	bcc.n	80060a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d113      	bne.n	80060d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e007      	b.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d1cb      	bne.n	8006076 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060f4:	e028      	b.n	8006148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 f830 	bl	8006160 <I2C_IsErrorOccurred>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e026      	b.n	8006158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610a:	f7fe fefb 	bl	8004f04 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	429a      	cmp	r2, r3
 8006118:	d302      	bcc.n	8006120 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d113      	bne.n	8006148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006124:	f043 0220 	orr.w	r2, r3, #32
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e007      	b.n	8006158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b20      	cmp	r3, #32
 8006154:	d1cf      	bne.n	80060f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b00      	cmp	r3, #0
 800618a:	d075      	beq.n	8006278 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2210      	movs	r2, #16
 8006192:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006194:	e056      	b.n	8006244 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800619c:	d052      	beq.n	8006244 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800619e:	f7fe feb1 	bl	8004f04 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <I2C_IsErrorOccurred+0x54>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d147      	bne.n	8006244 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d6:	d12e      	bne.n	8006236 <I2C_IsErrorOccurred+0xd6>
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061de:	d02a      	beq.n	8006236 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80061e0:	7cfb      	ldrb	r3, [r7, #19]
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d027      	beq.n	8006236 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80061f6:	f7fe fe85 	bl	8004f04 <HAL_GetTick>
 80061fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061fc:	e01b      	b.n	8006236 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061fe:	f7fe fe81 	bl	8004f04 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b19      	cmp	r3, #25
 800620a:	d914      	bls.n	8006236 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006210:	f043 0220 	orr.w	r2, r3, #32
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b20      	cmp	r3, #32
 8006242:	d1dc      	bne.n	80061fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b20      	cmp	r3, #32
 8006250:	d003      	beq.n	800625a <I2C_IsErrorOccurred+0xfa>
 8006252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006256:	2b00      	cmp	r3, #0
 8006258:	d09d      	beq.n	8006196 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800625a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2220      	movs	r2, #32
 8006268:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	f043 0304 	orr.w	r3, r3, #4
 8006270:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	f043 0301 	orr.w	r3, r3, #1
 8006290:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800629a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	f043 0308 	orr.w	r3, r3, #8
 80062b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	f043 0302 	orr.w	r3, r3, #2
 80062d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80062e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01c      	beq.n	8006328 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff fe56 	bl	8005fa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6859      	ldr	r1, [r3, #4]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <I2C_IsErrorOccurred+0x1d4>)
 8006300:	400b      	ands	r3, r1
 8006302:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	431a      	orrs	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800632c:	4618      	mov	r0, r3
 800632e:	3728      	adds	r7, #40	; 0x28
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	fe00e800 	.word	0xfe00e800

08006338 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	817b      	strh	r3, [r7, #10]
 8006346:	4613      	mov	r3, r2
 8006348:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006350:	7a7b      	ldrb	r3, [r7, #9]
 8006352:	041b      	lsls	r3, r3, #16
 8006354:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006358:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	4313      	orrs	r3, r2
 8006362:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006366:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	0d5b      	lsrs	r3, r3, #21
 8006372:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <I2C_TransferConfig+0x60>)
 8006378:	430b      	orrs	r3, r1
 800637a:	43db      	mvns	r3, r3
 800637c:	ea02 0103 	and.w	r1, r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	03ff63ff 	.word	0x03ff63ff

0800639c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d138      	bne.n	8006424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063bc:	2302      	movs	r3, #2
 80063be:	e032      	b.n	8006426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2224      	movs	r2, #36	; 0x24
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6819      	ldr	r1, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	e000      	b.n	8006426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006424:	2302      	movs	r3, #2
  }
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b20      	cmp	r3, #32
 8006446:	d139      	bne.n	80064bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006452:	2302      	movs	r3, #2
 8006454:	e033      	b.n	80064be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2224      	movs	r2, #36	; 0x24
 8006462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006484:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80064d8:	4618      	mov	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40007000 	.word	0x40007000

080064e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f6:	d130      	bne.n	800655a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80064f8:	4b23      	ldr	r3, [pc, #140]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d038      	beq.n	8006578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006506:	4b20      	ldr	r3, [pc, #128]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800650e:	4a1e      	ldr	r2, [pc, #120]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006514:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006516:	4b1d      	ldr	r3, [pc, #116]	; (800658c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2232      	movs	r2, #50	; 0x32
 800651c:	fb02 f303 	mul.w	r3, r2, r3
 8006520:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	0c9b      	lsrs	r3, r3, #18
 8006528:	3301      	adds	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800652c:	e002      	b.n	8006534 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3b01      	subs	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006534:	4b14      	ldr	r3, [pc, #80]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006540:	d102      	bne.n	8006548 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f2      	bne.n	800652e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006548:	4b0f      	ldr	r3, [pc, #60]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006554:	d110      	bne.n	8006578 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e00f      	b.n	800657a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006566:	d007      	beq.n	8006578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006570:	4a05      	ldr	r2, [pc, #20]	; (8006588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006576:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40007000 	.word	0x40007000
 800658c:	20000000 	.word	0x20000000
 8006590:	431bde83 	.word	0x431bde83

08006594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e3ca      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065a6:	4b97      	ldr	r3, [pc, #604]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 030c 	and.w	r3, r3, #12
 80065ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065b0:	4b94      	ldr	r3, [pc, #592]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f003 0303 	and.w	r3, r3, #3
 80065b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80e4 	beq.w	8006790 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d007      	beq.n	80065de <HAL_RCC_OscConfig+0x4a>
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	f040 808b 	bne.w	80066ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	f040 8087 	bne.w	80066ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065de:	4b89      	ldr	r3, [pc, #548]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <HAL_RCC_OscConfig+0x62>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e3a2      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1a      	ldr	r2, [r3, #32]
 80065fa:	4b82      	ldr	r3, [pc, #520]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d004      	beq.n	8006610 <HAL_RCC_OscConfig+0x7c>
 8006606:	4b7f      	ldr	r3, [pc, #508]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800660e:	e005      	b.n	800661c <HAL_RCC_OscConfig+0x88>
 8006610:	4b7c      	ldr	r3, [pc, #496]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006616:	091b      	lsrs	r3, r3, #4
 8006618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800661c:	4293      	cmp	r3, r2
 800661e:	d223      	bcs.n	8006668 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fd87 	bl	8007138 <RCC_SetFlashLatencyFromMSIRange>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e383      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006634:	4b73      	ldr	r3, [pc, #460]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a72      	ldr	r2, [pc, #456]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 800663a:	f043 0308 	orr.w	r3, r3, #8
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	4b70      	ldr	r3, [pc, #448]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	496d      	ldr	r1, [pc, #436]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006652:	4b6c      	ldr	r3, [pc, #432]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	4968      	ldr	r1, [pc, #416]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006662:	4313      	orrs	r3, r2
 8006664:	604b      	str	r3, [r1, #4]
 8006666:	e025      	b.n	80066b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006668:	4b66      	ldr	r3, [pc, #408]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a65      	ldr	r2, [pc, #404]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 800666e:	f043 0308 	orr.w	r3, r3, #8
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	4b63      	ldr	r3, [pc, #396]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	4960      	ldr	r1, [pc, #384]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006682:	4313      	orrs	r3, r2
 8006684:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006686:	4b5f      	ldr	r3, [pc, #380]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	495b      	ldr	r1, [pc, #364]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006696:	4313      	orrs	r3, r2
 8006698:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d109      	bne.n	80066b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fd47 	bl	8007138 <RCC_SetFlashLatencyFromMSIRange>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e343      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066b4:	f000 fc4a 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 80066b8:	4602      	mov	r2, r0
 80066ba:	4b52      	ldr	r3, [pc, #328]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	091b      	lsrs	r3, r3, #4
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	4950      	ldr	r1, [pc, #320]	; (8006808 <HAL_RCC_OscConfig+0x274>)
 80066c6:	5ccb      	ldrb	r3, [r1, r3]
 80066c8:	f003 031f 	and.w	r3, r3, #31
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
 80066d0:	4a4e      	ldr	r2, [pc, #312]	; (800680c <HAL_RCC_OscConfig+0x278>)
 80066d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80066d4:	4b4e      	ldr	r3, [pc, #312]	; (8006810 <HAL_RCC_OscConfig+0x27c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fa fe5d 	bl	8001398 <HAL_InitTick>
 80066de:	4603      	mov	r3, r0
 80066e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d052      	beq.n	800678e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	e327      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d032      	beq.n	800675a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80066f4:	4b43      	ldr	r3, [pc, #268]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a42      	ldr	r2, [pc, #264]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006700:	f7fe fc00 	bl	8004f04 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006708:	f7fe fbfc 	bl	8004f04 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e310      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800671a:	4b3a      	ldr	r3, [pc, #232]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006726:	4b37      	ldr	r3, [pc, #220]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a36      	ldr	r2, [pc, #216]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 800672c:	f043 0308 	orr.w	r3, r3, #8
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	4b34      	ldr	r3, [pc, #208]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	4931      	ldr	r1, [pc, #196]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006740:	4313      	orrs	r3, r2
 8006742:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006744:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	492c      	ldr	r1, [pc, #176]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
 8006758:	e01a      	b.n	8006790 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800675a:	4b2a      	ldr	r3, [pc, #168]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a29      	ldr	r2, [pc, #164]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006766:	f7fe fbcd 	bl	8004f04 <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800676e:	f7fe fbc9 	bl	8004f04 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e2dd      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006780:	4b20      	ldr	r3, [pc, #128]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f0      	bne.n	800676e <HAL_RCC_OscConfig+0x1da>
 800678c:	e000      	b.n	8006790 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800678e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d074      	beq.n	8006886 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b08      	cmp	r3, #8
 80067a0:	d005      	beq.n	80067ae <HAL_RCC_OscConfig+0x21a>
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b0c      	cmp	r3, #12
 80067a6:	d10e      	bne.n	80067c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d10b      	bne.n	80067c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ae:	4b15      	ldr	r3, [pc, #84]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d064      	beq.n	8006884 <HAL_RCC_OscConfig+0x2f0>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d160      	bne.n	8006884 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e2ba      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ce:	d106      	bne.n	80067de <HAL_RCC_OscConfig+0x24a>
 80067d0:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a0b      	ldr	r2, [pc, #44]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80067d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	e026      	b.n	800682c <HAL_RCC_OscConfig+0x298>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067e6:	d115      	bne.n	8006814 <HAL_RCC_OscConfig+0x280>
 80067e8:	4b06      	ldr	r3, [pc, #24]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a05      	ldr	r2, [pc, #20]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80067ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	4b03      	ldr	r3, [pc, #12]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a02      	ldr	r2, [pc, #8]	; (8006804 <HAL_RCC_OscConfig+0x270>)
 80067fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	e014      	b.n	800682c <HAL_RCC_OscConfig+0x298>
 8006802:	bf00      	nop
 8006804:	40021000 	.word	0x40021000
 8006808:	0800b7e4 	.word	0x0800b7e4
 800680c:	20000000 	.word	0x20000000
 8006810:	20004018 	.word	0x20004018
 8006814:	4ba0      	ldr	r3, [pc, #640]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a9f      	ldr	r2, [pc, #636]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 800681a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	4b9d      	ldr	r3, [pc, #628]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a9c      	ldr	r2, [pc, #624]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800682a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d013      	beq.n	800685c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006834:	f7fe fb66 	bl	8004f04 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800683c:	f7fe fb62 	bl	8004f04 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b64      	cmp	r3, #100	; 0x64
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e276      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800684e:	4b92      	ldr	r3, [pc, #584]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0f0      	beq.n	800683c <HAL_RCC_OscConfig+0x2a8>
 800685a:	e014      	b.n	8006886 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685c:	f7fe fb52 	bl	8004f04 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006864:	f7fe fb4e 	bl	8004f04 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b64      	cmp	r3, #100	; 0x64
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e262      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006876:	4b88      	ldr	r3, [pc, #544]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x2d0>
 8006882:	e000      	b.n	8006886 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d060      	beq.n	8006954 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b04      	cmp	r3, #4
 8006896:	d005      	beq.n	80068a4 <HAL_RCC_OscConfig+0x310>
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b0c      	cmp	r3, #12
 800689c:	d119      	bne.n	80068d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d116      	bne.n	80068d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068a4:	4b7c      	ldr	r3, [pc, #496]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_RCC_OscConfig+0x328>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e23f      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068bc:	4b76      	ldr	r3, [pc, #472]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	061b      	lsls	r3, r3, #24
 80068ca:	4973      	ldr	r1, [pc, #460]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068d0:	e040      	b.n	8006954 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d023      	beq.n	8006922 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068da:	4b6f      	ldr	r3, [pc, #444]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a6e      	ldr	r2, [pc, #440]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80068e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e6:	f7fe fb0d 	bl	8004f04 <HAL_GetTick>
 80068ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068ec:	e008      	b.n	8006900 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068ee:	f7fe fb09 	bl	8004f04 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d901      	bls.n	8006900 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e21d      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006900:	4b65      	ldr	r3, [pc, #404]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0f0      	beq.n	80068ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800690c:	4b62      	ldr	r3, [pc, #392]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	061b      	lsls	r3, r3, #24
 800691a:	495f      	ldr	r1, [pc, #380]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 800691c:	4313      	orrs	r3, r2
 800691e:	604b      	str	r3, [r1, #4]
 8006920:	e018      	b.n	8006954 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006922:	4b5d      	ldr	r3, [pc, #372]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a5c      	ldr	r2, [pc, #368]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800692c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692e:	f7fe fae9 	bl	8004f04 <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006934:	e008      	b.n	8006948 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006936:	f7fe fae5 	bl	8004f04 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e1f9      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006948:	4b53      	ldr	r3, [pc, #332]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f0      	bne.n	8006936 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0308 	and.w	r3, r3, #8
 800695c:	2b00      	cmp	r3, #0
 800695e:	d03c      	beq.n	80069da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01c      	beq.n	80069a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006968:	4b4b      	ldr	r3, [pc, #300]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 800696a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800696e:	4a4a      	ldr	r2, [pc, #296]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006970:	f043 0301 	orr.w	r3, r3, #1
 8006974:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006978:	f7fe fac4 	bl	8004f04 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006980:	f7fe fac0 	bl	8004f04 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e1d4      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006992:	4b41      	ldr	r3, [pc, #260]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0ef      	beq.n	8006980 <HAL_RCC_OscConfig+0x3ec>
 80069a0:	e01b      	b.n	80069da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069a2:	4b3d      	ldr	r3, [pc, #244]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80069a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069a8:	4a3b      	ldr	r2, [pc, #236]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b2:	f7fe faa7 	bl	8004f04 <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ba:	f7fe faa3 	bl	8004f04 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e1b7      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069cc:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80069ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1ef      	bne.n	80069ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80a6 	beq.w	8006b34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e8:	2300      	movs	r3, #0
 80069ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80069ec:	4b2a      	ldr	r3, [pc, #168]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80069ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10d      	bne.n	8006a14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069f8:	4b27      	ldr	r3, [pc, #156]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80069fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fc:	4a26      	ldr	r2, [pc, #152]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 80069fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a02:	6593      	str	r3, [r2, #88]	; 0x58
 8006a04:	4b24      	ldr	r3, [pc, #144]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	60bb      	str	r3, [r7, #8]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a10:	2301      	movs	r3, #1
 8006a12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a14:	4b21      	ldr	r3, [pc, #132]	; (8006a9c <HAL_RCC_OscConfig+0x508>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d118      	bne.n	8006a52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a20:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <HAL_RCC_OscConfig+0x508>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1d      	ldr	r2, [pc, #116]	; (8006a9c <HAL_RCC_OscConfig+0x508>)
 8006a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a2c:	f7fe fa6a 	bl	8004f04 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a34:	f7fe fa66 	bl	8004f04 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e17a      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a46:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <HAL_RCC_OscConfig+0x508>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d108      	bne.n	8006a6c <HAL_RCC_OscConfig+0x4d8>
 8006a5a:	4b0f      	ldr	r3, [pc, #60]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a60:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006a62:	f043 0301 	orr.w	r3, r3, #1
 8006a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a6a:	e029      	b.n	8006ac0 <HAL_RCC_OscConfig+0x52c>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b05      	cmp	r3, #5
 8006a72:	d115      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x50c>
 8006a74:	4b08      	ldr	r3, [pc, #32]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	4a07      	ldr	r2, [pc, #28]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006a7c:	f043 0304 	orr.w	r3, r3, #4
 8006a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a84:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8a:	4a03      	ldr	r2, [pc, #12]	; (8006a98 <HAL_RCC_OscConfig+0x504>)
 8006a8c:	f043 0301 	orr.w	r3, r3, #1
 8006a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a94:	e014      	b.n	8006ac0 <HAL_RCC_OscConfig+0x52c>
 8006a96:	bf00      	nop
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	40007000 	.word	0x40007000
 8006aa0:	4b9c      	ldr	r3, [pc, #624]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa6:	4a9b      	ldr	r2, [pc, #620]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ab0:	4b98      	ldr	r3, [pc, #608]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab6:	4a97      	ldr	r2, [pc, #604]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006ab8:	f023 0304 	bic.w	r3, r3, #4
 8006abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d016      	beq.n	8006af6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac8:	f7fe fa1c 	bl	8004f04 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ace:	e00a      	b.n	8006ae6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad0:	f7fe fa18 	bl	8004f04 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e12a      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ae6:	4b8b      	ldr	r3, [pc, #556]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0ed      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x53c>
 8006af4:	e015      	b.n	8006b22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af6:	f7fe fa05 	bl	8004f04 <HAL_GetTick>
 8006afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006afc:	e00a      	b.n	8006b14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afe:	f7fe fa01 	bl	8004f04 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e113      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b14:	4b7f      	ldr	r3, [pc, #508]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1ed      	bne.n	8006afe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b22:	7ffb      	ldrb	r3, [r7, #31]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d105      	bne.n	8006b34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b28:	4b7a      	ldr	r3, [pc, #488]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2c:	4a79      	ldr	r2, [pc, #484]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80fe 	beq.w	8006d3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	f040 80d0 	bne.w	8006ce8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006b48:	4b72      	ldr	r3, [pc, #456]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f003 0203 	and.w	r2, r3, #3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d130      	bne.n	8006bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	3b01      	subs	r3, #1
 8006b68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d127      	bne.n	8006bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d11f      	bne.n	8006bbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b88:	2a07      	cmp	r2, #7
 8006b8a:	bf14      	ite	ne
 8006b8c:	2201      	movne	r2, #1
 8006b8e:	2200      	moveq	r2, #0
 8006b90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d113      	bne.n	8006bbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba0:	085b      	lsrs	r3, r3, #1
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d109      	bne.n	8006bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d06e      	beq.n	8006c9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b0c      	cmp	r3, #12
 8006bc2:	d069      	beq.n	8006c98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006bc4:	4b53      	ldr	r3, [pc, #332]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d105      	bne.n	8006bdc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006bd0:	4b50      	ldr	r3, [pc, #320]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e0ad      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006be0:	4b4c      	ldr	r3, [pc, #304]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a4b      	ldr	r2, [pc, #300]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bec:	f7fe f98a 	bl	8004f04 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fe f986 	bl	8004f04 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e09a      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c06:	4b43      	ldr	r3, [pc, #268]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f0      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c12:	4b40      	ldr	r3, [pc, #256]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	4b40      	ldr	r3, [pc, #256]	; (8006d18 <HAL_RCC_OscConfig+0x784>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c22:	3a01      	subs	r2, #1
 8006c24:	0112      	lsls	r2, r2, #4
 8006c26:	4311      	orrs	r1, r2
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c2c:	0212      	lsls	r2, r2, #8
 8006c2e:	4311      	orrs	r1, r2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c34:	0852      	lsrs	r2, r2, #1
 8006c36:	3a01      	subs	r2, #1
 8006c38:	0552      	lsls	r2, r2, #21
 8006c3a:	4311      	orrs	r1, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006c40:	0852      	lsrs	r2, r2, #1
 8006c42:	3a01      	subs	r2, #1
 8006c44:	0652      	lsls	r2, r2, #25
 8006c46:	4311      	orrs	r1, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c4c:	0912      	lsrs	r2, r2, #4
 8006c4e:	0452      	lsls	r2, r2, #17
 8006c50:	430a      	orrs	r2, r1
 8006c52:	4930      	ldr	r1, [pc, #192]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006c58:	4b2e      	ldr	r3, [pc, #184]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a2d      	ldr	r2, [pc, #180]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c64:	4b2b      	ldr	r3, [pc, #172]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	4a2a      	ldr	r2, [pc, #168]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c70:	f7fe f948 	bl	8004f04 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c78:	f7fe f944 	bl	8004f04 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e058      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c96:	e050      	b.n	8006d3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e04f      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d148      	bne.n	8006d3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cb4:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006cc0:	f7fe f920 	bl	8004f04 <HAL_GetTick>
 8006cc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc8:	f7fe f91c 	bl	8004f04 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e030      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cda:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0f0      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x734>
 8006ce6:	e028      	b.n	8006d3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b0c      	cmp	r3, #12
 8006cec:	d023      	beq.n	8006d36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a08      	ldr	r2, [pc, #32]	; (8006d14 <HAL_RCC_OscConfig+0x780>)
 8006cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfa:	f7fe f903 	bl	8004f04 <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d00:	e00c      	b.n	8006d1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d02:	f7fe f8ff 	bl	8004f04 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d905      	bls.n	8006d1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e013      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
 8006d14:	40021000 	.word	0x40021000
 8006d18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d1c:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <HAL_RCC_OscConfig+0x7b0>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1ec      	bne.n	8006d02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006d28:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <HAL_RCC_OscConfig+0x7b0>)
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	4905      	ldr	r1, [pc, #20]	; (8006d44 <HAL_RCC_OscConfig+0x7b0>)
 8006d2e:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <HAL_RCC_OscConfig+0x7b4>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	60cb      	str	r3, [r1, #12]
 8006d34:	e001      	b.n	8006d3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40021000 	.word	0x40021000
 8006d48:	feeefffc 	.word	0xfeeefffc

08006d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e0e7      	b.n	8006f30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d60:	4b75      	ldr	r3, [pc, #468]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d910      	bls.n	8006d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6e:	4b72      	ldr	r3, [pc, #456]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f023 0207 	bic.w	r2, r3, #7
 8006d76:	4970      	ldr	r1, [pc, #448]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7e:	4b6e      	ldr	r3, [pc, #440]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0cf      	b.n	8006f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	4b66      	ldr	r3, [pc, #408]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d908      	bls.n	8006dbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dac:	4b63      	ldr	r3, [pc, #396]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	4960      	ldr	r1, [pc, #384]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d04c      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d107      	bne.n	8006de2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dd2:	4b5a      	ldr	r3, [pc, #360]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d121      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e0a6      	b.n	8006f30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d107      	bne.n	8006dfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dea:	4b54      	ldr	r3, [pc, #336]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d115      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e09a      	b.n	8006f30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d107      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e02:	4b4e      	ldr	r3, [pc, #312]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e08e      	b.n	8006f30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e12:	4b4a      	ldr	r3, [pc, #296]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e086      	b.n	8006f30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e22:	4b46      	ldr	r3, [pc, #280]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f023 0203 	bic.w	r2, r3, #3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	4943      	ldr	r1, [pc, #268]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e34:	f7fe f866 	bl	8004f04 <HAL_GetTick>
 8006e38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e3a:	e00a      	b.n	8006e52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e3c:	f7fe f862 	bl	8004f04 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e06e      	b.n	8006f30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e52:	4b3a      	ldr	r3, [pc, #232]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 020c 	and.w	r2, r3, #12
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d1eb      	bne.n	8006e3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d010      	beq.n	8006e92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	4b31      	ldr	r3, [pc, #196]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d208      	bcs.n	8006e92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e80:	4b2e      	ldr	r3, [pc, #184]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	492b      	ldr	r1, [pc, #172]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e92:	4b29      	ldr	r3, [pc, #164]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d210      	bcs.n	8006ec2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea0:	4b25      	ldr	r3, [pc, #148]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f023 0207 	bic.w	r2, r3, #7
 8006ea8:	4923      	ldr	r1, [pc, #140]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb0:	4b21      	ldr	r3, [pc, #132]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d001      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e036      	b.n	8006f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d008      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ece:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	4918      	ldr	r1, [pc, #96]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d009      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eec:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	4910      	ldr	r1, [pc, #64]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f00:	f000 f824 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 8006f04:	4602      	mov	r2, r0
 8006f06:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	490b      	ldr	r1, [pc, #44]	; (8006f40 <HAL_RCC_ClockConfig+0x1f4>)
 8006f12:	5ccb      	ldrb	r3, [r1, r3]
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1c:	4a09      	ldr	r2, [pc, #36]	; (8006f44 <HAL_RCC_ClockConfig+0x1f8>)
 8006f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f20:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <HAL_RCC_ClockConfig+0x1fc>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fa fa37 	bl	8001398 <HAL_InitTick>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40022000 	.word	0x40022000
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	0800b7e4 	.word	0x0800b7e4
 8006f44:	20000000 	.word	0x20000000
 8006f48:	20004018 	.word	0x20004018

08006f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b089      	sub	sp, #36	; 0x24
 8006f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61fb      	str	r3, [r7, #28]
 8006f56:	2300      	movs	r3, #0
 8006f58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f5a:	4b3e      	ldr	r3, [pc, #248]	; (8007054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 030c 	and.w	r3, r3, #12
 8006f62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f64:	4b3b      	ldr	r3, [pc, #236]	; (8007054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <HAL_RCC_GetSysClockFreq+0x34>
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	2b0c      	cmp	r3, #12
 8006f78:	d121      	bne.n	8006fbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d11e      	bne.n	8006fbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006f80:	4b34      	ldr	r3, [pc, #208]	; (8007054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0308 	and.w	r3, r3, #8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006f8c:	4b31      	ldr	r3, [pc, #196]	; (8007054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	e005      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006f9c:	4b2d      	ldr	r3, [pc, #180]	; (8007054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	091b      	lsrs	r3, r3, #4
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006fa8:	4a2b      	ldr	r2, [pc, #172]	; (8007058 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10d      	bne.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fbc:	e00a      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d102      	bne.n	8006fca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006fc4:	4b25      	ldr	r3, [pc, #148]	; (800705c <HAL_RCC_GetSysClockFreq+0x110>)
 8006fc6:	61bb      	str	r3, [r7, #24]
 8006fc8:	e004      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d101      	bne.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fd0:	4b23      	ldr	r3, [pc, #140]	; (8007060 <HAL_RCC_GetSysClockFreq+0x114>)
 8006fd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2b0c      	cmp	r3, #12
 8006fd8:	d134      	bne.n	8007044 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fda:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d003      	beq.n	8006ff2 <HAL_RCC_GetSysClockFreq+0xa6>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d003      	beq.n	8006ff8 <HAL_RCC_GetSysClockFreq+0xac>
 8006ff0:	e005      	b.n	8006ffe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ff2:	4b1a      	ldr	r3, [pc, #104]	; (800705c <HAL_RCC_GetSysClockFreq+0x110>)
 8006ff4:	617b      	str	r3, [r7, #20]
      break;
 8006ff6:	e005      	b.n	8007004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006ff8:	4b19      	ldr	r3, [pc, #100]	; (8007060 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ffa:	617b      	str	r3, [r7, #20]
      break;
 8006ffc:	e002      	b.n	8007004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	617b      	str	r3, [r7, #20]
      break;
 8007002:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007004:	4b13      	ldr	r3, [pc, #76]	; (8007054 <HAL_RCC_GetSysClockFreq+0x108>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	091b      	lsrs	r3, r3, #4
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	3301      	adds	r3, #1
 8007010:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007012:	4b10      	ldr	r3, [pc, #64]	; (8007054 <HAL_RCC_GetSysClockFreq+0x108>)
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	0a1b      	lsrs	r3, r3, #8
 8007018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	fb03 f202 	mul.w	r2, r3, r2
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800702a:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <HAL_RCC_GetSysClockFreq+0x108>)
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	0e5b      	lsrs	r3, r3, #25
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	3301      	adds	r3, #1
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007042:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007044:	69bb      	ldr	r3, [r7, #24]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3724      	adds	r7, #36	; 0x24
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40021000 	.word	0x40021000
 8007058:	0800b7fc 	.word	0x0800b7fc
 800705c:	00f42400 	.word	0x00f42400
 8007060:	007a1200 	.word	0x007a1200

08007064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007068:	4b03      	ldr	r3, [pc, #12]	; (8007078 <HAL_RCC_GetHCLKFreq+0x14>)
 800706a:	681b      	ldr	r3, [r3, #0]
}
 800706c:	4618      	mov	r0, r3
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	20000000 	.word	0x20000000

0800707c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007080:	f7ff fff0 	bl	8007064 <HAL_RCC_GetHCLKFreq>
 8007084:	4602      	mov	r2, r0
 8007086:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	0a1b      	lsrs	r3, r3, #8
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	4904      	ldr	r1, [pc, #16]	; (80070a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007092:	5ccb      	ldrb	r3, [r1, r3]
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800709c:	4618      	mov	r0, r3
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40021000 	.word	0x40021000
 80070a4:	0800b7f4 	.word	0x0800b7f4

080070a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070ac:	f7ff ffda 	bl	8007064 <HAL_RCC_GetHCLKFreq>
 80070b0:	4602      	mov	r2, r0
 80070b2:	4b06      	ldr	r3, [pc, #24]	; (80070cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	0adb      	lsrs	r3, r3, #11
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	4904      	ldr	r1, [pc, #16]	; (80070d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070be:	5ccb      	ldrb	r3, [r1, r3]
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	40021000 	.word	0x40021000
 80070d0:	0800b7f4 	.word	0x0800b7f4

080070d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	220f      	movs	r2, #15
 80070e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80070e4:	4b12      	ldr	r3, [pc, #72]	; (8007130 <HAL_RCC_GetClockConfig+0x5c>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f003 0203 	and.w	r2, r3, #3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80070f0:	4b0f      	ldr	r3, [pc, #60]	; (8007130 <HAL_RCC_GetClockConfig+0x5c>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80070fc:	4b0c      	ldr	r3, [pc, #48]	; (8007130 <HAL_RCC_GetClockConfig+0x5c>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <HAL_RCC_GetClockConfig+0x5c>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	08db      	lsrs	r3, r3, #3
 800710e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007116:	4b07      	ldr	r3, [pc, #28]	; (8007134 <HAL_RCC_GetClockConfig+0x60>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0207 	and.w	r2, r3, #7
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	601a      	str	r2, [r3, #0]
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40021000 	.word	0x40021000
 8007134:	40022000 	.word	0x40022000

08007138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007140:	2300      	movs	r3, #0
 8007142:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007144:	4b2a      	ldr	r3, [pc, #168]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007150:	f7ff f9bc 	bl	80064cc <HAL_PWREx_GetVoltageRange>
 8007154:	6178      	str	r0, [r7, #20]
 8007156:	e014      	b.n	8007182 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007158:	4b25      	ldr	r3, [pc, #148]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800715a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715c:	4a24      	ldr	r2, [pc, #144]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800715e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007162:	6593      	str	r3, [r2, #88]	; 0x58
 8007164:	4b22      	ldr	r3, [pc, #136]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007170:	f7ff f9ac 	bl	80064cc <HAL_PWREx_GetVoltageRange>
 8007174:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007176:	4b1e      	ldr	r3, [pc, #120]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717a:	4a1d      	ldr	r2, [pc, #116]	; (80071f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800717c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007180:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007188:	d10b      	bne.n	80071a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b80      	cmp	r3, #128	; 0x80
 800718e:	d919      	bls.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2ba0      	cmp	r3, #160	; 0xa0
 8007194:	d902      	bls.n	800719c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007196:	2302      	movs	r3, #2
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	e013      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800719c:	2301      	movs	r3, #1
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	e010      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b80      	cmp	r3, #128	; 0x80
 80071a6:	d902      	bls.n	80071ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80071a8:	2303      	movs	r3, #3
 80071aa:	613b      	str	r3, [r7, #16]
 80071ac:	e00a      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b80      	cmp	r3, #128	; 0x80
 80071b2:	d102      	bne.n	80071ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071b4:	2302      	movs	r3, #2
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	e004      	b.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b70      	cmp	r3, #112	; 0x70
 80071be:	d101      	bne.n	80071c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071c0:	2301      	movs	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80071c4:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f023 0207 	bic.w	r2, r3, #7
 80071cc:	4909      	ldr	r1, [pc, #36]	; (80071f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80071d4:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d001      	beq.n	80071e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	40021000 	.word	0x40021000
 80071f4:	40022000 	.word	0x40022000

080071f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007200:	2300      	movs	r3, #0
 8007202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007204:	2300      	movs	r3, #0
 8007206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007210:	2b00      	cmp	r3, #0
 8007212:	d041      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007218:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800721c:	d02a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800721e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007222:	d824      	bhi.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007224:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007228:	d008      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800722a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800722e:	d81e      	bhi.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007238:	d010      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800723a:	e018      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800723c:	4b86      	ldr	r3, [pc, #536]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	4a85      	ldr	r2, [pc, #532]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007246:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007248:	e015      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3304      	adds	r3, #4
 800724e:	2100      	movs	r1, #0
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fabb 	bl	80077cc <RCCEx_PLLSAI1_Config>
 8007256:	4603      	mov	r3, r0
 8007258:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800725a:	e00c      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3320      	adds	r3, #32
 8007260:	2100      	movs	r1, #0
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fba6 	bl	80079b4 <RCCEx_PLLSAI2_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800726c:	e003      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	74fb      	strb	r3, [r7, #19]
      break;
 8007272:	e000      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007276:	7cfb      	ldrb	r3, [r7, #19]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10b      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800727c:	4b76      	ldr	r3, [pc, #472]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800727e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800728a:	4973      	ldr	r1, [pc, #460]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007292:	e001      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007294:	7cfb      	ldrb	r3, [r7, #19]
 8007296:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d041      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072ac:	d02a      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80072ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072b2:	d824      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072b8:	d008      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80072ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072be:	d81e      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80072c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072c8:	d010      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072ca:	e018      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80072cc:	4b62      	ldr	r3, [pc, #392]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	4a61      	ldr	r2, [pc, #388]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072d8:	e015      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3304      	adds	r3, #4
 80072de:	2100      	movs	r1, #0
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fa73 	bl	80077cc <RCCEx_PLLSAI1_Config>
 80072e6:	4603      	mov	r3, r0
 80072e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072ea:	e00c      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3320      	adds	r3, #32
 80072f0:	2100      	movs	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fb5e 	bl	80079b4 <RCCEx_PLLSAI2_Config>
 80072f8:	4603      	mov	r3, r0
 80072fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072fc:	e003      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	74fb      	strb	r3, [r7, #19]
      break;
 8007302:	e000      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007306:	7cfb      	ldrb	r3, [r7, #19]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10b      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800730c:	4b52      	ldr	r3, [pc, #328]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800730e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007312:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800731a:	494f      	ldr	r1, [pc, #316]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800731c:	4313      	orrs	r3, r2
 800731e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007322:	e001      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007324:	7cfb      	ldrb	r3, [r7, #19]
 8007326:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 80a0 	beq.w	8007476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007336:	2300      	movs	r3, #0
 8007338:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800733a:	4b47      	ldr	r3, [pc, #284]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800733c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800734a:	2300      	movs	r3, #0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00d      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007350:	4b41      	ldr	r3, [pc, #260]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007354:	4a40      	ldr	r2, [pc, #256]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800735a:	6593      	str	r3, [r2, #88]	; 0x58
 800735c:	4b3e      	ldr	r3, [pc, #248]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800735e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007368:	2301      	movs	r3, #1
 800736a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800736c:	4b3b      	ldr	r3, [pc, #236]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a3a      	ldr	r2, [pc, #232]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007376:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007378:	f7fd fdc4 	bl	8004f04 <HAL_GetTick>
 800737c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800737e:	e009      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007380:	f7fd fdc0 	bl	8004f04 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d902      	bls.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	74fb      	strb	r3, [r7, #19]
        break;
 8007392:	e005      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007394:	4b31      	ldr	r3, [pc, #196]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0ef      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80073a0:	7cfb      	ldrb	r3, [r7, #19]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d15c      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073a6:	4b2c      	ldr	r3, [pc, #176]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01f      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d019      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073c4:	4b24      	ldr	r3, [pc, #144]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073d0:	4b21      	ldr	r3, [pc, #132]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d6:	4a20      	ldr	r2, [pc, #128]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073e0:	4b1d      	ldr	r3, [pc, #116]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e6:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073f0:	4a19      	ldr	r2, [pc, #100]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d016      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007402:	f7fd fd7f 	bl	8004f04 <HAL_GetTick>
 8007406:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007408:	e00b      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740a:	f7fd fd7b 	bl	8004f04 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	f241 3288 	movw	r2, #5000	; 0x1388
 8007418:	4293      	cmp	r3, r2
 800741a:	d902      	bls.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	74fb      	strb	r3, [r7, #19]
            break;
 8007420:	e006      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0ec      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007430:	7cfb      	ldrb	r3, [r7, #19]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10c      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007436:	4b08      	ldr	r3, [pc, #32]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007446:	4904      	ldr	r1, [pc, #16]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007448:	4313      	orrs	r3, r2
 800744a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800744e:	e009      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007450:	7cfb      	ldrb	r3, [r7, #19]
 8007452:	74bb      	strb	r3, [r7, #18]
 8007454:	e006      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007456:	bf00      	nop
 8007458:	40021000 	.word	0x40021000
 800745c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007460:	7cfb      	ldrb	r3, [r7, #19]
 8007462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007464:	7c7b      	ldrb	r3, [r7, #17]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d105      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800746a:	4b9e      	ldr	r3, [pc, #632]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746e:	4a9d      	ldr	r2, [pc, #628]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007474:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007482:	4b98      	ldr	r3, [pc, #608]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007488:	f023 0203 	bic.w	r2, r3, #3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	4994      	ldr	r1, [pc, #592]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074a4:	4b8f      	ldr	r3, [pc, #572]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074aa:	f023 020c 	bic.w	r2, r3, #12
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b2:	498c      	ldr	r1, [pc, #560]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074c6:	4b87      	ldr	r3, [pc, #540]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	4983      	ldr	r1, [pc, #524]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0308 	and.w	r3, r3, #8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074e8:	4b7e      	ldr	r3, [pc, #504]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f6:	497b      	ldr	r1, [pc, #492]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800750a:	4b76      	ldr	r3, [pc, #472]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007518:	4972      	ldr	r1, [pc, #456]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800752c:	4b6d      	ldr	r3, [pc, #436]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007532:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753a:	496a      	ldr	r1, [pc, #424]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800754e:	4b65      	ldr	r3, [pc, #404]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007554:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755c:	4961      	ldr	r1, [pc, #388]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800755e:	4313      	orrs	r3, r2
 8007560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007570:	4b5c      	ldr	r3, [pc, #368]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800757e:	4959      	ldr	r1, [pc, #356]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007580:	4313      	orrs	r3, r2
 8007582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007592:	4b54      	ldr	r3, [pc, #336]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a0:	4950      	ldr	r1, [pc, #320]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075b4:	4b4b      	ldr	r3, [pc, #300]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c2:	4948      	ldr	r1, [pc, #288]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075d6:	4b43      	ldr	r3, [pc, #268]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e4:	493f      	ldr	r1, [pc, #252]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d028      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075f8:	4b3a      	ldr	r3, [pc, #232]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007606:	4937      	ldr	r1, [pc, #220]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007608:	4313      	orrs	r3, r2
 800760a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007616:	d106      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007618:	4b32      	ldr	r3, [pc, #200]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	4a31      	ldr	r2, [pc, #196]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800761e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007622:	60d3      	str	r3, [r2, #12]
 8007624:	e011      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800762a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800762e:	d10c      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3304      	adds	r3, #4
 8007634:	2101      	movs	r1, #1
 8007636:	4618      	mov	r0, r3
 8007638:	f000 f8c8 	bl	80077cc <RCCEx_PLLSAI1_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007640:	7cfb      	ldrb	r3, [r7, #19]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007646:	7cfb      	ldrb	r3, [r7, #19]
 8007648:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d028      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007656:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007664:	491f      	ldr	r1, [pc, #124]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007666:	4313      	orrs	r3, r2
 8007668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007674:	d106      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007676:	4b1b      	ldr	r3, [pc, #108]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800767c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007680:	60d3      	str	r3, [r2, #12]
 8007682:	e011      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800768c:	d10c      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3304      	adds	r3, #4
 8007692:	2101      	movs	r1, #1
 8007694:	4618      	mov	r0, r3
 8007696:	f000 f899 	bl	80077cc <RCCEx_PLLSAI1_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800769e:	7cfb      	ldrb	r3, [r7, #19]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80076a4:	7cfb      	ldrb	r3, [r7, #19]
 80076a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d02b      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076b4:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c2:	4908      	ldr	r1, [pc, #32]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076d2:	d109      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076d4:	4b03      	ldr	r3, [pc, #12]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	4a02      	ldr	r2, [pc, #8]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076de:	60d3      	str	r3, [r2, #12]
 80076e0:	e014      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80076e2:	bf00      	nop
 80076e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076f0:	d10c      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3304      	adds	r3, #4
 80076f6:	2101      	movs	r1, #1
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 f867 	bl	80077cc <RCCEx_PLLSAI1_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007702:	7cfb      	ldrb	r3, [r7, #19]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007708:	7cfb      	ldrb	r3, [r7, #19]
 800770a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02f      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007718:	4b2b      	ldr	r3, [pc, #172]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800771a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007726:	4928      	ldr	r1, [pc, #160]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007736:	d10d      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3304      	adds	r3, #4
 800773c:	2102      	movs	r1, #2
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f844 	bl	80077cc <RCCEx_PLLSAI1_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007748:	7cfb      	ldrb	r3, [r7, #19]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d014      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800774e:	7cfb      	ldrb	r3, [r7, #19]
 8007750:	74bb      	strb	r3, [r7, #18]
 8007752:	e011      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800775c:	d10c      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3320      	adds	r3, #32
 8007762:	2102      	movs	r1, #2
 8007764:	4618      	mov	r0, r3
 8007766:	f000 f925 	bl	80079b4 <RCCEx_PLLSAI2_Config>
 800776a:	4603      	mov	r3, r0
 800776c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800776e:	7cfb      	ldrb	r3, [r7, #19]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007774:	7cfb      	ldrb	r3, [r7, #19]
 8007776:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007784:	4b10      	ldr	r3, [pc, #64]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800778a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007792:	490d      	ldr	r1, [pc, #52]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007794:	4313      	orrs	r3, r2
 8007796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077a6:	4b08      	ldr	r3, [pc, #32]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077b6:	4904      	ldr	r1, [pc, #16]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80077be:	7cbb      	ldrb	r3, [r7, #18]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40021000 	.word	0x40021000

080077cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80077da:	4b75      	ldr	r3, [pc, #468]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f003 0303 	and.w	r3, r3, #3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d018      	beq.n	8007818 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80077e6:	4b72      	ldr	r3, [pc, #456]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f003 0203 	and.w	r2, r3, #3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d10d      	bne.n	8007812 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
       ||
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80077fe:	4b6c      	ldr	r3, [pc, #432]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	091b      	lsrs	r3, r3, #4
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
       ||
 800780e:	429a      	cmp	r2, r3
 8007810:	d047      	beq.n	80078a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
 8007816:	e044      	b.n	80078a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d018      	beq.n	8007852 <RCCEx_PLLSAI1_Config+0x86>
 8007820:	2b03      	cmp	r3, #3
 8007822:	d825      	bhi.n	8007870 <RCCEx_PLLSAI1_Config+0xa4>
 8007824:	2b01      	cmp	r3, #1
 8007826:	d002      	beq.n	800782e <RCCEx_PLLSAI1_Config+0x62>
 8007828:	2b02      	cmp	r3, #2
 800782a:	d009      	beq.n	8007840 <RCCEx_PLLSAI1_Config+0x74>
 800782c:	e020      	b.n	8007870 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800782e:	4b60      	ldr	r3, [pc, #384]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d11d      	bne.n	8007876 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800783e:	e01a      	b.n	8007876 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007840:	4b5b      	ldr	r3, [pc, #364]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007848:	2b00      	cmp	r3, #0
 800784a:	d116      	bne.n	800787a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007850:	e013      	b.n	800787a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007852:	4b57      	ldr	r3, [pc, #348]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10f      	bne.n	800787e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800785e:	4b54      	ldr	r3, [pc, #336]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d109      	bne.n	800787e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800786e:	e006      	b.n	800787e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	73fb      	strb	r3, [r7, #15]
      break;
 8007874:	e004      	b.n	8007880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007876:	bf00      	nop
 8007878:	e002      	b.n	8007880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800787a:	bf00      	nop
 800787c:	e000      	b.n	8007880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800787e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10d      	bne.n	80078a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007886:	4b4a      	ldr	r3, [pc, #296]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6819      	ldr	r1, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	3b01      	subs	r3, #1
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	430b      	orrs	r3, r1
 800789c:	4944      	ldr	r1, [pc, #272]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d17d      	bne.n	80079a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80078a8:	4b41      	ldr	r3, [pc, #260]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a40      	ldr	r2, [pc, #256]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b4:	f7fd fb26 	bl	8004f04 <HAL_GetTick>
 80078b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078ba:	e009      	b.n	80078d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078bc:	f7fd fb22 	bl	8004f04 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d902      	bls.n	80078d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	73fb      	strb	r3, [r7, #15]
        break;
 80078ce:	e005      	b.n	80078dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078d0:	4b37      	ldr	r3, [pc, #220]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1ef      	bne.n	80078bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d160      	bne.n	80079a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d111      	bne.n	800790c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80078e8:	4b31      	ldr	r3, [pc, #196]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80078f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	6892      	ldr	r2, [r2, #8]
 80078f8:	0211      	lsls	r1, r2, #8
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	68d2      	ldr	r2, [r2, #12]
 80078fe:	0912      	lsrs	r2, r2, #4
 8007900:	0452      	lsls	r2, r2, #17
 8007902:	430a      	orrs	r2, r1
 8007904:	492a      	ldr	r1, [pc, #168]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007906:	4313      	orrs	r3, r2
 8007908:	610b      	str	r3, [r1, #16]
 800790a:	e027      	b.n	800795c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d112      	bne.n	8007938 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007912:	4b27      	ldr	r3, [pc, #156]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800791a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	6892      	ldr	r2, [r2, #8]
 8007922:	0211      	lsls	r1, r2, #8
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6912      	ldr	r2, [r2, #16]
 8007928:	0852      	lsrs	r2, r2, #1
 800792a:	3a01      	subs	r2, #1
 800792c:	0552      	lsls	r2, r2, #21
 800792e:	430a      	orrs	r2, r1
 8007930:	491f      	ldr	r1, [pc, #124]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007932:	4313      	orrs	r3, r2
 8007934:	610b      	str	r3, [r1, #16]
 8007936:	e011      	b.n	800795c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007938:	4b1d      	ldr	r3, [pc, #116]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6892      	ldr	r2, [r2, #8]
 8007948:	0211      	lsls	r1, r2, #8
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6952      	ldr	r2, [r2, #20]
 800794e:	0852      	lsrs	r2, r2, #1
 8007950:	3a01      	subs	r2, #1
 8007952:	0652      	lsls	r2, r2, #25
 8007954:	430a      	orrs	r2, r1
 8007956:	4916      	ldr	r1, [pc, #88]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007958:	4313      	orrs	r3, r2
 800795a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800795c:	4b14      	ldr	r3, [pc, #80]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a13      	ldr	r2, [pc, #76]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007962:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007968:	f7fd facc 	bl	8004f04 <HAL_GetTick>
 800796c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800796e:	e009      	b.n	8007984 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007970:	f7fd fac8 	bl	8004f04 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d902      	bls.n	8007984 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	73fb      	strb	r3, [r7, #15]
          break;
 8007982:	e005      	b.n	8007990 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007984:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0ef      	beq.n	8007970 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	4904      	ldr	r1, [pc, #16]	; (80079b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40021000 	.word	0x40021000

080079b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079c2:	4b6a      	ldr	r3, [pc, #424]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d018      	beq.n	8007a00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80079ce:	4b67      	ldr	r3, [pc, #412]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f003 0203 	and.w	r2, r3, #3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d10d      	bne.n	80079fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
       ||
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d009      	beq.n	80079fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80079e6:	4b61      	ldr	r3, [pc, #388]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
       ||
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d047      	beq.n	8007a8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	73fb      	strb	r3, [r7, #15]
 80079fe:	e044      	b.n	8007a8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d018      	beq.n	8007a3a <RCCEx_PLLSAI2_Config+0x86>
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d825      	bhi.n	8007a58 <RCCEx_PLLSAI2_Config+0xa4>
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d002      	beq.n	8007a16 <RCCEx_PLLSAI2_Config+0x62>
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d009      	beq.n	8007a28 <RCCEx_PLLSAI2_Config+0x74>
 8007a14:	e020      	b.n	8007a58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a16:	4b55      	ldr	r3, [pc, #340]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d11d      	bne.n	8007a5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a26:	e01a      	b.n	8007a5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a28:	4b50      	ldr	r3, [pc, #320]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d116      	bne.n	8007a62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a38:	e013      	b.n	8007a62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a3a:	4b4c      	ldr	r3, [pc, #304]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10f      	bne.n	8007a66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a46:	4b49      	ldr	r3, [pc, #292]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a56:	e006      	b.n	8007a66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a5c:	e004      	b.n	8007a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a5e:	bf00      	nop
 8007a60:	e002      	b.n	8007a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a62:	bf00      	nop
 8007a64:	e000      	b.n	8007a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a66:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10d      	bne.n	8007a8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a6e:	4b3f      	ldr	r3, [pc, #252]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6819      	ldr	r1, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	430b      	orrs	r3, r1
 8007a84:	4939      	ldr	r1, [pc, #228]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d167      	bne.n	8007b60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007a90:	4b36      	ldr	r3, [pc, #216]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a35      	ldr	r2, [pc, #212]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a9c:	f7fd fa32 	bl	8004f04 <HAL_GetTick>
 8007aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007aa2:	e009      	b.n	8007ab8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007aa4:	f7fd fa2e 	bl	8004f04 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d902      	bls.n	8007ab8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8007ab6:	e005      	b.n	8007ac4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ab8:	4b2c      	ldr	r3, [pc, #176]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1ef      	bne.n	8007aa4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d14a      	bne.n	8007b60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d111      	bne.n	8007af4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ad0:	4b26      	ldr	r3, [pc, #152]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6892      	ldr	r2, [r2, #8]
 8007ae0:	0211      	lsls	r1, r2, #8
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68d2      	ldr	r2, [r2, #12]
 8007ae6:	0912      	lsrs	r2, r2, #4
 8007ae8:	0452      	lsls	r2, r2, #17
 8007aea:	430a      	orrs	r2, r1
 8007aec:	491f      	ldr	r1, [pc, #124]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	614b      	str	r3, [r1, #20]
 8007af2:	e011      	b.n	8007b18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007af4:	4b1d      	ldr	r3, [pc, #116]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007afc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6892      	ldr	r2, [r2, #8]
 8007b04:	0211      	lsls	r1, r2, #8
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6912      	ldr	r2, [r2, #16]
 8007b0a:	0852      	lsrs	r2, r2, #1
 8007b0c:	3a01      	subs	r2, #1
 8007b0e:	0652      	lsls	r2, r2, #25
 8007b10:	430a      	orrs	r2, r1
 8007b12:	4916      	ldr	r1, [pc, #88]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007b18:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a13      	ldr	r2, [pc, #76]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b24:	f7fd f9ee 	bl	8004f04 <HAL_GetTick>
 8007b28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b2a:	e009      	b.n	8007b40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b2c:	f7fd f9ea 	bl	8004f04 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d902      	bls.n	8007b40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	73fb      	strb	r3, [r7, #15]
          break;
 8007b3e:	e005      	b.n	8007b4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b40:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0ef      	beq.n	8007b2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007b52:	4b06      	ldr	r3, [pc, #24]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b54:	695a      	ldr	r2, [r3, #20]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	4904      	ldr	r1, [pc, #16]	; (8007b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	40021000 	.word	0x40021000

08007b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e095      	b.n	8007cae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d108      	bne.n	8007b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b92:	d009      	beq.n	8007ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	61da      	str	r2, [r3, #28]
 8007b9a:	e005      	b.n	8007ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d106      	bne.n	8007bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7f9 fb48 	bl	8001258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007be8:	d902      	bls.n	8007bf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	e002      	b.n	8007bf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007bfe:	d007      	beq.n	8007c10 <HAL_SPI_Init+0xa0>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c08:	d002      	beq.n	8007c10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c52:	ea42 0103 	orr.w	r1, r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	0c1b      	lsrs	r3, r3, #16
 8007c6c:	f003 0204 	and.w	r2, r3, #4
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	f003 0310 	and.w	r3, r3, #16
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c8c:	ea42 0103 	orr.w	r1, r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e049      	b.n	8007d5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d106      	bne.n	8007ce2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f841 	bl	8007d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f000 f9f7 	bl	80080e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d001      	beq.n	8007d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e04f      	b.n	8007e30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0201 	orr.w	r2, r2, #1
 8007da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a23      	ldr	r2, [pc, #140]	; (8007e3c <HAL_TIM_Base_Start_IT+0xc4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d01d      	beq.n	8007dee <HAL_TIM_Base_Start_IT+0x76>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dba:	d018      	beq.n	8007dee <HAL_TIM_Base_Start_IT+0x76>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a1f      	ldr	r2, [pc, #124]	; (8007e40 <HAL_TIM_Base_Start_IT+0xc8>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d013      	beq.n	8007dee <HAL_TIM_Base_Start_IT+0x76>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a1e      	ldr	r2, [pc, #120]	; (8007e44 <HAL_TIM_Base_Start_IT+0xcc>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00e      	beq.n	8007dee <HAL_TIM_Base_Start_IT+0x76>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a1c      	ldr	r2, [pc, #112]	; (8007e48 <HAL_TIM_Base_Start_IT+0xd0>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d009      	beq.n	8007dee <HAL_TIM_Base_Start_IT+0x76>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a1b      	ldr	r2, [pc, #108]	; (8007e4c <HAL_TIM_Base_Start_IT+0xd4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d004      	beq.n	8007dee <HAL_TIM_Base_Start_IT+0x76>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a19      	ldr	r2, [pc, #100]	; (8007e50 <HAL_TIM_Base_Start_IT+0xd8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d115      	bne.n	8007e1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	4b17      	ldr	r3, [pc, #92]	; (8007e54 <HAL_TIM_Base_Start_IT+0xdc>)
 8007df6:	4013      	ands	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b06      	cmp	r3, #6
 8007dfe:	d015      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0xb4>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e06:	d011      	beq.n	8007e2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0201 	orr.w	r2, r2, #1
 8007e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e18:	e008      	b.n	8007e2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f042 0201 	orr.w	r2, r2, #1
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e000      	b.n	8007e2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	40012c00 	.word	0x40012c00
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40000c00 	.word	0x40000c00
 8007e4c:	40013400 	.word	0x40013400
 8007e50:	40014000 	.word	0x40014000
 8007e54:	00010007 	.word	0x00010007

08007e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d122      	bne.n	8007eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d11b      	bne.n	8007eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0202 	mvn.w	r2, #2
 8007e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f905 	bl	80080aa <HAL_TIM_IC_CaptureCallback>
 8007ea0:	e005      	b.n	8007eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f8f7 	bl	8008096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f908 	bl	80080be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f003 0304 	and.w	r3, r3, #4
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d122      	bne.n	8007f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d11b      	bne.n	8007f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f06f 0204 	mvn.w	r2, #4
 8007ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2202      	movs	r2, #2
 8007ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f8db 	bl	80080aa <HAL_TIM_IC_CaptureCallback>
 8007ef4:	e005      	b.n	8007f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f8cd 	bl	8008096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f8de 	bl	80080be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b08      	cmp	r3, #8
 8007f14:	d122      	bne.n	8007f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d11b      	bne.n	8007f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0208 	mvn.w	r2, #8
 8007f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2204      	movs	r2, #4
 8007f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8b1 	bl	80080aa <HAL_TIM_IC_CaptureCallback>
 8007f48:	e005      	b.n	8007f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f8a3 	bl	8008096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f8b4 	bl	80080be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f003 0310 	and.w	r3, r3, #16
 8007f66:	2b10      	cmp	r3, #16
 8007f68:	d122      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b10      	cmp	r3, #16
 8007f76:	d11b      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f06f 0210 	mvn.w	r2, #16
 8007f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2208      	movs	r2, #8
 8007f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f887 	bl	80080aa <HAL_TIM_IC_CaptureCallback>
 8007f9c:	e005      	b.n	8007faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f879 	bl	8008096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f88a 	bl	80080be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d10e      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d107      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0201 	mvn.w	r2, #1
 8007fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7f9 f880 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe6:	2b80      	cmp	r3, #128	; 0x80
 8007fe8:	d10e      	bne.n	8008008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff4:	2b80      	cmp	r3, #128	; 0x80
 8007ff6:	d107      	bne.n	8008008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f914 	bl	8008230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008016:	d10e      	bne.n	8008036 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008022:	2b80      	cmp	r3, #128	; 0x80
 8008024:	d107      	bne.n	8008036 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800802e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f907 	bl	8008244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008040:	2b40      	cmp	r3, #64	; 0x40
 8008042:	d10e      	bne.n	8008062 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	2b40      	cmp	r3, #64	; 0x40
 8008050:	d107      	bne.n	8008062 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800805a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f838 	bl	80080d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	f003 0320 	and.w	r3, r3, #32
 800806c:	2b20      	cmp	r3, #32
 800806e:	d10e      	bne.n	800808e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b20      	cmp	r3, #32
 800807c:	d107      	bne.n	800808e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f06f 0220 	mvn.w	r2, #32
 8008086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f8c7 	bl	800821c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800809e:	bf00      	nop
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
	...

080080e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a40      	ldr	r2, [pc, #256]	; (80081fc <TIM_Base_SetConfig+0x114>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d013      	beq.n	8008128 <TIM_Base_SetConfig+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008106:	d00f      	beq.n	8008128 <TIM_Base_SetConfig+0x40>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a3d      	ldr	r2, [pc, #244]	; (8008200 <TIM_Base_SetConfig+0x118>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00b      	beq.n	8008128 <TIM_Base_SetConfig+0x40>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a3c      	ldr	r2, [pc, #240]	; (8008204 <TIM_Base_SetConfig+0x11c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d007      	beq.n	8008128 <TIM_Base_SetConfig+0x40>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a3b      	ldr	r2, [pc, #236]	; (8008208 <TIM_Base_SetConfig+0x120>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d003      	beq.n	8008128 <TIM_Base_SetConfig+0x40>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a3a      	ldr	r2, [pc, #232]	; (800820c <TIM_Base_SetConfig+0x124>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d108      	bne.n	800813a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a2f      	ldr	r2, [pc, #188]	; (80081fc <TIM_Base_SetConfig+0x114>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d01f      	beq.n	8008182 <TIM_Base_SetConfig+0x9a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008148:	d01b      	beq.n	8008182 <TIM_Base_SetConfig+0x9a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a2c      	ldr	r2, [pc, #176]	; (8008200 <TIM_Base_SetConfig+0x118>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d017      	beq.n	8008182 <TIM_Base_SetConfig+0x9a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a2b      	ldr	r2, [pc, #172]	; (8008204 <TIM_Base_SetConfig+0x11c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d013      	beq.n	8008182 <TIM_Base_SetConfig+0x9a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a2a      	ldr	r2, [pc, #168]	; (8008208 <TIM_Base_SetConfig+0x120>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00f      	beq.n	8008182 <TIM_Base_SetConfig+0x9a>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a29      	ldr	r2, [pc, #164]	; (800820c <TIM_Base_SetConfig+0x124>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00b      	beq.n	8008182 <TIM_Base_SetConfig+0x9a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a28      	ldr	r2, [pc, #160]	; (8008210 <TIM_Base_SetConfig+0x128>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d007      	beq.n	8008182 <TIM_Base_SetConfig+0x9a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a27      	ldr	r2, [pc, #156]	; (8008214 <TIM_Base_SetConfig+0x12c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d003      	beq.n	8008182 <TIM_Base_SetConfig+0x9a>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a26      	ldr	r2, [pc, #152]	; (8008218 <TIM_Base_SetConfig+0x130>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d108      	bne.n	8008194 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a10      	ldr	r2, [pc, #64]	; (80081fc <TIM_Base_SetConfig+0x114>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d00f      	beq.n	80081e0 <TIM_Base_SetConfig+0xf8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a12      	ldr	r2, [pc, #72]	; (800820c <TIM_Base_SetConfig+0x124>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d00b      	beq.n	80081e0 <TIM_Base_SetConfig+0xf8>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a11      	ldr	r2, [pc, #68]	; (8008210 <TIM_Base_SetConfig+0x128>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d007      	beq.n	80081e0 <TIM_Base_SetConfig+0xf8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a10      	ldr	r2, [pc, #64]	; (8008214 <TIM_Base_SetConfig+0x12c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d003      	beq.n	80081e0 <TIM_Base_SetConfig+0xf8>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a0f      	ldr	r2, [pc, #60]	; (8008218 <TIM_Base_SetConfig+0x130>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d103      	bne.n	80081e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	615a      	str	r2, [r3, #20]
}
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40012c00 	.word	0x40012c00
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40013400 	.word	0x40013400
 8008210:	40014000 	.word	0x40014000
 8008214:	40014400 	.word	0x40014400
 8008218:	40014800 	.word	0x40014800

0800821c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e040      	b.n	80082ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7f9 f82e 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2224      	movs	r2, #36	; 0x24
 8008284:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0201 	bic.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f992 	bl	80085c0 <UART_SetConfig>
 800829c:	4603      	mov	r3, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d101      	bne.n	80082a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e022      	b.n	80082ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fc3e 	bl	8008b30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fcc5 	bl	8008c74 <UART_CheckIdleState>
 80082ea:	4603      	mov	r3, r0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08a      	sub	sp, #40	; 0x28
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	4613      	mov	r3, r2
 8008302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008308:	2b20      	cmp	r3, #32
 800830a:	f040 8082 	bne.w	8008412 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <HAL_UART_Transmit+0x26>
 8008314:	88fb      	ldrh	r3, [r7, #6]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e07a      	b.n	8008414 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_UART_Transmit+0x38>
 8008328:	2302      	movs	r3, #2
 800832a:	e073      	b.n	8008414 <HAL_UART_Transmit+0x120>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2221      	movs	r2, #33	; 0x21
 8008340:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008342:	f7fc fddf 	bl	8004f04 <HAL_GetTick>
 8008346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	88fa      	ldrh	r2, [r7, #6]
 800834c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	88fa      	ldrh	r2, [r7, #6]
 8008354:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008360:	d108      	bne.n	8008374 <HAL_UART_Transmit+0x80>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d104      	bne.n	8008374 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	61bb      	str	r3, [r7, #24]
 8008372:	e003      	b.n	800837c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008378:	2300      	movs	r3, #0
 800837a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008384:	e02d      	b.n	80083e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2200      	movs	r2, #0
 800838e:	2180      	movs	r1, #128	; 0x80
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 fcb8 	bl	8008d06 <UART_WaitOnFlagUntilTimeout>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e039      	b.n	8008414 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10b      	bne.n	80083be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	881a      	ldrh	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083b2:	b292      	uxth	r2, r2
 80083b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	3302      	adds	r3, #2
 80083ba:	61bb      	str	r3, [r7, #24]
 80083bc:	e008      	b.n	80083d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	b292      	uxth	r2, r2
 80083c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	3301      	adds	r3, #1
 80083ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1cb      	bne.n	8008386 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2200      	movs	r2, #0
 80083f6:	2140      	movs	r1, #64	; 0x40
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fc84 	bl	8008d06 <UART_WaitOnFlagUntilTimeout>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e005      	b.n	8008414 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2220      	movs	r2, #32
 800840c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	e000      	b.n	8008414 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008412:	2302      	movs	r3, #2
  }
}
 8008414:	4618      	mov	r0, r3
 8008416:	3720      	adds	r7, #32
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	4613      	mov	r3, r2
 800842a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008430:	2b20      	cmp	r3, #32
 8008432:	f040 80bf 	bne.w	80085b4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_UART_Receive+0x26>
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e0b7      	b.n	80085b6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_UART_Receive+0x38>
 8008450:	2302      	movs	r3, #2
 8008452:	e0b0      	b.n	80085b6 <HAL_UART_Receive+0x19a>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2222      	movs	r2, #34	; 0x22
 8008468:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008470:	f7fc fd48 	bl	8004f04 <HAL_GetTick>
 8008474:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	88fa      	ldrh	r2, [r7, #6]
 800847a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848e:	d10e      	bne.n	80084ae <HAL_UART_Receive+0x92>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d105      	bne.n	80084a4 <HAL_UART_Receive+0x88>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800849e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084a2:	e02d      	b.n	8008500 <HAL_UART_Receive+0xe4>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	22ff      	movs	r2, #255	; 0xff
 80084a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084ac:	e028      	b.n	8008500 <HAL_UART_Receive+0xe4>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10d      	bne.n	80084d2 <HAL_UART_Receive+0xb6>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d104      	bne.n	80084c8 <HAL_UART_Receive+0xac>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	22ff      	movs	r2, #255	; 0xff
 80084c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084c6:	e01b      	b.n	8008500 <HAL_UART_Receive+0xe4>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	227f      	movs	r2, #127	; 0x7f
 80084cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084d0:	e016      	b.n	8008500 <HAL_UART_Receive+0xe4>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084da:	d10d      	bne.n	80084f8 <HAL_UART_Receive+0xdc>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <HAL_UART_Receive+0xd2>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	227f      	movs	r2, #127	; 0x7f
 80084e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084ec:	e008      	b.n	8008500 <HAL_UART_Receive+0xe4>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	223f      	movs	r2, #63	; 0x3f
 80084f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084f6:	e003      	b.n	8008500 <HAL_UART_Receive+0xe4>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008506:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008510:	d108      	bne.n	8008524 <HAL_UART_Receive+0x108>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d104      	bne.n	8008524 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800851a:	2300      	movs	r3, #0
 800851c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	e003      	b.n	800852c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008528:	2300      	movs	r3, #0
 800852a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008534:	e033      	b.n	800859e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2200      	movs	r2, #0
 800853e:	2120      	movs	r1, #32
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 fbe0 	bl	8008d06 <UART_WaitOnFlagUntilTimeout>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e032      	b.n	80085b6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10c      	bne.n	8008570 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800855c:	b29a      	uxth	r2, r3
 800855e:	8a7b      	ldrh	r3, [r7, #18]
 8008560:	4013      	ands	r3, r2
 8008562:	b29a      	uxth	r2, r3
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	3302      	adds	r3, #2
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	e00d      	b.n	800858c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008576:	b29b      	uxth	r3, r3
 8008578:	b2da      	uxtb	r2, r3
 800857a:	8a7b      	ldrh	r3, [r7, #18]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	4013      	ands	r3, r2
 8008580:	b2da      	uxtb	r2, r3
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	3301      	adds	r3, #1
 800858a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008592:	b29b      	uxth	r3, r3
 8008594:	3b01      	subs	r3, #1
 8008596:	b29a      	uxth	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1c5      	bne.n	8008536 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2220      	movs	r2, #32
 80085ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80085b4:	2302      	movs	r3, #2
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085c4:	b08a      	sub	sp, #40	; 0x28
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	431a      	orrs	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	431a      	orrs	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4ba4      	ldr	r3, [pc, #656]	; (8008880 <UART_SetConfig+0x2c0>)
 80085f0:	4013      	ands	r3, r2
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	6812      	ldr	r2, [r2, #0]
 80085f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085f8:	430b      	orrs	r3, r1
 80085fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	430a      	orrs	r2, r1
 8008610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a99      	ldr	r2, [pc, #612]	; (8008884 <UART_SetConfig+0x2c4>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d004      	beq.n	800862c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008628:	4313      	orrs	r3, r2
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863c:	430a      	orrs	r2, r1
 800863e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a90      	ldr	r2, [pc, #576]	; (8008888 <UART_SetConfig+0x2c8>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d126      	bne.n	8008698 <UART_SetConfig+0xd8>
 800864a:	4b90      	ldr	r3, [pc, #576]	; (800888c <UART_SetConfig+0x2cc>)
 800864c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008650:	f003 0303 	and.w	r3, r3, #3
 8008654:	2b03      	cmp	r3, #3
 8008656:	d81b      	bhi.n	8008690 <UART_SetConfig+0xd0>
 8008658:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <UART_SetConfig+0xa0>)
 800865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865e:	bf00      	nop
 8008660:	08008671 	.word	0x08008671
 8008664:	08008681 	.word	0x08008681
 8008668:	08008679 	.word	0x08008679
 800866c:	08008689 	.word	0x08008689
 8008670:	2301      	movs	r3, #1
 8008672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008676:	e116      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008678:	2302      	movs	r3, #2
 800867a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800867e:	e112      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008680:	2304      	movs	r3, #4
 8008682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008686:	e10e      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008688:	2308      	movs	r3, #8
 800868a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800868e:	e10a      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008690:	2310      	movs	r3, #16
 8008692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008696:	e106      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a7c      	ldr	r2, [pc, #496]	; (8008890 <UART_SetConfig+0x2d0>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d138      	bne.n	8008714 <UART_SetConfig+0x154>
 80086a2:	4b7a      	ldr	r3, [pc, #488]	; (800888c <UART_SetConfig+0x2cc>)
 80086a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a8:	f003 030c 	and.w	r3, r3, #12
 80086ac:	2b0c      	cmp	r3, #12
 80086ae:	d82d      	bhi.n	800870c <UART_SetConfig+0x14c>
 80086b0:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <UART_SetConfig+0xf8>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086ed 	.word	0x080086ed
 80086bc:	0800870d 	.word	0x0800870d
 80086c0:	0800870d 	.word	0x0800870d
 80086c4:	0800870d 	.word	0x0800870d
 80086c8:	080086fd 	.word	0x080086fd
 80086cc:	0800870d 	.word	0x0800870d
 80086d0:	0800870d 	.word	0x0800870d
 80086d4:	0800870d 	.word	0x0800870d
 80086d8:	080086f5 	.word	0x080086f5
 80086dc:	0800870d 	.word	0x0800870d
 80086e0:	0800870d 	.word	0x0800870d
 80086e4:	0800870d 	.word	0x0800870d
 80086e8:	08008705 	.word	0x08008705
 80086ec:	2300      	movs	r3, #0
 80086ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086f2:	e0d8      	b.n	80088a6 <UART_SetConfig+0x2e6>
 80086f4:	2302      	movs	r3, #2
 80086f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086fa:	e0d4      	b.n	80088a6 <UART_SetConfig+0x2e6>
 80086fc:	2304      	movs	r3, #4
 80086fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008702:	e0d0      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008704:	2308      	movs	r3, #8
 8008706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800870a:	e0cc      	b.n	80088a6 <UART_SetConfig+0x2e6>
 800870c:	2310      	movs	r3, #16
 800870e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008712:	e0c8      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a5e      	ldr	r2, [pc, #376]	; (8008894 <UART_SetConfig+0x2d4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d125      	bne.n	800876a <UART_SetConfig+0x1aa>
 800871e:	4b5b      	ldr	r3, [pc, #364]	; (800888c <UART_SetConfig+0x2cc>)
 8008720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008724:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008728:	2b30      	cmp	r3, #48	; 0x30
 800872a:	d016      	beq.n	800875a <UART_SetConfig+0x19a>
 800872c:	2b30      	cmp	r3, #48	; 0x30
 800872e:	d818      	bhi.n	8008762 <UART_SetConfig+0x1a2>
 8008730:	2b20      	cmp	r3, #32
 8008732:	d00a      	beq.n	800874a <UART_SetConfig+0x18a>
 8008734:	2b20      	cmp	r3, #32
 8008736:	d814      	bhi.n	8008762 <UART_SetConfig+0x1a2>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <UART_SetConfig+0x182>
 800873c:	2b10      	cmp	r3, #16
 800873e:	d008      	beq.n	8008752 <UART_SetConfig+0x192>
 8008740:	e00f      	b.n	8008762 <UART_SetConfig+0x1a2>
 8008742:	2300      	movs	r3, #0
 8008744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008748:	e0ad      	b.n	80088a6 <UART_SetConfig+0x2e6>
 800874a:	2302      	movs	r3, #2
 800874c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008750:	e0a9      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008752:	2304      	movs	r3, #4
 8008754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008758:	e0a5      	b.n	80088a6 <UART_SetConfig+0x2e6>
 800875a:	2308      	movs	r3, #8
 800875c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008760:	e0a1      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008762:	2310      	movs	r3, #16
 8008764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008768:	e09d      	b.n	80088a6 <UART_SetConfig+0x2e6>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a4a      	ldr	r2, [pc, #296]	; (8008898 <UART_SetConfig+0x2d8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d125      	bne.n	80087c0 <UART_SetConfig+0x200>
 8008774:	4b45      	ldr	r3, [pc, #276]	; (800888c <UART_SetConfig+0x2cc>)
 8008776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800877a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800877e:	2bc0      	cmp	r3, #192	; 0xc0
 8008780:	d016      	beq.n	80087b0 <UART_SetConfig+0x1f0>
 8008782:	2bc0      	cmp	r3, #192	; 0xc0
 8008784:	d818      	bhi.n	80087b8 <UART_SetConfig+0x1f8>
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d00a      	beq.n	80087a0 <UART_SetConfig+0x1e0>
 800878a:	2b80      	cmp	r3, #128	; 0x80
 800878c:	d814      	bhi.n	80087b8 <UART_SetConfig+0x1f8>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <UART_SetConfig+0x1d8>
 8008792:	2b40      	cmp	r3, #64	; 0x40
 8008794:	d008      	beq.n	80087a8 <UART_SetConfig+0x1e8>
 8008796:	e00f      	b.n	80087b8 <UART_SetConfig+0x1f8>
 8008798:	2300      	movs	r3, #0
 800879a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800879e:	e082      	b.n	80088a6 <UART_SetConfig+0x2e6>
 80087a0:	2302      	movs	r3, #2
 80087a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087a6:	e07e      	b.n	80088a6 <UART_SetConfig+0x2e6>
 80087a8:	2304      	movs	r3, #4
 80087aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ae:	e07a      	b.n	80088a6 <UART_SetConfig+0x2e6>
 80087b0:	2308      	movs	r3, #8
 80087b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087b6:	e076      	b.n	80088a6 <UART_SetConfig+0x2e6>
 80087b8:	2310      	movs	r3, #16
 80087ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087be:	e072      	b.n	80088a6 <UART_SetConfig+0x2e6>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a35      	ldr	r2, [pc, #212]	; (800889c <UART_SetConfig+0x2dc>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d12a      	bne.n	8008820 <UART_SetConfig+0x260>
 80087ca:	4b30      	ldr	r3, [pc, #192]	; (800888c <UART_SetConfig+0x2cc>)
 80087cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d8:	d01a      	beq.n	8008810 <UART_SetConfig+0x250>
 80087da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087de:	d81b      	bhi.n	8008818 <UART_SetConfig+0x258>
 80087e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e4:	d00c      	beq.n	8008800 <UART_SetConfig+0x240>
 80087e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ea:	d815      	bhi.n	8008818 <UART_SetConfig+0x258>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <UART_SetConfig+0x238>
 80087f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f4:	d008      	beq.n	8008808 <UART_SetConfig+0x248>
 80087f6:	e00f      	b.n	8008818 <UART_SetConfig+0x258>
 80087f8:	2300      	movs	r3, #0
 80087fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087fe:	e052      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008800:	2302      	movs	r3, #2
 8008802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008806:	e04e      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008808:	2304      	movs	r3, #4
 800880a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800880e:	e04a      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008810:	2308      	movs	r3, #8
 8008812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008816:	e046      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008818:	2310      	movs	r3, #16
 800881a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800881e:	e042      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a17      	ldr	r2, [pc, #92]	; (8008884 <UART_SetConfig+0x2c4>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d13a      	bne.n	80088a0 <UART_SetConfig+0x2e0>
 800882a:	4b18      	ldr	r3, [pc, #96]	; (800888c <UART_SetConfig+0x2cc>)
 800882c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008830:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008838:	d01a      	beq.n	8008870 <UART_SetConfig+0x2b0>
 800883a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800883e:	d81b      	bhi.n	8008878 <UART_SetConfig+0x2b8>
 8008840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008844:	d00c      	beq.n	8008860 <UART_SetConfig+0x2a0>
 8008846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800884a:	d815      	bhi.n	8008878 <UART_SetConfig+0x2b8>
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <UART_SetConfig+0x298>
 8008850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008854:	d008      	beq.n	8008868 <UART_SetConfig+0x2a8>
 8008856:	e00f      	b.n	8008878 <UART_SetConfig+0x2b8>
 8008858:	2300      	movs	r3, #0
 800885a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800885e:	e022      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008860:	2302      	movs	r3, #2
 8008862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008866:	e01e      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008868:	2304      	movs	r3, #4
 800886a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886e:	e01a      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008870:	2308      	movs	r3, #8
 8008872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008876:	e016      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008878:	2310      	movs	r3, #16
 800887a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887e:	e012      	b.n	80088a6 <UART_SetConfig+0x2e6>
 8008880:	efff69f3 	.word	0xefff69f3
 8008884:	40008000 	.word	0x40008000
 8008888:	40013800 	.word	0x40013800
 800888c:	40021000 	.word	0x40021000
 8008890:	40004400 	.word	0x40004400
 8008894:	40004800 	.word	0x40004800
 8008898:	40004c00 	.word	0x40004c00
 800889c:	40005000 	.word	0x40005000
 80088a0:	2310      	movs	r3, #16
 80088a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a9f      	ldr	r2, [pc, #636]	; (8008b28 <UART_SetConfig+0x568>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d17a      	bne.n	80089a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d824      	bhi.n	8008902 <UART_SetConfig+0x342>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <UART_SetConfig+0x300>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088e5 	.word	0x080088e5
 80088c4:	08008903 	.word	0x08008903
 80088c8:	080088ed 	.word	0x080088ed
 80088cc:	08008903 	.word	0x08008903
 80088d0:	080088f3 	.word	0x080088f3
 80088d4:	08008903 	.word	0x08008903
 80088d8:	08008903 	.word	0x08008903
 80088dc:	08008903 	.word	0x08008903
 80088e0:	080088fb 	.word	0x080088fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088e4:	f7fe fbca 	bl	800707c <HAL_RCC_GetPCLK1Freq>
 80088e8:	61f8      	str	r0, [r7, #28]
        break;
 80088ea:	e010      	b.n	800890e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088ec:	4b8f      	ldr	r3, [pc, #572]	; (8008b2c <UART_SetConfig+0x56c>)
 80088ee:	61fb      	str	r3, [r7, #28]
        break;
 80088f0:	e00d      	b.n	800890e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088f2:	f7fe fb2b 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 80088f6:	61f8      	str	r0, [r7, #28]
        break;
 80088f8:	e009      	b.n	800890e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088fe:	61fb      	str	r3, [r7, #28]
        break;
 8008900:	e005      	b.n	800890e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800890c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80fb 	beq.w	8008b0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	4413      	add	r3, r2
 8008920:	69fa      	ldr	r2, [r7, #28]
 8008922:	429a      	cmp	r2, r3
 8008924:	d305      	bcc.n	8008932 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	429a      	cmp	r2, r3
 8008930:	d903      	bls.n	800893a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008938:	e0e8      	b.n	8008b0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	2200      	movs	r2, #0
 800893e:	461c      	mov	r4, r3
 8008940:	4615      	mov	r5, r2
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	f04f 0300 	mov.w	r3, #0
 800894a:	022b      	lsls	r3, r5, #8
 800894c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008950:	0222      	lsls	r2, r4, #8
 8008952:	68f9      	ldr	r1, [r7, #12]
 8008954:	6849      	ldr	r1, [r1, #4]
 8008956:	0849      	lsrs	r1, r1, #1
 8008958:	2000      	movs	r0, #0
 800895a:	4688      	mov	r8, r1
 800895c:	4681      	mov	r9, r0
 800895e:	eb12 0a08 	adds.w	sl, r2, r8
 8008962:	eb43 0b09 	adc.w	fp, r3, r9
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	603b      	str	r3, [r7, #0]
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008974:	4650      	mov	r0, sl
 8008976:	4659      	mov	r1, fp
 8008978:	f7f7 fec6 	bl	8000708 <__aeabi_uldivmod>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	4613      	mov	r3, r2
 8008982:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800898a:	d308      	bcc.n	800899e <UART_SetConfig+0x3de>
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008992:	d204      	bcs.n	800899e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	60da      	str	r2, [r3, #12]
 800899c:	e0b6      	b.n	8008b0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089a4:	e0b2      	b.n	8008b0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ae:	d15e      	bne.n	8008a6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80089b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d828      	bhi.n	8008a0a <UART_SetConfig+0x44a>
 80089b8:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <UART_SetConfig+0x400>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	080089e5 	.word	0x080089e5
 80089c4:	080089ed 	.word	0x080089ed
 80089c8:	080089f5 	.word	0x080089f5
 80089cc:	08008a0b 	.word	0x08008a0b
 80089d0:	080089fb 	.word	0x080089fb
 80089d4:	08008a0b 	.word	0x08008a0b
 80089d8:	08008a0b 	.word	0x08008a0b
 80089dc:	08008a0b 	.word	0x08008a0b
 80089e0:	08008a03 	.word	0x08008a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089e4:	f7fe fb4a 	bl	800707c <HAL_RCC_GetPCLK1Freq>
 80089e8:	61f8      	str	r0, [r7, #28]
        break;
 80089ea:	e014      	b.n	8008a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ec:	f7fe fb5c 	bl	80070a8 <HAL_RCC_GetPCLK2Freq>
 80089f0:	61f8      	str	r0, [r7, #28]
        break;
 80089f2:	e010      	b.n	8008a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089f4:	4b4d      	ldr	r3, [pc, #308]	; (8008b2c <UART_SetConfig+0x56c>)
 80089f6:	61fb      	str	r3, [r7, #28]
        break;
 80089f8:	e00d      	b.n	8008a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089fa:	f7fe faa7 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 80089fe:	61f8      	str	r0, [r7, #28]
        break;
 8008a00:	e009      	b.n	8008a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a06:	61fb      	str	r3, [r7, #28]
        break;
 8008a08:	e005      	b.n	8008a16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d077      	beq.n	8008b0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	005a      	lsls	r2, r3, #1
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	085b      	lsrs	r3, r3, #1
 8008a26:	441a      	add	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b0f      	cmp	r3, #15
 8008a36:	d916      	bls.n	8008a66 <UART_SetConfig+0x4a6>
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a3e:	d212      	bcs.n	8008a66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	f023 030f 	bic.w	r3, r3, #15
 8008a48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	085b      	lsrs	r3, r3, #1
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	8afb      	ldrh	r3, [r7, #22]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	8afa      	ldrh	r2, [r7, #22]
 8008a62:	60da      	str	r2, [r3, #12]
 8008a64:	e052      	b.n	8008b0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a6c:	e04e      	b.n	8008b0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a72:	2b08      	cmp	r3, #8
 8008a74:	d827      	bhi.n	8008ac6 <UART_SetConfig+0x506>
 8008a76:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <UART_SetConfig+0x4bc>)
 8008a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7c:	08008aa1 	.word	0x08008aa1
 8008a80:	08008aa9 	.word	0x08008aa9
 8008a84:	08008ab1 	.word	0x08008ab1
 8008a88:	08008ac7 	.word	0x08008ac7
 8008a8c:	08008ab7 	.word	0x08008ab7
 8008a90:	08008ac7 	.word	0x08008ac7
 8008a94:	08008ac7 	.word	0x08008ac7
 8008a98:	08008ac7 	.word	0x08008ac7
 8008a9c:	08008abf 	.word	0x08008abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa0:	f7fe faec 	bl	800707c <HAL_RCC_GetPCLK1Freq>
 8008aa4:	61f8      	str	r0, [r7, #28]
        break;
 8008aa6:	e014      	b.n	8008ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aa8:	f7fe fafe 	bl	80070a8 <HAL_RCC_GetPCLK2Freq>
 8008aac:	61f8      	str	r0, [r7, #28]
        break;
 8008aae:	e010      	b.n	8008ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ab0:	4b1e      	ldr	r3, [pc, #120]	; (8008b2c <UART_SetConfig+0x56c>)
 8008ab2:	61fb      	str	r3, [r7, #28]
        break;
 8008ab4:	e00d      	b.n	8008ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ab6:	f7fe fa49 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 8008aba:	61f8      	str	r0, [r7, #28]
        break;
 8008abc:	e009      	b.n	8008ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ac2:	61fb      	str	r3, [r7, #28]
        break;
 8008ac4:	e005      	b.n	8008ad2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ad0:	bf00      	nop
    }

    if (pclk != 0U)
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d019      	beq.n	8008b0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	085a      	lsrs	r2, r3, #1
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	441a      	add	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	2b0f      	cmp	r3, #15
 8008af0:	d909      	bls.n	8008b06 <UART_SetConfig+0x546>
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af8:	d205      	bcs.n	8008b06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	60da      	str	r2, [r3, #12]
 8008b04:	e002      	b.n	8008b0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008b18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3728      	adds	r7, #40	; 0x28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b26:	bf00      	nop
 8008b28:	40008000 	.word	0x40008000
 8008b2c:	00f42400 	.word	0x00f42400

08008b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	f003 0310 	and.w	r3, r3, #16
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01a      	beq.n	8008c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c2e:	d10a      	bne.n	8008c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	605a      	str	r2, [r3, #4]
  }
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c84:	f7fc f93e 	bl	8004f04 <HAL_GetTick>
 8008c88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0308 	and.w	r3, r3, #8
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d10e      	bne.n	8008cb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f82d 	bl	8008d06 <UART_WaitOnFlagUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e023      	b.n	8008cfe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d10e      	bne.n	8008ce2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f817 	bl	8008d06 <UART_WaitOnFlagUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e00d      	b.n	8008cfe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2220      	movs	r2, #32
 8008cec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b09c      	sub	sp, #112	; 0x70
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	603b      	str	r3, [r7, #0]
 8008d12:	4613      	mov	r3, r2
 8008d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d16:	e0a5      	b.n	8008e64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d1e:	f000 80a1 	beq.w	8008e64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d22:	f7fc f8ef 	bl	8004f04 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d302      	bcc.n	8008d38 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d13e      	bne.n	8008db6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d40:	e853 3f00 	ldrex	r3, [r3]
 8008d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d5e:	e841 2300 	strex	r3, r2, [r1]
 8008d62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1e6      	bne.n	8008d38 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	f023 0301 	bic.w	r3, r3, #1
 8008d80:	663b      	str	r3, [r7, #96]	; 0x60
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3308      	adds	r3, #8
 8008d88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d92:	e841 2300 	strex	r3, r2, [r1]
 8008d96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e5      	bne.n	8008d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2220      	movs	r2, #32
 8008da2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2220      	movs	r2, #32
 8008da8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e067      	b.n	8008e86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0304 	and.w	r3, r3, #4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d04f      	beq.n	8008e64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dd2:	d147      	bne.n	8008e64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ddc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	e853 3f00 	ldrex	r3, [r3]
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8008dfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e04:	e841 2300 	strex	r3, r2, [r1]
 8008e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e6      	bne.n	8008dde <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3308      	adds	r3, #8
 8008e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f023 0301 	bic.w	r3, r3, #1
 8008e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e30:	623a      	str	r2, [r7, #32]
 8008e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	69f9      	ldr	r1, [r7, #28]
 8008e36:	6a3a      	ldr	r2, [r7, #32]
 8008e38:	e841 2300 	strex	r3, r2, [r1]
 8008e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e5      	bne.n	8008e10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2220      	movs	r2, #32
 8008e48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e010      	b.n	8008e86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	69da      	ldr	r2, [r3, #28]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	bf0c      	ite	eq
 8008e74:	2301      	moveq	r3, #1
 8008e76:	2300      	movne	r3, #0
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	f43f af4a 	beq.w	8008d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3770      	adds	r7, #112	; 0x70
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b085      	sub	sp, #20
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	4603      	mov	r3, r0
 8008e96:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ea0:	2b84      	cmp	r3, #132	; 0x84
 8008ea2:	d005      	beq.n	8008eb0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008ea4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4413      	add	r3, r2
 8008eac:	3303      	adds	r3, #3
 8008eae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008ec2:	f000 fb91 	bl	80095e8 <vTaskStartScheduler>
  
  return osOK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ece:	b089      	sub	sp, #36	; 0x24
 8008ed0:	af04      	add	r7, sp, #16
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d020      	beq.n	8008f20 <osThreadCreate+0x54>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d01c      	beq.n	8008f20 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685c      	ldr	r4, [r3, #4]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681d      	ldr	r5, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691e      	ldr	r6, [r3, #16]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff ffc8 	bl	8008e8e <makeFreeRtosPriority>
 8008efe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f08:	9202      	str	r2, [sp, #8]
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	9100      	str	r1, [sp, #0]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	4632      	mov	r2, r6
 8008f12:	4629      	mov	r1, r5
 8008f14:	4620      	mov	r0, r4
 8008f16:	f000 f8f9 	bl	800910c <xTaskCreateStatic>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	e01c      	b.n	8008f5a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685c      	ldr	r4, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f2c:	b29e      	uxth	r6, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff ffaa 	bl	8008e8e <makeFreeRtosPriority>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	f107 030c 	add.w	r3, r7, #12
 8008f40:	9301      	str	r3, [sp, #4]
 8008f42:	9200      	str	r2, [sp, #0]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	4632      	mov	r2, r6
 8008f48:	4629      	mov	r1, r5
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 f93b 	bl	80091c6 <xTaskCreate>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d001      	beq.n	8008f5a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	e000      	b.n	8008f5c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f64 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fa77 	bl	8009460 <vTaskDelete>
  return osOK;
 8008f72:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <osDelay+0x16>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	e000      	b.n	8008f94 <osDelay+0x18>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 faf3 	bl	8009580 <vTaskDelay>
  
  return osOK;
 8008f9a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f103 0208 	add.w	r2, r3, #8
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f103 0208 	add.w	r2, r3, #8
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f103 0208 	add.w	r2, r3, #8
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ffe:	b480      	push	{r7}
 8009000:	b085      	sub	sp, #20
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	601a      	str	r2, [r3, #0]
}
 800903a:	bf00      	nop
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009046:	b480      	push	{r7}
 8009048:	b085      	sub	sp, #20
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800905c:	d103      	bne.n	8009066 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	e00c      	b.n	8009080 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3308      	adds	r3, #8
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	e002      	b.n	8009074 <vListInsert+0x2e>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	429a      	cmp	r2, r3
 800907e:	d2f6      	bcs.n	800906e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	1c5a      	adds	r2, r3, #1
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]
}
 80090ac:	bf00      	nop
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6892      	ldr	r2, [r2, #8]
 80090ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6852      	ldr	r2, [r2, #4]
 80090d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d103      	bne.n	80090ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	1e5a      	subs	r2, r3, #1
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08e      	sub	sp, #56	; 0x38
 8009110:	af04      	add	r7, sp, #16
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800911a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10a      	bne.n	8009136 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10a      	bne.n	8009152 <xTaskCreateStatic+0x46>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	61fb      	str	r3, [r7, #28]
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009152:	23b4      	movs	r3, #180	; 0xb4
 8009154:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	2bb4      	cmp	r3, #180	; 0xb4
 800915a:	d00a      	beq.n	8009172 <xTaskCreateStatic+0x66>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	61bb      	str	r3, [r7, #24]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009172:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009176:	2b00      	cmp	r3, #0
 8009178:	d01e      	beq.n	80091b8 <xTaskCreateStatic+0xac>
 800917a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01b      	beq.n	80091b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009188:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	2202      	movs	r2, #2
 800918e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009192:	2300      	movs	r3, #0
 8009194:	9303      	str	r3, [sp, #12]
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	9302      	str	r3, [sp, #8]
 800919a:	f107 0314 	add.w	r3, r7, #20
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	68b9      	ldr	r1, [r7, #8]
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 f850 	bl	8009250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091b2:	f000 f8eb 	bl	800938c <prvAddNewTaskToReadyList>
 80091b6:	e001      	b.n	80091bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80091b8:	2300      	movs	r3, #0
 80091ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091bc:	697b      	ldr	r3, [r7, #20]
	}
 80091be:	4618      	mov	r0, r3
 80091c0:	3728      	adds	r7, #40	; 0x28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b08c      	sub	sp, #48	; 0x30
 80091ca:	af04      	add	r7, sp, #16
 80091cc:	60f8      	str	r0, [r7, #12]
 80091ce:	60b9      	str	r1, [r7, #8]
 80091d0:	603b      	str	r3, [r7, #0]
 80091d2:	4613      	mov	r3, r2
 80091d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091d6:	88fb      	ldrh	r3, [r7, #6]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 f9c4 	bl	800a568 <pvPortMalloc>
 80091e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00e      	beq.n	8009206 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091e8:	20b4      	movs	r0, #180	; 0xb4
 80091ea:	f001 f9bd 	bl	800a568 <pvPortMalloc>
 80091ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	697a      	ldr	r2, [r7, #20]
 80091fa:	631a      	str	r2, [r3, #48]	; 0x30
 80091fc:	e005      	b.n	800920a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80091fe:	6978      	ldr	r0, [r7, #20]
 8009200:	f001 fa7e 	bl	800a700 <vPortFree>
 8009204:	e001      	b.n	800920a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d017      	beq.n	8009240 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009218:	88fa      	ldrh	r2, [r7, #6]
 800921a:	2300      	movs	r3, #0
 800921c:	9303      	str	r3, [sp, #12]
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	9302      	str	r3, [sp, #8]
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 f80e 	bl	8009250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009234:	69f8      	ldr	r0, [r7, #28]
 8009236:	f000 f8a9 	bl	800938c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800923a:	2301      	movs	r3, #1
 800923c:	61bb      	str	r3, [r7, #24]
 800923e:	e002      	b.n	8009246 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009244:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009246:	69bb      	ldr	r3, [r7, #24]
	}
 8009248:	4618      	mov	r0, r3
 800924a:	3720      	adds	r7, #32
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009268:	3b01      	subs	r3, #1
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	f023 0307 	bic.w	r3, r3, #7
 8009276:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	f003 0307 	and.w	r3, r3, #7
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	617b      	str	r3, [r7, #20]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d01f      	beq.n	80092de <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800929e:	2300      	movs	r3, #0
 80092a0:	61fb      	str	r3, [r7, #28]
 80092a2:	e012      	b.n	80092ca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	4413      	add	r3, r2
 80092aa:	7819      	ldrb	r1, [r3, #0]
 80092ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	4413      	add	r3, r2
 80092b2:	3334      	adds	r3, #52	; 0x34
 80092b4:	460a      	mov	r2, r1
 80092b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	4413      	add	r3, r2
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d006      	beq.n	80092d2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	3301      	adds	r3, #1
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	2b0f      	cmp	r3, #15
 80092ce:	d9e9      	bls.n	80092a4 <prvInitialiseNewTask+0x54>
 80092d0:	e000      	b.n	80092d4 <prvInitialiseNewTask+0x84>
			{
				break;
 80092d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092dc:	e003      	b.n	80092e6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	2b06      	cmp	r3, #6
 80092ea:	d901      	bls.n	80092f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092ec:	2306      	movs	r3, #6
 80092ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	2200      	movs	r2, #0
 8009300:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	3304      	adds	r3, #4
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff fe6c 	bl	8008fe4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930e:	3318      	adds	r3, #24
 8009310:	4618      	mov	r0, r3
 8009312:	f7ff fe67 	bl	8008fe4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800931a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	f1c3 0207 	rsb	r2, r3, #7
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800932a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	2200      	movs	r2, #0
 8009330:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	2200      	movs	r2, #0
 8009338:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	334c      	adds	r3, #76	; 0x4c
 8009340:	2260      	movs	r2, #96	; 0x60
 8009342:	2100      	movs	r1, #0
 8009344:	4618      	mov	r0, r3
 8009346:	f001 fb37 	bl	800a9b8 <memset>
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	4a0c      	ldr	r2, [pc, #48]	; (8009380 <prvInitialiseNewTask+0x130>)
 800934e:	651a      	str	r2, [r3, #80]	; 0x50
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	4a0c      	ldr	r2, [pc, #48]	; (8009384 <prvInitialiseNewTask+0x134>)
 8009354:	655a      	str	r2, [r3, #84]	; 0x54
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	4a0b      	ldr	r2, [pc, #44]	; (8009388 <prvInitialiseNewTask+0x138>)
 800935a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	69b8      	ldr	r0, [r7, #24]
 8009362:	f000 feb1 	bl	800a0c8 <pxPortInitialiseStack>
 8009366:	4602      	mov	r2, r0
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009376:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009378:	bf00      	nop
 800937a:	3720      	adds	r7, #32
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	08036e18 	.word	0x08036e18
 8009384:	08036e38 	.word	0x08036e38
 8009388:	08036df8 	.word	0x08036df8

0800938c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009394:	f000 ffc6 	bl	800a324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009398:	4b2a      	ldr	r3, [pc, #168]	; (8009444 <prvAddNewTaskToReadyList+0xb8>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3301      	adds	r3, #1
 800939e:	4a29      	ldr	r2, [pc, #164]	; (8009444 <prvAddNewTaskToReadyList+0xb8>)
 80093a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093a2:	4b29      	ldr	r3, [pc, #164]	; (8009448 <prvAddNewTaskToReadyList+0xbc>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d109      	bne.n	80093be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093aa:	4a27      	ldr	r2, [pc, #156]	; (8009448 <prvAddNewTaskToReadyList+0xbc>)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093b0:	4b24      	ldr	r3, [pc, #144]	; (8009444 <prvAddNewTaskToReadyList+0xb8>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d110      	bne.n	80093da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093b8:	f000 fb5c 	bl	8009a74 <prvInitialiseTaskLists>
 80093bc:	e00d      	b.n	80093da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093be:	4b23      	ldr	r3, [pc, #140]	; (800944c <prvAddNewTaskToReadyList+0xc0>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093c6:	4b20      	ldr	r3, [pc, #128]	; (8009448 <prvAddNewTaskToReadyList+0xbc>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d802      	bhi.n	80093da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093d4:	4a1c      	ldr	r2, [pc, #112]	; (8009448 <prvAddNewTaskToReadyList+0xbc>)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093da:	4b1d      	ldr	r3, [pc, #116]	; (8009450 <prvAddNewTaskToReadyList+0xc4>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3301      	adds	r3, #1
 80093e0:	4a1b      	ldr	r2, [pc, #108]	; (8009450 <prvAddNewTaskToReadyList+0xc4>)
 80093e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	2201      	movs	r2, #1
 80093ea:	409a      	lsls	r2, r3
 80093ec:	4b19      	ldr	r3, [pc, #100]	; (8009454 <prvAddNewTaskToReadyList+0xc8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	4a18      	ldr	r2, [pc, #96]	; (8009454 <prvAddNewTaskToReadyList+0xc8>)
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fa:	4613      	mov	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4a15      	ldr	r2, [pc, #84]	; (8009458 <prvAddNewTaskToReadyList+0xcc>)
 8009404:	441a      	add	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3304      	adds	r3, #4
 800940a:	4619      	mov	r1, r3
 800940c:	4610      	mov	r0, r2
 800940e:	f7ff fdf6 	bl	8008ffe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009412:	f000 ffb7 	bl	800a384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009416:	4b0d      	ldr	r3, [pc, #52]	; (800944c <prvAddNewTaskToReadyList+0xc0>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00e      	beq.n	800943c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800941e:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <prvAddNewTaskToReadyList+0xbc>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009428:	429a      	cmp	r2, r3
 800942a:	d207      	bcs.n	800943c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800942c:	4b0b      	ldr	r3, [pc, #44]	; (800945c <prvAddNewTaskToReadyList+0xd0>)
 800942e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800943c:	bf00      	nop
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	200053bc 	.word	0x200053bc
 8009448:	200052bc 	.word	0x200052bc
 800944c:	200053c8 	.word	0x200053c8
 8009450:	200053d8 	.word	0x200053d8
 8009454:	200053c4 	.word	0x200053c4
 8009458:	200052c0 	.word	0x200052c0
 800945c:	e000ed04 	.word	0xe000ed04

08009460 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009468:	f000 ff5c 	bl	800a324 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d102      	bne.n	8009478 <vTaskDelete+0x18>
 8009472:	4b39      	ldr	r3, [pc, #228]	; (8009558 <vTaskDelete+0xf8>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	e000      	b.n	800947a <vTaskDelete+0x1a>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	3304      	adds	r3, #4
 8009480:	4618      	mov	r0, r3
 8009482:	f7ff fe19 	bl	80090b8 <uxListRemove>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d115      	bne.n	80094b8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009490:	4932      	ldr	r1, [pc, #200]	; (800955c <vTaskDelete+0xfc>)
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10a      	bne.n	80094b8 <vTaskDelete+0x58>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a6:	2201      	movs	r2, #1
 80094a8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ac:	43da      	mvns	r2, r3
 80094ae:	4b2c      	ldr	r3, [pc, #176]	; (8009560 <vTaskDelete+0x100>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4013      	ands	r3, r2
 80094b4:	4a2a      	ldr	r2, [pc, #168]	; (8009560 <vTaskDelete+0x100>)
 80094b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d004      	beq.n	80094ca <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3318      	adds	r3, #24
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff fdf7 	bl	80090b8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80094ca:	4b26      	ldr	r3, [pc, #152]	; (8009564 <vTaskDelete+0x104>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3301      	adds	r3, #1
 80094d0:	4a24      	ldr	r2, [pc, #144]	; (8009564 <vTaskDelete+0x104>)
 80094d2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80094d4:	4b20      	ldr	r3, [pc, #128]	; (8009558 <vTaskDelete+0xf8>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d10b      	bne.n	80094f6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4820      	ldr	r0, [pc, #128]	; (8009568 <vTaskDelete+0x108>)
 80094e6:	f7ff fd8a 	bl	8008ffe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80094ea:	4b20      	ldr	r3, [pc, #128]	; (800956c <vTaskDelete+0x10c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	4a1e      	ldr	r2, [pc, #120]	; (800956c <vTaskDelete+0x10c>)
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	e009      	b.n	800950a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80094f6:	4b1e      	ldr	r3, [pc, #120]	; (8009570 <vTaskDelete+0x110>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	4a1c      	ldr	r2, [pc, #112]	; (8009570 <vTaskDelete+0x110>)
 80094fe:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 fb25 	bl	8009b50 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009506:	f000 fb57 	bl	8009bb8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800950a:	f000 ff3b 	bl	800a384 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800950e:	4b19      	ldr	r3, [pc, #100]	; (8009574 <vTaskDelete+0x114>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d01b      	beq.n	800954e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8009516:	4b10      	ldr	r3, [pc, #64]	; (8009558 <vTaskDelete+0xf8>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	429a      	cmp	r2, r3
 800951e:	d116      	bne.n	800954e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009520:	4b15      	ldr	r3, [pc, #84]	; (8009578 <vTaskDelete+0x118>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00a      	beq.n	800953e <vTaskDelete+0xde>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	60bb      	str	r3, [r7, #8]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800953e:	4b0f      	ldr	r3, [pc, #60]	; (800957c <vTaskDelete+0x11c>)
 8009540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009544:	601a      	str	r2, [r3, #0]
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	200052bc 	.word	0x200052bc
 800955c:	200052c0 	.word	0x200052c0
 8009560:	200053c4 	.word	0x200053c4
 8009564:	200053d8 	.word	0x200053d8
 8009568:	20005390 	.word	0x20005390
 800956c:	200053a4 	.word	0x200053a4
 8009570:	200053bc 	.word	0x200053bc
 8009574:	200053c8 	.word	0x200053c8
 8009578:	200053e4 	.word	0x200053e4
 800957c:	e000ed04 	.word	0xe000ed04

08009580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009588:	2300      	movs	r3, #0
 800958a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d017      	beq.n	80095c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009592:	4b13      	ldr	r3, [pc, #76]	; (80095e0 <vTaskDelay+0x60>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <vTaskDelay+0x30>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	60bb      	str	r3, [r7, #8]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80095b0:	f000 f884 	bl	80096bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095b4:	2100      	movs	r1, #0
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fd20 	bl	8009ffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095bc:	f000 f88c 	bl	80096d8 <xTaskResumeAll>
 80095c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d107      	bne.n	80095d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80095c8:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <vTaskDelay+0x64>)
 80095ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095d8:	bf00      	nop
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	200053e4 	.word	0x200053e4
 80095e4:	e000ed04 	.word	0xe000ed04

080095e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08a      	sub	sp, #40	; 0x28
 80095ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095f6:	463a      	mov	r2, r7
 80095f8:	1d39      	adds	r1, r7, #4
 80095fa:	f107 0308 	add.w	r3, r7, #8
 80095fe:	4618      	mov	r0, r3
 8009600:	f7f7 fb4e 	bl	8000ca0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	9202      	str	r2, [sp, #8]
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	2300      	movs	r3, #0
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	2300      	movs	r3, #0
 8009614:	460a      	mov	r2, r1
 8009616:	4921      	ldr	r1, [pc, #132]	; (800969c <vTaskStartScheduler+0xb4>)
 8009618:	4821      	ldr	r0, [pc, #132]	; (80096a0 <vTaskStartScheduler+0xb8>)
 800961a:	f7ff fd77 	bl	800910c <xTaskCreateStatic>
 800961e:	4603      	mov	r3, r0
 8009620:	4a20      	ldr	r2, [pc, #128]	; (80096a4 <vTaskStartScheduler+0xbc>)
 8009622:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009624:	4b1f      	ldr	r3, [pc, #124]	; (80096a4 <vTaskStartScheduler+0xbc>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800962c:	2301      	movs	r3, #1
 800962e:	617b      	str	r3, [r7, #20]
 8009630:	e001      	b.n	8009636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009632:	2300      	movs	r3, #0
 8009634:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d11b      	bne.n	8009674 <vTaskStartScheduler+0x8c>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	613b      	str	r3, [r7, #16]
}
 800964e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009650:	4b15      	ldr	r3, [pc, #84]	; (80096a8 <vTaskStartScheduler+0xc0>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	334c      	adds	r3, #76	; 0x4c
 8009656:	4a15      	ldr	r2, [pc, #84]	; (80096ac <vTaskStartScheduler+0xc4>)
 8009658:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800965a:	4b15      	ldr	r3, [pc, #84]	; (80096b0 <vTaskStartScheduler+0xc8>)
 800965c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009660:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009662:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <vTaskStartScheduler+0xcc>)
 8009664:	2201      	movs	r2, #1
 8009666:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009668:	4b13      	ldr	r3, [pc, #76]	; (80096b8 <vTaskStartScheduler+0xd0>)
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800966e:	f000 fdb7 	bl	800a1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009672:	e00e      	b.n	8009692 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800967a:	d10a      	bne.n	8009692 <vTaskStartScheduler+0xaa>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	60fb      	str	r3, [r7, #12]
}
 800968e:	bf00      	nop
 8009690:	e7fe      	b.n	8009690 <vTaskStartScheduler+0xa8>
}
 8009692:	bf00      	nop
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	0800b7dc 	.word	0x0800b7dc
 80096a0:	08009a45 	.word	0x08009a45
 80096a4:	200053e0 	.word	0x200053e0
 80096a8:	200052bc 	.word	0x200052bc
 80096ac:	20004024 	.word	0x20004024
 80096b0:	200053dc 	.word	0x200053dc
 80096b4:	200053c8 	.word	0x200053c8
 80096b8:	200053c0 	.word	0x200053c0

080096bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096c0:	4b04      	ldr	r3, [pc, #16]	; (80096d4 <vTaskSuspendAll+0x18>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3301      	adds	r3, #1
 80096c6:	4a03      	ldr	r2, [pc, #12]	; (80096d4 <vTaskSuspendAll+0x18>)
 80096c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096ca:	bf00      	nop
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	200053e4 	.word	0x200053e4

080096d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096e6:	4b41      	ldr	r3, [pc, #260]	; (80097ec <xTaskResumeAll+0x114>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <xTaskResumeAll+0x2c>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	603b      	str	r3, [r7, #0]
}
 8009700:	bf00      	nop
 8009702:	e7fe      	b.n	8009702 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009704:	f000 fe0e 	bl	800a324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009708:	4b38      	ldr	r3, [pc, #224]	; (80097ec <xTaskResumeAll+0x114>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3b01      	subs	r3, #1
 800970e:	4a37      	ldr	r2, [pc, #220]	; (80097ec <xTaskResumeAll+0x114>)
 8009710:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009712:	4b36      	ldr	r3, [pc, #216]	; (80097ec <xTaskResumeAll+0x114>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d161      	bne.n	80097de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800971a:	4b35      	ldr	r3, [pc, #212]	; (80097f0 <xTaskResumeAll+0x118>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d05d      	beq.n	80097de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009722:	e02e      	b.n	8009782 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009724:	4b33      	ldr	r3, [pc, #204]	; (80097f4 <xTaskResumeAll+0x11c>)
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3318      	adds	r3, #24
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff fcc1 	bl	80090b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	3304      	adds	r3, #4
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff fcbc 	bl	80090b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	2201      	movs	r2, #1
 8009746:	409a      	lsls	r2, r3
 8009748:	4b2b      	ldr	r3, [pc, #172]	; (80097f8 <xTaskResumeAll+0x120>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4313      	orrs	r3, r2
 800974e:	4a2a      	ldr	r2, [pc, #168]	; (80097f8 <xTaskResumeAll+0x120>)
 8009750:	6013      	str	r3, [r2, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009756:	4613      	mov	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4a27      	ldr	r2, [pc, #156]	; (80097fc <xTaskResumeAll+0x124>)
 8009760:	441a      	add	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3304      	adds	r3, #4
 8009766:	4619      	mov	r1, r3
 8009768:	4610      	mov	r0, r2
 800976a:	f7ff fc48 	bl	8008ffe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009772:	4b23      	ldr	r3, [pc, #140]	; (8009800 <xTaskResumeAll+0x128>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009778:	429a      	cmp	r2, r3
 800977a:	d302      	bcc.n	8009782 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800977c:	4b21      	ldr	r3, [pc, #132]	; (8009804 <xTaskResumeAll+0x12c>)
 800977e:	2201      	movs	r2, #1
 8009780:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009782:	4b1c      	ldr	r3, [pc, #112]	; (80097f4 <xTaskResumeAll+0x11c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1cc      	bne.n	8009724 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009790:	f000 fa12 	bl	8009bb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009794:	4b1c      	ldr	r3, [pc, #112]	; (8009808 <xTaskResumeAll+0x130>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d010      	beq.n	80097c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097a0:	f000 f836 	bl	8009810 <xTaskIncrementTick>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80097aa:	4b16      	ldr	r3, [pc, #88]	; (8009804 <xTaskResumeAll+0x12c>)
 80097ac:	2201      	movs	r2, #1
 80097ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1f1      	bne.n	80097a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80097bc:	4b12      	ldr	r3, [pc, #72]	; (8009808 <xTaskResumeAll+0x130>)
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097c2:	4b10      	ldr	r3, [pc, #64]	; (8009804 <xTaskResumeAll+0x12c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097ca:	2301      	movs	r3, #1
 80097cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097ce:	4b0f      	ldr	r3, [pc, #60]	; (800980c <xTaskResumeAll+0x134>)
 80097d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097de:	f000 fdd1 	bl	800a384 <vPortExitCritical>

	return xAlreadyYielded;
 80097e2:	68bb      	ldr	r3, [r7, #8]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	200053e4 	.word	0x200053e4
 80097f0:	200053bc 	.word	0x200053bc
 80097f4:	2000537c 	.word	0x2000537c
 80097f8:	200053c4 	.word	0x200053c4
 80097fc:	200052c0 	.word	0x200052c0
 8009800:	200052bc 	.word	0x200052bc
 8009804:	200053d0 	.word	0x200053d0
 8009808:	200053cc 	.word	0x200053cc
 800980c:	e000ed04 	.word	0xe000ed04

08009810 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009816:	2300      	movs	r3, #0
 8009818:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800981a:	4b4e      	ldr	r3, [pc, #312]	; (8009954 <xTaskIncrementTick+0x144>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f040 808e 	bne.w	8009940 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009824:	4b4c      	ldr	r3, [pc, #304]	; (8009958 <xTaskIncrementTick+0x148>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3301      	adds	r3, #1
 800982a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800982c:	4a4a      	ldr	r2, [pc, #296]	; (8009958 <xTaskIncrementTick+0x148>)
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d120      	bne.n	800987a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009838:	4b48      	ldr	r3, [pc, #288]	; (800995c <xTaskIncrementTick+0x14c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00a      	beq.n	8009858 <xTaskIncrementTick+0x48>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	603b      	str	r3, [r7, #0]
}
 8009854:	bf00      	nop
 8009856:	e7fe      	b.n	8009856 <xTaskIncrementTick+0x46>
 8009858:	4b40      	ldr	r3, [pc, #256]	; (800995c <xTaskIncrementTick+0x14c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	4b40      	ldr	r3, [pc, #256]	; (8009960 <xTaskIncrementTick+0x150>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a3e      	ldr	r2, [pc, #248]	; (800995c <xTaskIncrementTick+0x14c>)
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	4a3e      	ldr	r2, [pc, #248]	; (8009960 <xTaskIncrementTick+0x150>)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	4b3d      	ldr	r3, [pc, #244]	; (8009964 <xTaskIncrementTick+0x154>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3301      	adds	r3, #1
 8009872:	4a3c      	ldr	r2, [pc, #240]	; (8009964 <xTaskIncrementTick+0x154>)
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	f000 f99f 	bl	8009bb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800987a:	4b3b      	ldr	r3, [pc, #236]	; (8009968 <xTaskIncrementTick+0x158>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	429a      	cmp	r2, r3
 8009882:	d348      	bcc.n	8009916 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009884:	4b35      	ldr	r3, [pc, #212]	; (800995c <xTaskIncrementTick+0x14c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d104      	bne.n	8009898 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800988e:	4b36      	ldr	r3, [pc, #216]	; (8009968 <xTaskIncrementTick+0x158>)
 8009890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009894:	601a      	str	r2, [r3, #0]
					break;
 8009896:	e03e      	b.n	8009916 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009898:	4b30      	ldr	r3, [pc, #192]	; (800995c <xTaskIncrementTick+0x14c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d203      	bcs.n	80098b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098b0:	4a2d      	ldr	r2, [pc, #180]	; (8009968 <xTaskIncrementTick+0x158>)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098b6:	e02e      	b.n	8009916 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	3304      	adds	r3, #4
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff fbfb 	bl	80090b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d004      	beq.n	80098d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	3318      	adds	r3, #24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fbf2 	bl	80090b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	2201      	movs	r2, #1
 80098da:	409a      	lsls	r2, r3
 80098dc:	4b23      	ldr	r3, [pc, #140]	; (800996c <xTaskIncrementTick+0x15c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	4a22      	ldr	r2, [pc, #136]	; (800996c <xTaskIncrementTick+0x15c>)
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4a1f      	ldr	r2, [pc, #124]	; (8009970 <xTaskIncrementTick+0x160>)
 80098f4:	441a      	add	r2, r3
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f7ff fb7e 	bl	8008ffe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009906:	4b1b      	ldr	r3, [pc, #108]	; (8009974 <xTaskIncrementTick+0x164>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	429a      	cmp	r2, r3
 800990e:	d3b9      	bcc.n	8009884 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009910:	2301      	movs	r3, #1
 8009912:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009914:	e7b6      	b.n	8009884 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009916:	4b17      	ldr	r3, [pc, #92]	; (8009974 <xTaskIncrementTick+0x164>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800991c:	4914      	ldr	r1, [pc, #80]	; (8009970 <xTaskIncrementTick+0x160>)
 800991e:	4613      	mov	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	440b      	add	r3, r1
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d901      	bls.n	8009932 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800992e:	2301      	movs	r3, #1
 8009930:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009932:	4b11      	ldr	r3, [pc, #68]	; (8009978 <xTaskIncrementTick+0x168>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d007      	beq.n	800994a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800993a:	2301      	movs	r3, #1
 800993c:	617b      	str	r3, [r7, #20]
 800993e:	e004      	b.n	800994a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009940:	4b0e      	ldr	r3, [pc, #56]	; (800997c <xTaskIncrementTick+0x16c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3301      	adds	r3, #1
 8009946:	4a0d      	ldr	r2, [pc, #52]	; (800997c <xTaskIncrementTick+0x16c>)
 8009948:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800994a:	697b      	ldr	r3, [r7, #20]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	200053e4 	.word	0x200053e4
 8009958:	200053c0 	.word	0x200053c0
 800995c:	20005374 	.word	0x20005374
 8009960:	20005378 	.word	0x20005378
 8009964:	200053d4 	.word	0x200053d4
 8009968:	200053dc 	.word	0x200053dc
 800996c:	200053c4 	.word	0x200053c4
 8009970:	200052c0 	.word	0x200052c0
 8009974:	200052bc 	.word	0x200052bc
 8009978:	200053d0 	.word	0x200053d0
 800997c:	200053cc 	.word	0x200053cc

08009980 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009986:	4b29      	ldr	r3, [pc, #164]	; (8009a2c <vTaskSwitchContext+0xac>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800998e:	4b28      	ldr	r3, [pc, #160]	; (8009a30 <vTaskSwitchContext+0xb0>)
 8009990:	2201      	movs	r2, #1
 8009992:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009994:	e044      	b.n	8009a20 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009996:	4b26      	ldr	r3, [pc, #152]	; (8009a30 <vTaskSwitchContext+0xb0>)
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999c:	4b25      	ldr	r3, [pc, #148]	; (8009a34 <vTaskSwitchContext+0xb4>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	fab3 f383 	clz	r3, r3
 80099a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80099aa:	7afb      	ldrb	r3, [r7, #11]
 80099ac:	f1c3 031f 	rsb	r3, r3, #31
 80099b0:	617b      	str	r3, [r7, #20]
 80099b2:	4921      	ldr	r1, [pc, #132]	; (8009a38 <vTaskSwitchContext+0xb8>)
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10a      	bne.n	80099dc <vTaskSwitchContext+0x5c>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	607b      	str	r3, [r7, #4]
}
 80099d8:	bf00      	nop
 80099da:	e7fe      	b.n	80099da <vTaskSwitchContext+0x5a>
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	4613      	mov	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4a14      	ldr	r2, [pc, #80]	; (8009a38 <vTaskSwitchContext+0xb8>)
 80099e8:	4413      	add	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	605a      	str	r2, [r3, #4]
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	3308      	adds	r3, #8
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d104      	bne.n	8009a0c <vTaskSwitchContext+0x8c>
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	605a      	str	r2, [r3, #4]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	4a0a      	ldr	r2, [pc, #40]	; (8009a3c <vTaskSwitchContext+0xbc>)
 8009a14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a16:	4b09      	ldr	r3, [pc, #36]	; (8009a3c <vTaskSwitchContext+0xbc>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	334c      	adds	r3, #76	; 0x4c
 8009a1c:	4a08      	ldr	r2, [pc, #32]	; (8009a40 <vTaskSwitchContext+0xc0>)
 8009a1e:	6013      	str	r3, [r2, #0]
}
 8009a20:	bf00      	nop
 8009a22:	371c      	adds	r7, #28
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	200053e4 	.word	0x200053e4
 8009a30:	200053d0 	.word	0x200053d0
 8009a34:	200053c4 	.word	0x200053c4
 8009a38:	200052c0 	.word	0x200052c0
 8009a3c:	200052bc 	.word	0x200052bc
 8009a40:	20004024 	.word	0x20004024

08009a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a4c:	f000 f852 	bl	8009af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a50:	4b06      	ldr	r3, [pc, #24]	; (8009a6c <prvIdleTask+0x28>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d9f9      	bls.n	8009a4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a58:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <prvIdleTask+0x2c>)
 8009a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a68:	e7f0      	b.n	8009a4c <prvIdleTask+0x8>
 8009a6a:	bf00      	nop
 8009a6c:	200052c0 	.word	0x200052c0
 8009a70:	e000ed04 	.word	0xe000ed04

08009a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	607b      	str	r3, [r7, #4]
 8009a7e:	e00c      	b.n	8009a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4a12      	ldr	r2, [pc, #72]	; (8009ad4 <prvInitialiseTaskLists+0x60>)
 8009a8c:	4413      	add	r3, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7ff fa88 	bl	8008fa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3301      	adds	r3, #1
 8009a98:	607b      	str	r3, [r7, #4]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b06      	cmp	r3, #6
 8009a9e:	d9ef      	bls.n	8009a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009aa0:	480d      	ldr	r0, [pc, #52]	; (8009ad8 <prvInitialiseTaskLists+0x64>)
 8009aa2:	f7ff fa7f 	bl	8008fa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009aa6:	480d      	ldr	r0, [pc, #52]	; (8009adc <prvInitialiseTaskLists+0x68>)
 8009aa8:	f7ff fa7c 	bl	8008fa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009aac:	480c      	ldr	r0, [pc, #48]	; (8009ae0 <prvInitialiseTaskLists+0x6c>)
 8009aae:	f7ff fa79 	bl	8008fa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ab2:	480c      	ldr	r0, [pc, #48]	; (8009ae4 <prvInitialiseTaskLists+0x70>)
 8009ab4:	f7ff fa76 	bl	8008fa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ab8:	480b      	ldr	r0, [pc, #44]	; (8009ae8 <prvInitialiseTaskLists+0x74>)
 8009aba:	f7ff fa73 	bl	8008fa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009abe:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <prvInitialiseTaskLists+0x78>)
 8009ac0:	4a05      	ldr	r2, [pc, #20]	; (8009ad8 <prvInitialiseTaskLists+0x64>)
 8009ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ac4:	4b0a      	ldr	r3, [pc, #40]	; (8009af0 <prvInitialiseTaskLists+0x7c>)
 8009ac6:	4a05      	ldr	r2, [pc, #20]	; (8009adc <prvInitialiseTaskLists+0x68>)
 8009ac8:	601a      	str	r2, [r3, #0]
}
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	200052c0 	.word	0x200052c0
 8009ad8:	2000534c 	.word	0x2000534c
 8009adc:	20005360 	.word	0x20005360
 8009ae0:	2000537c 	.word	0x2000537c
 8009ae4:	20005390 	.word	0x20005390
 8009ae8:	200053a8 	.word	0x200053a8
 8009aec:	20005374 	.word	0x20005374
 8009af0:	20005378 	.word	0x20005378

08009af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009afa:	e019      	b.n	8009b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009afc:	f000 fc12 	bl	800a324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b00:	4b10      	ldr	r3, [pc, #64]	; (8009b44 <prvCheckTasksWaitingTermination+0x50>)
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff fad3 	bl	80090b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b12:	4b0d      	ldr	r3, [pc, #52]	; (8009b48 <prvCheckTasksWaitingTermination+0x54>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	4a0b      	ldr	r2, [pc, #44]	; (8009b48 <prvCheckTasksWaitingTermination+0x54>)
 8009b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b1c:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <prvCheckTasksWaitingTermination+0x58>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	4a0a      	ldr	r2, [pc, #40]	; (8009b4c <prvCheckTasksWaitingTermination+0x58>)
 8009b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b26:	f000 fc2d 	bl	800a384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f810 	bl	8009b50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b30:	4b06      	ldr	r3, [pc, #24]	; (8009b4c <prvCheckTasksWaitingTermination+0x58>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1e1      	bne.n	8009afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20005390 	.word	0x20005390
 8009b48:	200053bc 	.word	0x200053bc
 8009b4c:	200053a4 	.word	0x200053a4

08009b50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	334c      	adds	r3, #76	; 0x4c
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 ffd5 	bl	800ab0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d108      	bne.n	8009b7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 fdc5 	bl	800a700 <vPortFree>
				vPortFree( pxTCB );
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fdc2 	bl	800a700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b7c:	e018      	b.n	8009bb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d103      	bne.n	8009b90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fdb9 	bl	800a700 <vPortFree>
	}
 8009b8e:	e00f      	b.n	8009bb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d00a      	beq.n	8009bb0 <prvDeleteTCB+0x60>
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	60fb      	str	r3, [r7, #12]
}
 8009bac:	bf00      	nop
 8009bae:	e7fe      	b.n	8009bae <prvDeleteTCB+0x5e>
	}
 8009bb0:	bf00      	nop
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bbe:	4b0c      	ldr	r3, [pc, #48]	; (8009bf0 <prvResetNextTaskUnblockTime+0x38>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d104      	bne.n	8009bd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009bc8:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8009bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bd0:	e008      	b.n	8009be4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd2:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <prvResetNextTaskUnblockTime+0x38>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	4a04      	ldr	r2, [pc, #16]	; (8009bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8009be2:	6013      	str	r3, [r2, #0]
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	20005374 	.word	0x20005374
 8009bf4:	200053dc 	.word	0x200053dc

08009bf8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009c06:	f000 fb8d 	bl	800a324 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009c0a:	4b29      	ldr	r3, [pc, #164]	; (8009cb0 <xTaskNotifyWait+0xb8>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d01c      	beq.n	8009c52 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009c18:	4b25      	ldr	r3, [pc, #148]	; (8009cb0 <xTaskNotifyWait+0xb8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	43d2      	mvns	r2, r2
 8009c24:	400a      	ands	r2, r1
 8009c26:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009c2a:	4b21      	ldr	r3, [pc, #132]	; (8009cb0 <xTaskNotifyWait+0xb8>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00b      	beq.n	8009c52 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	6838      	ldr	r0, [r7, #0]
 8009c3e:	f000 f9dd 	bl	8009ffc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009c42:	4b1c      	ldr	r3, [pc, #112]	; (8009cb4 <xTaskNotifyWait+0xbc>)
 8009c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009c52:	f000 fb97 	bl	800a384 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009c56:	f000 fb65 	bl	800a324 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d005      	beq.n	8009c6c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009c60:	4b13      	ldr	r3, [pc, #76]	; (8009cb0 <xTaskNotifyWait+0xb8>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009c6c:	4b10      	ldr	r3, [pc, #64]	; (8009cb0 <xTaskNotifyWait+0xb8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d002      	beq.n	8009c80 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	e00a      	b.n	8009c96 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009c80:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <xTaskNotifyWait+0xb8>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	43d2      	mvns	r2, r2
 8009c8c:	400a      	ands	r2, r1
 8009c8e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8009c92:	2301      	movs	r3, #1
 8009c94:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c96:	4b06      	ldr	r3, [pc, #24]	; (8009cb0 <xTaskNotifyWait+0xb8>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8009ca0:	f000 fb70 	bl	800a384 <vPortExitCritical>

		return xReturn;
 8009ca4:	697b      	ldr	r3, [r7, #20]
	}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	200052bc 	.word	0x200052bc
 8009cb4:	e000ed04 	.word	0xe000ed04

08009cb8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08a      	sub	sp, #40	; 0x28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10a      	bne.n	8009ce8 <xTaskGenericNotify+0x30>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	61bb      	str	r3, [r7, #24]
}
 8009ce4:	bf00      	nop
 8009ce6:	e7fe      	b.n	8009ce6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009cec:	f000 fb1a 	bl	800a324 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d004      	beq.n	8009d00 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009d06:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8009d10:	79fb      	ldrb	r3, [r7, #7]
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d82d      	bhi.n	8009d72 <xTaskGenericNotify+0xba>
 8009d16:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <xTaskGenericNotify+0x64>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d95 	.word	0x08009d95
 8009d20:	08009d31 	.word	0x08009d31
 8009d24:	08009d43 	.word	0x08009d43
 8009d28:	08009d53 	.word	0x08009d53
 8009d2c:	08009d5d 	.word	0x08009d5d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009d40:	e02b      	b.n	8009d9a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d48:	1c5a      	adds	r2, r3, #1
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009d50:	e023      	b.n	8009d9a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009d5a:	e01e      	b.n	8009d9a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009d5c:	7ffb      	ldrb	r3, [r7, #31]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d004      	beq.n	8009d6c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009d6a:	e016      	b.n	8009d9a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009d70:	e013      	b.n	8009d9a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d7c:	d00c      	beq.n	8009d98 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	617b      	str	r3, [r7, #20]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <xTaskGenericNotify+0xda>
					break;
 8009d94:	bf00      	nop
 8009d96:	e000      	b.n	8009d9a <xTaskGenericNotify+0xe2>

					break;
 8009d98:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d9a:	7ffb      	ldrb	r3, [r7, #31]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d139      	bne.n	8009e14 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7ff f987 	bl	80090b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	2201      	movs	r2, #1
 8009db0:	409a      	lsls	r2, r3
 8009db2:	4b1c      	ldr	r3, [pc, #112]	; (8009e24 <xTaskGenericNotify+0x16c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	4a1a      	ldr	r2, [pc, #104]	; (8009e24 <xTaskGenericNotify+0x16c>)
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4a17      	ldr	r2, [pc, #92]	; (8009e28 <xTaskGenericNotify+0x170>)
 8009dca:	441a      	add	r2, r3
 8009dcc:	6a3b      	ldr	r3, [r7, #32]
 8009dce:	3304      	adds	r3, #4
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	f7ff f913 	bl	8008ffe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00a      	beq.n	8009df6 <xTaskGenericNotify+0x13e>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	613b      	str	r3, [r7, #16]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfa:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <xTaskGenericNotify+0x174>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d907      	bls.n	8009e14 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009e04:	4b0a      	ldr	r3, [pc, #40]	; (8009e30 <xTaskGenericNotify+0x178>)
 8009e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009e14:	f000 fab6 	bl	800a384 <vPortExitCritical>

		return xReturn;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3728      	adds	r7, #40	; 0x28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	200053c4 	.word	0x200053c4
 8009e28:	200052c0 	.word	0x200052c0
 8009e2c:	200052bc 	.word	0x200052bc
 8009e30:	e000ed04 	.word	0xe000ed04

08009e34 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b08e      	sub	sp, #56	; 0x38
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	4613      	mov	r3, r2
 8009e42:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009e44:	2301      	movs	r3, #1
 8009e46:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10a      	bne.n	8009e64 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e60:	bf00      	nop
 8009e62:	e7fe      	b.n	8009e62 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e64:	f000 fb40 	bl	800a4e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e6c:	f3ef 8211 	mrs	r2, BASEPRI
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	623a      	str	r2, [r7, #32]
 8009e82:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e84:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e86:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d004      	beq.n	8009e98 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	d82f      	bhi.n	8009f10 <xTaskGenericNotifyFromISR+0xdc>
 8009eb0:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <xTaskGenericNotifyFromISR+0x84>)
 8009eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb6:	bf00      	nop
 8009eb8:	08009f33 	.word	0x08009f33
 8009ebc:	08009ecd 	.word	0x08009ecd
 8009ec0:	08009edf 	.word	0x08009edf
 8009ec4:	08009eef 	.word	0x08009eef
 8009ec8:	08009ef9 	.word	0x08009ef9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009edc:	e02c      	b.n	8009f38 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009eec:	e024      	b.n	8009f38 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009ef6:	e01f      	b.n	8009f38 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d004      	beq.n	8009f0a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009f08:	e016      	b.n	8009f38 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009f0e:	e013      	b.n	8009f38 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f1a:	d00c      	beq.n	8009f36 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	61bb      	str	r3, [r7, #24]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009f32:	bf00      	nop
 8009f34:	e000      	b.n	8009f38 <xTaskGenericNotifyFromISR+0x104>
					break;
 8009f36:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009f38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d145      	bne.n	8009fcc <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	617b      	str	r3, [r7, #20]
}
 8009f5a:	bf00      	nop
 8009f5c:	e7fe      	b.n	8009f5c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f5e:	4b21      	ldr	r3, [pc, #132]	; (8009fe4 <xTaskGenericNotifyFromISR+0x1b0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d11c      	bne.n	8009fa0 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff f8a4 	bl	80090b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f74:	2201      	movs	r2, #1
 8009f76:	409a      	lsls	r2, r3
 8009f78:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <xTaskGenericNotifyFromISR+0x1b4>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	4a1a      	ldr	r2, [pc, #104]	; (8009fe8 <xTaskGenericNotifyFromISR+0x1b4>)
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4a17      	ldr	r2, [pc, #92]	; (8009fec <xTaskGenericNotifyFromISR+0x1b8>)
 8009f90:	441a      	add	r2, r3
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	3304      	adds	r3, #4
 8009f96:	4619      	mov	r1, r3
 8009f98:	4610      	mov	r0, r2
 8009f9a:	f7ff f830 	bl	8008ffe <vListInsertEnd>
 8009f9e:	e005      	b.n	8009fac <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	3318      	adds	r3, #24
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4812      	ldr	r0, [pc, #72]	; (8009ff0 <xTaskGenericNotifyFromISR+0x1bc>)
 8009fa8:	f7ff f829 	bl	8008ffe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb0:	4b10      	ldr	r3, [pc, #64]	; (8009ff4 <xTaskGenericNotifyFromISR+0x1c0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d908      	bls.n	8009fcc <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d002      	beq.n	8009fc6 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <xTaskGenericNotifyFromISR+0x1c4>)
 8009fc8:	2201      	movs	r2, #1
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fd6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3738      	adds	r7, #56	; 0x38
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200053e4 	.word	0x200053e4
 8009fe8:	200053c4 	.word	0x200053c4
 8009fec:	200052c0 	.word	0x200052c0
 8009ff0:	2000537c 	.word	0x2000537c
 8009ff4:	200052bc 	.word	0x200052bc
 8009ff8:	200053d0 	.word	0x200053d0

08009ffc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a006:	4b29      	ldr	r3, [pc, #164]	; (800a0ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a00c:	4b28      	ldr	r3, [pc, #160]	; (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3304      	adds	r3, #4
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff f850 	bl	80090b8 <uxListRemove>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10b      	bne.n	800a036 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a01e:	4b24      	ldr	r3, [pc, #144]	; (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a024:	2201      	movs	r2, #1
 800a026:	fa02 f303 	lsl.w	r3, r2, r3
 800a02a:	43da      	mvns	r2, r3
 800a02c:	4b21      	ldr	r3, [pc, #132]	; (800a0b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4013      	ands	r3, r2
 800a032:	4a20      	ldr	r2, [pc, #128]	; (800a0b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a034:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a03c:	d10a      	bne.n	800a054 <prvAddCurrentTaskToDelayedList+0x58>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d007      	beq.n	800a054 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a044:	4b1a      	ldr	r3, [pc, #104]	; (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3304      	adds	r3, #4
 800a04a:	4619      	mov	r1, r3
 800a04c:	481a      	ldr	r0, [pc, #104]	; (800a0b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a04e:	f7fe ffd6 	bl	8008ffe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a052:	e026      	b.n	800a0a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4413      	add	r3, r2
 800a05a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a05c:	4b14      	ldr	r3, [pc, #80]	; (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d209      	bcs.n	800a080 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a06c:	4b13      	ldr	r3, [pc, #76]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	4b0f      	ldr	r3, [pc, #60]	; (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3304      	adds	r3, #4
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f7fe ffe4 	bl	8009046 <vListInsert>
}
 800a07e:	e010      	b.n	800a0a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a080:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	4b0a      	ldr	r3, [pc, #40]	; (800a0b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3304      	adds	r3, #4
 800a08a:	4619      	mov	r1, r3
 800a08c:	4610      	mov	r0, r2
 800a08e:	f7fe ffda 	bl	8009046 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a092:	4b0c      	ldr	r3, [pc, #48]	; (800a0c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d202      	bcs.n	800a0a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a09c:	4a09      	ldr	r2, [pc, #36]	; (800a0c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	6013      	str	r3, [r2, #0]
}
 800a0a2:	bf00      	nop
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	200053c0 	.word	0x200053c0
 800a0b0:	200052bc 	.word	0x200052bc
 800a0b4:	200053c4 	.word	0x200053c4
 800a0b8:	200053a8 	.word	0x200053a8
 800a0bc:	20005378 	.word	0x20005378
 800a0c0:	20005374 	.word	0x20005374
 800a0c4:	200053dc 	.word	0x200053dc

0800a0c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3b04      	subs	r3, #4
 800a0d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3b04      	subs	r3, #4
 800a0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f023 0201 	bic.w	r2, r3, #1
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3b04      	subs	r3, #4
 800a0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0f8:	4a0c      	ldr	r2, [pc, #48]	; (800a12c <pxPortInitialiseStack+0x64>)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3b14      	subs	r3, #20
 800a102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3b04      	subs	r3, #4
 800a10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f06f 0202 	mvn.w	r2, #2
 800a116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3b20      	subs	r3, #32
 800a11c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a11e:	68fb      	ldr	r3, [r7, #12]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	0800a131 	.word	0x0800a131

0800a130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a13a:	4b12      	ldr	r3, [pc, #72]	; (800a184 <prvTaskExitError+0x54>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a142:	d00a      	beq.n	800a15a <prvTaskExitError+0x2a>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	60fb      	str	r3, [r7, #12]
}
 800a156:	bf00      	nop
 800a158:	e7fe      	b.n	800a158 <prvTaskExitError+0x28>
	__asm volatile
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	60bb      	str	r3, [r7, #8]
}
 800a16c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a16e:	bf00      	nop
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0fc      	beq.n	800a170 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a176:	bf00      	nop
 800a178:	bf00      	nop
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	20004020 	.word	0x20004020
	...

0800a190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a190:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <pxCurrentTCBConst2>)
 800a192:	6819      	ldr	r1, [r3, #0]
 800a194:	6808      	ldr	r0, [r1, #0]
 800a196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19a:	f380 8809 	msr	PSP, r0
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f04f 0000 	mov.w	r0, #0
 800a1a6:	f380 8811 	msr	BASEPRI, r0
 800a1aa:	4770      	bx	lr
 800a1ac:	f3af 8000 	nop.w

0800a1b0 <pxCurrentTCBConst2>:
 800a1b0:	200052bc 	.word	0x200052bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop

0800a1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1b8:	4808      	ldr	r0, [pc, #32]	; (800a1dc <prvPortStartFirstTask+0x24>)
 800a1ba:	6800      	ldr	r0, [r0, #0]
 800a1bc:	6800      	ldr	r0, [r0, #0]
 800a1be:	f380 8808 	msr	MSP, r0
 800a1c2:	f04f 0000 	mov.w	r0, #0
 800a1c6:	f380 8814 	msr	CONTROL, r0
 800a1ca:	b662      	cpsie	i
 800a1cc:	b661      	cpsie	f
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	df00      	svc	0
 800a1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1da:	bf00      	nop
 800a1dc:	e000ed08 	.word	0xe000ed08

0800a1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1e6:	4b46      	ldr	r3, [pc, #280]	; (800a300 <xPortStartScheduler+0x120>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a46      	ldr	r2, [pc, #280]	; (800a304 <xPortStartScheduler+0x124>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d10a      	bne.n	800a206 <xPortStartScheduler+0x26>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	613b      	str	r3, [r7, #16]
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a206:	4b3e      	ldr	r3, [pc, #248]	; (800a300 <xPortStartScheduler+0x120>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a3f      	ldr	r2, [pc, #252]	; (800a308 <xPortStartScheduler+0x128>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d10a      	bne.n	800a226 <xPortStartScheduler+0x46>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	60fb      	str	r3, [r7, #12]
}
 800a222:	bf00      	nop
 800a224:	e7fe      	b.n	800a224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a226:	4b39      	ldr	r3, [pc, #228]	; (800a30c <xPortStartScheduler+0x12c>)
 800a228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	22ff      	movs	r2, #255	; 0xff
 800a236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a240:	78fb      	ldrb	r3, [r7, #3]
 800a242:	b2db      	uxtb	r3, r3
 800a244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	4b31      	ldr	r3, [pc, #196]	; (800a310 <xPortStartScheduler+0x130>)
 800a24c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a24e:	4b31      	ldr	r3, [pc, #196]	; (800a314 <xPortStartScheduler+0x134>)
 800a250:	2207      	movs	r2, #7
 800a252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a254:	e009      	b.n	800a26a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a256:	4b2f      	ldr	r3, [pc, #188]	; (800a314 <xPortStartScheduler+0x134>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	4a2d      	ldr	r2, [pc, #180]	; (800a314 <xPortStartScheduler+0x134>)
 800a25e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a260:	78fb      	ldrb	r3, [r7, #3]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	b2db      	uxtb	r3, r3
 800a268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a26a:	78fb      	ldrb	r3, [r7, #3]
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a272:	2b80      	cmp	r3, #128	; 0x80
 800a274:	d0ef      	beq.n	800a256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a276:	4b27      	ldr	r3, [pc, #156]	; (800a314 <xPortStartScheduler+0x134>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f1c3 0307 	rsb	r3, r3, #7
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d00a      	beq.n	800a298 <xPortStartScheduler+0xb8>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	60bb      	str	r3, [r7, #8]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a298:	4b1e      	ldr	r3, [pc, #120]	; (800a314 <xPortStartScheduler+0x134>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	021b      	lsls	r3, r3, #8
 800a29e:	4a1d      	ldr	r2, [pc, #116]	; (800a314 <xPortStartScheduler+0x134>)
 800a2a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2a2:	4b1c      	ldr	r3, [pc, #112]	; (800a314 <xPortStartScheduler+0x134>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2aa:	4a1a      	ldr	r2, [pc, #104]	; (800a314 <xPortStartScheduler+0x134>)
 800a2ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2b6:	4b18      	ldr	r3, [pc, #96]	; (800a318 <xPortStartScheduler+0x138>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a17      	ldr	r2, [pc, #92]	; (800a318 <xPortStartScheduler+0x138>)
 800a2bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2c2:	4b15      	ldr	r3, [pc, #84]	; (800a318 <xPortStartScheduler+0x138>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a14      	ldr	r2, [pc, #80]	; (800a318 <xPortStartScheduler+0x138>)
 800a2c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a2cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2ce:	f000 f8dd 	bl	800a48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2d2:	4b12      	ldr	r3, [pc, #72]	; (800a31c <xPortStartScheduler+0x13c>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2d8:	f000 f8fc 	bl	800a4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2dc:	4b10      	ldr	r3, [pc, #64]	; (800a320 <xPortStartScheduler+0x140>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a0f      	ldr	r2, [pc, #60]	; (800a320 <xPortStartScheduler+0x140>)
 800a2e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a2e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2e8:	f7ff ff66 	bl	800a1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2ec:	f7ff fb48 	bl	8009980 <vTaskSwitchContext>
	prvTaskExitError();
 800a2f0:	f7ff ff1e 	bl	800a130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3718      	adds	r7, #24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	e000ed00 	.word	0xe000ed00
 800a304:	410fc271 	.word	0x410fc271
 800a308:	410fc270 	.word	0x410fc270
 800a30c:	e000e400 	.word	0xe000e400
 800a310:	200053e8 	.word	0x200053e8
 800a314:	200053ec 	.word	0x200053ec
 800a318:	e000ed20 	.word	0xe000ed20
 800a31c:	20004020 	.word	0x20004020
 800a320:	e000ef34 	.word	0xe000ef34

0800a324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	607b      	str	r3, [r7, #4]
}
 800a33c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a33e:	4b0f      	ldr	r3, [pc, #60]	; (800a37c <vPortEnterCritical+0x58>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	4a0d      	ldr	r2, [pc, #52]	; (800a37c <vPortEnterCritical+0x58>)
 800a346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a348:	4b0c      	ldr	r3, [pc, #48]	; (800a37c <vPortEnterCritical+0x58>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d10f      	bne.n	800a370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a350:	4b0b      	ldr	r3, [pc, #44]	; (800a380 <vPortEnterCritical+0x5c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00a      	beq.n	800a370 <vPortEnterCritical+0x4c>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	603b      	str	r3, [r7, #0]
}
 800a36c:	bf00      	nop
 800a36e:	e7fe      	b.n	800a36e <vPortEnterCritical+0x4a>
	}
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	20004020 	.word	0x20004020
 800a380:	e000ed04 	.word	0xe000ed04

0800a384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a38a:	4b12      	ldr	r3, [pc, #72]	; (800a3d4 <vPortExitCritical+0x50>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10a      	bne.n	800a3a8 <vPortExitCritical+0x24>
	__asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	607b      	str	r3, [r7, #4]
}
 800a3a4:	bf00      	nop
 800a3a6:	e7fe      	b.n	800a3a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3a8:	4b0a      	ldr	r3, [pc, #40]	; (800a3d4 <vPortExitCritical+0x50>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	4a09      	ldr	r2, [pc, #36]	; (800a3d4 <vPortExitCritical+0x50>)
 800a3b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3b2:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <vPortExitCritical+0x50>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d105      	bne.n	800a3c6 <vPortExitCritical+0x42>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	f383 8811 	msr	BASEPRI, r3
}
 800a3c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3c6:	bf00      	nop
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	20004020 	.word	0x20004020
	...

0800a3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3e0:	f3ef 8009 	mrs	r0, PSP
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	4b15      	ldr	r3, [pc, #84]	; (800a440 <pxCurrentTCBConst>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	f01e 0f10 	tst.w	lr, #16
 800a3f0:	bf08      	it	eq
 800a3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fa:	6010      	str	r0, [r2, #0]
 800a3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a404:	f380 8811 	msr	BASEPRI, r0
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f7ff fab6 	bl	8009980 <vTaskSwitchContext>
 800a414:	f04f 0000 	mov.w	r0, #0
 800a418:	f380 8811 	msr	BASEPRI, r0
 800a41c:	bc09      	pop	{r0, r3}
 800a41e:	6819      	ldr	r1, [r3, #0]
 800a420:	6808      	ldr	r0, [r1, #0]
 800a422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a426:	f01e 0f10 	tst.w	lr, #16
 800a42a:	bf08      	it	eq
 800a42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a430:	f380 8809 	msr	PSP, r0
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	f3af 8000 	nop.w

0800a440 <pxCurrentTCBConst>:
 800a440:	200052bc 	.word	0x200052bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a444:	bf00      	nop
 800a446:	bf00      	nop

0800a448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	607b      	str	r3, [r7, #4]
}
 800a460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a462:	f7ff f9d5 	bl	8009810 <xTaskIncrementTick>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d003      	beq.n	800a474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a46c:	4b06      	ldr	r3, [pc, #24]	; (800a488 <SysTick_Handler+0x40>)
 800a46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	2300      	movs	r3, #0
 800a476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	f383 8811 	msr	BASEPRI, r3
}
 800a47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	e000ed04 	.word	0xe000ed04

0800a48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a48c:	b480      	push	{r7}
 800a48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a490:	4b0b      	ldr	r3, [pc, #44]	; (800a4c0 <vPortSetupTimerInterrupt+0x34>)
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a496:	4b0b      	ldr	r3, [pc, #44]	; (800a4c4 <vPortSetupTimerInterrupt+0x38>)
 800a498:	2200      	movs	r2, #0
 800a49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a49c:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <vPortSetupTimerInterrupt+0x3c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a0a      	ldr	r2, [pc, #40]	; (800a4cc <vPortSetupTimerInterrupt+0x40>)
 800a4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a6:	099b      	lsrs	r3, r3, #6
 800a4a8:	4a09      	ldr	r2, [pc, #36]	; (800a4d0 <vPortSetupTimerInterrupt+0x44>)
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4ae:	4b04      	ldr	r3, [pc, #16]	; (800a4c0 <vPortSetupTimerInterrupt+0x34>)
 800a4b0:	2207      	movs	r2, #7
 800a4b2:	601a      	str	r2, [r3, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	e000e010 	.word	0xe000e010
 800a4c4:	e000e018 	.word	0xe000e018
 800a4c8:	20000000 	.word	0x20000000
 800a4cc:	10624dd3 	.word	0x10624dd3
 800a4d0:	e000e014 	.word	0xe000e014

0800a4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a4e4 <vPortEnableVFP+0x10>
 800a4d8:	6801      	ldr	r1, [r0, #0]
 800a4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a4de:	6001      	str	r1, [r0, #0]
 800a4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4e2:	bf00      	nop
 800a4e4:	e000ed88 	.word	0xe000ed88

0800a4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4ee:	f3ef 8305 	mrs	r3, IPSR
 800a4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b0f      	cmp	r3, #15
 800a4f8:	d914      	bls.n	800a524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4fa:	4a17      	ldr	r2, [pc, #92]	; (800a558 <vPortValidateInterruptPriority+0x70>)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a504:	4b15      	ldr	r3, [pc, #84]	; (800a55c <vPortValidateInterruptPriority+0x74>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	7afa      	ldrb	r2, [r7, #11]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d20a      	bcs.n	800a524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	607b      	str	r3, [r7, #4]
}
 800a520:	bf00      	nop
 800a522:	e7fe      	b.n	800a522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a524:	4b0e      	ldr	r3, [pc, #56]	; (800a560 <vPortValidateInterruptPriority+0x78>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a52c:	4b0d      	ldr	r3, [pc, #52]	; (800a564 <vPortValidateInterruptPriority+0x7c>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d90a      	bls.n	800a54a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	603b      	str	r3, [r7, #0]
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <vPortValidateInterruptPriority+0x60>
	}
 800a54a:	bf00      	nop
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	e000e3f0 	.word	0xe000e3f0
 800a55c:	200053e8 	.word	0x200053e8
 800a560:	e000ed0c 	.word	0xe000ed0c
 800a564:	200053ec 	.word	0x200053ec

0800a568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b08a      	sub	sp, #40	; 0x28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a570:	2300      	movs	r3, #0
 800a572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a574:	f7ff f8a2 	bl	80096bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a578:	4b5b      	ldr	r3, [pc, #364]	; (800a6e8 <pvPortMalloc+0x180>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a580:	f000 f920 	bl	800a7c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a584:	4b59      	ldr	r3, [pc, #356]	; (800a6ec <pvPortMalloc+0x184>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4013      	ands	r3, r2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f040 8093 	bne.w	800a6b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d01d      	beq.n	800a5d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a598:	2208      	movs	r2, #8
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4413      	add	r3, r2
 800a59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f003 0307 	and.w	r3, r3, #7
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d014      	beq.n	800a5d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f023 0307 	bic.w	r3, r3, #7
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f003 0307 	and.w	r3, r3, #7
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <pvPortMalloc+0x6c>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	617b      	str	r3, [r7, #20]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d06e      	beq.n	800a6b8 <pvPortMalloc+0x150>
 800a5da:	4b45      	ldr	r3, [pc, #276]	; (800a6f0 <pvPortMalloc+0x188>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d869      	bhi.n	800a6b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5e4:	4b43      	ldr	r3, [pc, #268]	; (800a6f4 <pvPortMalloc+0x18c>)
 800a5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5e8:	4b42      	ldr	r3, [pc, #264]	; (800a6f4 <pvPortMalloc+0x18c>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5ee:	e004      	b.n	800a5fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	429a      	cmp	r2, r3
 800a602:	d903      	bls.n	800a60c <pvPortMalloc+0xa4>
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1f1      	bne.n	800a5f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a60c:	4b36      	ldr	r3, [pc, #216]	; (800a6e8 <pvPortMalloc+0x180>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a612:	429a      	cmp	r2, r3
 800a614:	d050      	beq.n	800a6b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2208      	movs	r2, #8
 800a61c:	4413      	add	r3, r2
 800a61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	1ad2      	subs	r2, r2, r3
 800a630:	2308      	movs	r3, #8
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	429a      	cmp	r2, r3
 800a636:	d91f      	bls.n	800a678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4413      	add	r3, r2
 800a63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00a      	beq.n	800a660 <pvPortMalloc+0xf8>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	613b      	str	r3, [r7, #16]
}
 800a65c:	bf00      	nop
 800a65e:	e7fe      	b.n	800a65e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	1ad2      	subs	r2, r2, r3
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a672:	69b8      	ldr	r0, [r7, #24]
 800a674:	f000 f908 	bl	800a888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a678:	4b1d      	ldr	r3, [pc, #116]	; (800a6f0 <pvPortMalloc+0x188>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	4a1b      	ldr	r2, [pc, #108]	; (800a6f0 <pvPortMalloc+0x188>)
 800a684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a686:	4b1a      	ldr	r3, [pc, #104]	; (800a6f0 <pvPortMalloc+0x188>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	4b1b      	ldr	r3, [pc, #108]	; (800a6f8 <pvPortMalloc+0x190>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d203      	bcs.n	800a69a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a692:	4b17      	ldr	r3, [pc, #92]	; (800a6f0 <pvPortMalloc+0x188>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a18      	ldr	r2, [pc, #96]	; (800a6f8 <pvPortMalloc+0x190>)
 800a698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	4b13      	ldr	r3, [pc, #76]	; (800a6ec <pvPortMalloc+0x184>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <pvPortMalloc+0x194>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	4a11      	ldr	r2, [pc, #68]	; (800a6fc <pvPortMalloc+0x194>)
 800a6b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6b8:	f7ff f80e 	bl	80096d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	f003 0307 	and.w	r3, r3, #7
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00a      	beq.n	800a6dc <pvPortMalloc+0x174>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	60fb      	str	r3, [r7, #12]
}
 800a6d8:	bf00      	nop
 800a6da:	e7fe      	b.n	800a6da <pvPortMalloc+0x172>
	return pvReturn;
 800a6dc:	69fb      	ldr	r3, [r7, #28]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3728      	adds	r7, #40	; 0x28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	2000a218 	.word	0x2000a218
 800a6ec:	2000a22c 	.word	0x2000a22c
 800a6f0:	2000a21c 	.word	0x2000a21c
 800a6f4:	2000a210 	.word	0x2000a210
 800a6f8:	2000a220 	.word	0x2000a220
 800a6fc:	2000a224 	.word	0x2000a224

0800a700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d04d      	beq.n	800a7ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a712:	2308      	movs	r3, #8
 800a714:	425b      	negs	r3, r3
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	4413      	add	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	4b24      	ldr	r3, [pc, #144]	; (800a7b8 <vPortFree+0xb8>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4013      	ands	r3, r2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10a      	bne.n	800a744 <vPortFree+0x44>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	60fb      	str	r3, [r7, #12]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00a      	beq.n	800a762 <vPortFree+0x62>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	60bb      	str	r3, [r7, #8]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	685a      	ldr	r2, [r3, #4]
 800a766:	4b14      	ldr	r3, [pc, #80]	; (800a7b8 <vPortFree+0xb8>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4013      	ands	r3, r2
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d01e      	beq.n	800a7ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d11a      	bne.n	800a7ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	4b0e      	ldr	r3, [pc, #56]	; (800a7b8 <vPortFree+0xb8>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	43db      	mvns	r3, r3
 800a782:	401a      	ands	r2, r3
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a788:	f7fe ff98 	bl	80096bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	4b0a      	ldr	r3, [pc, #40]	; (800a7bc <vPortFree+0xbc>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4413      	add	r3, r2
 800a796:	4a09      	ldr	r2, [pc, #36]	; (800a7bc <vPortFree+0xbc>)
 800a798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a79a:	6938      	ldr	r0, [r7, #16]
 800a79c:	f000 f874 	bl	800a888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7a0:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <vPortFree+0xc0>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	4a06      	ldr	r2, [pc, #24]	; (800a7c0 <vPortFree+0xc0>)
 800a7a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7aa:	f7fe ff95 	bl	80096d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7ae:	bf00      	nop
 800a7b0:	3718      	adds	r7, #24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	2000a22c 	.word	0x2000a22c
 800a7bc:	2000a21c 	.word	0x2000a21c
 800a7c0:	2000a228 	.word	0x2000a228

0800a7c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a7ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7d0:	4b27      	ldr	r3, [pc, #156]	; (800a870 <prvHeapInit+0xac>)
 800a7d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00c      	beq.n	800a7f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3307      	adds	r3, #7
 800a7e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f023 0307 	bic.w	r3, r3, #7
 800a7ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	4a1f      	ldr	r2, [pc, #124]	; (800a870 <prvHeapInit+0xac>)
 800a7f4:	4413      	add	r3, r2
 800a7f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7fc:	4a1d      	ldr	r2, [pc, #116]	; (800a874 <prvHeapInit+0xb0>)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a802:	4b1c      	ldr	r3, [pc, #112]	; (800a874 <prvHeapInit+0xb0>)
 800a804:	2200      	movs	r2, #0
 800a806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	4413      	add	r3, r2
 800a80e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a810:	2208      	movs	r2, #8
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	1a9b      	subs	r3, r3, r2
 800a816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f023 0307 	bic.w	r3, r3, #7
 800a81e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4a15      	ldr	r2, [pc, #84]	; (800a878 <prvHeapInit+0xb4>)
 800a824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a826:	4b14      	ldr	r3, [pc, #80]	; (800a878 <prvHeapInit+0xb4>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2200      	movs	r2, #0
 800a82c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a82e:	4b12      	ldr	r3, [pc, #72]	; (800a878 <prvHeapInit+0xb4>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	1ad2      	subs	r2, r2, r3
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a844:	4b0c      	ldr	r3, [pc, #48]	; (800a878 <prvHeapInit+0xb4>)
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	4a0a      	ldr	r2, [pc, #40]	; (800a87c <prvHeapInit+0xb8>)
 800a852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	4a09      	ldr	r2, [pc, #36]	; (800a880 <prvHeapInit+0xbc>)
 800a85a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a85c:	4b09      	ldr	r3, [pc, #36]	; (800a884 <prvHeapInit+0xc0>)
 800a85e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a862:	601a      	str	r2, [r3, #0]
}
 800a864:	bf00      	nop
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	200053f0 	.word	0x200053f0
 800a874:	2000a210 	.word	0x2000a210
 800a878:	2000a218 	.word	0x2000a218
 800a87c:	2000a220 	.word	0x2000a220
 800a880:	2000a21c 	.word	0x2000a21c
 800a884:	2000a22c 	.word	0x2000a22c

0800a888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a890:	4b28      	ldr	r3, [pc, #160]	; (800a934 <prvInsertBlockIntoFreeList+0xac>)
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e002      	b.n	800a89c <prvInsertBlockIntoFreeList+0x14>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d8f7      	bhi.n	800a896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d108      	bne.n	800a8ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	441a      	add	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	441a      	add	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d118      	bne.n	800a910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	4b15      	ldr	r3, [pc, #84]	; (800a938 <prvInsertBlockIntoFreeList+0xb0>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d00d      	beq.n	800a906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	441a      	add	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	e008      	b.n	800a918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a906:	4b0c      	ldr	r3, [pc, #48]	; (800a938 <prvInsertBlockIntoFreeList+0xb0>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	e003      	b.n	800a918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d002      	beq.n	800a926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a926:	bf00      	nop
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	2000a210 	.word	0x2000a210
 800a938:	2000a218 	.word	0x2000a218

0800a93c <atoi>:
 800a93c:	220a      	movs	r2, #10
 800a93e:	2100      	movs	r1, #0
 800a940:	f000 ba06 	b.w	800ad50 <strtol>

0800a944 <__errno>:
 800a944:	4b01      	ldr	r3, [pc, #4]	; (800a94c <__errno+0x8>)
 800a946:	6818      	ldr	r0, [r3, #0]
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	20004024 	.word	0x20004024

0800a950 <__libc_init_array>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	4d0d      	ldr	r5, [pc, #52]	; (800a988 <__libc_init_array+0x38>)
 800a954:	4c0d      	ldr	r4, [pc, #52]	; (800a98c <__libc_init_array+0x3c>)
 800a956:	1b64      	subs	r4, r4, r5
 800a958:	10a4      	asrs	r4, r4, #2
 800a95a:	2600      	movs	r6, #0
 800a95c:	42a6      	cmp	r6, r4
 800a95e:	d109      	bne.n	800a974 <__libc_init_array+0x24>
 800a960:	4d0b      	ldr	r5, [pc, #44]	; (800a990 <__libc_init_array+0x40>)
 800a962:	4c0c      	ldr	r4, [pc, #48]	; (800a994 <__libc_init_array+0x44>)
 800a964:	f000 fd98 	bl	800b498 <_init>
 800a968:	1b64      	subs	r4, r4, r5
 800a96a:	10a4      	asrs	r4, r4, #2
 800a96c:	2600      	movs	r6, #0
 800a96e:	42a6      	cmp	r6, r4
 800a970:	d105      	bne.n	800a97e <__libc_init_array+0x2e>
 800a972:	bd70      	pop	{r4, r5, r6, pc}
 800a974:	f855 3b04 	ldr.w	r3, [r5], #4
 800a978:	4798      	blx	r3
 800a97a:	3601      	adds	r6, #1
 800a97c:	e7ee      	b.n	800a95c <__libc_init_array+0xc>
 800a97e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a982:	4798      	blx	r3
 800a984:	3601      	adds	r6, #1
 800a986:	e7f2      	b.n	800a96e <__libc_init_array+0x1e>
 800a988:	08036f94 	.word	0x08036f94
 800a98c:	08036f94 	.word	0x08036f94
 800a990:	08036f94 	.word	0x08036f94
 800a994:	08036f98 	.word	0x08036f98

0800a998 <__retarget_lock_acquire_recursive>:
 800a998:	4770      	bx	lr

0800a99a <__retarget_lock_release_recursive>:
 800a99a:	4770      	bx	lr

0800a99c <memcpy>:
 800a99c:	440a      	add	r2, r1
 800a99e:	4291      	cmp	r1, r2
 800a9a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a9a4:	d100      	bne.n	800a9a8 <memcpy+0xc>
 800a9a6:	4770      	bx	lr
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9b2:	4291      	cmp	r1, r2
 800a9b4:	d1f9      	bne.n	800a9aa <memcpy+0xe>
 800a9b6:	bd10      	pop	{r4, pc}

0800a9b8 <memset>:
 800a9b8:	4402      	add	r2, r0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d100      	bne.n	800a9c2 <memset+0xa>
 800a9c0:	4770      	bx	lr
 800a9c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9c6:	e7f9      	b.n	800a9bc <memset+0x4>

0800a9c8 <sbrk_aligned>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	4e0e      	ldr	r6, [pc, #56]	; (800aa04 <sbrk_aligned+0x3c>)
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	6831      	ldr	r1, [r6, #0]
 800a9d0:	4605      	mov	r5, r0
 800a9d2:	b911      	cbnz	r1, 800a9da <sbrk_aligned+0x12>
 800a9d4:	f000 f8f6 	bl	800abc4 <_sbrk_r>
 800a9d8:	6030      	str	r0, [r6, #0]
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f000 f8f1 	bl	800abc4 <_sbrk_r>
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	d00a      	beq.n	800a9fc <sbrk_aligned+0x34>
 800a9e6:	1cc4      	adds	r4, r0, #3
 800a9e8:	f024 0403 	bic.w	r4, r4, #3
 800a9ec:	42a0      	cmp	r0, r4
 800a9ee:	d007      	beq.n	800aa00 <sbrk_aligned+0x38>
 800a9f0:	1a21      	subs	r1, r4, r0
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f000 f8e6 	bl	800abc4 <_sbrk_r>
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d101      	bne.n	800aa00 <sbrk_aligned+0x38>
 800a9fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aa00:	4620      	mov	r0, r4
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	2000a238 	.word	0x2000a238

0800aa08 <_malloc_r>:
 800aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0c:	1ccd      	adds	r5, r1, #3
 800aa0e:	f025 0503 	bic.w	r5, r5, #3
 800aa12:	3508      	adds	r5, #8
 800aa14:	2d0c      	cmp	r5, #12
 800aa16:	bf38      	it	cc
 800aa18:	250c      	movcc	r5, #12
 800aa1a:	2d00      	cmp	r5, #0
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	db01      	blt.n	800aa24 <_malloc_r+0x1c>
 800aa20:	42a9      	cmp	r1, r5
 800aa22:	d905      	bls.n	800aa30 <_malloc_r+0x28>
 800aa24:	230c      	movs	r3, #12
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	2600      	movs	r6, #0
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa30:	4e2e      	ldr	r6, [pc, #184]	; (800aaec <_malloc_r+0xe4>)
 800aa32:	f000 f997 	bl	800ad64 <__malloc_lock>
 800aa36:	6833      	ldr	r3, [r6, #0]
 800aa38:	461c      	mov	r4, r3
 800aa3a:	bb34      	cbnz	r4, 800aa8a <_malloc_r+0x82>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f7ff ffc2 	bl	800a9c8 <sbrk_aligned>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	4604      	mov	r4, r0
 800aa48:	d14d      	bne.n	800aae6 <_malloc_r+0xde>
 800aa4a:	6834      	ldr	r4, [r6, #0]
 800aa4c:	4626      	mov	r6, r4
 800aa4e:	2e00      	cmp	r6, #0
 800aa50:	d140      	bne.n	800aad4 <_malloc_r+0xcc>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	4631      	mov	r1, r6
 800aa56:	4638      	mov	r0, r7
 800aa58:	eb04 0803 	add.w	r8, r4, r3
 800aa5c:	f000 f8b2 	bl	800abc4 <_sbrk_r>
 800aa60:	4580      	cmp	r8, r0
 800aa62:	d13a      	bne.n	800aada <_malloc_r+0xd2>
 800aa64:	6821      	ldr	r1, [r4, #0]
 800aa66:	3503      	adds	r5, #3
 800aa68:	1a6d      	subs	r5, r5, r1
 800aa6a:	f025 0503 	bic.w	r5, r5, #3
 800aa6e:	3508      	adds	r5, #8
 800aa70:	2d0c      	cmp	r5, #12
 800aa72:	bf38      	it	cc
 800aa74:	250c      	movcc	r5, #12
 800aa76:	4629      	mov	r1, r5
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f7ff ffa5 	bl	800a9c8 <sbrk_aligned>
 800aa7e:	3001      	adds	r0, #1
 800aa80:	d02b      	beq.n	800aada <_malloc_r+0xd2>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	442b      	add	r3, r5
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	e00e      	b.n	800aaa8 <_malloc_r+0xa0>
 800aa8a:	6822      	ldr	r2, [r4, #0]
 800aa8c:	1b52      	subs	r2, r2, r5
 800aa8e:	d41e      	bmi.n	800aace <_malloc_r+0xc6>
 800aa90:	2a0b      	cmp	r2, #11
 800aa92:	d916      	bls.n	800aac2 <_malloc_r+0xba>
 800aa94:	1961      	adds	r1, r4, r5
 800aa96:	42a3      	cmp	r3, r4
 800aa98:	6025      	str	r5, [r4, #0]
 800aa9a:	bf18      	it	ne
 800aa9c:	6059      	strne	r1, [r3, #4]
 800aa9e:	6863      	ldr	r3, [r4, #4]
 800aaa0:	bf08      	it	eq
 800aaa2:	6031      	streq	r1, [r6, #0]
 800aaa4:	5162      	str	r2, [r4, r5]
 800aaa6:	604b      	str	r3, [r1, #4]
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	f104 060b 	add.w	r6, r4, #11
 800aaae:	f000 f95f 	bl	800ad70 <__malloc_unlock>
 800aab2:	f026 0607 	bic.w	r6, r6, #7
 800aab6:	1d23      	adds	r3, r4, #4
 800aab8:	1af2      	subs	r2, r6, r3
 800aaba:	d0b6      	beq.n	800aa2a <_malloc_r+0x22>
 800aabc:	1b9b      	subs	r3, r3, r6
 800aabe:	50a3      	str	r3, [r4, r2]
 800aac0:	e7b3      	b.n	800aa2a <_malloc_r+0x22>
 800aac2:	6862      	ldr	r2, [r4, #4]
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	bf0c      	ite	eq
 800aac8:	6032      	streq	r2, [r6, #0]
 800aaca:	605a      	strne	r2, [r3, #4]
 800aacc:	e7ec      	b.n	800aaa8 <_malloc_r+0xa0>
 800aace:	4623      	mov	r3, r4
 800aad0:	6864      	ldr	r4, [r4, #4]
 800aad2:	e7b2      	b.n	800aa3a <_malloc_r+0x32>
 800aad4:	4634      	mov	r4, r6
 800aad6:	6876      	ldr	r6, [r6, #4]
 800aad8:	e7b9      	b.n	800aa4e <_malloc_r+0x46>
 800aada:	230c      	movs	r3, #12
 800aadc:	603b      	str	r3, [r7, #0]
 800aade:	4638      	mov	r0, r7
 800aae0:	f000 f946 	bl	800ad70 <__malloc_unlock>
 800aae4:	e7a1      	b.n	800aa2a <_malloc_r+0x22>
 800aae6:	6025      	str	r5, [r4, #0]
 800aae8:	e7de      	b.n	800aaa8 <_malloc_r+0xa0>
 800aaea:	bf00      	nop
 800aaec:	2000a234 	.word	0x2000a234

0800aaf0 <cleanup_glue>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	6809      	ldr	r1, [r1, #0]
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	b109      	cbz	r1, 800aafe <cleanup_glue+0xe>
 800aafa:	f7ff fff9 	bl	800aaf0 <cleanup_glue>
 800aafe:	4621      	mov	r1, r4
 800ab00:	4628      	mov	r0, r5
 800ab02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab06:	f000 b939 	b.w	800ad7c <_free_r>
	...

0800ab0c <_reclaim_reent>:
 800ab0c:	4b2c      	ldr	r3, [pc, #176]	; (800abc0 <_reclaim_reent+0xb4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4283      	cmp	r3, r0
 800ab12:	b570      	push	{r4, r5, r6, lr}
 800ab14:	4604      	mov	r4, r0
 800ab16:	d051      	beq.n	800abbc <_reclaim_reent+0xb0>
 800ab18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab1a:	b143      	cbz	r3, 800ab2e <_reclaim_reent+0x22>
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d14a      	bne.n	800abb8 <_reclaim_reent+0xac>
 800ab22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab24:	6819      	ldr	r1, [r3, #0]
 800ab26:	b111      	cbz	r1, 800ab2e <_reclaim_reent+0x22>
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f000 f927 	bl	800ad7c <_free_r>
 800ab2e:	6961      	ldr	r1, [r4, #20]
 800ab30:	b111      	cbz	r1, 800ab38 <_reclaim_reent+0x2c>
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 f922 	bl	800ad7c <_free_r>
 800ab38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab3a:	b111      	cbz	r1, 800ab42 <_reclaim_reent+0x36>
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 f91d 	bl	800ad7c <_free_r>
 800ab42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab44:	b111      	cbz	r1, 800ab4c <_reclaim_reent+0x40>
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 f918 	bl	800ad7c <_free_r>
 800ab4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab4e:	b111      	cbz	r1, 800ab56 <_reclaim_reent+0x4a>
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 f913 	bl	800ad7c <_free_r>
 800ab56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ab58:	b111      	cbz	r1, 800ab60 <_reclaim_reent+0x54>
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f000 f90e 	bl	800ad7c <_free_r>
 800ab60:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ab62:	b111      	cbz	r1, 800ab6a <_reclaim_reent+0x5e>
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 f909 	bl	800ad7c <_free_r>
 800ab6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ab6c:	b111      	cbz	r1, 800ab74 <_reclaim_reent+0x68>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f000 f904 	bl	800ad7c <_free_r>
 800ab74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab76:	b111      	cbz	r1, 800ab7e <_reclaim_reent+0x72>
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 f8ff 	bl	800ad7c <_free_r>
 800ab7e:	69a3      	ldr	r3, [r4, #24]
 800ab80:	b1e3      	cbz	r3, 800abbc <_reclaim_reent+0xb0>
 800ab82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab84:	4620      	mov	r0, r4
 800ab86:	4798      	blx	r3
 800ab88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ab8a:	b1b9      	cbz	r1, 800abbc <_reclaim_reent+0xb0>
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab92:	f7ff bfad 	b.w	800aaf0 <cleanup_glue>
 800ab96:	5949      	ldr	r1, [r1, r5]
 800ab98:	b941      	cbnz	r1, 800abac <_reclaim_reent+0xa0>
 800ab9a:	3504      	adds	r5, #4
 800ab9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab9e:	2d80      	cmp	r5, #128	; 0x80
 800aba0:	68d9      	ldr	r1, [r3, #12]
 800aba2:	d1f8      	bne.n	800ab96 <_reclaim_reent+0x8a>
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 f8e9 	bl	800ad7c <_free_r>
 800abaa:	e7ba      	b.n	800ab22 <_reclaim_reent+0x16>
 800abac:	680e      	ldr	r6, [r1, #0]
 800abae:	4620      	mov	r0, r4
 800abb0:	f000 f8e4 	bl	800ad7c <_free_r>
 800abb4:	4631      	mov	r1, r6
 800abb6:	e7ef      	b.n	800ab98 <_reclaim_reent+0x8c>
 800abb8:	2500      	movs	r5, #0
 800abba:	e7ef      	b.n	800ab9c <_reclaim_reent+0x90>
 800abbc:	bd70      	pop	{r4, r5, r6, pc}
 800abbe:	bf00      	nop
 800abc0:	20004024 	.word	0x20004024

0800abc4 <_sbrk_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4d06      	ldr	r5, [pc, #24]	; (800abe0 <_sbrk_r+0x1c>)
 800abc8:	2300      	movs	r3, #0
 800abca:	4604      	mov	r4, r0
 800abcc:	4608      	mov	r0, r1
 800abce:	602b      	str	r3, [r5, #0]
 800abd0:	f7f6 fc84 	bl	80014dc <_sbrk>
 800abd4:	1c43      	adds	r3, r0, #1
 800abd6:	d102      	bne.n	800abde <_sbrk_r+0x1a>
 800abd8:	682b      	ldr	r3, [r5, #0]
 800abda:	b103      	cbz	r3, 800abde <_sbrk_r+0x1a>
 800abdc:	6023      	str	r3, [r4, #0]
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	2000a23c 	.word	0x2000a23c

0800abe4 <siprintf>:
 800abe4:	b40e      	push	{r1, r2, r3}
 800abe6:	b500      	push	{lr}
 800abe8:	b09c      	sub	sp, #112	; 0x70
 800abea:	ab1d      	add	r3, sp, #116	; 0x74
 800abec:	9002      	str	r0, [sp, #8]
 800abee:	9006      	str	r0, [sp, #24]
 800abf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abf4:	4809      	ldr	r0, [pc, #36]	; (800ac1c <siprintf+0x38>)
 800abf6:	9107      	str	r1, [sp, #28]
 800abf8:	9104      	str	r1, [sp, #16]
 800abfa:	4909      	ldr	r1, [pc, #36]	; (800ac20 <siprintf+0x3c>)
 800abfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac00:	9105      	str	r1, [sp, #20]
 800ac02:	6800      	ldr	r0, [r0, #0]
 800ac04:	9301      	str	r3, [sp, #4]
 800ac06:	a902      	add	r1, sp, #8
 800ac08:	f000 f960 	bl	800aecc <_svfiprintf_r>
 800ac0c:	9b02      	ldr	r3, [sp, #8]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	701a      	strb	r2, [r3, #0]
 800ac12:	b01c      	add	sp, #112	; 0x70
 800ac14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac18:	b003      	add	sp, #12
 800ac1a:	4770      	bx	lr
 800ac1c:	20004024 	.word	0x20004024
 800ac20:	ffff0208 	.word	0xffff0208

0800ac24 <strncat>:
 800ac24:	b530      	push	{r4, r5, lr}
 800ac26:	4604      	mov	r4, r0
 800ac28:	7825      	ldrb	r5, [r4, #0]
 800ac2a:	4623      	mov	r3, r4
 800ac2c:	3401      	adds	r4, #1
 800ac2e:	2d00      	cmp	r5, #0
 800ac30:	d1fa      	bne.n	800ac28 <strncat+0x4>
 800ac32:	3a01      	subs	r2, #1
 800ac34:	d304      	bcc.n	800ac40 <strncat+0x1c>
 800ac36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac3a:	f803 4b01 	strb.w	r4, [r3], #1
 800ac3e:	b904      	cbnz	r4, 800ac42 <strncat+0x1e>
 800ac40:	bd30      	pop	{r4, r5, pc}
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	d1f5      	bne.n	800ac32 <strncat+0xe>
 800ac46:	701a      	strb	r2, [r3, #0]
 800ac48:	e7f3      	b.n	800ac32 <strncat+0xe>
	...

0800ac4c <_strtol_l.constprop.0>:
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac52:	d001      	beq.n	800ac58 <_strtol_l.constprop.0+0xc>
 800ac54:	2b24      	cmp	r3, #36	; 0x24
 800ac56:	d906      	bls.n	800ac66 <_strtol_l.constprop.0+0x1a>
 800ac58:	f7ff fe74 	bl	800a944 <__errno>
 800ac5c:	2316      	movs	r3, #22
 800ac5e:	6003      	str	r3, [r0, #0]
 800ac60:	2000      	movs	r0, #0
 800ac62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ad4c <_strtol_l.constprop.0+0x100>
 800ac6a:	460d      	mov	r5, r1
 800ac6c:	462e      	mov	r6, r5
 800ac6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac72:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ac76:	f017 0708 	ands.w	r7, r7, #8
 800ac7a:	d1f7      	bne.n	800ac6c <_strtol_l.constprop.0+0x20>
 800ac7c:	2c2d      	cmp	r4, #45	; 0x2d
 800ac7e:	d132      	bne.n	800ace6 <_strtol_l.constprop.0+0x9a>
 800ac80:	782c      	ldrb	r4, [r5, #0]
 800ac82:	2701      	movs	r7, #1
 800ac84:	1cb5      	adds	r5, r6, #2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d05b      	beq.n	800ad42 <_strtol_l.constprop.0+0xf6>
 800ac8a:	2b10      	cmp	r3, #16
 800ac8c:	d109      	bne.n	800aca2 <_strtol_l.constprop.0+0x56>
 800ac8e:	2c30      	cmp	r4, #48	; 0x30
 800ac90:	d107      	bne.n	800aca2 <_strtol_l.constprop.0+0x56>
 800ac92:	782c      	ldrb	r4, [r5, #0]
 800ac94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac98:	2c58      	cmp	r4, #88	; 0x58
 800ac9a:	d14d      	bne.n	800ad38 <_strtol_l.constprop.0+0xec>
 800ac9c:	786c      	ldrb	r4, [r5, #1]
 800ac9e:	2310      	movs	r3, #16
 800aca0:	3502      	adds	r5, #2
 800aca2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800aca6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800acaa:	f04f 0c00 	mov.w	ip, #0
 800acae:	fbb8 f9f3 	udiv	r9, r8, r3
 800acb2:	4666      	mov	r6, ip
 800acb4:	fb03 8a19 	mls	sl, r3, r9, r8
 800acb8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800acbc:	f1be 0f09 	cmp.w	lr, #9
 800acc0:	d816      	bhi.n	800acf0 <_strtol_l.constprop.0+0xa4>
 800acc2:	4674      	mov	r4, lr
 800acc4:	42a3      	cmp	r3, r4
 800acc6:	dd24      	ble.n	800ad12 <_strtol_l.constprop.0+0xc6>
 800acc8:	f1bc 0f00 	cmp.w	ip, #0
 800accc:	db1e      	blt.n	800ad0c <_strtol_l.constprop.0+0xc0>
 800acce:	45b1      	cmp	r9, r6
 800acd0:	d31c      	bcc.n	800ad0c <_strtol_l.constprop.0+0xc0>
 800acd2:	d101      	bne.n	800acd8 <_strtol_l.constprop.0+0x8c>
 800acd4:	45a2      	cmp	sl, r4
 800acd6:	db19      	blt.n	800ad0c <_strtol_l.constprop.0+0xc0>
 800acd8:	fb06 4603 	mla	r6, r6, r3, r4
 800acdc:	f04f 0c01 	mov.w	ip, #1
 800ace0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ace4:	e7e8      	b.n	800acb8 <_strtol_l.constprop.0+0x6c>
 800ace6:	2c2b      	cmp	r4, #43	; 0x2b
 800ace8:	bf04      	itt	eq
 800acea:	782c      	ldrbeq	r4, [r5, #0]
 800acec:	1cb5      	addeq	r5, r6, #2
 800acee:	e7ca      	b.n	800ac86 <_strtol_l.constprop.0+0x3a>
 800acf0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800acf4:	f1be 0f19 	cmp.w	lr, #25
 800acf8:	d801      	bhi.n	800acfe <_strtol_l.constprop.0+0xb2>
 800acfa:	3c37      	subs	r4, #55	; 0x37
 800acfc:	e7e2      	b.n	800acc4 <_strtol_l.constprop.0+0x78>
 800acfe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ad02:	f1be 0f19 	cmp.w	lr, #25
 800ad06:	d804      	bhi.n	800ad12 <_strtol_l.constprop.0+0xc6>
 800ad08:	3c57      	subs	r4, #87	; 0x57
 800ad0a:	e7db      	b.n	800acc4 <_strtol_l.constprop.0+0x78>
 800ad0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ad10:	e7e6      	b.n	800ace0 <_strtol_l.constprop.0+0x94>
 800ad12:	f1bc 0f00 	cmp.w	ip, #0
 800ad16:	da05      	bge.n	800ad24 <_strtol_l.constprop.0+0xd8>
 800ad18:	2322      	movs	r3, #34	; 0x22
 800ad1a:	6003      	str	r3, [r0, #0]
 800ad1c:	4646      	mov	r6, r8
 800ad1e:	b942      	cbnz	r2, 800ad32 <_strtol_l.constprop.0+0xe6>
 800ad20:	4630      	mov	r0, r6
 800ad22:	e79e      	b.n	800ac62 <_strtol_l.constprop.0+0x16>
 800ad24:	b107      	cbz	r7, 800ad28 <_strtol_l.constprop.0+0xdc>
 800ad26:	4276      	negs	r6, r6
 800ad28:	2a00      	cmp	r2, #0
 800ad2a:	d0f9      	beq.n	800ad20 <_strtol_l.constprop.0+0xd4>
 800ad2c:	f1bc 0f00 	cmp.w	ip, #0
 800ad30:	d000      	beq.n	800ad34 <_strtol_l.constprop.0+0xe8>
 800ad32:	1e69      	subs	r1, r5, #1
 800ad34:	6011      	str	r1, [r2, #0]
 800ad36:	e7f3      	b.n	800ad20 <_strtol_l.constprop.0+0xd4>
 800ad38:	2430      	movs	r4, #48	; 0x30
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1b1      	bne.n	800aca2 <_strtol_l.constprop.0+0x56>
 800ad3e:	2308      	movs	r3, #8
 800ad40:	e7af      	b.n	800aca2 <_strtol_l.constprop.0+0x56>
 800ad42:	2c30      	cmp	r4, #48	; 0x30
 800ad44:	d0a5      	beq.n	800ac92 <_strtol_l.constprop.0+0x46>
 800ad46:	230a      	movs	r3, #10
 800ad48:	e7ab      	b.n	800aca2 <_strtol_l.constprop.0+0x56>
 800ad4a:	bf00      	nop
 800ad4c:	08036e59 	.word	0x08036e59

0800ad50 <strtol>:
 800ad50:	4613      	mov	r3, r2
 800ad52:	460a      	mov	r2, r1
 800ad54:	4601      	mov	r1, r0
 800ad56:	4802      	ldr	r0, [pc, #8]	; (800ad60 <strtol+0x10>)
 800ad58:	6800      	ldr	r0, [r0, #0]
 800ad5a:	f7ff bf77 	b.w	800ac4c <_strtol_l.constprop.0>
 800ad5e:	bf00      	nop
 800ad60:	20004024 	.word	0x20004024

0800ad64 <__malloc_lock>:
 800ad64:	4801      	ldr	r0, [pc, #4]	; (800ad6c <__malloc_lock+0x8>)
 800ad66:	f7ff be17 	b.w	800a998 <__retarget_lock_acquire_recursive>
 800ad6a:	bf00      	nop
 800ad6c:	2000a230 	.word	0x2000a230

0800ad70 <__malloc_unlock>:
 800ad70:	4801      	ldr	r0, [pc, #4]	; (800ad78 <__malloc_unlock+0x8>)
 800ad72:	f7ff be12 	b.w	800a99a <__retarget_lock_release_recursive>
 800ad76:	bf00      	nop
 800ad78:	2000a230 	.word	0x2000a230

0800ad7c <_free_r>:
 800ad7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad7e:	2900      	cmp	r1, #0
 800ad80:	d044      	beq.n	800ae0c <_free_r+0x90>
 800ad82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad86:	9001      	str	r0, [sp, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad8e:	bfb8      	it	lt
 800ad90:	18e4      	addlt	r4, r4, r3
 800ad92:	f7ff ffe7 	bl	800ad64 <__malloc_lock>
 800ad96:	4a1e      	ldr	r2, [pc, #120]	; (800ae10 <_free_r+0x94>)
 800ad98:	9801      	ldr	r0, [sp, #4]
 800ad9a:	6813      	ldr	r3, [r2, #0]
 800ad9c:	b933      	cbnz	r3, 800adac <_free_r+0x30>
 800ad9e:	6063      	str	r3, [r4, #4]
 800ada0:	6014      	str	r4, [r2, #0]
 800ada2:	b003      	add	sp, #12
 800ada4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ada8:	f7ff bfe2 	b.w	800ad70 <__malloc_unlock>
 800adac:	42a3      	cmp	r3, r4
 800adae:	d908      	bls.n	800adc2 <_free_r+0x46>
 800adb0:	6825      	ldr	r5, [r4, #0]
 800adb2:	1961      	adds	r1, r4, r5
 800adb4:	428b      	cmp	r3, r1
 800adb6:	bf01      	itttt	eq
 800adb8:	6819      	ldreq	r1, [r3, #0]
 800adba:	685b      	ldreq	r3, [r3, #4]
 800adbc:	1949      	addeq	r1, r1, r5
 800adbe:	6021      	streq	r1, [r4, #0]
 800adc0:	e7ed      	b.n	800ad9e <_free_r+0x22>
 800adc2:	461a      	mov	r2, r3
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	b10b      	cbz	r3, 800adcc <_free_r+0x50>
 800adc8:	42a3      	cmp	r3, r4
 800adca:	d9fa      	bls.n	800adc2 <_free_r+0x46>
 800adcc:	6811      	ldr	r1, [r2, #0]
 800adce:	1855      	adds	r5, r2, r1
 800add0:	42a5      	cmp	r5, r4
 800add2:	d10b      	bne.n	800adec <_free_r+0x70>
 800add4:	6824      	ldr	r4, [r4, #0]
 800add6:	4421      	add	r1, r4
 800add8:	1854      	adds	r4, r2, r1
 800adda:	42a3      	cmp	r3, r4
 800addc:	6011      	str	r1, [r2, #0]
 800adde:	d1e0      	bne.n	800ada2 <_free_r+0x26>
 800ade0:	681c      	ldr	r4, [r3, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	6053      	str	r3, [r2, #4]
 800ade6:	4421      	add	r1, r4
 800ade8:	6011      	str	r1, [r2, #0]
 800adea:	e7da      	b.n	800ada2 <_free_r+0x26>
 800adec:	d902      	bls.n	800adf4 <_free_r+0x78>
 800adee:	230c      	movs	r3, #12
 800adf0:	6003      	str	r3, [r0, #0]
 800adf2:	e7d6      	b.n	800ada2 <_free_r+0x26>
 800adf4:	6825      	ldr	r5, [r4, #0]
 800adf6:	1961      	adds	r1, r4, r5
 800adf8:	428b      	cmp	r3, r1
 800adfa:	bf04      	itt	eq
 800adfc:	6819      	ldreq	r1, [r3, #0]
 800adfe:	685b      	ldreq	r3, [r3, #4]
 800ae00:	6063      	str	r3, [r4, #4]
 800ae02:	bf04      	itt	eq
 800ae04:	1949      	addeq	r1, r1, r5
 800ae06:	6021      	streq	r1, [r4, #0]
 800ae08:	6054      	str	r4, [r2, #4]
 800ae0a:	e7ca      	b.n	800ada2 <_free_r+0x26>
 800ae0c:	b003      	add	sp, #12
 800ae0e:	bd30      	pop	{r4, r5, pc}
 800ae10:	2000a234 	.word	0x2000a234

0800ae14 <__ssputs_r>:
 800ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	688e      	ldr	r6, [r1, #8]
 800ae1a:	429e      	cmp	r6, r3
 800ae1c:	4682      	mov	sl, r0
 800ae1e:	460c      	mov	r4, r1
 800ae20:	4690      	mov	r8, r2
 800ae22:	461f      	mov	r7, r3
 800ae24:	d838      	bhi.n	800ae98 <__ssputs_r+0x84>
 800ae26:	898a      	ldrh	r2, [r1, #12]
 800ae28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae2c:	d032      	beq.n	800ae94 <__ssputs_r+0x80>
 800ae2e:	6825      	ldr	r5, [r4, #0]
 800ae30:	6909      	ldr	r1, [r1, #16]
 800ae32:	eba5 0901 	sub.w	r9, r5, r1
 800ae36:	6965      	ldr	r5, [r4, #20]
 800ae38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae40:	3301      	adds	r3, #1
 800ae42:	444b      	add	r3, r9
 800ae44:	106d      	asrs	r5, r5, #1
 800ae46:	429d      	cmp	r5, r3
 800ae48:	bf38      	it	cc
 800ae4a:	461d      	movcc	r5, r3
 800ae4c:	0553      	lsls	r3, r2, #21
 800ae4e:	d531      	bpl.n	800aeb4 <__ssputs_r+0xa0>
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7ff fdd9 	bl	800aa08 <_malloc_r>
 800ae56:	4606      	mov	r6, r0
 800ae58:	b950      	cbnz	r0, 800ae70 <__ssputs_r+0x5c>
 800ae5a:	230c      	movs	r3, #12
 800ae5c:	f8ca 3000 	str.w	r3, [sl]
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae66:	81a3      	strh	r3, [r4, #12]
 800ae68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae70:	6921      	ldr	r1, [r4, #16]
 800ae72:	464a      	mov	r2, r9
 800ae74:	f7ff fd92 	bl	800a99c <memcpy>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	6126      	str	r6, [r4, #16]
 800ae86:	6165      	str	r5, [r4, #20]
 800ae88:	444e      	add	r6, r9
 800ae8a:	eba5 0509 	sub.w	r5, r5, r9
 800ae8e:	6026      	str	r6, [r4, #0]
 800ae90:	60a5      	str	r5, [r4, #8]
 800ae92:	463e      	mov	r6, r7
 800ae94:	42be      	cmp	r6, r7
 800ae96:	d900      	bls.n	800ae9a <__ssputs_r+0x86>
 800ae98:	463e      	mov	r6, r7
 800ae9a:	6820      	ldr	r0, [r4, #0]
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	4641      	mov	r1, r8
 800aea0:	f000 faa8 	bl	800b3f4 <memmove>
 800aea4:	68a3      	ldr	r3, [r4, #8]
 800aea6:	1b9b      	subs	r3, r3, r6
 800aea8:	60a3      	str	r3, [r4, #8]
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	4433      	add	r3, r6
 800aeae:	6023      	str	r3, [r4, #0]
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	e7db      	b.n	800ae6c <__ssputs_r+0x58>
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	f000 fab7 	bl	800b428 <_realloc_r>
 800aeba:	4606      	mov	r6, r0
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d1e1      	bne.n	800ae84 <__ssputs_r+0x70>
 800aec0:	6921      	ldr	r1, [r4, #16]
 800aec2:	4650      	mov	r0, sl
 800aec4:	f7ff ff5a 	bl	800ad7c <_free_r>
 800aec8:	e7c7      	b.n	800ae5a <__ssputs_r+0x46>
	...

0800aecc <_svfiprintf_r>:
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	4698      	mov	r8, r3
 800aed2:	898b      	ldrh	r3, [r1, #12]
 800aed4:	061b      	lsls	r3, r3, #24
 800aed6:	b09d      	sub	sp, #116	; 0x74
 800aed8:	4607      	mov	r7, r0
 800aeda:	460d      	mov	r5, r1
 800aedc:	4614      	mov	r4, r2
 800aede:	d50e      	bpl.n	800aefe <_svfiprintf_r+0x32>
 800aee0:	690b      	ldr	r3, [r1, #16]
 800aee2:	b963      	cbnz	r3, 800aefe <_svfiprintf_r+0x32>
 800aee4:	2140      	movs	r1, #64	; 0x40
 800aee6:	f7ff fd8f 	bl	800aa08 <_malloc_r>
 800aeea:	6028      	str	r0, [r5, #0]
 800aeec:	6128      	str	r0, [r5, #16]
 800aeee:	b920      	cbnz	r0, 800aefa <_svfiprintf_r+0x2e>
 800aef0:	230c      	movs	r3, #12
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aef8:	e0d1      	b.n	800b09e <_svfiprintf_r+0x1d2>
 800aefa:	2340      	movs	r3, #64	; 0x40
 800aefc:	616b      	str	r3, [r5, #20]
 800aefe:	2300      	movs	r3, #0
 800af00:	9309      	str	r3, [sp, #36]	; 0x24
 800af02:	2320      	movs	r3, #32
 800af04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af08:	f8cd 800c 	str.w	r8, [sp, #12]
 800af0c:	2330      	movs	r3, #48	; 0x30
 800af0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0b8 <_svfiprintf_r+0x1ec>
 800af12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af16:	f04f 0901 	mov.w	r9, #1
 800af1a:	4623      	mov	r3, r4
 800af1c:	469a      	mov	sl, r3
 800af1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af22:	b10a      	cbz	r2, 800af28 <_svfiprintf_r+0x5c>
 800af24:	2a25      	cmp	r2, #37	; 0x25
 800af26:	d1f9      	bne.n	800af1c <_svfiprintf_r+0x50>
 800af28:	ebba 0b04 	subs.w	fp, sl, r4
 800af2c:	d00b      	beq.n	800af46 <_svfiprintf_r+0x7a>
 800af2e:	465b      	mov	r3, fp
 800af30:	4622      	mov	r2, r4
 800af32:	4629      	mov	r1, r5
 800af34:	4638      	mov	r0, r7
 800af36:	f7ff ff6d 	bl	800ae14 <__ssputs_r>
 800af3a:	3001      	adds	r0, #1
 800af3c:	f000 80aa 	beq.w	800b094 <_svfiprintf_r+0x1c8>
 800af40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af42:	445a      	add	r2, fp
 800af44:	9209      	str	r2, [sp, #36]	; 0x24
 800af46:	f89a 3000 	ldrb.w	r3, [sl]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 80a2 	beq.w	800b094 <_svfiprintf_r+0x1c8>
 800af50:	2300      	movs	r3, #0
 800af52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af5a:	f10a 0a01 	add.w	sl, sl, #1
 800af5e:	9304      	str	r3, [sp, #16]
 800af60:	9307      	str	r3, [sp, #28]
 800af62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af66:	931a      	str	r3, [sp, #104]	; 0x68
 800af68:	4654      	mov	r4, sl
 800af6a:	2205      	movs	r2, #5
 800af6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af70:	4851      	ldr	r0, [pc, #324]	; (800b0b8 <_svfiprintf_r+0x1ec>)
 800af72:	f7f5 f935 	bl	80001e0 <memchr>
 800af76:	9a04      	ldr	r2, [sp, #16]
 800af78:	b9d8      	cbnz	r0, 800afb2 <_svfiprintf_r+0xe6>
 800af7a:	06d0      	lsls	r0, r2, #27
 800af7c:	bf44      	itt	mi
 800af7e:	2320      	movmi	r3, #32
 800af80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af84:	0711      	lsls	r1, r2, #28
 800af86:	bf44      	itt	mi
 800af88:	232b      	movmi	r3, #43	; 0x2b
 800af8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af8e:	f89a 3000 	ldrb.w	r3, [sl]
 800af92:	2b2a      	cmp	r3, #42	; 0x2a
 800af94:	d015      	beq.n	800afc2 <_svfiprintf_r+0xf6>
 800af96:	9a07      	ldr	r2, [sp, #28]
 800af98:	4654      	mov	r4, sl
 800af9a:	2000      	movs	r0, #0
 800af9c:	f04f 0c0a 	mov.w	ip, #10
 800afa0:	4621      	mov	r1, r4
 800afa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afa6:	3b30      	subs	r3, #48	; 0x30
 800afa8:	2b09      	cmp	r3, #9
 800afaa:	d94e      	bls.n	800b04a <_svfiprintf_r+0x17e>
 800afac:	b1b0      	cbz	r0, 800afdc <_svfiprintf_r+0x110>
 800afae:	9207      	str	r2, [sp, #28]
 800afb0:	e014      	b.n	800afdc <_svfiprintf_r+0x110>
 800afb2:	eba0 0308 	sub.w	r3, r0, r8
 800afb6:	fa09 f303 	lsl.w	r3, r9, r3
 800afba:	4313      	orrs	r3, r2
 800afbc:	9304      	str	r3, [sp, #16]
 800afbe:	46a2      	mov	sl, r4
 800afc0:	e7d2      	b.n	800af68 <_svfiprintf_r+0x9c>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	1d19      	adds	r1, r3, #4
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	9103      	str	r1, [sp, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	bfbb      	ittet	lt
 800afce:	425b      	neglt	r3, r3
 800afd0:	f042 0202 	orrlt.w	r2, r2, #2
 800afd4:	9307      	strge	r3, [sp, #28]
 800afd6:	9307      	strlt	r3, [sp, #28]
 800afd8:	bfb8      	it	lt
 800afda:	9204      	strlt	r2, [sp, #16]
 800afdc:	7823      	ldrb	r3, [r4, #0]
 800afde:	2b2e      	cmp	r3, #46	; 0x2e
 800afe0:	d10c      	bne.n	800affc <_svfiprintf_r+0x130>
 800afe2:	7863      	ldrb	r3, [r4, #1]
 800afe4:	2b2a      	cmp	r3, #42	; 0x2a
 800afe6:	d135      	bne.n	800b054 <_svfiprintf_r+0x188>
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	1d1a      	adds	r2, r3, #4
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	9203      	str	r2, [sp, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	bfb8      	it	lt
 800aff4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aff8:	3402      	adds	r4, #2
 800affa:	9305      	str	r3, [sp, #20]
 800affc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b0c8 <_svfiprintf_r+0x1fc>
 800b000:	7821      	ldrb	r1, [r4, #0]
 800b002:	2203      	movs	r2, #3
 800b004:	4650      	mov	r0, sl
 800b006:	f7f5 f8eb 	bl	80001e0 <memchr>
 800b00a:	b140      	cbz	r0, 800b01e <_svfiprintf_r+0x152>
 800b00c:	2340      	movs	r3, #64	; 0x40
 800b00e:	eba0 000a 	sub.w	r0, r0, sl
 800b012:	fa03 f000 	lsl.w	r0, r3, r0
 800b016:	9b04      	ldr	r3, [sp, #16]
 800b018:	4303      	orrs	r3, r0
 800b01a:	3401      	adds	r4, #1
 800b01c:	9304      	str	r3, [sp, #16]
 800b01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b022:	4826      	ldr	r0, [pc, #152]	; (800b0bc <_svfiprintf_r+0x1f0>)
 800b024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b028:	2206      	movs	r2, #6
 800b02a:	f7f5 f8d9 	bl	80001e0 <memchr>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d038      	beq.n	800b0a4 <_svfiprintf_r+0x1d8>
 800b032:	4b23      	ldr	r3, [pc, #140]	; (800b0c0 <_svfiprintf_r+0x1f4>)
 800b034:	bb1b      	cbnz	r3, 800b07e <_svfiprintf_r+0x1b2>
 800b036:	9b03      	ldr	r3, [sp, #12]
 800b038:	3307      	adds	r3, #7
 800b03a:	f023 0307 	bic.w	r3, r3, #7
 800b03e:	3308      	adds	r3, #8
 800b040:	9303      	str	r3, [sp, #12]
 800b042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b044:	4433      	add	r3, r6
 800b046:	9309      	str	r3, [sp, #36]	; 0x24
 800b048:	e767      	b.n	800af1a <_svfiprintf_r+0x4e>
 800b04a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b04e:	460c      	mov	r4, r1
 800b050:	2001      	movs	r0, #1
 800b052:	e7a5      	b.n	800afa0 <_svfiprintf_r+0xd4>
 800b054:	2300      	movs	r3, #0
 800b056:	3401      	adds	r4, #1
 800b058:	9305      	str	r3, [sp, #20]
 800b05a:	4619      	mov	r1, r3
 800b05c:	f04f 0c0a 	mov.w	ip, #10
 800b060:	4620      	mov	r0, r4
 800b062:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b066:	3a30      	subs	r2, #48	; 0x30
 800b068:	2a09      	cmp	r2, #9
 800b06a:	d903      	bls.n	800b074 <_svfiprintf_r+0x1a8>
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d0c5      	beq.n	800affc <_svfiprintf_r+0x130>
 800b070:	9105      	str	r1, [sp, #20]
 800b072:	e7c3      	b.n	800affc <_svfiprintf_r+0x130>
 800b074:	fb0c 2101 	mla	r1, ip, r1, r2
 800b078:	4604      	mov	r4, r0
 800b07a:	2301      	movs	r3, #1
 800b07c:	e7f0      	b.n	800b060 <_svfiprintf_r+0x194>
 800b07e:	ab03      	add	r3, sp, #12
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	462a      	mov	r2, r5
 800b084:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <_svfiprintf_r+0x1f8>)
 800b086:	a904      	add	r1, sp, #16
 800b088:	4638      	mov	r0, r7
 800b08a:	f3af 8000 	nop.w
 800b08e:	1c42      	adds	r2, r0, #1
 800b090:	4606      	mov	r6, r0
 800b092:	d1d6      	bne.n	800b042 <_svfiprintf_r+0x176>
 800b094:	89ab      	ldrh	r3, [r5, #12]
 800b096:	065b      	lsls	r3, r3, #25
 800b098:	f53f af2c 	bmi.w	800aef4 <_svfiprintf_r+0x28>
 800b09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b09e:	b01d      	add	sp, #116	; 0x74
 800b0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a4:	ab03      	add	r3, sp, #12
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	462a      	mov	r2, r5
 800b0aa:	4b06      	ldr	r3, [pc, #24]	; (800b0c4 <_svfiprintf_r+0x1f8>)
 800b0ac:	a904      	add	r1, sp, #16
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	f000 f87a 	bl	800b1a8 <_printf_i>
 800b0b4:	e7eb      	b.n	800b08e <_svfiprintf_r+0x1c2>
 800b0b6:	bf00      	nop
 800b0b8:	08036f59 	.word	0x08036f59
 800b0bc:	08036f63 	.word	0x08036f63
 800b0c0:	00000000 	.word	0x00000000
 800b0c4:	0800ae15 	.word	0x0800ae15
 800b0c8:	08036f5f 	.word	0x08036f5f

0800b0cc <_printf_common>:
 800b0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d0:	4616      	mov	r6, r2
 800b0d2:	4699      	mov	r9, r3
 800b0d4:	688a      	ldr	r2, [r1, #8]
 800b0d6:	690b      	ldr	r3, [r1, #16]
 800b0d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	bfb8      	it	lt
 800b0e0:	4613      	movlt	r3, r2
 800b0e2:	6033      	str	r3, [r6, #0]
 800b0e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	b10a      	cbz	r2, 800b0f2 <_printf_common+0x26>
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	6033      	str	r3, [r6, #0]
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	0699      	lsls	r1, r3, #26
 800b0f6:	bf42      	ittt	mi
 800b0f8:	6833      	ldrmi	r3, [r6, #0]
 800b0fa:	3302      	addmi	r3, #2
 800b0fc:	6033      	strmi	r3, [r6, #0]
 800b0fe:	6825      	ldr	r5, [r4, #0]
 800b100:	f015 0506 	ands.w	r5, r5, #6
 800b104:	d106      	bne.n	800b114 <_printf_common+0x48>
 800b106:	f104 0a19 	add.w	sl, r4, #25
 800b10a:	68e3      	ldr	r3, [r4, #12]
 800b10c:	6832      	ldr	r2, [r6, #0]
 800b10e:	1a9b      	subs	r3, r3, r2
 800b110:	42ab      	cmp	r3, r5
 800b112:	dc26      	bgt.n	800b162 <_printf_common+0x96>
 800b114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b118:	1e13      	subs	r3, r2, #0
 800b11a:	6822      	ldr	r2, [r4, #0]
 800b11c:	bf18      	it	ne
 800b11e:	2301      	movne	r3, #1
 800b120:	0692      	lsls	r2, r2, #26
 800b122:	d42b      	bmi.n	800b17c <_printf_common+0xb0>
 800b124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b128:	4649      	mov	r1, r9
 800b12a:	4638      	mov	r0, r7
 800b12c:	47c0      	blx	r8
 800b12e:	3001      	adds	r0, #1
 800b130:	d01e      	beq.n	800b170 <_printf_common+0xa4>
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	68e5      	ldr	r5, [r4, #12]
 800b136:	6832      	ldr	r2, [r6, #0]
 800b138:	f003 0306 	and.w	r3, r3, #6
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	bf08      	it	eq
 800b140:	1aad      	subeq	r5, r5, r2
 800b142:	68a3      	ldr	r3, [r4, #8]
 800b144:	6922      	ldr	r2, [r4, #16]
 800b146:	bf0c      	ite	eq
 800b148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b14c:	2500      	movne	r5, #0
 800b14e:	4293      	cmp	r3, r2
 800b150:	bfc4      	itt	gt
 800b152:	1a9b      	subgt	r3, r3, r2
 800b154:	18ed      	addgt	r5, r5, r3
 800b156:	2600      	movs	r6, #0
 800b158:	341a      	adds	r4, #26
 800b15a:	42b5      	cmp	r5, r6
 800b15c:	d11a      	bne.n	800b194 <_printf_common+0xc8>
 800b15e:	2000      	movs	r0, #0
 800b160:	e008      	b.n	800b174 <_printf_common+0xa8>
 800b162:	2301      	movs	r3, #1
 800b164:	4652      	mov	r2, sl
 800b166:	4649      	mov	r1, r9
 800b168:	4638      	mov	r0, r7
 800b16a:	47c0      	blx	r8
 800b16c:	3001      	adds	r0, #1
 800b16e:	d103      	bne.n	800b178 <_printf_common+0xac>
 800b170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b178:	3501      	adds	r5, #1
 800b17a:	e7c6      	b.n	800b10a <_printf_common+0x3e>
 800b17c:	18e1      	adds	r1, r4, r3
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	2030      	movs	r0, #48	; 0x30
 800b182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b186:	4422      	add	r2, r4
 800b188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b18c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b190:	3302      	adds	r3, #2
 800b192:	e7c7      	b.n	800b124 <_printf_common+0x58>
 800b194:	2301      	movs	r3, #1
 800b196:	4622      	mov	r2, r4
 800b198:	4649      	mov	r1, r9
 800b19a:	4638      	mov	r0, r7
 800b19c:	47c0      	blx	r8
 800b19e:	3001      	adds	r0, #1
 800b1a0:	d0e6      	beq.n	800b170 <_printf_common+0xa4>
 800b1a2:	3601      	adds	r6, #1
 800b1a4:	e7d9      	b.n	800b15a <_printf_common+0x8e>
	...

0800b1a8 <_printf_i>:
 800b1a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ac:	7e0f      	ldrb	r7, [r1, #24]
 800b1ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1b0:	2f78      	cmp	r7, #120	; 0x78
 800b1b2:	4691      	mov	r9, r2
 800b1b4:	4680      	mov	r8, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	469a      	mov	sl, r3
 800b1ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1be:	d807      	bhi.n	800b1d0 <_printf_i+0x28>
 800b1c0:	2f62      	cmp	r7, #98	; 0x62
 800b1c2:	d80a      	bhi.n	800b1da <_printf_i+0x32>
 800b1c4:	2f00      	cmp	r7, #0
 800b1c6:	f000 80d8 	beq.w	800b37a <_printf_i+0x1d2>
 800b1ca:	2f58      	cmp	r7, #88	; 0x58
 800b1cc:	f000 80a3 	beq.w	800b316 <_printf_i+0x16e>
 800b1d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1d8:	e03a      	b.n	800b250 <_printf_i+0xa8>
 800b1da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1de:	2b15      	cmp	r3, #21
 800b1e0:	d8f6      	bhi.n	800b1d0 <_printf_i+0x28>
 800b1e2:	a101      	add	r1, pc, #4	; (adr r1, 800b1e8 <_printf_i+0x40>)
 800b1e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1e8:	0800b241 	.word	0x0800b241
 800b1ec:	0800b255 	.word	0x0800b255
 800b1f0:	0800b1d1 	.word	0x0800b1d1
 800b1f4:	0800b1d1 	.word	0x0800b1d1
 800b1f8:	0800b1d1 	.word	0x0800b1d1
 800b1fc:	0800b1d1 	.word	0x0800b1d1
 800b200:	0800b255 	.word	0x0800b255
 800b204:	0800b1d1 	.word	0x0800b1d1
 800b208:	0800b1d1 	.word	0x0800b1d1
 800b20c:	0800b1d1 	.word	0x0800b1d1
 800b210:	0800b1d1 	.word	0x0800b1d1
 800b214:	0800b361 	.word	0x0800b361
 800b218:	0800b285 	.word	0x0800b285
 800b21c:	0800b343 	.word	0x0800b343
 800b220:	0800b1d1 	.word	0x0800b1d1
 800b224:	0800b1d1 	.word	0x0800b1d1
 800b228:	0800b383 	.word	0x0800b383
 800b22c:	0800b1d1 	.word	0x0800b1d1
 800b230:	0800b285 	.word	0x0800b285
 800b234:	0800b1d1 	.word	0x0800b1d1
 800b238:	0800b1d1 	.word	0x0800b1d1
 800b23c:	0800b34b 	.word	0x0800b34b
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	1d1a      	adds	r2, r3, #4
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	602a      	str	r2, [r5, #0]
 800b248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b24c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b250:	2301      	movs	r3, #1
 800b252:	e0a3      	b.n	800b39c <_printf_i+0x1f4>
 800b254:	6820      	ldr	r0, [r4, #0]
 800b256:	6829      	ldr	r1, [r5, #0]
 800b258:	0606      	lsls	r6, r0, #24
 800b25a:	f101 0304 	add.w	r3, r1, #4
 800b25e:	d50a      	bpl.n	800b276 <_printf_i+0xce>
 800b260:	680e      	ldr	r6, [r1, #0]
 800b262:	602b      	str	r3, [r5, #0]
 800b264:	2e00      	cmp	r6, #0
 800b266:	da03      	bge.n	800b270 <_printf_i+0xc8>
 800b268:	232d      	movs	r3, #45	; 0x2d
 800b26a:	4276      	negs	r6, r6
 800b26c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b270:	485e      	ldr	r0, [pc, #376]	; (800b3ec <_printf_i+0x244>)
 800b272:	230a      	movs	r3, #10
 800b274:	e019      	b.n	800b2aa <_printf_i+0x102>
 800b276:	680e      	ldr	r6, [r1, #0]
 800b278:	602b      	str	r3, [r5, #0]
 800b27a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b27e:	bf18      	it	ne
 800b280:	b236      	sxthne	r6, r6
 800b282:	e7ef      	b.n	800b264 <_printf_i+0xbc>
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	6820      	ldr	r0, [r4, #0]
 800b288:	1d19      	adds	r1, r3, #4
 800b28a:	6029      	str	r1, [r5, #0]
 800b28c:	0601      	lsls	r1, r0, #24
 800b28e:	d501      	bpl.n	800b294 <_printf_i+0xec>
 800b290:	681e      	ldr	r6, [r3, #0]
 800b292:	e002      	b.n	800b29a <_printf_i+0xf2>
 800b294:	0646      	lsls	r6, r0, #25
 800b296:	d5fb      	bpl.n	800b290 <_printf_i+0xe8>
 800b298:	881e      	ldrh	r6, [r3, #0]
 800b29a:	4854      	ldr	r0, [pc, #336]	; (800b3ec <_printf_i+0x244>)
 800b29c:	2f6f      	cmp	r7, #111	; 0x6f
 800b29e:	bf0c      	ite	eq
 800b2a0:	2308      	moveq	r3, #8
 800b2a2:	230a      	movne	r3, #10
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2aa:	6865      	ldr	r5, [r4, #4]
 800b2ac:	60a5      	str	r5, [r4, #8]
 800b2ae:	2d00      	cmp	r5, #0
 800b2b0:	bfa2      	ittt	ge
 800b2b2:	6821      	ldrge	r1, [r4, #0]
 800b2b4:	f021 0104 	bicge.w	r1, r1, #4
 800b2b8:	6021      	strge	r1, [r4, #0]
 800b2ba:	b90e      	cbnz	r6, 800b2c0 <_printf_i+0x118>
 800b2bc:	2d00      	cmp	r5, #0
 800b2be:	d04d      	beq.n	800b35c <_printf_i+0x1b4>
 800b2c0:	4615      	mov	r5, r2
 800b2c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2c6:	fb03 6711 	mls	r7, r3, r1, r6
 800b2ca:	5dc7      	ldrb	r7, [r0, r7]
 800b2cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2d0:	4637      	mov	r7, r6
 800b2d2:	42bb      	cmp	r3, r7
 800b2d4:	460e      	mov	r6, r1
 800b2d6:	d9f4      	bls.n	800b2c2 <_printf_i+0x11a>
 800b2d8:	2b08      	cmp	r3, #8
 800b2da:	d10b      	bne.n	800b2f4 <_printf_i+0x14c>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	07de      	lsls	r6, r3, #31
 800b2e0:	d508      	bpl.n	800b2f4 <_printf_i+0x14c>
 800b2e2:	6923      	ldr	r3, [r4, #16]
 800b2e4:	6861      	ldr	r1, [r4, #4]
 800b2e6:	4299      	cmp	r1, r3
 800b2e8:	bfde      	ittt	le
 800b2ea:	2330      	movle	r3, #48	; 0x30
 800b2ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b2f4:	1b52      	subs	r2, r2, r5
 800b2f6:	6122      	str	r2, [r4, #16]
 800b2f8:	f8cd a000 	str.w	sl, [sp]
 800b2fc:	464b      	mov	r3, r9
 800b2fe:	aa03      	add	r2, sp, #12
 800b300:	4621      	mov	r1, r4
 800b302:	4640      	mov	r0, r8
 800b304:	f7ff fee2 	bl	800b0cc <_printf_common>
 800b308:	3001      	adds	r0, #1
 800b30a:	d14c      	bne.n	800b3a6 <_printf_i+0x1fe>
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b310:	b004      	add	sp, #16
 800b312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b316:	4835      	ldr	r0, [pc, #212]	; (800b3ec <_printf_i+0x244>)
 800b318:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b31c:	6829      	ldr	r1, [r5, #0]
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	f851 6b04 	ldr.w	r6, [r1], #4
 800b324:	6029      	str	r1, [r5, #0]
 800b326:	061d      	lsls	r5, r3, #24
 800b328:	d514      	bpl.n	800b354 <_printf_i+0x1ac>
 800b32a:	07df      	lsls	r7, r3, #31
 800b32c:	bf44      	itt	mi
 800b32e:	f043 0320 	orrmi.w	r3, r3, #32
 800b332:	6023      	strmi	r3, [r4, #0]
 800b334:	b91e      	cbnz	r6, 800b33e <_printf_i+0x196>
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	f023 0320 	bic.w	r3, r3, #32
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	2310      	movs	r3, #16
 800b340:	e7b0      	b.n	800b2a4 <_printf_i+0xfc>
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	f043 0320 	orr.w	r3, r3, #32
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	2378      	movs	r3, #120	; 0x78
 800b34c:	4828      	ldr	r0, [pc, #160]	; (800b3f0 <_printf_i+0x248>)
 800b34e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b352:	e7e3      	b.n	800b31c <_printf_i+0x174>
 800b354:	0659      	lsls	r1, r3, #25
 800b356:	bf48      	it	mi
 800b358:	b2b6      	uxthmi	r6, r6
 800b35a:	e7e6      	b.n	800b32a <_printf_i+0x182>
 800b35c:	4615      	mov	r5, r2
 800b35e:	e7bb      	b.n	800b2d8 <_printf_i+0x130>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	6826      	ldr	r6, [r4, #0]
 800b364:	6961      	ldr	r1, [r4, #20]
 800b366:	1d18      	adds	r0, r3, #4
 800b368:	6028      	str	r0, [r5, #0]
 800b36a:	0635      	lsls	r5, r6, #24
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	d501      	bpl.n	800b374 <_printf_i+0x1cc>
 800b370:	6019      	str	r1, [r3, #0]
 800b372:	e002      	b.n	800b37a <_printf_i+0x1d2>
 800b374:	0670      	lsls	r0, r6, #25
 800b376:	d5fb      	bpl.n	800b370 <_printf_i+0x1c8>
 800b378:	8019      	strh	r1, [r3, #0]
 800b37a:	2300      	movs	r3, #0
 800b37c:	6123      	str	r3, [r4, #16]
 800b37e:	4615      	mov	r5, r2
 800b380:	e7ba      	b.n	800b2f8 <_printf_i+0x150>
 800b382:	682b      	ldr	r3, [r5, #0]
 800b384:	1d1a      	adds	r2, r3, #4
 800b386:	602a      	str	r2, [r5, #0]
 800b388:	681d      	ldr	r5, [r3, #0]
 800b38a:	6862      	ldr	r2, [r4, #4]
 800b38c:	2100      	movs	r1, #0
 800b38e:	4628      	mov	r0, r5
 800b390:	f7f4 ff26 	bl	80001e0 <memchr>
 800b394:	b108      	cbz	r0, 800b39a <_printf_i+0x1f2>
 800b396:	1b40      	subs	r0, r0, r5
 800b398:	6060      	str	r0, [r4, #4]
 800b39a:	6863      	ldr	r3, [r4, #4]
 800b39c:	6123      	str	r3, [r4, #16]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3a4:	e7a8      	b.n	800b2f8 <_printf_i+0x150>
 800b3a6:	6923      	ldr	r3, [r4, #16]
 800b3a8:	462a      	mov	r2, r5
 800b3aa:	4649      	mov	r1, r9
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	47d0      	blx	sl
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	d0ab      	beq.n	800b30c <_printf_i+0x164>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	079b      	lsls	r3, r3, #30
 800b3b8:	d413      	bmi.n	800b3e2 <_printf_i+0x23a>
 800b3ba:	68e0      	ldr	r0, [r4, #12]
 800b3bc:	9b03      	ldr	r3, [sp, #12]
 800b3be:	4298      	cmp	r0, r3
 800b3c0:	bfb8      	it	lt
 800b3c2:	4618      	movlt	r0, r3
 800b3c4:	e7a4      	b.n	800b310 <_printf_i+0x168>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	4632      	mov	r2, r6
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	4640      	mov	r0, r8
 800b3ce:	47d0      	blx	sl
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d09b      	beq.n	800b30c <_printf_i+0x164>
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	68e3      	ldr	r3, [r4, #12]
 800b3d8:	9903      	ldr	r1, [sp, #12]
 800b3da:	1a5b      	subs	r3, r3, r1
 800b3dc:	42ab      	cmp	r3, r5
 800b3de:	dcf2      	bgt.n	800b3c6 <_printf_i+0x21e>
 800b3e0:	e7eb      	b.n	800b3ba <_printf_i+0x212>
 800b3e2:	2500      	movs	r5, #0
 800b3e4:	f104 0619 	add.w	r6, r4, #25
 800b3e8:	e7f5      	b.n	800b3d6 <_printf_i+0x22e>
 800b3ea:	bf00      	nop
 800b3ec:	08036f6a 	.word	0x08036f6a
 800b3f0:	08036f7b 	.word	0x08036f7b

0800b3f4 <memmove>:
 800b3f4:	4288      	cmp	r0, r1
 800b3f6:	b510      	push	{r4, lr}
 800b3f8:	eb01 0402 	add.w	r4, r1, r2
 800b3fc:	d902      	bls.n	800b404 <memmove+0x10>
 800b3fe:	4284      	cmp	r4, r0
 800b400:	4623      	mov	r3, r4
 800b402:	d807      	bhi.n	800b414 <memmove+0x20>
 800b404:	1e43      	subs	r3, r0, #1
 800b406:	42a1      	cmp	r1, r4
 800b408:	d008      	beq.n	800b41c <memmove+0x28>
 800b40a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b40e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b412:	e7f8      	b.n	800b406 <memmove+0x12>
 800b414:	4402      	add	r2, r0
 800b416:	4601      	mov	r1, r0
 800b418:	428a      	cmp	r2, r1
 800b41a:	d100      	bne.n	800b41e <memmove+0x2a>
 800b41c:	bd10      	pop	{r4, pc}
 800b41e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b426:	e7f7      	b.n	800b418 <memmove+0x24>

0800b428 <_realloc_r>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	4680      	mov	r8, r0
 800b42e:	4614      	mov	r4, r2
 800b430:	460e      	mov	r6, r1
 800b432:	b921      	cbnz	r1, 800b43e <_realloc_r+0x16>
 800b434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b438:	4611      	mov	r1, r2
 800b43a:	f7ff bae5 	b.w	800aa08 <_malloc_r>
 800b43e:	b92a      	cbnz	r2, 800b44c <_realloc_r+0x24>
 800b440:	f7ff fc9c 	bl	800ad7c <_free_r>
 800b444:	4625      	mov	r5, r4
 800b446:	4628      	mov	r0, r5
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	f000 f81b 	bl	800b486 <_malloc_usable_size_r>
 800b450:	4284      	cmp	r4, r0
 800b452:	4607      	mov	r7, r0
 800b454:	d802      	bhi.n	800b45c <_realloc_r+0x34>
 800b456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b45a:	d812      	bhi.n	800b482 <_realloc_r+0x5a>
 800b45c:	4621      	mov	r1, r4
 800b45e:	4640      	mov	r0, r8
 800b460:	f7ff fad2 	bl	800aa08 <_malloc_r>
 800b464:	4605      	mov	r5, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	d0ed      	beq.n	800b446 <_realloc_r+0x1e>
 800b46a:	42bc      	cmp	r4, r7
 800b46c:	4622      	mov	r2, r4
 800b46e:	4631      	mov	r1, r6
 800b470:	bf28      	it	cs
 800b472:	463a      	movcs	r2, r7
 800b474:	f7ff fa92 	bl	800a99c <memcpy>
 800b478:	4631      	mov	r1, r6
 800b47a:	4640      	mov	r0, r8
 800b47c:	f7ff fc7e 	bl	800ad7c <_free_r>
 800b480:	e7e1      	b.n	800b446 <_realloc_r+0x1e>
 800b482:	4635      	mov	r5, r6
 800b484:	e7df      	b.n	800b446 <_realloc_r+0x1e>

0800b486 <_malloc_usable_size_r>:
 800b486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b48a:	1f18      	subs	r0, r3, #4
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bfbc      	itt	lt
 800b490:	580b      	ldrlt	r3, [r1, r0]
 800b492:	18c0      	addlt	r0, r0, r3
 800b494:	4770      	bx	lr
	...

0800b498 <_init>:
 800b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49a:	bf00      	nop
 800b49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49e:	bc08      	pop	{r3}
 800b4a0:	469e      	mov	lr, r3
 800b4a2:	4770      	bx	lr

0800b4a4 <_fini>:
 800b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a6:	bf00      	nop
 800b4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4aa:	bc08      	pop	{r3}
 800b4ac:	469e      	mov	lr, r3
 800b4ae:	4770      	bx	lr
