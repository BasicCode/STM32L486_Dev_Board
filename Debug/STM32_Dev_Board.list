
STM32_Dev_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d550  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002cc38  0800d6e0  0800d6e0  0001d6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803a318  0803a318  000540a8  2**0
                  CONTENTS
  4 .ARM          00000008  0803a318  0803a318  0004a318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803a320  0803a320  000540a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803a320  0803a320  0004a320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803a324  0803a324  0004a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000040a8  20000000  0803a328  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000061bc  200040a8  0803e3d0  000540a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a264  0803e3d0  0005a264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000540a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029a62  00000000  00000000  000540d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000650f  00000000  00000000  0007db3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f90  00000000  00000000  00084050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd8  00000000  00000000  00085fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f92f  00000000  00000000  00087cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e5cb  00000000  00000000  000b75e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104ce0  00000000  00000000  000e5bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ea892  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008700  00000000  00000000  001ea8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200040a8 	.word	0x200040a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d6c8 	.word	0x0800d6c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200040ac 	.word	0x200040ac
 80001cc:	0800d6c8 	.word	0x0800d6c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b974 	b.w	8000a08 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468e      	mov	lr, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14d      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000746:	428a      	cmp	r2, r1
 8000748:	4694      	mov	ip, r2
 800074a:	d969      	bls.n	8000820 <__udivmoddi4+0xe8>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b152      	cbz	r2, 8000768 <__udivmoddi4+0x30>
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	f1c2 0120 	rsb	r1, r2, #32
 800075a:	fa20 f101 	lsr.w	r1, r0, r1
 800075e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000762:	ea41 0e03 	orr.w	lr, r1, r3
 8000766:	4094      	lsls	r4, r2
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	0c21      	lsrs	r1, r4, #16
 800076e:	fbbe f6f8 	udiv	r6, lr, r8
 8000772:	fa1f f78c 	uxth.w	r7, ip
 8000776:	fb08 e316 	mls	r3, r8, r6, lr
 800077a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077e:	fb06 f107 	mul.w	r1, r6, r7
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800078e:	f080 811f 	bcs.w	80009d0 <__udivmoddi4+0x298>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 811c 	bls.w	80009d0 <__udivmoddi4+0x298>
 8000798:	3e02      	subs	r6, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f707 	mul.w	r7, r0, r7
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x92>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007bc:	f080 810a 	bcs.w	80009d4 <__udivmoddi4+0x29c>
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	f240 8107 	bls.w	80009d4 <__udivmoddi4+0x29c>
 80007c6:	4464      	add	r4, ip
 80007c8:	3802      	subs	r0, #2
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	1be4      	subs	r4, r4, r7
 80007d0:	2600      	movs	r6, #0
 80007d2:	b11d      	cbz	r5, 80007dc <__udivmoddi4+0xa4>
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	2300      	movs	r3, #0
 80007d8:	e9c5 4300 	strd	r4, r3, [r5]
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d909      	bls.n	80007fa <__udivmoddi4+0xc2>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 80ef 	beq.w	80009ca <__udivmoddi4+0x292>
 80007ec:	2600      	movs	r6, #0
 80007ee:	e9c5 0100 	strd	r0, r1, [r5]
 80007f2:	4630      	mov	r0, r6
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	fab3 f683 	clz	r6, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d14a      	bne.n	8000898 <__udivmoddi4+0x160>
 8000802:	428b      	cmp	r3, r1
 8000804:	d302      	bcc.n	800080c <__udivmoddi4+0xd4>
 8000806:	4282      	cmp	r2, r0
 8000808:	f200 80f9 	bhi.w	80009fe <__udivmoddi4+0x2c6>
 800080c:	1a84      	subs	r4, r0, r2
 800080e:	eb61 0303 	sbc.w	r3, r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	469e      	mov	lr, r3
 8000816:	2d00      	cmp	r5, #0
 8000818:	d0e0      	beq.n	80007dc <__udivmoddi4+0xa4>
 800081a:	e9c5 4e00 	strd	r4, lr, [r5]
 800081e:	e7dd      	b.n	80007dc <__udivmoddi4+0xa4>
 8000820:	b902      	cbnz	r2, 8000824 <__udivmoddi4+0xec>
 8000822:	deff      	udf	#255	; 0xff
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 8092 	bne.w	8000952 <__udivmoddi4+0x21a>
 800082e:	eba1 010c 	sub.w	r1, r1, ip
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	2601      	movs	r6, #1
 800083c:	0c20      	lsrs	r0, r4, #16
 800083e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000842:	fb07 1113 	mls	r1, r7, r3, r1
 8000846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800084a:	fb0e f003 	mul.w	r0, lr, r3
 800084e:	4288      	cmp	r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x12c>
 8000852:	eb1c 0101 	adds.w	r1, ip, r1
 8000856:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x12a>
 800085c:	4288      	cmp	r0, r1
 800085e:	f200 80cb 	bhi.w	80009f8 <__udivmoddi4+0x2c0>
 8000862:	4643      	mov	r3, r8
 8000864:	1a09      	subs	r1, r1, r0
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb1 f0f7 	udiv	r0, r1, r7
 800086c:	fb07 1110 	mls	r1, r7, r0, r1
 8000870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000874:	fb0e fe00 	mul.w	lr, lr, r0
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x156>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0x154>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f200 80bb 	bhi.w	8000a02 <__udivmoddi4+0x2ca>
 800088c:	4608      	mov	r0, r1
 800088e:	eba4 040e 	sub.w	r4, r4, lr
 8000892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000896:	e79c      	b.n	80007d2 <__udivmoddi4+0x9a>
 8000898:	f1c6 0720 	rsb	r7, r6, #32
 800089c:	40b3      	lsls	r3, r6
 800089e:	fa22 fc07 	lsr.w	ip, r2, r7
 80008a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a6:	fa20 f407 	lsr.w	r4, r0, r7
 80008aa:	fa01 f306 	lsl.w	r3, r1, r6
 80008ae:	431c      	orrs	r4, r3
 80008b0:	40f9      	lsrs	r1, r7
 80008b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80008be:	0c20      	lsrs	r0, r4, #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fb09 1118 	mls	r1, r9, r8, r1
 80008c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008cc:	fb08 f00e 	mul.w	r0, r8, lr
 80008d0:	4288      	cmp	r0, r1
 80008d2:	fa02 f206 	lsl.w	r2, r2, r6
 80008d6:	d90b      	bls.n	80008f0 <__udivmoddi4+0x1b8>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008e0:	f080 8088 	bcs.w	80009f4 <__udivmoddi4+0x2bc>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f240 8085 	bls.w	80009f4 <__udivmoddi4+0x2bc>
 80008ea:	f1a8 0802 	sub.w	r8, r8, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f8:	fb09 1110 	mls	r1, r9, r0, r1
 80008fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000900:	fb00 fe0e 	mul.w	lr, r0, lr
 8000904:	458e      	cmp	lr, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x1e2>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000910:	d26c      	bcs.n	80009ec <__udivmoddi4+0x2b4>
 8000912:	458e      	cmp	lr, r1
 8000914:	d96a      	bls.n	80009ec <__udivmoddi4+0x2b4>
 8000916:	3802      	subs	r0, #2
 8000918:	4461      	add	r1, ip
 800091a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091e:	fba0 9402 	umull	r9, r4, r0, r2
 8000922:	eba1 010e 	sub.w	r1, r1, lr
 8000926:	42a1      	cmp	r1, r4
 8000928:	46c8      	mov	r8, r9
 800092a:	46a6      	mov	lr, r4
 800092c:	d356      	bcc.n	80009dc <__udivmoddi4+0x2a4>
 800092e:	d053      	beq.n	80009d8 <__udivmoddi4+0x2a0>
 8000930:	b15d      	cbz	r5, 800094a <__udivmoddi4+0x212>
 8000932:	ebb3 0208 	subs.w	r2, r3, r8
 8000936:	eb61 010e 	sbc.w	r1, r1, lr
 800093a:	fa01 f707 	lsl.w	r7, r1, r7
 800093e:	fa22 f306 	lsr.w	r3, r2, r6
 8000942:	40f1      	lsrs	r1, r6
 8000944:	431f      	orrs	r7, r3
 8000946:	e9c5 7100 	strd	r7, r1, [r5]
 800094a:	2600      	movs	r6, #0
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	f1c2 0320 	rsb	r3, r2, #32
 8000956:	40d8      	lsrs	r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	fa21 f303 	lsr.w	r3, r1, r3
 8000960:	4091      	lsls	r1, r2
 8000962:	4301      	orrs	r1, r0
 8000964:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000968:	fa1f fe8c 	uxth.w	lr, ip
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3610 	mls	r6, r7, r0, r3
 8000974:	0c0b      	lsrs	r3, r1, #16
 8000976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800097a:	fb00 f60e 	mul.w	r6, r0, lr
 800097e:	429e      	cmp	r6, r3
 8000980:	fa04 f402 	lsl.w	r4, r4, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x260>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800098e:	d22f      	bcs.n	80009f0 <__udivmoddi4+0x2b8>
 8000990:	429e      	cmp	r6, r3
 8000992:	d92d      	bls.n	80009f0 <__udivmoddi4+0x2b8>
 8000994:	3802      	subs	r0, #2
 8000996:	4463      	add	r3, ip
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	b289      	uxth	r1, r1
 800099c:	fbb3 f6f7 	udiv	r6, r3, r7
 80009a0:	fb07 3316 	mls	r3, r7, r6, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x28a>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009b8:	d216      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d914      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 80009be:	3e02      	subs	r6, #2
 80009c0:	4461      	add	r1, ip
 80009c2:	1ac9      	subs	r1, r1, r3
 80009c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c8:	e738      	b.n	800083c <__udivmoddi4+0x104>
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e705      	b.n	80007dc <__udivmoddi4+0xa4>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e3      	b.n	800079c <__udivmoddi4+0x64>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6f8      	b.n	80007ca <__udivmoddi4+0x92>
 80009d8:	454b      	cmp	r3, r9
 80009da:	d2a9      	bcs.n	8000930 <__udivmoddi4+0x1f8>
 80009dc:	ebb9 0802 	subs.w	r8, r9, r2
 80009e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7a3      	b.n	8000930 <__udivmoddi4+0x1f8>
 80009e8:	4646      	mov	r6, r8
 80009ea:	e7ea      	b.n	80009c2 <__udivmoddi4+0x28a>
 80009ec:	4620      	mov	r0, r4
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e2>
 80009f0:	4640      	mov	r0, r8
 80009f2:	e7d1      	b.n	8000998 <__udivmoddi4+0x260>
 80009f4:	46d0      	mov	r8, sl
 80009f6:	e77b      	b.n	80008f0 <__udivmoddi4+0x1b8>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	e732      	b.n	8000864 <__udivmoddi4+0x12c>
 80009fe:	4630      	mov	r0, r6
 8000a00:	e709      	b.n	8000816 <__udivmoddi4+0xde>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	e742      	b.n	800088e <__udivmoddi4+0x156>

08000a08 <__aeabi_idiv0>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <DevBoardBegin>:
osMutexId touchMutex_ID;

/**
 * Initialises the threads which run the various peripherals on this board.
 */
void DevBoardBegin() {
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b09e      	sub	sp, #120	; 0x78
 8000a10:	af00      	add	r7, sp, #0

	/*
	 * Mutexes
	 */
	//I2C needs a mutex because it's shared by the RTC and CTP
	osMutexDef(I2CMutex);
 8000a12:	2300      	movs	r3, #0
 8000a14:	673b      	str	r3, [r7, #112]	; 0x70
 8000a16:	2300      	movs	r3, #0
 8000a18:	677b      	str	r3, [r7, #116]	; 0x74
	I2CMutex_ID = osMutexCreate(osMutex(I2CMutex));
 8000a1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f009 fab2 	bl	8009f88 <osMutexCreate>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <DevBoardBegin+0xbc>)
 8000a28:	6013      	str	r3, [r2, #0]

	/*
	 * Tasks
	 */
	//The draw task handles display updates. It should be a HIGH priority for fast refresh.
	osThreadDef(drawTask, DrawTask, osPriorityHigh, 0, 1024);
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <DevBoardBegin+0xc0>)
 8000a2c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a30:	461d      	mov	r5, r3
 8000a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	drawTaskHandle = osThreadCreate(osThread(drawTask), NULL);
 8000a3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f009 fa21 	bl	8009e8c <osThreadCreate>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a20      	ldr	r2, [pc, #128]	; (8000ad0 <DevBoardBegin+0xc4>)
 8000a4e:	6013      	str	r3, [r2, #0]

	//Task which handles switching screens
	osThreadDef(changeScreenTask, ChangeScreenTask, osPriorityNormal, 0, 128);
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <DevBoardBegin+0xc8>)
 8000a52:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a56:	461d      	mov	r5, r3
 8000a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	changeScreenTaskHandle = osThreadCreate(osThread(changeScreenTask), NULL);
 8000a64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f009 fa0e 	bl	8009e8c <osThreadCreate>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <DevBoardBegin+0xcc>)
 8000a74:	6013      	str	r3, [r2, #0]

	//This task handles touching
	osThreadDef(touchTask, TouchTask, osPriorityNormal, 0, 512);
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <DevBoardBegin+0xd0>)
 8000a78:	f107 041c 	add.w	r4, r7, #28
 8000a7c:	461d      	mov	r5, r3
 8000a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	touchTaskHandle = osThreadCreate(osThread(touchTask), NULL);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f009 f9fb 	bl	8009e8c <osThreadCreate>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <DevBoardBegin+0xd4>)
 8000a9a:	6013      	str	r3, [r2, #0]

	//Get the current time from the RTC chip
	osThreadDef(timeTask, TimeTask, osPriorityNormal, 0, 128);
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <DevBoardBegin+0xd8>)
 8000a9e:	463c      	mov	r4, r7
 8000aa0:	461d      	mov	r5, r3
 8000aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	timeTaskHandle = osThreadCreate(osThread(timeTask), NULL);
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f009 f9ea 	bl	8009e8c <osThreadCreate>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <DevBoardBegin+0xdc>)
 8000abc:	6013      	str	r3, [r2, #0]

	return;
 8000abe:	bf00      	nop
}
 8000ac0:	3778      	adds	r7, #120	; 0x78
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200040f0 	.word	0x200040f0
 8000acc:	0800d778 	.word	0x0800d778
 8000ad0:	200040c4 	.word	0x200040c4
 8000ad4:	0800d794 	.word	0x0800d794
 8000ad8:	200040cc 	.word	0x200040cc
 8000adc:	0800d7b0 	.word	0x0800d7b0
 8000ae0:	200040d0 	.word	0x200040d0
 8000ae4:	0800d7cc 	.word	0x0800d7cc
 8000ae8:	200040d4 	.word	0x200040d4

08000aec <DrawTask>:
 * The Draw task handles display updates.
 * It just calls the DisplayManager draw function which decides
 * which elements need refreshing.
 */
void DrawTask(void const * argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//Do a display refresh
		DM_Draw();
 8000af4:	f001 f872 	bl	8001bdc <DM_Draw>
		//This is a HIGH priority task so we have to hand control back to the OS.
		//Also sets the refresh rate
		osDelay(100);
 8000af8:	2064      	movs	r0, #100	; 0x64
 8000afa:	f009 fa31 	bl	8009f60 <osDelay>
		DM_Draw();
 8000afe:	e7f9      	b.n	8000af4 <DrawTask+0x8>

08000b00 <ChangeScreenTask>:

/**
 * Function which receives signals, usually from button callbacks, and changes
 * the display to the desired screen.
 */
void ChangeScreenTask(void const * arguments) {
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b0ae      	sub	sp, #184	; 0xb8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

	//Any screens you want to display
	osThreadDef(deviceTestTask, DeviceTestTask, osPriorityNormal, 0, 1024);
 8000b08:	4b53      	ldr	r3, [pc, #332]	; (8000c58 <ChangeScreenTask+0x158>)
 8000b0a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000b0e:	461d      	mov	r5, r3
 8000b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(mainMenuTask, MainMenuTask, osPriorityNormal, 0, 512);
 8000b1c:	4b4f      	ldr	r3, [pc, #316]	; (8000c5c <ChangeScreenTask+0x15c>)
 8000b1e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000b22:	461d      	mov	r5, r3
 8000b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(splashScreenTask, SplashScreenTask, osPriorityNormal, 0, 256);
	osThreadDef(settingsTask, SettingsTask, osPriorityNormal, 0, 512);
 8000b30:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <ChangeScreenTask+0x160>)
 8000b32:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000b36:	461d      	mov	r5, r3
 8000b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(changeTimeTask, ChangeTimeTask, osPriorityNormal, 0, 512);
 8000b44:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <ChangeScreenTask+0x164>)
 8000b46:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000b4a:	461d      	mov	r5, r3
 8000b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(editTimerTask, EditTimerTask, osPriorityNormal, 0, 1024);
 8000b58:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <ChangeScreenTask+0x168>)
 8000b5a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000b5e:	461d      	mov	r5, r3
 8000b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(timerListTask, TimerListTask, osPriorityNormal, 0, 1024);
 8000b6c:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <ChangeScreenTask+0x16c>)
 8000b6e:	f107 040c 	add.w	r4, r7, #12
 8000b72:	461d      	mov	r5, r3
 8000b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	//Initial entry screen
	currentScreenHandle = osThreadCreate(osThread(mainMenuTask), NULL);
 8000b80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f009 f980 	bl	8009e8c <osThreadCreate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a38      	ldr	r2, [pc, #224]	; (8000c70 <ChangeScreenTask+0x170>)
 8000b90:	6013      	str	r3, [r2, #0]

	int signal = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
	int event;
	while(1) {
			event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000b96:	f107 0208 	add.w	r2, r7, #8
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f00b f943 	bl	800be2c <xTaskNotifyWait>
 8000ba6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

			if(event == pdTRUE) {
 8000baa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d14e      	bne.n	8000c50 <ChangeScreenTask+0x150>

				//Clear the display elements
				DM_Clear();
 8000bb2:	f001 f8eb 	bl	8001d8c <DM_Clear>

				//End the current screen thread
				osThreadTerminate(currentScreenHandle);
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <ChangeScreenTask+0x170>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f009 f9b2 	bl	8009f24 <osThreadTerminate>

				//Load the desired screen
				if(signal == MAIN_MENU)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d108      	bne.n	8000bd8 <ChangeScreenTask+0xd8>
					currentScreenHandle = osThreadCreate(osThread(mainMenuTask), NULL);
 8000bc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f009 f95d 	bl	8009e8c <osThreadCreate>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <ChangeScreenTask+0x170>)
 8000bd6:	6013      	str	r3, [r2, #0]

				if(signal == DEVICE_TEST)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d108      	bne.n	8000bf0 <ChangeScreenTask+0xf0>
					currentScreenHandle = osThreadCreate(osThread(deviceTestTask), NULL);
 8000bde:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f009 f951 	bl	8009e8c <osThreadCreate>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a20      	ldr	r2, [pc, #128]	; (8000c70 <ChangeScreenTask+0x170>)
 8000bee:	6013      	str	r3, [r2, #0]

				if(signal == SETTINGS)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d108      	bne.n	8000c08 <ChangeScreenTask+0x108>
					currentScreenHandle = osThreadCreate(osThread(settingsTask), NULL);
 8000bf6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f009 f945 	bl	8009e8c <osThreadCreate>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <ChangeScreenTask+0x170>)
 8000c06:	6013      	str	r3, [r2, #0]

				if(signal == CHANGE_TIME_DATE)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d108      	bne.n	8000c20 <ChangeScreenTask+0x120>
					currentScreenHandle = osThreadCreate(osThread(changeTimeTask), NULL);
 8000c0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f009 f939 	bl	8009e8c <osThreadCreate>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <ChangeScreenTask+0x170>)
 8000c1e:	6013      	str	r3, [r2, #0]

				if(signal == EDIT_TIMER)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	d108      	bne.n	8000c38 <ChangeScreenTask+0x138>
					currentScreenHandle = osThreadCreate(osThread(editTimerTask), NULL);
 8000c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f009 f92d 	bl	8009e8c <osThreadCreate>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <ChangeScreenTask+0x170>)
 8000c36:	6013      	str	r3, [r2, #0]

				if(signal == TIMER_LIST)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d108      	bne.n	8000c50 <ChangeScreenTask+0x150>
					currentScreenHandle = osThreadCreate(osThread(timerListTask), NULL);
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f009 f921 	bl	8009e8c <osThreadCreate>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <ChangeScreenTask+0x170>)
 8000c4e:	6013      	str	r3, [r2, #0]

	    }

		//Give the OS time to do some other tasks
		osThreadYield();
 8000c50:	f009 f974 	bl	8009f3c <osThreadYield>
			event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000c54:	e79f      	b.n	8000b96 <ChangeScreenTask+0x96>
 8000c56:	bf00      	nop
 8000c58:	0800d7e8 	.word	0x0800d7e8
 8000c5c:	0800d804 	.word	0x0800d804
 8000c60:	0800d820 	.word	0x0800d820
 8000c64:	0800d83c 	.word	0x0800d83c
 8000c68:	0800d858 	.word	0x0800d858
 8000c6c:	0800d874 	.word	0x0800d874
 8000c70:	200040c8 	.word	0x200040c8

08000c74 <TouchTask>:
}

/**
 * Handles touch events and reports them to the display manager.
 */
void TouchTask(void const * argument) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	; 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	int signal;
	int I2CMutexStatus;

	for(;;) {
	    // wait for a signal
	    event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000c7c:	f107 020c 	add.w	r2, r7, #12
 8000c80:	2300      	movs	r3, #0
 8000c82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c86:	2000      	movs	r0, #0
 8000c88:	f00b f8d0 	bl	800be2c <xTaskNotifyWait>
 8000c8c:	62f8      	str	r0, [r7, #44]	; 0x2c

	    //Signal received, get the touch coordinates
	    if (event == pdTRUE)  {
 8000c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d11a      	bne.n	8000cca <TouchTask+0x56>

	    	//Check the peripheral is releated by the OS
	        I2CMutexStatus  = osMutexWait(I2CMutex_ID, 250);
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <TouchTask+0x5c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	21fa      	movs	r1, #250	; 0xfa
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f009 f98c 	bl	8009fb8 <osMutexWait>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	        if (I2CMutexStatus == osOK)  {
 8000ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d104      	bne.n	8000cb4 <TouchTask+0x40>
	            //Get the most recent touch point
				touch = FT5446_getTouch();
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 fee4 	bl	8003a7c <FT5446_getTouch>
	        }
	        //Release the I2C mutex
	        osMutexRelease(I2CMutex_ID);
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <TouchTask+0x5c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f009 f9cb 	bl	800a054 <osMutexRelease>

	    	//Envoke the pressed element
			DM_Do_Press(touch);
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cc6:	f001 f99d 	bl	8002004 <DM_Do_Press>
	    }

	    osThreadYield();
 8000cca:	f009 f937 	bl	8009f3c <osThreadYield>
	    event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000cce:	e7d5      	b.n	8000c7c <TouchTask+0x8>
 8000cd0:	200040f0 	.word	0x200040f0

08000cd4 <TimeTask>:
}

/**
 * Gets the time from the DS3231 RTC and updates the global time
 */
void TimeTask(void const * argument) {
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b08b      	sub	sp, #44	; 0x2c
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	6178      	str	r0, [r7, #20]
	int mutexStatus;

	while(1) {
    	//Take the mutex and prevent anything else from touching the bus
        mutexStatus  = osMutexWait(I2CMutex_ID, 250);
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <TimeTask+0x68>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	21fa      	movs	r1, #250	; 0xfa
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f009 f968 	bl	8009fb8 <osMutexWait>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	61fb      	str	r3, [r7, #28]
        if (mutexStatus == osOK)  {
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d109      	bne.n	8000d06 <TimeTask+0x32>
			//Get the time from the RTC once per second
			time = RTC_get_time_date();
 8000cf2:	4c13      	ldr	r4, [pc, #76]	; (8000d40 <TimeTask+0x6c>)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fcde 	bl	80036b8 <RTC_get_time_date>
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        }
        mutexStatus = osMutexRelease(I2CMutex_ID);
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <TimeTask+0x68>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f009 f9a2 	bl	800a054 <osMutexRelease>
 8000d10:	4603      	mov	r3, r0
 8000d12:	61fb      	str	r3, [r7, #28]

		sprintf(timeString, "%2d%2d%2d", time.hours, time.minutes, time.seconds);
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <TimeTask+0x6c>)
 8000d16:	789b      	ldrb	r3, [r3, #2]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <TimeTask+0x6c>)
 8000d1c:	785b      	ldrb	r3, [r3, #1]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <TimeTask+0x6c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	460b      	mov	r3, r1
 8000d28:	4906      	ldr	r1, [pc, #24]	; (8000d44 <TimeTask+0x70>)
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <TimeTask+0x74>)
 8000d2c:	f00c f872 	bl	800ce14 <siprintf>

		//Hand control back to the RTOS
		osDelay(1000);
 8000d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d34:	f009 f914 	bl	8009f60 <osDelay>
        mutexStatus  = osMutexWait(I2CMutex_ID, 250);
 8000d38:	e7d0      	b.n	8000cdc <TimeTask+0x8>
 8000d3a:	bf00      	nop
 8000d3c:	200040f0 	.word	0x200040f0
 8000d40:	200040d8 	.word	0x200040d8
 8000d44:	0800d890 	.word	0x0800d890
 8000d48:	200040e4 	.word	0x200040e4

08000d4c <home_onPress>:
}

/**
 * Callback for any button that wants to return HOME
 */
void home_onPress(int id) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, MAIN_MENU, eSetValueWithOverwrite);
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <home_onPress+0x20>)
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	f00b f8c5 	bl	800beec <xTaskGenericNotify>

	return;
 8000d62:	bf00      	nop
}
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200040cc 	.word	0x200040cc

08000d70 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <vApplicationGetIdleTaskMemory+0x30>)
 8000d86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200040f4 	.word	0x200040f4
 8000da0:	200041a8 	.word	0x200041a8

08000da4 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//CTP Interrupt Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
	//Touch screen interrupt has occured. Notify the touch screen thread.
	xTaskNotifyFromISR( touchTaskHandle, 0, eSetValueWithOverwrite, pdFALSE);
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2300      	movs	r3, #0
 8000db8:	2203      	movs	r2, #3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f00b f954 	bl	800c068 <xTaskGenericNotifyFromISR>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200040d0 	.word	0x200040d0

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f005 f842 	bl	8005e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f83b 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dda:	f000 f95b 	bl	8001094 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dde:	f000 f8ab 	bl	8000f38 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000de2:	f000 f8e9 	bl	8000fb8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000de6:	f000 f925 	bl	8001034 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000dea:	f000 f883 	bl	8000ef4 <MX_CRC_Init>

  /*
   * Low level initialisations
   */
  //Turn the Power LED on
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df4:	4812      	ldr	r0, [pc, #72]	; (8000e40 <main+0x74>)
 8000df6:	f005 fc03 	bl	8006600 <HAL_GPIO_WritePin>

  //Initialise the display using the display manager
  DM_Init();
 8000dfa:	f000 fee7 	bl	8001bcc <DM_Init>

  //Bring the CTP out of reset
  //Dont' forget that the top half of PORTC is used by the LCD Data
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2140      	movs	r1, #64	; 0x40
 8000e02:	4810      	ldr	r0, [pc, #64]	; (8000e44 <main+0x78>)
 8000e04:	f005 fbfc 	bl	8006600 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f005 f85f 	bl	8005ecc <HAL_Delay>

  FT5446_init();
 8000e0e:	f002 fe05 	bl	8003a1c <FT5446_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <main+0x7c>)
 8000e14:	1d3c      	adds	r4, r7, #4
 8000e16:	461d      	mov	r5, r3
 8000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f009 f82f 	bl	8009e8c <osThreadCreate>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <main+0x80>)
 8000e32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  //Initialise the threads which run the peripherals on this board
  DevBoardBegin();
 8000e34:	f7ff fdea 	bl	8000a0c <DevBoardBegin>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e38:	f009 f821 	bl	8009e7e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <main+0x70>
 8000e3e:	bf00      	nop
 8000e40:	48000400 	.word	0x48000400
 8000e44:	48000800 	.word	0x48000800
 8000e48:	0800d8bc 	.word	0x0800d8bc
 8000e4c:	20004508 	.word	0x20004508

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b096      	sub	sp, #88	; 0x58
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2244      	movs	r2, #68	; 0x44
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f00b fec2 	bl	800cbe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e76:	f006 fb05 	bl	8007484 <HAL_PWREx_ControlVoltageScaling>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e80:	f000 f9c0 	bl	8001204 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e84:	2302      	movs	r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8e:	2310      	movs	r3, #16
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	2302      	movs	r3, #2
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e96:	2302      	movs	r3, #2
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f006 fb3c 	bl	8007530 <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ebe:	f000 f9a1 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2104      	movs	r1, #4
 8000eda:	4618      	mov	r0, r3
 8000edc:	f006 ff04 	bl	8007ce8 <HAL_RCC_ClockConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ee6:	f000 f98d 	bl	8001204 <Error_Handler>
  }
}
 8000eea:	bf00      	nop
 8000eec:	3758      	adds	r7, #88	; 0x58
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <MX_CRC_Init+0x3c>)
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <MX_CRC_Init+0x40>)
 8000efc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_CRC_Init+0x3c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_CRC_Init+0x3c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_CRC_Init+0x3c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_CRC_Init+0x3c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_CRC_Init+0x3c>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_CRC_Init+0x3c>)
 8000f1e:	f005 f8db 	bl	80060d8 <HAL_CRC_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f28:	f000 f96c 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200043a8 	.word	0x200043a8
 8000f34:	40023000 	.word	0x40023000

08000f38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <MX_I2C1_Init+0x78>)
 8000f40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <MX_I2C1_Init+0x7c>)
 8000f46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f74:	f005 fb74 	bl	8006660 <HAL_I2C_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f7e:	f000 f941 	bl	8001204 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f86:	f006 f9d7 	bl	8007338 <HAL_I2CEx_ConfigAnalogFilter>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f90:	f000 f938 	bl	8001204 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f94:	2100      	movs	r1, #0
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f98:	f006 fa19 	bl	80073ce <HAL_I2CEx_ConfigDigitalFilter>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fa2:	f000 f92f 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200043cc 	.word	0x200043cc
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	10909cec 	.word	0x10909cec

08000fb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_SPI1_Init+0x74>)
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <MX_SPI1_Init+0x78>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_SPI1_Init+0x74>)
 8000fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_SPI1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_SPI1_Init+0x74>)
 8000fd2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_SPI1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_SPI1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_SPI1_Init+0x74>)
 8000fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_SPI1_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_SPI1_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_SPI1_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_SPI1_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_SPI1_Init+0x74>)
 8001006:	2207      	movs	r2, #7
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_SPI1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_SPI1_Init+0x74>)
 8001012:	2208      	movs	r2, #8
 8001014:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_SPI1_Init+0x74>)
 8001018:	f007 fd78 	bl	8008b0c <HAL_SPI_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001022:	f000 f8ef 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20004420 	.word	0x20004420
 8001030:	40013000 	.word	0x40013000

08001034 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_USART1_UART_Init+0x58>)
 800103a:	4a15      	ldr	r2, [pc, #84]	; (8001090 <MX_USART1_UART_Init+0x5c>)
 800103c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_USART1_UART_Init+0x58>)
 8001040:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USART1_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_USART1_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_USART1_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_USART1_UART_Init+0x58>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_USART1_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USART1_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_USART1_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USART1_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_USART1_UART_Init+0x58>)
 8001078:	f008 f8bc 	bl	80091f4 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001082:	f000 f8bf 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20004484 	.word	0x20004484
 8001090:	40013800 	.word	0x40013800

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <MX_GPIO_Init+0x134>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <MX_GPIO_Init+0x134>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b44      	ldr	r3, [pc, #272]	; (80011c8 <MX_GPIO_Init+0x134>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <MX_GPIO_Init+0x134>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <MX_GPIO_Init+0x134>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <MX_GPIO_Init+0x134>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <MX_GPIO_Init+0x134>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a3a      	ldr	r2, [pc, #232]	; (80011c8 <MX_GPIO_Init+0x134>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <MX_GPIO_Init+0x134>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD13_Pin|LCD14_Pin|LCD15_Pin|W25Q128_CS_Pin
 80010f2:	2200      	movs	r2, #0
 80010f4:	f64f 7120 	movw	r1, #65312	; 0xff20
 80010f8:	4834      	ldr	r0, [pc, #208]	; (80011cc <MX_GPIO_Init+0x138>)
 80010fa:	f005 fa81 	bl	8006600 <HAL_GPIO_WritePin>
                          |LCD8_Pin|LCD9_Pin|LCD10_Pin|LCD11_Pin
                          |LCD12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIO3_Pin|DIO4_Pin|DIO5_Pin|DIO6_Pin
 80010fe:	2200      	movs	r2, #0
 8001100:	f64f 711f 	movw	r1, #65311	; 0xff1f
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f005 fa7a 	bl	8006600 <HAL_GPIO_WritePin>
                          |DIO7_Pin|LCD0_Pin|LCD1_Pin|LCD2_Pin
                          |LCD3_Pin|LCD4_Pin|LCD5_Pin|LCD6_Pin
                          |LCD7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO0_Pin|DIO1_Pin|DIO2_Pin|PWR_LED_Pin
 800110c:	2200      	movs	r2, #0
 800110e:	f64f 413f 	movw	r1, #64575	; 0xfc3f
 8001112:	482f      	ldr	r0, [pc, #188]	; (80011d0 <MX_GPIO_Init+0x13c>)
 8001114:	f005 fa74 	bl	8006600 <HAL_GPIO_WritePin>
                          |LCD_RD_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_D_C_Pin
                          |LCD_CS_Pin|DIO8_Pin|DIO9_Pin|DIO10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	482b      	ldr	r0, [pc, #172]	; (80011cc <MX_GPIO_Init+0x138>)
 800111e:	f005 fa6f 	bl	8006600 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD13_Pin LCD14_Pin LCD15_Pin W25Q128_CS_Pin
                           CTP_RST_Pin LCD8_Pin LCD9_Pin LCD10_Pin
                           LCD11_Pin LCD12_Pin */
  GPIO_InitStruct.Pin = LCD13_Pin|LCD14_Pin|LCD15_Pin|W25Q128_CS_Pin
 8001122:	f64f 7360 	movw	r3, #65376	; 0xff60
 8001126:	60fb      	str	r3, [r7, #12]
                          |CTP_RST_Pin|LCD8_Pin|LCD9_Pin|LCD10_Pin
                          |LCD11_Pin|LCD12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	4824      	ldr	r0, [pc, #144]	; (80011cc <MX_GPIO_Init+0x138>)
 800113c:	f005 f8b6 	bl	80062ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_UP_Pin SW_DOWN_Pin SW_LEFT_Pin SW_MIDDLE_Pin
                           SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_UP_Pin|SW_DOWN_Pin|SW_LEFT_Pin|SW_MIDDLE_Pin
 8001140:	231f      	movs	r3, #31
 8001142:	60fb      	str	r3, [r7, #12]
                          |SW_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	481e      	ldr	r0, [pc, #120]	; (80011cc <MX_GPIO_Init+0x138>)
 8001154:	f005 f8aa 	bl	80062ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO3_Pin DIO4_Pin DIO5_Pin DIO6_Pin
                           DIO7_Pin LCD0_Pin LCD1_Pin LCD2_Pin
                           LCD3_Pin LCD4_Pin LCD5_Pin LCD6_Pin
                           LCD7_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin|DIO4_Pin|DIO5_Pin|DIO6_Pin
 8001158:	f64f 731f 	movw	r3, #65311	; 0xff1f
 800115c:	60fb      	str	r3, [r7, #12]
                          |DIO7_Pin|LCD0_Pin|LCD1_Pin|LCD2_Pin
                          |LCD3_Pin|LCD4_Pin|LCD5_Pin|LCD6_Pin
                          |LCD7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f005 f89a 	bl	80062ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin DIO2_Pin PWR_LED_Pin
                           LCD_RD_Pin LCD_WR_Pin LCD_RST_Pin LCD_D_C_Pin
                           LCD_CS_Pin DIO8_Pin DIO9_Pin DIO10_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|PWR_LED_Pin
 8001178:	f64f 433f 	movw	r3, #64575	; 0xfc3f
 800117c:	60fb      	str	r3, [r7, #12]
                          |LCD_RD_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_D_C_Pin
                          |LCD_CS_Pin|DIO8_Pin|DIO9_Pin|DIO10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4619      	mov	r1, r3
 8001190:	480f      	ldr	r0, [pc, #60]	; (80011d0 <MX_GPIO_Init+0x13c>)
 8001192:	f005 f88b 	bl	80062ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <MX_GPIO_Init+0x138>)
 80011ac:	f005 f87e 	bl	80062ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2105      	movs	r1, #5
 80011b4:	2017      	movs	r0, #23
 80011b6:	f004 ff65 	bl	8006084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011ba:	2017      	movs	r0, #23
 80011bc:	f004 ff7e 	bl	80060bc <HAL_NVIC_EnableIRQ>

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	48000800 	.word	0x48000800
 80011d0:	48000400 	.word	0x48000400

080011d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80011dc:	e7fe      	b.n	80011dc <StartDefaultTask+0x8>
	...

080011e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011f2:	f004 fe4b 	bl	8005e8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40012c00 	.word	0x40012c00

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_MspInit+0x4c>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_MspInit+0x4c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6613      	str	r3, [r2, #96]	; 0x60
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_MspInit+0x4c>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_MspInit+0x4c>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_MspInit+0x4c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6593      	str	r3, [r2, #88]	; 0x58
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_MspInit+0x4c>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	210f      	movs	r1, #15
 800124a:	f06f 0001 	mvn.w	r0, #1
 800124e:	f004 ff19 	bl	8006084 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_CRC_MspInit+0x38>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10b      	bne.n	800128a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_CRC_MspInit+0x3c>)
 8001274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_CRC_MspInit+0x3c>)
 8001278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800127c:	6493      	str	r3, [r2, #72]	; 0x48
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_CRC_MspInit+0x3c>)
 8001280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023000 	.word	0x40023000
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0ac      	sub	sp, #176	; 0xb0
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2288      	movs	r2, #136	; 0x88
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f00b fc91 	bl	800cbe8 <memset>
  if(hi2c->Instance==I2C1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a21      	ldr	r2, [pc, #132]	; (8001350 <HAL_I2C_MspInit+0xb0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d13b      	bne.n	8001348 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4618      	mov	r0, r3
 80012de:	f006 ff59 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012e8:	f7ff ff8c 	bl	8001204 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_I2C_MspInit+0xb4>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	4a18      	ldr	r2, [pc, #96]	; (8001354 <HAL_I2C_MspInit+0xb4>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_I2C_MspInit+0xb4>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001304:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130c:	2312      	movs	r3, #18
 800130e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800131e:	2304      	movs	r3, #4
 8001320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001328:	4619      	mov	r1, r3
 800132a:	480b      	ldr	r0, [pc, #44]	; (8001358 <HAL_I2C_MspInit+0xb8>)
 800132c:	f004 ffbe 	bl	80062ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_I2C_MspInit+0xb4>)
 8001332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_I2C_MspInit+0xb4>)
 8001336:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800133a:	6593      	str	r3, [r2, #88]	; 0x58
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_I2C_MspInit+0xb4>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	37b0      	adds	r7, #176	; 0xb0
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40005400 	.word	0x40005400
 8001354:	40021000 	.word	0x40021000
 8001358:	48000400 	.word	0x48000400

0800135c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_SPI_MspInit+0x7c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d128      	bne.n	80013d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_SPI_MspInit+0x80>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <HAL_SPI_MspInit+0x80>)
 8001384:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001388:	6613      	str	r3, [r2, #96]	; 0x60
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_SPI_MspInit+0x80>)
 800138c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_SPI_MspInit+0x80>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_SPI_MspInit+0x80>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_SPI_MspInit+0x80>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013ae:	23e0      	movs	r3, #224	; 0xe0
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013be:	2305      	movs	r3, #5
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f004 ff6e 	bl	80062ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40013000 	.word	0x40013000
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0ac      	sub	sp, #176	; 0xb0
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2288      	movs	r2, #136	; 0x88
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00b fbf1 	bl	800cbe8 <memset>
  if(huart->Instance==USART1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <HAL_UART_MspInit+0xb0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d13a      	bne.n	8001486 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001410:	2301      	movs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001414:	2300      	movs	r3, #0
 8001416:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4618      	mov	r0, r3
 800141e:	f006 feb9 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001428:	f7ff feec 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_UART_MspInit+0xb4>)
 800142e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001430:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_UART_MspInit+0xb4>)
 8001432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001436:	6613      	str	r3, [r2, #96]	; 0x60
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_UART_MspInit+0xb4>)
 800143a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_UART_MspInit+0xb4>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_UART_MspInit+0xb4>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_UART_MspInit+0xb4>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145c:	23c0      	movs	r3, #192	; 0xc0
 800145e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001474:	2307      	movs	r3, #7
 8001476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_UART_MspInit+0xb8>)
 8001482:	f004 ff13 	bl	80062ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	37b0      	adds	r7, #176	; 0xb0
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40013800 	.word	0x40013800
 8001494:	40021000 	.word	0x40021000
 8001498:	48000400 	.word	0x48000400

0800149c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_InitTick+0xc8>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ae:	4a2d      	ldr	r2, [pc, #180]	; (8001564 <HAL_InitTick+0xc8>)
 80014b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014b4:	6613      	str	r3, [r2, #96]	; 0x60
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <HAL_InitTick+0xc8>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014c2:	f107 020c 	add.w	r2, r7, #12
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f006 fdcf 	bl	8008070 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014d2:	f006 fdb7 	bl	8008044 <HAL_RCC_GetPCLK2Freq>
 80014d6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	4a23      	ldr	r2, [pc, #140]	; (8001568 <HAL_InitTick+0xcc>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	0c9b      	lsrs	r3, r3, #18
 80014e2:	3b01      	subs	r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <HAL_InitTick+0xd0>)
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <HAL_InitTick+0xd4>)
 80014ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_InitTick+0xd0>)
 80014ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_InitTick+0xd0>)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_InitTick+0xd0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_InitTick+0xd0>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_InitTick+0xd0>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800150c:	4817      	ldr	r0, [pc, #92]	; (800156c <HAL_InitTick+0xd0>)
 800150e:	f007 fba0 	bl	8008c52 <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800151c:	2b00      	cmp	r3, #0
 800151e:	d11b      	bne.n	8001558 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001520:	4812      	ldr	r0, [pc, #72]	; (800156c <HAL_InitTick+0xd0>)
 8001522:	f007 fbf7 	bl	8008d14 <HAL_TIM_Base_Start_IT>
 8001526:	4603      	mov	r3, r0
 8001528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800152c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001530:	2b00      	cmp	r3, #0
 8001532:	d111      	bne.n	8001558 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001534:	2019      	movs	r0, #25
 8001536:	f004 fdc1 	bl	80060bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d808      	bhi.n	8001552 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	2019      	movs	r0, #25
 8001546:	f004 fd9d 	bl	8006084 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_InitTick+0xd8>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e002      	b.n	8001558 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800155c:	4618      	mov	r0, r3
 800155e:	3730      	adds	r7, #48	; 0x30
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	431bde83 	.word	0x431bde83
 800156c:	2000450c 	.word	0x2000450c
 8001570:	40012c00 	.word	0x40012c00
 8001574:	20004038 	.word	0x20004038

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800157c:	e7fe      	b.n	800157c <NMI_Handler+0x4>

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 80015a8:	2080      	movs	r0, #128	; 0x80
 80015aa:	f005 f841 	bl	8006630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015ba:	f007 fc1b 	bl	8008df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000450c 	.word	0x2000450c

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f00b fabc 	bl	800cb74 <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20018000 	.word	0x20018000
 8001628:	00000400 	.word	0x00000400
 800162c:	20004558 	.word	0x20004558
 8001630:	2000a268 	.word	0x2000a268

08001634 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <SystemInit+0x20>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <SystemInit+0x20>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <DM_New_Animation>:
 * Creates a new animation element.
 * bitmaps - an array of pointers to bitmaps for each frame
 * selected - the current frame being displayed
 * numChildren - the number of frames in the array
 */
struct DisplayElement DM_New_Animation(int x1, int y1, int scale, unsigned int **bitmaps, int numFrames) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b09c      	sub	sp, #112	; 0x70
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
	struct DisplayElement animation = getDefaultElement();
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fd9c 	bl	80021a8 <getDefaultElement>
	animation.type = ANIMATION;
 8001670:	230a      	movs	r3, #10
 8001672:	617b      	str	r3, [r7, #20]
	animation.x1 = x1; animation.y1 = y1;
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	b29b      	uxth	r3, r3
 8001678:	833b      	strh	r3, [r7, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	b29b      	uxth	r3, r3
 800167e:	837b      	strh	r3, [r7, #26]
	//Get the animation dimensions
	animation.x2 = x1 + (bitmaps[0][0] * scale);
 8001680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b29a      	uxth	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	fb12 f303 	smulbb	r3, r2, r3
 8001690:	b29a      	uxth	r2, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	b29b      	uxth	r3, r3
 8001696:	4413      	add	r3, r2
 8001698:	b29b      	uxth	r3, r3
 800169a:	83bb      	strh	r3, [r7, #28]
	animation.y2 = y1 + (bitmaps[0][1] * scale);
 800169c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3304      	adds	r3, #4
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	fb12 f303 	smulbb	r3, r2, r3
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	83fb      	strh	r3, [r7, #30]
	animation.size = scale;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	623b      	str	r3, [r7, #32]
	animation.bitmaps = bitmaps;
 80016be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016c0:	63bb      	str	r3, [r7, #56]	; 0x38
	animation.selected = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
	animation.animationTicks = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	66bb      	str	r3, [r7, #104]	; 0x68
	animation.ticksPerFrame = TICKS_PER_FRAME;
 80016ca:	2302      	movs	r3, #2
 80016cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	animation.refresh = ALWAYS;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	animation.draw = DM_Animation;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <DM_New_Animation+0x9c>)
 80016d6:	657b      	str	r3, [r7, #84]	; 0x54
	animation.numChildren = numFrames;
 80016d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016da:	667b      	str	r3, [r7, #100]	; 0x64

	return animation;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4618      	mov	r0, r3
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	225c      	movs	r2, #92	; 0x5c
 80016e6:	4619      	mov	r1, r3
 80016e8:	f00b fa70 	bl	800cbcc <memcpy>
}
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	3770      	adds	r7, #112	; 0x70
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	080016f9 	.word	0x080016f9

080016f8 <DM_Animation>:

/**
 * Draws an animation frame to the display.
 */
void DM_Animation(int id) {
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	draw_bitmap(elements[id].x1, elements[id].y1, elements[id].size, elements[id].bitmaps[elements[id].selected]);
 8001700:	4a1a      	ldr	r2, [pc, #104]	; (800176c <DM_Animation+0x74>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	215c      	movs	r1, #92	; 0x5c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	3304      	adds	r3, #4
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	461d      	mov	r5, r3
 8001712:	4a16      	ldr	r2, [pc, #88]	; (800176c <DM_Animation+0x74>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	215c      	movs	r1, #92	; 0x5c
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	3306      	adds	r3, #6
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	461e      	mov	r6, r3
 8001724:	4a11      	ldr	r2, [pc, #68]	; (800176c <DM_Animation+0x74>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	215c      	movs	r1, #92	; 0x5c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	330c      	adds	r3, #12
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <DM_Animation+0x74>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	205c      	movs	r0, #92	; 0x5c
 800173a:	fb00 f303 	mul.w	r3, r0, r3
 800173e:	4413      	add	r3, r2
 8001740:	3324      	adds	r3, #36	; 0x24
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4809      	ldr	r0, [pc, #36]	; (800176c <DM_Animation+0x74>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	245c      	movs	r4, #92	; 0x5c
 800174a:	fb04 f303 	mul.w	r3, r4, r3
 800174e:	4403      	add	r3, r0
 8001750:	3310      	adds	r3, #16
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	460a      	mov	r2, r1
 800175c:	4631      	mov	r1, r6
 800175e:	4628      	mov	r0, r5
 8001760:	f002 fdb6 	bl	80042d0 <draw_bitmap>
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2000455c 	.word	0x2000455c

08001770 <DM_New_Bitmap>:


/**
 * Create a bitmap element and add it to the queue.
 */
struct DisplayElement DM_New_Bitmap(int x, int y, int scale, const unsigned int *src){
 8001770:	b580      	push	{r7, lr}
 8001772:	b09c      	sub	sp, #112	; 0x70
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
	  struct DisplayElement bitmap = getDefaultElement();
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fd10 	bl	80021a8 <getDefaultElement>
	  bitmap.type = BITMAP;
 8001788:	2305      	movs	r3, #5
 800178a:	617b      	str	r3, [r7, #20]
	  bitmap.x1 = x; bitmap.y1 = y;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	b29b      	uxth	r3, r3
 8001790:	833b      	strh	r3, [r7, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	b29b      	uxth	r3, r3
 8001796:	837b      	strh	r3, [r7, #26]
	  //Calculate the bitmap size for proper collision detection
	  bitmap.x2 = x + src[0] * scale; bitmap.y2 = y + src[1] * scale;
 8001798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	b29a      	uxth	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	fb12 f303 	smulbb	r3, r2, r3
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	83bb      	strh	r3, [r7, #28]
 80017b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017b4:	3304      	adds	r3, #4
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	fb12 f303 	smulbb	r3, r2, r3
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	83fb      	strh	r3, [r7, #30]
	  bitmap.size = scale;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	623b      	str	r3, [r7, #32]
	  bitmap.bitmap = src;
 80017d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
	  bitmap.draw = DM_Bitmap;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <DM_New_Bitmap+0x88>)
 80017d8:	657b      	str	r3, [r7, #84]	; 0x54
	  bitmap.refresh = ONCE;
 80017da:	2301      	movs	r3, #1
 80017dc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	  return bitmap;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	225c      	movs	r2, #92	; 0x5c
 80017ea:	4619      	mov	r1, r3
 80017ec:	f00b f9ee 	bl	800cbcc <memcpy>
}
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	3770      	adds	r7, #112	; 0x70
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	080017fd 	.word	0x080017fd

080017fc <DM_Bitmap>:

/**
 * Draws a bitmap to the display
 */
void DM_Bitmap(int id) {
 80017fc:	b5b0      	push	{r4, r5, r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	draw_bitmap(elements[id].x1, elements[id].y1, elements[id].size, elements[id].bitmap);
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <DM_Bitmap+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	215c      	movs	r1, #92	; 0x5c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3304      	adds	r3, #4
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	461c      	mov	r4, r3
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <DM_Bitmap+0x5c>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	215c      	movs	r1, #92	; 0x5c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	3306      	adds	r3, #6
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	461d      	mov	r5, r3
 8001828:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <DM_Bitmap+0x5c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	215c      	movs	r1, #92	; 0x5c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	330c      	adds	r3, #12
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <DM_Bitmap+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	205c      	movs	r0, #92	; 0x5c
 800183e:	fb00 f303 	mul.w	r3, r0, r3
 8001842:	440b      	add	r3, r1
 8001844:	3320      	adds	r3, #32
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4629      	mov	r1, r5
 800184a:	4620      	mov	r0, r4
 800184c:	f002 fd40 	bl	80042d0 <draw_bitmap>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bdb0      	pop	{r4, r5, r7, pc}
 8001858:	2000455c 	.word	0x2000455c

0800185c <DM_New_Button>:
void DM_Button_onPress(int id);

/**
 * Create a new button and add it to the queue
 */
struct DisplayElement DM_New_Button(int x, int y, char *text, State state){
 800185c:	b580      	push	{r7, lr}
 800185e:	b09e      	sub	sp, #120	; 0x78
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
	int width = 120;
 800186a:	2378      	movs	r3, #120	; 0x78
 800186c:	677b      	str	r3, [r7, #116]	; 0x74
	int height = 40;
 800186e:	2328      	movs	r3, #40	; 0x28
 8001870:	673b      	str	r3, [r7, #112]	; 0x70
	//If the string is long, then increase button width
	int len = DM_StrLen(text, 64);
 8001872:	2140      	movs	r1, #64	; 0x40
 8001874:	6838      	ldr	r0, [r7, #0]
 8001876:	f000 fb07 	bl	8001e88 <DM_StrLen>
 800187a:	66f8      	str	r0, [r7, #108]	; 0x6c
	if(len > 8) {
 800187c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800187e:	2b08      	cmp	r3, #8
 8001880:	dd0d      	ble.n	800189e <DM_New_Button+0x42>
		width = len * 12;
 8001882:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	677b      	str	r3, [r7, #116]	; 0x74
		//if this button is on the right-hand edge, then move it back a bit
		if(x > BTN_MIDDLE_X)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2bbe      	cmp	r3, #190	; 0xbe
 8001892:	dd04      	ble.n	800189e <DM_New_Button+0x42>
			x = WIDTH - width - 10;
 8001894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001896:	f5c3 73ea 	rsb	r3, r3, #468	; 0x1d4
 800189a:	3301      	adds	r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
	}
	struct DisplayElement button = getDefaultElement();
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fc80 	bl	80021a8 <getDefaultElement>
	button.type = BUTTON;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
	button.x1 = x; button.y1 = y; button.x2 = x + width; button.y2 = y + height;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	82bb      	strh	r3, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	82fb      	strh	r3, [r7, #22]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	833b      	strh	r3, [r7, #24]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	837b      	strh	r3, [r7, #26]
	button.text = text;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	button.state = state;
 80018d8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80018dc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	button.oldState = state - 1; //Will only refresh when the states DONT match.
 80018e0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	button.draw = DM_Button;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <DM_New_Button+0xb8>)
 80018ee:	653b      	str	r3, [r7, #80]	; 0x50
	button.onPress = NULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	657b      	str	r3, [r7, #84]	; 0x54
	button.refresh = ALWAYS;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	return button;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	225c      	movs	r2, #92	; 0x5c
 8001904:	4619      	mov	r1, r3
 8001906:	f00b f961 	bl	800cbcc <memcpy>
}
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	3778      	adds	r7, #120	; 0x78
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	08001919 	.word	0x08001919

08001918 <DM_Button>:

/**
 * A button looking thing
 */
void DM_Button(int id) {
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af02      	add	r7, sp, #8
 800191e:	6078      	str	r0, [r7, #4]
	int outlineColour = PRIMARY_COLOUR;
 8001920:	f241 3358 	movw	r3, #4952	; 0x1358
 8001924:	61fb      	str	r3, [r7, #28]
	int fillColour = PRIMARY_COLOUR;
 8001926:	f241 3358 	movw	r3, #4952	; 0x1358
 800192a:	61bb      	str	r3, [r7, #24]
	int textColour = COLOR_WHITE;
 800192c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001930:	617b      	str	r3, [r7, #20]
	if(elements[id].state == DISABLED) {
 8001932:	4a96      	ldr	r2, [pc, #600]	; (8001b8c <DM_Button+0x274>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	215c      	movs	r1, #92	; 0x5c
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	3330      	adds	r3, #48	; 0x30
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <DM_Button+0x40>
		fillColour = COLOR_WHITE;
 8001946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194a:	61bb      	str	r3, [r7, #24]
		outlineColour = COLOR_LIGHTGRAY;
 800194c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001950:	61fb      	str	r3, [r7, #28]
		textColour = COLOR_LIGHTGRAY;
 8001952:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001956:	617b      	str	r3, [r7, #20]
	}
	if(elements[id].state == SELECTED) {
 8001958:	4a8c      	ldr	r2, [pc, #560]	; (8001b8c <DM_Button+0x274>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	215c      	movs	r1, #92	; 0x5c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	3330      	adds	r3, #48	; 0x30
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d102      	bne.n	8001972 <DM_Button+0x5a>
		fillColour = PRIMARY_COLOUR_SELECTED;
 800196c:	f247 4395 	movw	r3, #29845	; 0x7495
 8001970:	61bb      	str	r3, [r7, #24]
	}
	//Draw the background
	fill_rectangle(elements[id].x1 + 1, elements[id].y1 + 1, elements[id].x2 - 1, elements[id].y2 - 1, fillColour);
 8001972:	4a86      	ldr	r2, [pc, #536]	; (8001b8c <DM_Button+0x274>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	215c      	movs	r1, #92	; 0x5c
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	3304      	adds	r3, #4
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	1c58      	adds	r0, r3, #1
 8001984:	4a81      	ldr	r2, [pc, #516]	; (8001b8c <DM_Button+0x274>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	215c      	movs	r1, #92	; 0x5c
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	4413      	add	r3, r2
 8001990:	3306      	adds	r3, #6
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	1c59      	adds	r1, r3, #1
 8001996:	4a7d      	ldr	r2, [pc, #500]	; (8001b8c <DM_Button+0x274>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	245c      	movs	r4, #92	; 0x5c
 800199c:	fb04 f303 	mul.w	r3, r4, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3308      	adds	r3, #8
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	1e5a      	subs	r2, r3, #1
 80019a8:	4c78      	ldr	r4, [pc, #480]	; (8001b8c <DM_Button+0x274>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	255c      	movs	r5, #92	; 0x5c
 80019ae:	fb05 f303 	mul.w	r3, r5, r3
 80019b2:	4423      	add	r3, r4
 80019b4:	330a      	adds	r3, #10
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	1e5c      	subs	r4, r3, #1
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4623      	mov	r3, r4
 80019c0:	f002 faca 	bl	8003f58 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(elements[id].x1 + 1, elements[id].y1, elements[id].x2, elements[id].y1 + 1, outlineColour);
 80019c4:	4a71      	ldr	r2, [pc, #452]	; (8001b8c <DM_Button+0x274>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	215c      	movs	r1, #92	; 0x5c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3304      	adds	r3, #4
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	1c58      	adds	r0, r3, #1
 80019d6:	4a6d      	ldr	r2, [pc, #436]	; (8001b8c <DM_Button+0x274>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	215c      	movs	r1, #92	; 0x5c
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	3306      	adds	r3, #6
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	461c      	mov	r4, r3
 80019e8:	4a68      	ldr	r2, [pc, #416]	; (8001b8c <DM_Button+0x274>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	215c      	movs	r1, #92	; 0x5c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	3308      	adds	r3, #8
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	461d      	mov	r5, r3
 80019fa:	4a64      	ldr	r2, [pc, #400]	; (8001b8c <DM_Button+0x274>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	215c      	movs	r1, #92	; 0x5c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3306      	adds	r3, #6
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	462a      	mov	r2, r5
 8001a14:	4621      	mov	r1, r4
 8001a16:	f002 fa9f 	bl	8003f58 <fill_rectangle>
	//Left border
	fill_rectangle(elements[id].x1, elements[id].y1 + 1, elements[id].x1 + 1, elements[id].y2, outlineColour);
 8001a1a:	4a5c      	ldr	r2, [pc, #368]	; (8001b8c <DM_Button+0x274>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	215c      	movs	r1, #92	; 0x5c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3304      	adds	r3, #4
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	4a57      	ldr	r2, [pc, #348]	; (8001b8c <DM_Button+0x274>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	215c      	movs	r1, #92	; 0x5c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	3306      	adds	r3, #6
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	1c59      	adds	r1, r3, #1
 8001a3e:	4a53      	ldr	r2, [pc, #332]	; (8001b8c <DM_Button+0x274>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	205c      	movs	r0, #92	; 0x5c
 8001a44:	fb00 f303 	mul.w	r3, r0, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	484e      	ldr	r0, [pc, #312]	; (8001b8c <DM_Button+0x274>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	245c      	movs	r4, #92	; 0x5c
 8001a56:	fb04 f303 	mul.w	r3, r4, r3
 8001a5a:	4403      	add	r3, r0
 8001a5c:	330a      	adds	r3, #10
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4603      	mov	r3, r0
 8001a68:	4628      	mov	r0, r5
 8001a6a:	f002 fa75 	bl	8003f58 <fill_rectangle>
	//Bottom border
	fill_rectangle(elements[id].x1 + 1, elements[id].y2, elements[id].x2, elements[id].y2 + 1, outlineColour);
 8001a6e:	4a47      	ldr	r2, [pc, #284]	; (8001b8c <DM_Button+0x274>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	215c      	movs	r1, #92	; 0x5c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	1c58      	adds	r0, r3, #1
 8001a80:	4a42      	ldr	r2, [pc, #264]	; (8001b8c <DM_Button+0x274>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	215c      	movs	r1, #92	; 0x5c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	330a      	adds	r3, #10
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	461c      	mov	r4, r3
 8001a92:	4a3e      	ldr	r2, [pc, #248]	; (8001b8c <DM_Button+0x274>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	215c      	movs	r1, #92	; 0x5c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	4a39      	ldr	r2, [pc, #228]	; (8001b8c <DM_Button+0x274>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	215c      	movs	r1, #92	; 0x5c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	330a      	adds	r3, #10
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	462a      	mov	r2, r5
 8001abe:	4621      	mov	r1, r4
 8001ac0:	f002 fa4a 	bl	8003f58 <fill_rectangle>
	//Right border
	fill_rectangle(elements[id].x2, elements[id].y1 + 1, elements[id].x2 + 1, elements[id].y2, outlineColour);
 8001ac4:	4a31      	ldr	r2, [pc, #196]	; (8001b8c <DM_Button+0x274>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	215c      	movs	r1, #92	; 0x5c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3308      	adds	r3, #8
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	461d      	mov	r5, r3
 8001ad6:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <DM_Button+0x274>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	215c      	movs	r1, #92	; 0x5c
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3306      	adds	r3, #6
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	1c59      	adds	r1, r3, #1
 8001ae8:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <DM_Button+0x274>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	205c      	movs	r0, #92	; 0x5c
 8001aee:	fb00 f303 	mul.w	r3, r0, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	3308      	adds	r3, #8
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	4824      	ldr	r0, [pc, #144]	; (8001b8c <DM_Button+0x274>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	245c      	movs	r4, #92	; 0x5c
 8001b00:	fb04 f303 	mul.w	r3, r4, r3
 8001b04:	4403      	add	r3, r0
 8001b06:	330a      	adds	r3, #10
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	4603      	mov	r3, r0
 8001b12:	4628      	mov	r0, r5
 8001b14:	f002 fa20 	bl	8003f58 <fill_rectangle>

	//Calculate the length of the string to center the text
	int strLen = DM_StrLen(elements[id].text, 18);
 8001b18:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <DM_Button+0x274>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	215c      	movs	r1, #92	; 0x5c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	332c      	adds	r3, #44	; 0x2c
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2112      	movs	r1, #18
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f9ac 	bl	8001e88 <DM_StrLen>
 8001b30:	6138      	str	r0, [r7, #16]

	//Each char will be 8px wide
	int halfWidth = strLen * 3;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
	//Write the text
	draw_fast_string(elements[id].x1 + 50 - halfWidth, elements[id].y1 + 16, textColour, fillColour, elements[id].text);
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <DM_Button+0x274>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	215c      	movs	r1, #92	; 0x5c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3304      	adds	r3, #4
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1ad0      	subs	r0, r2, r3
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <DM_Button+0x274>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	215c      	movs	r1, #92	; 0x5c
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3306      	adds	r3, #6
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	f103 0110 	add.w	r1, r3, #16
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <DM_Button+0x274>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	245c      	movs	r4, #92	; 0x5c
 8001b6e:	fb04 f303 	mul.w	r3, r4, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	332c      	adds	r3, #44	; 0x2c
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	f002 fb7d 	bl	800427c <draw_fast_string>
}
 8001b82:	bf00      	nop
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000455c 	.word	0x2000455c

08001b90 <DM_Button_onPress>:

/**
 * Intrinsic button press function. Any global behaviours for all buttons should go here.
 */
void DM_Button_onPress(int id) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	if(elements[id].onPress)
 8001b98:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <DM_Button_onPress+0x38>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	215c      	movs	r1, #92	; 0x5c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3344      	adds	r3, #68	; 0x44
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d009      	beq.n	8001bc0 <DM_Button_onPress+0x30>
		elements[id].onPress(id);
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <DM_Button_onPress+0x38>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	215c      	movs	r1, #92	; 0x5c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3344      	adds	r3, #68	; 0x44
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000455c 	.word	0x2000455c

08001bcc <DM_Init>:
int previously_touched_element = 0;

/**
 * Initialises the LCD device, and allocates any memory required.
 */
void DM_Init() {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	lcd_init_parallel();
 8001bd0:	f002 f84e 	bl	8003c70 <lcd_init_parallel>
	DM_Clear();
 8001bd4:	f000 f8da 	bl	8001d8c <DM_Clear>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <DM_Draw>:

/**
 * Draw the whole queue.
 */
void DM_Draw() {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
	//Draw each element int he array of display elements
	for(int i = 0; i < numElements; i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	e0c2      	b.n	8001d6e <DM_Draw+0x192>
		//Only draw elements flagged for update
		if(elements[i].refresh == ONCE) {
 8001be8:	4a66      	ldr	r2, [pc, #408]	; (8001d84 <DM_Draw+0x1a8>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	215c      	movs	r1, #92	; 0x5c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	333c      	adds	r3, #60	; 0x3c
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d112      	bne.n	8001c22 <DM_Draw+0x46>
			//Draw this element once then clear the refresh flag
			elements[i].draw(i);
 8001bfc:	4a61      	ldr	r2, [pc, #388]	; (8001d84 <DM_Draw+0x1a8>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	215c      	movs	r1, #92	; 0x5c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3340      	adds	r3, #64	; 0x40
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
			elements[i].refresh = NEVER;
 8001c10:	4a5c      	ldr	r2, [pc, #368]	; (8001d84 <DM_Draw+0x1a8>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	215c      	movs	r1, #92	; 0x5c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	333c      	adds	r3, #60	; 0x3c
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
		}
		if(elements[i].refresh == ALWAYS) {
 8001c22:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <DM_Draw+0x1a8>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	215c      	movs	r1, #92	; 0x5c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	333c      	adds	r3, #60	; 0x3c
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 8098 	bne.w	8001d68 <DM_Draw+0x18c>
			//For elements that ALWAYS draw, check if the state has changed.
			//Only draw if the state has changed.
			if(elements[i].oldState != elements[i].state) {
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <DM_Draw+0x1a8>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	215c      	movs	r1, #92	; 0x5c
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	3331      	adds	r3, #49	; 0x31
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	494e      	ldr	r1, [pc, #312]	; (8001d84 <DM_Draw+0x1a8>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	205c      	movs	r0, #92	; 0x5c
 8001c4e:	fb00 f303 	mul.w	r3, r0, r3
 8001c52:	440b      	add	r3, r1
 8001c54:	3330      	adds	r3, #48	; 0x30
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d01a      	beq.n	8001c92 <DM_Draw+0xb6>
				elements[i].draw(i);
 8001c5c:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <DM_Draw+0x1a8>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	215c      	movs	r1, #92	; 0x5c
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	3340      	adds	r3, #64	; 0x40
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	4798      	blx	r3
				//Update the oldState
				elements[i].oldState = elements[i].state;
 8001c70:	4a44      	ldr	r2, [pc, #272]	; (8001d84 <DM_Draw+0x1a8>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	215c      	movs	r1, #92	; 0x5c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3330      	adds	r3, #48	; 0x30
 8001c7e:	7818      	ldrb	r0, [r3, #0]
 8001c80:	4a40      	ldr	r2, [pc, #256]	; (8001d84 <DM_Draw+0x1a8>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	215c      	movs	r1, #92	; 0x5c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3331      	adds	r3, #49	; 0x31
 8001c8e:	4602      	mov	r2, r0
 8001c90:	701a      	strb	r2, [r3, #0]
			}

			//Advance the ticks of an animation
			//Once the tick counter is reached, the animation advances to the next frame
			if(elements[i].type == ANIMATION) {
 8001c92:	4a3c      	ldr	r2, [pc, #240]	; (8001d84 <DM_Draw+0x1a8>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	215c      	movs	r1, #92	; 0x5c
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b0a      	cmp	r3, #10
 8001ca2:	d161      	bne.n	8001d68 <DM_Draw+0x18c>
				elements[i].animationTicks++;
 8001ca4:	4a37      	ldr	r2, [pc, #220]	; (8001d84 <DM_Draw+0x1a8>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	215c      	movs	r1, #92	; 0x5c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3354      	adds	r3, #84	; 0x54
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	4933      	ldr	r1, [pc, #204]	; (8001d84 <DM_Draw+0x1a8>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	205c      	movs	r0, #92	; 0x5c
 8001cbc:	fb00 f303 	mul.w	r3, r0, r3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3354      	adds	r3, #84	; 0x54
 8001cc4:	601a      	str	r2, [r3, #0]
				//If this element is due to advance to the next frame
				if(elements[i].animationTicks >= elements[i].ticksPerFrame) {
 8001cc6:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <DM_Draw+0x1a8>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	215c      	movs	r1, #92	; 0x5c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3354      	adds	r3, #84	; 0x54
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	492b      	ldr	r1, [pc, #172]	; (8001d84 <DM_Draw+0x1a8>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	205c      	movs	r0, #92	; 0x5c
 8001cdc:	fb00 f303 	mul.w	r3, r0, r3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3358      	adds	r3, #88	; 0x58
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	db3e      	blt.n	8001d68 <DM_Draw+0x18c>
					//Draw the frame
					elements[i].draw(i);
 8001cea:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <DM_Draw+0x1a8>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	215c      	movs	r1, #92	; 0x5c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3340      	adds	r3, #64	; 0x40
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3

					//Advance the frame and reset the counters
					elements[i].animationTicks = 0;
 8001cfe:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <DM_Draw+0x1a8>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	215c      	movs	r1, #92	; 0x5c
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	3354      	adds	r3, #84	; 0x54
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
					elements[i].selected++;
 8001d10:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <DM_Draw+0x1a8>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	215c      	movs	r1, #92	; 0x5c
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3310      	adds	r3, #16
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	4918      	ldr	r1, [pc, #96]	; (8001d84 <DM_Draw+0x1a8>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	205c      	movs	r0, #92	; 0x5c
 8001d28:	fb00 f303 	mul.w	r3, r0, r3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3310      	adds	r3, #16
 8001d30:	601a      	str	r2, [r3, #0]
					if(elements[i].selected >= elements[i].numChildren)
 8001d32:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <DM_Draw+0x1a8>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	215c      	movs	r1, #92	; 0x5c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3310      	adds	r3, #16
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4910      	ldr	r1, [pc, #64]	; (8001d84 <DM_Draw+0x1a8>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	205c      	movs	r0, #92	; 0x5c
 8001d48:	fb00 f303 	mul.w	r3, r0, r3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3350      	adds	r3, #80	; 0x50
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	db08      	blt.n	8001d68 <DM_Draw+0x18c>
						elements[i].selected = 0;
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <DM_Draw+0x1a8>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	215c      	movs	r1, #92	; 0x5c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	3310      	adds	r3, #16
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < numElements; i++) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <DM_Draw+0x1ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	f6ff af37 	blt.w	8001be8 <DM_Draw+0xc>
				}
			}
		}

	}
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000455c 	.word	0x2000455c
 8001d88:	200050dc 	.word	0x200050dc

08001d8c <DM_Clear>:

/**
 * Clears the array of elements to draw, and clears the screen.
 */
void DM_Clear() {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b09b      	sub	sp, #108	; 0x6c
 8001d90:	af02      	add	r7, sp, #8
	//Add a blank screen element to the start of the display
	elements[0] = DM_New_Fill_Rectangle(0, 0, WIDTH, HEIGHT, BG_COLOUR);
 8001d92:	4c0d      	ldr	r4, [pc, #52]	; (8001dc8 <DM_Clear+0x3c>)
 8001d94:	4638      	mov	r0, r7
 8001d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f240 133f 	movw	r3, #319	; 0x13f
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f240 13df 	movw	r3, #479	; 0x1df
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	f000 fa43 	bl	8002234 <DM_New_Fill_Rectangle>
 8001dae:	4620      	mov	r0, r4
 8001db0:	463b      	mov	r3, r7
 8001db2:	225c      	movs	r2, #92	; 0x5c
 8001db4:	4619      	mov	r1, r3
 8001db6:	f00a ff09 	bl	800cbcc <memcpy>

	//Use a background image instead
	//elements[0] = DM_New_Bitmap(0, 0, 2, BGImage);

	//Reset the array counter
	numElements = 1;
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <DM_Clear+0x40>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	3764      	adds	r7, #100	; 0x64
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd90      	pop	{r4, r7, pc}
 8001dc8:	2000455c 	.word	0x2000455c
 8001dcc:	200050dc 	.word	0x200050dc

08001dd0 <DM_Refresh_Element>:
}

/**
 * Register an element for refresh on next cycle.
 */
void DM_Refresh_Element(int id) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	elements[id].refresh = ONCE;
 8001dd8:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <DM_Refresh_Element+0x28>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	215c      	movs	r1, #92	; 0x5c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	333c      	adds	r3, #60	; 0x3c
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	2000455c 	.word	0x2000455c

08001dfc <DM_Add_Element>:

/**
 * Adds an element to the queue to be drawn later.
 */
int DM_Add_Element(struct DisplayElement newElement) {
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	f107 0c08 	add.w	ip, r7, #8
 8001e06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	elements[numElements++] = newElement;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <DM_Add_Element+0x44>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	490b      	ldr	r1, [pc, #44]	; (8001e40 <DM_Add_Element+0x44>)
 8001e12:	600a      	str	r2, [r1, #0]
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <DM_Add_Element+0x48>)
 8001e16:	215c      	movs	r1, #92	; 0x5c
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	225c      	movs	r2, #92	; 0x5c
 8001e26:	4619      	mov	r1, r3
 8001e28:	f00a fed0 	bl	800cbcc <memcpy>

	return numElements - 1;
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <DM_Add_Element+0x44>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3b01      	subs	r3, #1
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e3a:	b004      	add	sp, #16
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200050dc 	.word	0x200050dc
 8001e44:	2000455c 	.word	0x2000455c

08001e48 <DM_Replace_Element>:

/**
 * Replaces a specific element in the queue with a new one
 */
void DM_Replace_Element(int id, struct DisplayElement newElement) {
 8001e48:	b084      	sub	sp, #16
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	f107 0014 	add.w	r0, r7, #20
 8001e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	elements[id] = newElement;
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <DM_Replace_Element+0x3c>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	215c      	movs	r1, #92	; 0x5c
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	225c      	movs	r2, #92	; 0x5c
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f00a feac 	bl	800cbcc <memcpy>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e7e:	b004      	add	sp, #16
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2000455c 	.word	0x2000455c

08001e88 <DM_StrLen>:

/**
 * Calculate the length of a string up to a maximum length.
 * Returns the maximum length if length is exceeded.
 */
int DM_StrLen(char *str, int length) {
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	int strLen = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < length; i++) {
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	e00b      	b.n	8001eb4 <DM_StrLen+0x2c>
		if(str[i] == '\0') {
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <DM_StrLen+0x26>
			strLen = i;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60fb      	str	r3, [r7, #12]
			break;
 8001eac:	e006      	b.n	8001ebc <DM_StrLen+0x34>
	for(int i = 0; i < length; i++) {
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbef      	blt.n	8001e9c <DM_StrLen+0x14>
		}
	}

	return strLen;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <DM_Remove_Element>:
 * Contrary to the name, this does not actually remove the element,
 * it just tells the element not to refresh anymore, and then
 * draws a box over it.
 * The element can still be referenced.
 */
void DM_Remove_Element(int id) {
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ece:	b0af      	sub	sp, #188	; 0xbc
 8001ed0:	af14      	add	r7, sp, #80	; 0x50
 8001ed2:	6078      	str	r0, [r7, #4]
	elements[id].refresh = NEVER;
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <DM_Remove_Element+0x98>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	215c      	movs	r1, #92	; 0x5c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	333c      	adds	r3, #60	; 0x3c
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	701a      	strb	r2, [r3, #0]
	DM_Add_Element(DM_New_Fill_Rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, BG_COLOUR));
 8001ee6:	4a1f      	ldr	r2, [pc, #124]	; (8001f64 <DM_Remove_Element+0x98>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	215c      	movs	r1, #92	; 0x5c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	461c      	mov	r4, r3
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	; (8001f64 <DM_Remove_Element+0x98>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	215c      	movs	r1, #92	; 0x5c
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	3306      	adds	r3, #6
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	461d      	mov	r5, r3
 8001f0a:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <DM_Remove_Element+0x98>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	215c      	movs	r1, #92	; 0x5c
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	3308      	adds	r3, #8
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	461e      	mov	r6, r3
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <DM_Remove_Element+0x98>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	215c      	movs	r1, #92	; 0x5c
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	330a      	adds	r3, #10
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f107 000c 	add.w	r0, r7, #12
 8001f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	9200      	str	r2, [sp, #0]
 8001f3a:	4633      	mov	r3, r6
 8001f3c:	462a      	mov	r2, r5
 8001f3e:	4621      	mov	r1, r4
 8001f40:	f000 f978 	bl	8002234 <DM_New_Fill_Rectangle>
 8001f44:	4668      	mov	r0, sp
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	224c      	movs	r2, #76	; 0x4c
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f00a fe3d 	bl	800cbcc <memcpy>
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f58:	f7ff ff50 	bl	8001dfc <DM_Add_Element>
}
 8001f5c:	bf00      	nop
 8001f5e:	376c      	adds	r7, #108	; 0x6c
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f64:	2000455c 	.word	0x2000455c

08001f68 <DM_Parse_Press>:
 *
 * Remember that most of the time element 0 is the background.
 *
 * Returns -1 if nothing is detected.
 */
int DM_Parse_Press(int x, int y) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
	//Check each element to determine if the x,y coordinates are within it's bounds
	for(int i = numElements; i >= 0; i--) {
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <DM_Parse_Press+0x94>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e034      	b.n	8001fe4 <DM_Parse_Press+0x7c>
		if(x > elements[i].x1 && y > elements[i].y1 && x < elements[i].x2 && y < elements[i].y2) {
 8001f7a:	4a21      	ldr	r2, [pc, #132]	; (8002000 <DM_Parse_Press+0x98>)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	215c      	movs	r1, #92	; 0x5c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	3304      	adds	r3, #4
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	dd25      	ble.n	8001fde <DM_Parse_Press+0x76>
 8001f92:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <DM_Parse_Press+0x98>)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	215c      	movs	r1, #92	; 0x5c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3306      	adds	r3, #6
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	dd19      	ble.n	8001fde <DM_Parse_Press+0x76>
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <DM_Parse_Press+0x98>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	215c      	movs	r1, #92	; 0x5c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	da0d      	bge.n	8001fde <DM_Parse_Press+0x76>
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <DM_Parse_Press+0x98>)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	215c      	movs	r1, #92	; 0x5c
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	330a      	adds	r3, #10
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	da01      	bge.n	8001fde <DM_Parse_Press+0x76>
			return i;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	e007      	b.n	8001fee <DM_Parse_Press+0x86>
	for(int i = numElements; i >= 0; i--) {
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	dac7      	bge.n	8001f7a <DM_Parse_Press+0x12>
		}
	}

	return -1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	200050dc 	.word	0x200050dc
 8002000:	2000455c 	.word	0x2000455c

08002004 <DM_Do_Press>:
 * context highlighting etc., as well as an externally defined onPress() function to handle
 * specific tasks.
 *
 * Returns the ID of the element touched, or -1 if no element was touched.
 */
int DM_Do_Press(struct Touch touch) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Find the touched element, if any
	int id = DM_Parse_Press(touch.X, touch.Y);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ffa6 	bl	8001f68 <DM_Parse_Press>
 800201c:	6178      	str	r0, [r7, #20]

	//If no element was found then return right away
	if(id < 0)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	da01      	bge.n	8002028 <DM_Do_Press+0x24>
		return id;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	e0b2      	b.n	800218e <DM_Do_Press+0x18a>

	//Call any onPress function for this element on RELEASE.
	//Check that the element we released on was the one we pressed originally
	if(touch.state == 0x01 && id == previously_touched_element) {
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d15d      	bne.n	80020ea <DM_Do_Press+0xe6>
 800202e:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <DM_Do_Press+0x194>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	d158      	bne.n	80020ea <DM_Do_Press+0xe6>
		//Revert the element's state
		elements[previously_touched_element].state = ENABLED;
 8002038:	4b57      	ldr	r3, [pc, #348]	; (8002198 <DM_Do_Press+0x194>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a57      	ldr	r2, [pc, #348]	; (800219c <DM_Do_Press+0x198>)
 800203e:	215c      	movs	r1, #92	; 0x5c
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	3330      	adds	r3, #48	; 0x30
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]

		//Call the relevant intrinsic onPress function
		switch(elements[id].type) {
 800204c:	4a53      	ldr	r2, [pc, #332]	; (800219c <DM_Do_Press+0x198>)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	215c      	movs	r1, #92	; 0x5c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b0e      	cmp	r3, #14
 800205c:	d841      	bhi.n	80020e2 <DM_Do_Press+0xde>
 800205e:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <DM_Do_Press+0x60>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	080020a1 	.word	0x080020a1
 8002068:	080020e3 	.word	0x080020e3
 800206c:	080020e3 	.word	0x080020e3
 8002070:	080020e3 	.word	0x080020e3
 8002074:	080020e3 	.word	0x080020e3
 8002078:	080020e3 	.word	0x080020e3
 800207c:	080020e3 	.word	0x080020e3
 8002080:	080020d5 	.word	0x080020d5
 8002084:	080020e3 	.word	0x080020e3
 8002088:	080020a9 	.word	0x080020a9
 800208c:	080020e3 	.word	0x080020e3
 8002090:	080020b7 	.word	0x080020b7
 8002094:	080020e3 	.word	0x080020e3
 8002098:	080020c5 	.word	0x080020c5
 800209c:	080020cd 	.word	0x080020cd
		case BUTTON:
			DM_Button_onPress(id);
 80020a0:	6978      	ldr	r0, [r7, #20]
 80020a2:	f7ff fd75 	bl	8001b90 <DM_Button_onPress>
			break;
 80020a6:	e01c      	b.n	80020e2 <DM_Do_Press+0xde>
		case LIST:
			DM_List_onPress(id, touch.X, touch.Y);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4619      	mov	r1, r3
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f000 fafc 	bl	80026ac <DM_List_onPress>
			break;
 80020b4:	e015      	b.n	80020e2 <DM_Do_Press+0xde>
		case NUMPAD:
			DM_NumPad_onPress(id, touch.X, touch.Y);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	4619      	mov	r1, r3
 80020bc:	6978      	ldr	r0, [r7, #20]
 80020be:	f000 fcb9 	bl	8002a34 <DM_NumPad_onPress>
			break;
 80020c2:	e00e      	b.n	80020e2 <DM_Do_Press+0xde>
		case TEXTBOX:
			DM_TextBox_onPress(id);
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f000 fff3 	bl	80030b0 <DM_TextBox_onPress>
			break;
 80020ca:	e00a      	b.n	80020e2 <DM_Do_Press+0xde>
		case TICKBOX:
			DM_TickBox_onPress(id);
 80020cc:	6978      	ldr	r0, [r7, #20]
 80020ce:	f001 f8c7 	bl	8003260 <DM_TickBox_onPress>
			break;
 80020d2:	e006      	b.n	80020e2 <DM_Do_Press+0xde>
		case TITLEBAR:
			DM_Title_Bar_onPress(id, touch.X, touch.Y);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	4619      	mov	r1, r3
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f001 f9cc 	bl	8003478 <DM_Title_Bar_onPress>
			break;
 80020e0:	bf00      	nop
		}

		//The controller seems to put extra RELEASE events, so invalidate the previously_touched_element
		previously_touched_element = -1;
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <DM_Do_Press+0x194>)
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020e8:	601a      	str	r2, [r3, #0]
	}

	//A press has been recorded, or moved, but has not been released yet
	if(touch.state == 0x00 && elements[id].state != DISABLED) {
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d13b      	bne.n	8002168 <DM_Do_Press+0x164>
 80020f0:	4a2a      	ldr	r2, [pc, #168]	; (800219c <DM_Do_Press+0x198>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	215c      	movs	r1, #92	; 0x5c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3330      	adds	r3, #48	; 0x30
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d031      	beq.n	8002168 <DM_Do_Press+0x164>
		//Update the "current touched element"
		previously_touched_element = id;
 8002104:	4a24      	ldr	r2, [pc, #144]	; (8002198 <DM_Do_Press+0x194>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	6013      	str	r3, [r2, #0]
		//Set the state of the helement for context highlighting
		elements[id].state = SELECTED;
 800210a:	4a24      	ldr	r2, [pc, #144]	; (800219c <DM_Do_Press+0x198>)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	215c      	movs	r1, #92	; 0x5c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3330      	adds	r3, #48	; 0x30
 8002118:	2202      	movs	r2, #2
 800211a:	701a      	strb	r2, [r3, #0]


		//If an element can take focus, then take it
		if(elements[id].canFocus) {
 800211c:	4a1f      	ldr	r2, [pc, #124]	; (800219c <DM_Do_Press+0x198>)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	215c      	movs	r1, #92	; 0x5c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	3334      	adds	r3, #52	; 0x34
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <DM_Do_Press+0x164>
			oldFocusedElement = focusedElement;
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <DM_Do_Press+0x19c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <DM_Do_Press+0x1a0>)
 8002136:	6013      	str	r3, [r2, #0]
			focusedElement = id;
 8002138:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <DM_Do_Press+0x19c>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	6013      	str	r3, [r2, #0]
			//Tell the previously focused element to update
			if(elements[oldFocusedElement].canFocus)
 800213e:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <DM_Do_Press+0x1a0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a16      	ldr	r2, [pc, #88]	; (800219c <DM_Do_Press+0x198>)
 8002144:	215c      	movs	r1, #92	; 0x5c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3334      	adds	r3, #52	; 0x34
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d009      	beq.n	8002168 <DM_Do_Press+0x164>
				elements[oldFocusedElement].refresh = ONCE;
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <DM_Do_Press+0x1a0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a10      	ldr	r2, [pc, #64]	; (800219c <DM_Do_Press+0x198>)
 800215a:	215c      	movs	r1, #92	; 0x5c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	333c      	adds	r3, #60	; 0x3c
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
		}
	}

	//Finally, if the touch was released, but it is no longer on the element, then revert the element state
	if(touch.state == 0x01 && id != previously_touched_element){
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10e      	bne.n	800218c <DM_Do_Press+0x188>
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <DM_Do_Press+0x194>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	d009      	beq.n	800218c <DM_Do_Press+0x188>
		//Un-select the previously touched element
		elements[previously_touched_element].state = ENABLED;
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <DM_Do_Press+0x194>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <DM_Do_Press+0x198>)
 800217e:	215c      	movs	r1, #92	; 0x5c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3330      	adds	r3, #48	; 0x30
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
	}

	return id;
 800218c:	697b      	ldr	r3, [r7, #20]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200050e8 	.word	0x200050e8
 800219c:	2000455c 	.word	0x2000455c
 80021a0:	200050e0 	.word	0x200050e0
 80021a4:	200050e4 	.word	0x200050e4

080021a8 <getDefaultElement>:

/**
 * Returns an empty element with everything set to either zero, or NULL.
 * Use this to build a new element safely without random memory.
 */
struct DisplayElement getDefaultElement() {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b09a      	sub	sp, #104	; 0x68
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	struct DisplayElement newElement;
	newElement.type;
	newElement.x1 = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	823b      	strh	r3, [r7, #16]
	newElement.y1 = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	827b      	strh	r3, [r7, #18]
	newElement.x2 = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	82bb      	strh	r3, [r7, #20]
	newElement.y2 = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	82fb      	strh	r3, [r7, #22]
	newElement.size = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61bb      	str	r3, [r7, #24]
	newElement.selected = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
	newElement.colour = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
	newElement.bgColour = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
	newElement.orientation = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	newElement.bitmap = NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	newElement.bitmaps = NULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	633b      	str	r3, [r7, #48]	; 0x30
	newElement.title = NULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	637b      	str	r3, [r7, #52]	; 0x34
	newElement.text = NULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	63bb      	str	r3, [r7, #56]	; 0x38
	newElement.state = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	newElement.oldState = -1;
 80021ec:	23ff      	movs	r3, #255	; 0xff
 80021ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	newElement.canFocus = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	643b      	str	r3, [r7, #64]	; 0x40
	newElement.maxLength = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
	newElement.refresh = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	newElement.draw = NULL;
 8002200:	2300      	movs	r3, #0
 8002202:	64fb      	str	r3, [r7, #76]	; 0x4c
	newElement.onPress = NULL;
 8002204:	2300      	movs	r3, #0
 8002206:	653b      	str	r3, [r7, #80]	; 0x50
	newElement.onDrag = NULL;
 8002208:	2300      	movs	r3, #0
 800220a:	657b      	str	r3, [r7, #84]	; 0x54
	newElement.children = NULL;
 800220c:	2300      	movs	r3, #0
 800220e:	65bb      	str	r3, [r7, #88]	; 0x58
	newElement.numChildren = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	65fb      	str	r3, [r7, #92]	; 0x5c
	newElement.animationTicks = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	663b      	str	r3, [r7, #96]	; 0x60
	newElement.ticksPerFrame = TICKS_PER_FRAME;
 8002218:	2302      	movs	r3, #2
 800221a:	667b      	str	r3, [r7, #100]	; 0x64

	return newElement;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	225c      	movs	r2, #92	; 0x5c
 8002226:	4619      	mov	r1, r3
 8002228:	f00a fcd0 	bl	800cbcc <memcpy>
}
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	3768      	adds	r7, #104	; 0x68
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <DM_New_Fill_Rectangle>:
void DM_Fill_Gradient(int id);

/**
 * Create a rectangle display element and add it to the queue
 */
struct DisplayElement DM_New_Fill_Rectangle(int x1, int y1, int x2, int y2, int colour) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b09c      	sub	sp, #112	; 0x70
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
	struct DisplayElement box = getDefaultElement();
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ffae 	bl	80021a8 <getDefaultElement>
	box.type = FILLRECTANGLE;
 800224c:	2301      	movs	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
	box.x1 = x1; box.y1 = y1; box.x2 = x2; box.y2 = y2;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	b29b      	uxth	r3, r3
 8002254:	833b      	strh	r3, [r7, #24]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	b29b      	uxth	r3, r3
 800225a:	837b      	strh	r3, [r7, #26]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	83bb      	strh	r3, [r7, #28]
 8002262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002264:	b29b      	uxth	r3, r3
 8002266:	83fb      	strh	r3, [r7, #30]
	box.colour = colour;
 8002268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
	box.draw = DM_Fill_Rectangle;
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <DM_New_Fill_Rectangle+0x5c>)
 800226e:	657b      	str	r3, [r7, #84]	; 0x54
	box.refresh = ONCE;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	return box;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	225c      	movs	r2, #92	; 0x5c
 8002280:	4619      	mov	r1, r3
 8002282:	f00a fca3 	bl	800cbcc <memcpy>
}
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	3770      	adds	r7, #112	; 0x70
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	08002295 	.word	0x08002295

08002294 <DM_Fill_Rectangle>:

/**
 * A display element that draws a box
 */
void DM_Fill_Rectangle(int id) {
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	b085      	sub	sp, #20
 8002298:	af02      	add	r7, sp, #8
 800229a:	6078      	str	r0, [r7, #4]
	fill_rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, elements[id].colour);
 800229c:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <DM_Fill_Rectangle+0x74>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	215c      	movs	r1, #92	; 0x5c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	4a16      	ldr	r2, [pc, #88]	; (8002308 <DM_Fill_Rectangle+0x74>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	215c      	movs	r1, #92	; 0x5c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3306      	adds	r3, #6
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	461c      	mov	r4, r3
 80022c0:	4a11      	ldr	r2, [pc, #68]	; (8002308 <DM_Fill_Rectangle+0x74>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	215c      	movs	r1, #92	; 0x5c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	3308      	adds	r3, #8
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	461d      	mov	r5, r3
 80022d2:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <DM_Fill_Rectangle+0x74>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	215c      	movs	r1, #92	; 0x5c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	330a      	adds	r3, #10
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	461e      	mov	r6, r3
 80022e4:	4a08      	ldr	r2, [pc, #32]	; (8002308 <DM_Fill_Rectangle+0x74>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	215c      	movs	r1, #92	; 0x5c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3314      	adds	r3, #20
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	4633      	mov	r3, r6
 80022f8:	462a      	mov	r2, r5
 80022fa:	4621      	mov	r1, r4
 80022fc:	f001 fe2c 	bl	8003f58 <fill_rectangle>
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002308:	2000455c 	.word	0x2000455c

0800230c <DM_New_Fill_Gradient>:


/**
 * Creates a gradient filled rectangle element between two colours.
 */
struct DisplayElement DM_New_Fill_Gradient(int x1, int y1, int x2, int y2, unsigned int startColour, unsigned int endColour, Orientation orientation) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b09c      	sub	sp, #112	; 0x70
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
	struct DisplayElement box = getDefaultElement();
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff42 	bl	80021a8 <getDefaultElement>
	box.type = FILLGRADIENT;
 8002324:	2308      	movs	r3, #8
 8002326:	617b      	str	r3, [r7, #20]
	box.x1 = x1; box.y1 = y1; box.x2 = x2; box.y2 = y2;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	b29b      	uxth	r3, r3
 800232c:	833b      	strh	r3, [r7, #24]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	b29b      	uxth	r3, r3
 8002332:	837b      	strh	r3, [r7, #26]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	83bb      	strh	r3, [r7, #28]
 800233a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800233c:	b29b      	uxth	r3, r3
 800233e:	83fb      	strh	r3, [r7, #30]
	box.colour = startColour;
 8002340:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
	box.bgColour = endColour;
 8002344:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
	box.orientation = orientation;
 800234a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800234e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	box.draw = DM_Fill_Gradient;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <DM_New_Fill_Gradient+0x68>)
 8002354:	657b      	str	r3, [r7, #84]	; 0x54
	box.refresh = ONCE;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	return box;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4618      	mov	r0, r3
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	225c      	movs	r2, #92	; 0x5c
 8002366:	4619      	mov	r1, r3
 8002368:	f00a fc30 	bl	800cbcc <memcpy>
}
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	3770      	adds	r7, #112	; 0x70
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	08002379 	.word	0x08002379

08002378 <DM_Fill_Gradient>:

/**
 * Draws a gradient filled rectangle to the display.
 */
void DM_Fill_Gradient(int id) {
 8002378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237a:	b087      	sub	sp, #28
 800237c:	af04      	add	r7, sp, #16
 800237e:	6078      	str	r0, [r7, #4]
	fill_gradient(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, elements[id].colour, elements[id].bgColour, elements[id].orientation);
 8002380:	4a24      	ldr	r2, [pc, #144]	; (8002414 <DM_Fill_Gradient+0x9c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	215c      	movs	r1, #92	; 0x5c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3304      	adds	r3, #4
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	461d      	mov	r5, r3
 8002392:	4a20      	ldr	r2, [pc, #128]	; (8002414 <DM_Fill_Gradient+0x9c>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	215c      	movs	r1, #92	; 0x5c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3306      	adds	r3, #6
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	461e      	mov	r6, r3
 80023a4:	4a1b      	ldr	r2, [pc, #108]	; (8002414 <DM_Fill_Gradient+0x9c>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	215c      	movs	r1, #92	; 0x5c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3308      	adds	r3, #8
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	469c      	mov	ip, r3
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <DM_Fill_Gradient+0x9c>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	215c      	movs	r1, #92	; 0x5c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	330a      	adds	r3, #10
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	469e      	mov	lr, r3
 80023c8:	4a12      	ldr	r2, [pc, #72]	; (8002414 <DM_Fill_Gradient+0x9c>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	215c      	movs	r1, #92	; 0x5c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3314      	adds	r3, #20
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	490e      	ldr	r1, [pc, #56]	; (8002414 <DM_Fill_Gradient+0x9c>)
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	205c      	movs	r0, #92	; 0x5c
 80023de:	fb00 f202 	mul.w	r2, r0, r2
 80023e2:	440a      	add	r2, r1
 80023e4:	3218      	adds	r2, #24
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	480a      	ldr	r0, [pc, #40]	; (8002414 <DM_Fill_Gradient+0x9c>)
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	245c      	movs	r4, #92	; 0x5c
 80023ee:	fb04 f101 	mul.w	r1, r4, r1
 80023f2:	4401      	add	r1, r0
 80023f4:	311c      	adds	r1, #28
 80023f6:	7809      	ldrb	r1, [r1, #0]
 80023f8:	9102      	str	r1, [sp, #8]
 80023fa:	9201      	str	r2, [sp, #4]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4673      	mov	r3, lr
 8002400:	4662      	mov	r2, ip
 8002402:	4631      	mov	r1, r6
 8002404:	4628      	mov	r0, r5
 8002406:	f002 f83d 	bl	8004484 <fill_gradient>
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002412:	bf00      	nop
 8002414:	2000455c 	.word	0x2000455c

08002418 <DM_New_List>:
void DM_List_onPress(int id, int x, int y);

/**
 * Creates a new list element for you
 */
struct DisplayElement DM_New_List(int x1, int y1, int x2, int y2, char **children, int numChildren) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b09c      	sub	sp, #112	; 0x70
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
	struct DisplayElement list = getDefaultElement();
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff febc 	bl	80021a8 <getDefaultElement>
	//Hard coded X, Y and size for the moment
	list.x1 = x1; list.y1 = y1; list.x2 = x2; list.y2 = y2;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	b29b      	uxth	r3, r3
 8002434:	833b      	strh	r3, [r7, #24]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	b29b      	uxth	r3, r3
 800243a:	837b      	strh	r3, [r7, #26]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	83bb      	strh	r3, [r7, #28]
 8002442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002444:	b29b      	uxth	r3, r3
 8002446:	83fb      	strh	r3, [r7, #30]
	list.type = LIST;
 8002448:	2309      	movs	r3, #9
 800244a:	617b      	str	r3, [r7, #20]
	list.refresh = ONCE;
 800244c:	2301      	movs	r3, #1
 800244e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	list.draw = DM_List;
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <DM_New_List+0x64>)
 8002454:	657b      	str	r3, [r7, #84]	; 0x54
	list.children = children;
 8002456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002458:	663b      	str	r3, [r7, #96]	; 0x60
	list.numChildren = numChildren;
 800245a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800245e:	667b      	str	r3, [r7, #100]	; 0x64
	list.onPress = NULL;
 8002460:	2300      	movs	r3, #0
 8002462:	65bb      	str	r3, [r7, #88]	; 0x58

	return list;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4618      	mov	r0, r3
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	225c      	movs	r2, #92	; 0x5c
 800246e:	4619      	mov	r1, r3
 8002470:	f00a fbac 	bl	800cbcc <memcpy>
}
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	3770      	adds	r7, #112	; 0x70
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	08002481 	.word	0x08002481

08002480 <DM_List>:

/**
 * Draws the list elements to the screen
 */
void DM_List(int id) {
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b091      	sub	sp, #68	; 0x44
 8002484:	af04      	add	r7, sp, #16
 8002486:	6078      	str	r0, [r7, #4]
	const int lineHeight = 35;
 8002488:	2323      	movs	r3, #35	; 0x23
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
	const int textPadding = 4;
 800248c:	2304      	movs	r3, #4
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
	const int selectedColour = PRIMARY_COLOUR;
 8002490:	f241 3358 	movw	r3, #4952	; 0x1358
 8002494:	623b      	str	r3, [r7, #32]
	const int textColour = COLOR_BLACK;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]

	//Check if the list is going to overflow and need to scroll
	int maxVisibleElements = (int)((elements[id].y2 - elements[id].y1) / (lineHeight));
 800249a:	4a83      	ldr	r2, [pc, #524]	; (80026a8 <DM_List+0x228>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	215c      	movs	r1, #92	; 0x5c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	330a      	adds	r3, #10
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	4a7e      	ldr	r2, [pc, #504]	; (80026a8 <DM_List+0x228>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	215c      	movs	r1, #92	; 0x5c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3306      	adds	r3, #6
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	1ac2      	subs	r2, r0, r3
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80024c4:	61bb      	str	r3, [r7, #24]
	int midX = (int)((elements[id].x2 - elements[id].x1) / 2);
 80024c6:	4a78      	ldr	r2, [pc, #480]	; (80026a8 <DM_List+0x228>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	215c      	movs	r1, #92	; 0x5c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3308      	adds	r3, #8
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	4a73      	ldr	r2, [pc, #460]	; (80026a8 <DM_List+0x228>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	215c      	movs	r1, #92	; 0x5c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3304      	adds	r3, #4
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	1ac3      	subs	r3, r0, r3
 80024ea:	0fda      	lsrs	r2, r3, #31
 80024ec:	4413      	add	r3, r2
 80024ee:	105b      	asrs	r3, r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
	int hLineColour1 = COLOR_WHITE;
 80024f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f6:	613b      	str	r3, [r7, #16]
	int hLineColour2 = COLOR_LIGHTGRAY;
 80024f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80024fc:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < elements[id].numChildren; i++) {
 80024fe:	2300      	movs	r3, #0
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002502:	e0be      	b.n	8002682 <DM_List+0x202>
		//If we have exceeded the display size then break
		if(i >= maxVisibleElements)
 8002504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	429a      	cmp	r2, r3
 800250a:	f280 80c7 	bge.w	800269c <DM_List+0x21c>
			break;

		int thisY = elements[id].y1 + (i * (lineHeight));
 800250e:	4a66      	ldr	r2, [pc, #408]	; (80026a8 <DM_List+0x228>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	215c      	movs	r1, #92	; 0x5c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	3306      	adds	r3, #6
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	440b      	add	r3, r1
 800252a:	60bb      	str	r3, [r7, #8]
		//If this element is selected then draw a box around it
		if(elements[id].state == SELECTED) {
 800252c:	4a5e      	ldr	r2, [pc, #376]	; (80026a8 <DM_List+0x228>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	215c      	movs	r1, #92	; 0x5c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3330      	adds	r3, #48	; 0x30
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d148      	bne.n	80025d2 <DM_List+0x152>
			//If this is the element that is selected then draw a highlight
			if(elements[id].selected == i) {
 8002540:	4a59      	ldr	r2, [pc, #356]	; (80026a8 <DM_List+0x228>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	215c      	movs	r1, #92	; 0x5c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3310      	adds	r3, #16
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002552:	429a      	cmp	r2, r3
 8002554:	d121      	bne.n	800259a <DM_List+0x11a>
				fill_gradient(elements[id].x1, thisY, elements[id].x2, thisY + lineHeight, selectedColour, BG_COLOUR,  HORIZONTAL);
 8002556:	4a54      	ldr	r2, [pc, #336]	; (80026a8 <DM_List+0x228>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	215c      	movs	r1, #92	; 0x5c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3304      	adds	r3, #4
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <DM_List+0x228>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	215c      	movs	r1, #92	; 0x5c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3308      	adds	r3, #8
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	441a      	add	r2, r3
 8002580:	2300      	movs	r3, #0
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	4613      	mov	r3, r2
 8002590:	460a      	mov	r2, r1
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	f001 ff76 	bl	8004484 <fill_gradient>
 8002598:	e01b      	b.n	80025d2 <DM_List+0x152>

			}
			else
				fill_rectangle(elements[id].x1, thisY, elements[id].x2, thisY + lineHeight, BG_COLOUR);
 800259a:	4a43      	ldr	r2, [pc, #268]	; (80026a8 <DM_List+0x228>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	215c      	movs	r1, #92	; 0x5c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3304      	adds	r3, #4
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	4a3e      	ldr	r2, [pc, #248]	; (80026a8 <DM_List+0x228>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	215c      	movs	r1, #92	; 0x5c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3308      	adds	r3, #8
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	4413      	add	r3, r2
 80025c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c8:	9200      	str	r2, [sp, #0]
 80025ca:	460a      	mov	r2, r1
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	f001 fcc3 	bl	8003f58 <fill_rectangle>

		}

		//Write the string
		draw_string(elements[id].x1 + 10, thisY + textPadding, textColour, 2, elements[id].children[i]);
 80025d2:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <DM_List+0x228>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	215c      	movs	r1, #92	; 0x5c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3304      	adds	r3, #4
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	f103 000a 	add.w	r0, r3, #10
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	18d1      	adds	r1, r2, r3
 80025ec:	4a2e      	ldr	r2, [pc, #184]	; (80026a8 <DM_List+0x228>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	245c      	movs	r4, #92	; 0x5c
 80025f2:	fb04 f303 	mul.w	r3, r4, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	334c      	adds	r3, #76	; 0x4c
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2302      	movs	r3, #2
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f001 fe07 	bl	800421c <draw_string>

		//Put a divider line after each item
		fill_gradient(elements[id].x1 + 30, thisY + lineHeight - 1, midX, thisY + lineHeight, hLineColour1, hLineColour2, HORIZONTAL);
 800260e:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <DM_List+0x228>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	215c      	movs	r1, #92	; 0x5c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3304      	adds	r3, #4
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	f103 001e 	add.w	r0, r3, #30
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	4413      	add	r3, r2
 8002628:	1e59      	subs	r1, r3, #1
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	441a      	add	r2, r3
 8002630:	2300      	movs	r3, #0
 8002632:	9302      	str	r3, [sp, #8]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	f001 ff20 	bl	8004484 <fill_gradient>
		fill_gradient(midX, thisY + lineHeight - 1, elements[id].x2 - 30, thisY + lineHeight, hLineColour2, hLineColour1, HORIZONTAL);
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	4413      	add	r3, r2
 800264a:	1e59      	subs	r1, r3, #1
 800264c:	4a16      	ldr	r2, [pc, #88]	; (80026a8 <DM_List+0x228>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	205c      	movs	r0, #92	; 0x5c
 8002652:	fb00 f303 	mul.w	r3, r0, r3
 8002656:	4413      	add	r3, r2
 8002658:	3308      	adds	r3, #8
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	f1a3 001e 	sub.w	r0, r3, #30
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	441a      	add	r2, r3
 8002666:	2300      	movs	r3, #0
 8002668:	9302      	str	r3, [sp, #8]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	4613      	mov	r3, r2
 8002674:	4602      	mov	r2, r0
 8002676:	6978      	ldr	r0, [r7, #20]
 8002678:	f001 ff04 	bl	8004484 <fill_gradient>
	for(int i = 0; i < elements[id].numChildren; i++) {
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	3301      	adds	r3, #1
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <DM_List+0x228>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	215c      	movs	r1, #92	; 0x5c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	3350      	adds	r3, #80	; 0x50
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002694:	429a      	cmp	r2, r3
 8002696:	f6ff af35 	blt.w	8002504 <DM_List+0x84>


	}
}
 800269a:	e000      	b.n	800269e <DM_List+0x21e>
			break;
 800269c:	bf00      	nop
}
 800269e:	bf00      	nop
 80026a0:	3734      	adds	r7, #52	; 0x34
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd90      	pop	{r4, r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000455c 	.word	0x2000455c

080026ac <DM_List_onPress>:

/**
 * Called by the touch handler when the list is pressed. Determines which element
 * was pressed.
 */
void DM_List_onPress(int id, int x, int y) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
	const int lineHeight = 35;
 80026b8:	2323      	movs	r3, #35	; 0x23
 80026ba:	617b      	str	r3, [r7, #20]

	elements[id].state = SELECTED;
 80026bc:	4a20      	ldr	r2, [pc, #128]	; (8002740 <DM_List_onPress+0x94>)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	215c      	movs	r1, #92	; 0x5c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3330      	adds	r3, #48	; 0x30
 80026ca:	2202      	movs	r2, #2
 80026cc:	701a      	strb	r2, [r3, #0]
	elements[id].refresh = ONCE;
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <DM_List_onPress+0x94>)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	215c      	movs	r1, #92	; 0x5c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	333c      	adds	r3, #60	; 0x3c
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
	//Report which item is selected
	int index = (int)((y - elements[id].y1) / lineHeight);
 80026e0:	4a17      	ldr	r2, [pc, #92]	; (8002740 <DM_List_onPress+0x94>)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	215c      	movs	r1, #92	; 0x5c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3306      	adds	r3, #6
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	1a9a      	subs	r2, r3, r2
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80026fc:	613b      	str	r3, [r7, #16]

	elements[id].selected = index;
 80026fe:	4a10      	ldr	r2, [pc, #64]	; (8002740 <DM_List_onPress+0x94>)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	215c      	movs	r1, #92	; 0x5c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	3310      	adds	r3, #16
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	601a      	str	r2, [r3, #0]

	if(elements[id].onPress)
 8002710:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <DM_List_onPress+0x94>)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	215c      	movs	r1, #92	; 0x5c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3344      	adds	r3, #68	; 0x44
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d009      	beq.n	8002738 <DM_List_onPress+0x8c>
		elements[id].onPress(id);
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <DM_List_onPress+0x94>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	215c      	movs	r1, #92	; 0x5c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3344      	adds	r3, #68	; 0x44
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	4798      	blx	r3
}
 8002738:	bf00      	nop
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000455c 	.word	0x2000455c

08002744 <DM_New_NumPad>:
 * Create a new number pad element.
 *
 * A number pad will always fill the right-hand half of the display.
 * Design your components appropriately.
 */
struct DisplayElement DM_New_NumPad() {
 8002744:	b580      	push	{r7, lr}
 8002746:	b09a      	sub	sp, #104	; 0x68
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	struct DisplayElement numPad = getDefaultElement();
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fd29 	bl	80021a8 <getDefaultElement>
	numPad.type = NUMPAD;
 8002756:	230b      	movs	r3, #11
 8002758:	60fb      	str	r3, [r7, #12]
	numPad.x1 = WIDTH - (60 * 3);
 800275a:	f240 132b 	movw	r3, #299	; 0x12b
 800275e:	823b      	strh	r3, [r7, #16]
	numPad.y1 = 50;
 8002760:	2332      	movs	r3, #50	; 0x32
 8002762:	827b      	strh	r3, [r7, #18]
	numPad.x2 = WIDTH;
 8002764:	f240 13df 	movw	r3, #479	; 0x1df
 8002768:	82bb      	strh	r3, [r7, #20]
	numPad.y2 = HEIGHT;
 800276a:	f240 133f 	movw	r3, #319	; 0x13f
 800276e:	82fb      	strh	r3, [r7, #22]

	numPad.state = ENABLED;
 8002770:	2300      	movs	r3, #0
 8002772:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	numPad.selected = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
	numPad.onPress = NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	653b      	str	r3, [r7, #80]	; 0x50
	numPad.refresh = ALWAYS;
 800277e:	2300      	movs	r3, #0
 8002780:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	numPad.draw = DM_NumPad;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <DM_New_NumPad+0x5c>)
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c

	return numPad;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4618      	mov	r0, r3
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	225c      	movs	r2, #92	; 0x5c
 8002792:	4619      	mov	r1, r3
 8002794:	f00a fa1a 	bl	800cbcc <memcpy>
}
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	3768      	adds	r7, #104	; 0x68
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	080027a5 	.word	0x080027a5

080027a4 <DM_NumPad>:

/**
 * Draws a number pad to the display;
 */
void DM_NumPad(int id) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	const int buttonSpace = 60;
 80027ac:	233c      	movs	r3, #60	; 0x3c
 80027ae:	613b      	str	r3, [r7, #16]
	//Draw a few buttons
	State state = ENABLED;
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
	//Each vertical row
	for(int y = 0; y < 3; y++) {
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	e050      	b.n	800285c <DM_NumPad+0xb8>
		//..And Each horizontal row
		for(int x = 0; x < 3; x++) {
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e047      	b.n	8002850 <DM_NumPad+0xac>
			//Figure out which digit this is
			int thisDigit = x + (y * 3) + 1;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	441a      	add	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	4413      	add	r3, r2
 80027cc:	3301      	adds	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]

			//Is this particular digit selected
			if(elements[id].selected == thisDigit && elements[id].state == SELECTED)
 80027d0:	4a5c      	ldr	r2, [pc, #368]	; (8002944 <DM_NumPad+0x1a0>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	215c      	movs	r1, #92	; 0x5c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3310      	adds	r3, #16
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d10c      	bne.n	8002800 <DM_NumPad+0x5c>
 80027e6:	4a57      	ldr	r2, [pc, #348]	; (8002944 <DM_NumPad+0x1a0>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	215c      	movs	r1, #92	; 0x5c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3330      	adds	r3, #48	; 0x30
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d102      	bne.n	8002800 <DM_NumPad+0x5c>
				state = SELECTED;
 80027fa:	2302      	movs	r3, #2
 80027fc:	77fb      	strb	r3, [r7, #31]
 80027fe:	e001      	b.n	8002804 <DM_NumPad+0x60>
			else
				state = ENABLED;
 8002800:	2300      	movs	r3, #0
 8002802:	77fb      	strb	r3, [r7, #31]

			//Put the digit with its ASCII to the display
			DM_NumPad_Button(elements[id].x1 + (x * buttonSpace), elements[id].y1 + (y * buttonSpace), thisDigit + 48, state);
 8002804:	4a4f      	ldr	r2, [pc, #316]	; (8002944 <DM_NumPad+0x1a0>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	215c      	movs	r1, #92	; 0x5c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	18c8      	adds	r0, r1, r3
 8002820:	4a48      	ldr	r2, [pc, #288]	; (8002944 <DM_NumPad+0x1a0>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	215c      	movs	r1, #92	; 0x5c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3306      	adds	r3, #6
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4419      	add	r1, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3330      	adds	r3, #48	; 0x30
 8002842:	b2da      	uxtb	r2, r3
 8002844:	7ffb      	ldrb	r3, [r7, #31]
 8002846:	f000 f87f 	bl	8002948 <DM_NumPad_Button>
		for(int x = 0; x < 3; x++) {
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3301      	adds	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b02      	cmp	r3, #2
 8002854:	ddb4      	ble.n	80027c0 <DM_NumPad+0x1c>
	for(int y = 0; y < 3; y++) {
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	3301      	adds	r3, #1
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b02      	cmp	r3, #2
 8002860:	ddab      	ble.n	80027ba <DM_NumPad+0x16>
		}
	}

	//zero at the very bottom
	if(elements[id].selected == 11 && elements[id].state == SELECTED)
 8002862:	4a38      	ldr	r2, [pc, #224]	; (8002944 <DM_NumPad+0x1a0>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	215c      	movs	r1, #92	; 0x5c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3310      	adds	r3, #16
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b0b      	cmp	r3, #11
 8002874:	d10c      	bne.n	8002890 <DM_NumPad+0xec>
 8002876:	4a33      	ldr	r2, [pc, #204]	; (8002944 <DM_NumPad+0x1a0>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	215c      	movs	r1, #92	; 0x5c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3330      	adds	r3, #48	; 0x30
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d102      	bne.n	8002890 <DM_NumPad+0xec>
		state = SELECTED;
 800288a:	2302      	movs	r3, #2
 800288c:	77fb      	strb	r3, [r7, #31]
 800288e:	e001      	b.n	8002894 <DM_NumPad+0xf0>
	else
		state = ENABLED;
 8002890:	2300      	movs	r3, #0
 8002892:	77fb      	strb	r3, [r7, #31]
	DM_NumPad_Button(elements[id].x1 + (1 * buttonSpace), elements[id].y1 + (3 * buttonSpace), '0', state);
 8002894:	4a2b      	ldr	r2, [pc, #172]	; (8002944 <DM_NumPad+0x1a0>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	215c      	movs	r1, #92	; 0x5c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	18d0      	adds	r0, r2, r3
 80028aa:	4a26      	ldr	r2, [pc, #152]	; (8002944 <DM_NumPad+0x1a0>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	215c      	movs	r1, #92	; 0x5c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3306      	adds	r3, #6
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	4419      	add	r1, r3
 80028c6:	7ffb      	ldrb	r3, [r7, #31]
 80028c8:	2230      	movs	r2, #48	; 0x30
 80028ca:	f000 f83d 	bl	8002948 <DM_NumPad_Button>
	//And a backspace button
	if(elements[id].selected == 12 && elements[id].state == SELECTED)
 80028ce:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <DM_NumPad+0x1a0>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	215c      	movs	r1, #92	; 0x5c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3310      	adds	r3, #16
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d10c      	bne.n	80028fc <DM_NumPad+0x158>
 80028e2:	4a18      	ldr	r2, [pc, #96]	; (8002944 <DM_NumPad+0x1a0>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	215c      	movs	r1, #92	; 0x5c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3330      	adds	r3, #48	; 0x30
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d102      	bne.n	80028fc <DM_NumPad+0x158>
		state = SELECTED;
 80028f6:	2302      	movs	r3, #2
 80028f8:	77fb      	strb	r3, [r7, #31]
 80028fa:	e001      	b.n	8002900 <DM_NumPad+0x15c>
	else
		state = ENABLED;
 80028fc:	2300      	movs	r3, #0
 80028fe:	77fb      	strb	r3, [r7, #31]
	DM_NumPad_Button(elements[id].x1 + (2 * buttonSpace), elements[id].y1 + (3 * buttonSpace), '<', state);
 8002900:	4a10      	ldr	r2, [pc, #64]	; (8002944 <DM_NumPad+0x1a0>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	215c      	movs	r1, #92	; 0x5c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3304      	adds	r3, #4
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	18d0      	adds	r0, r2, r3
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <DM_NumPad+0x1a0>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	215c      	movs	r1, #92	; 0x5c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3306      	adds	r3, #6
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	4419      	add	r1, r3
 8002934:	7ffb      	ldrb	r3, [r7, #31]
 8002936:	223c      	movs	r2, #60	; 0x3c
 8002938:	f000 f806 	bl	8002948 <DM_NumPad_Button>

}
 800293c:	bf00      	nop
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	2000455c 	.word	0x2000455c

08002948 <DM_NumPad_Button>:

/**
 * Draws an individual number button to the numpad.
 */
void DM_NumPad_Button(int x1, int y1, char c, State state) {
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b08d      	sub	sp, #52	; 0x34
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	4611      	mov	r1, r2
 8002954:	461a      	mov	r2, r3
 8002956:	460b      	mov	r3, r1
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	4613      	mov	r3, r2
 800295c:	71bb      	strb	r3, [r7, #6]
	const int buttonSize = 50;
 800295e:	2332      	movs	r3, #50	; 0x32
 8002960:	61bb      	str	r3, [r7, #24]
	int x2 = x1 + buttonSize;
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
	int y2 = y1 + buttonSize;
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	4413      	add	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
	int outlineColour = COLOR_GRAY;
 8002972:	f248 4310 	movw	r3, #33808	; 0x8410
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
	int fillColour = COLOR_LIGHTGRAY;
 8002978:	f24c 6318 	movw	r3, #50712	; 0xc618
 800297c:	623b      	str	r3, [r7, #32]
	int textColour = COLOR_BLACK;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
	if(state == DISABLED) {
 8002982:	79bb      	ldrb	r3, [r7, #6]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d108      	bne.n	800299a <DM_NumPad_Button+0x52>
		fillColour = COLOR_WHITE;
 8002988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298c:	623b      	str	r3, [r7, #32]
		outlineColour = COLOR_LIGHTGRAY;
 800298e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
		textColour = COLOR_LIGHTGRAY;
 8002994:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002998:	61fb      	str	r3, [r7, #28]
	}
	if(state == SELECTED) {
 800299a:	79bb      	ldrb	r3, [r7, #6]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d102      	bne.n	80029a6 <DM_NumPad_Button+0x5e>
		fillColour = COLOR_LIGHTBLUE;
 80029a0:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 80029a4:	623b      	str	r3, [r7, #32]
	}
	//Draw the background
	fill_rectangle(x1 + 1, y1 + 1, x2 - 1, y2 - 1, fillColour);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1c58      	adds	r0, r3, #1
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1c59      	adds	r1, r3, #1
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	1e5a      	subs	r2, r3, #1
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1e5c      	subs	r4, r3, #1
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4623      	mov	r3, r4
 80029bc:	f001 facc 	bl	8003f58 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(x1 + 1, y1, x2, y1 + 1, outlineColour);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1c58      	adds	r0, r3, #1
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	f001 fac1 	bl	8003f58 <fill_rectangle>
	//Left border
	fill_rectangle(x1, y1 + 1, x1 + 1, y2, outlineColour);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1c59      	adds	r1, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f001 fab7 	bl	8003f58 <fill_rectangle>
	//Bottom border
	fill_rectangle(x1 + 1, y2, x2, y2 + 1, outlineColour);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1c58      	adds	r0, r3, #1
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	6939      	ldr	r1, [r7, #16]
 80029fc:	f001 faac 	bl	8003f58 <fill_rectangle>
	//Right border
	fill_rectangle(x2, y1 + 1, x2 + 1, y2, outlineColour);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	1c59      	adds	r1, r3, #1
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f001 faa2 	bl	8003f58 <fill_rectangle>
	//Write the text
	draw_fast_char(x1 + 12, y1 + 16, c, textColour, fillColour);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f103 000c 	add.w	r0, r3, #12
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f103 0110 	add.w	r1, r3, #16
 8002a20:	79fa      	ldrb	r2, [r7, #7]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f001 fb90 	bl	800414c <draw_fast_char>
}
 8002a2c:	bf00      	nop
 8002a2e:	372c      	adds	r7, #44	; 0x2c
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd90      	pop	{r4, r7, pc}

08002a34 <DM_NumPad_onPress>:

/**
 * Intrinsic onPress function for the number pad. Determines which button was pressed
 * then hands off to the user-defined onPress function.
 */
void DM_NumPad_onPress(int id, int x, int y) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
	const int buttonSize = 50;
 8002a40:	2332      	movs	r3, #50	; 0x32
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
	const int buttonMargin = 10;
 8002a44:	230a      	movs	r3, #10
 8002a46:	623b      	str	r3, [r7, #32]

	//Figure out which number was pressed.
	//The number are arranged in a 3x4

	//Calculate the X and Y axis location in button-space
	int xIndex = (int) ((x - elements[id].x1) / (buttonSize + buttonMargin));
 8002a48:	4a2d      	ldr	r2, [pc, #180]	; (8002b00 <DM_NumPad_onPress+0xcc>)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	215c      	movs	r1, #92	; 0x5c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3304      	adds	r3, #4
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1a9a      	subs	r2, r3, r2
 8002a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	440b      	add	r3, r1
 8002a64:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a68:	61fb      	str	r3, [r7, #28]
	int yIndex = (int) ((y - elements[id].y1) / (buttonSize + buttonMargin));
 8002a6a:	4a25      	ldr	r2, [pc, #148]	; (8002b00 <DM_NumPad_onPress+0xcc>)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	215c      	movs	r1, #92	; 0x5c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3306      	adds	r3, #6
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	1a9a      	subs	r2, r3, r2
 8002a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	440b      	add	r3, r1
 8002a86:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a8a:	61bb      	str	r3, [r7, #24]

	//Work out the index
	int index = xIndex + (yIndex * 3) + 1;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	441a      	add	r2, r3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]

	//Report the number that's selected
	elements[id].selected = index;
 8002a9c:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <DM_NumPad_onPress+0xcc>)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	215c      	movs	r1, #92	; 0x5c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3310      	adds	r3, #16
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	601a      	str	r2, [r3, #0]

	//If a text box is selected, then update its string
	if(elements[focusedElement].type == TEXTBOX) {
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <DM_NumPad_onPress+0xd0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <DM_NumPad_onPress+0xcc>)
 8002ab4:	215c      	movs	r1, #92	; 0x5c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b0d      	cmp	r3, #13
 8002ac0:	d105      	bne.n	8002ace <DM_NumPad_onPress+0x9a>
		updateTextBox(focusedElement, index);
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <DM_NumPad_onPress+0xd0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6979      	ldr	r1, [r7, #20]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f81d 	bl	8002b08 <updateTextBox>
	}

	//Call any user-defind onPress function
	if(elements[id].onPress)
 8002ace:	4a0c      	ldr	r2, [pc, #48]	; (8002b00 <DM_NumPad_onPress+0xcc>)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	215c      	movs	r1, #92	; 0x5c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	3344      	adds	r3, #68	; 0x44
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <DM_NumPad_onPress+0xc2>
		elements[id].onPress(id);
 8002ae2:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <DM_NumPad_onPress+0xcc>)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	215c      	movs	r1, #92	; 0x5c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3344      	adds	r3, #68	; 0x44
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	4798      	blx	r3
}
 8002af6:	bf00      	nop
 8002af8:	3728      	adds	r7, #40	; 0x28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000455c 	.word	0x2000455c
 8002b04:	200050e0 	.word	0x200050e0

08002b08 <updateTextBox>:

/**
 * Updates the currently selected text box with the button press
 */
void updateTextBox(int id, int num) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]

	int len = strlen(elements[id].text);
 8002b12:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <updateTextBox+0x9c>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	215c      	movs	r1, #92	; 0x5c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	332c      	adds	r3, #44	; 0x2c
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fb54 	bl	80001d0 <strlen>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60fb      	str	r3, [r7, #12]

	//convert the index to a character
	//The numbers count up from 1, with 0 being reserved as NULL.
	//So the number zero is actually 11, and backspace is 12.
	if(num == 11)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b0b      	cmp	r3, #11
 8002b30:	d101      	bne.n	8002b36 <updateTextBox+0x2e>
		num = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	603b      	str	r3, [r7, #0]

	//If the num is 12 then it's a backspace, otherwise it's a digit
	if(num == 12) {
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d10d      	bne.n	8002b58 <updateTextBox+0x50>
		//Change the last character to null
		elements[id].text[len - 1] = '\0';
 8002b3c:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <updateTextBox+0x9c>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	215c      	movs	r1, #92	; 0x5c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	332c      	adds	r3, #44	; 0x2c
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	e01d      	b.n	8002b94 <updateTextBox+0x8c>
	} else {
		//Check we don't overrun the maxLength of the box
		if(len < elements[id].maxLength) {
 8002b58:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <updateTextBox+0x9c>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	215c      	movs	r1, #92	; 0x5c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3338      	adds	r3, #56	; 0x38
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	da12      	bge.n	8002b94 <updateTextBox+0x8c>
			//Calculate the new char and add it to the text string
			char c = num + 48;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3330      	adds	r3, #48	; 0x30
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	72fb      	strb	r3, [r7, #11]
			strncat(elements[id].text, &c, 1);
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <updateTextBox+0x9c>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	215c      	movs	r1, #92	; 0x5c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	332c      	adds	r3, #44	; 0x2c
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f107 010b 	add.w	r1, r7, #11
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f00a f960 	bl	800ce54 <strncat>
		}
	}

	//Register the element for update.
	DM_Refresh_Element(id);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff f91b 	bl	8001dd0 <DM_Refresh_Element>
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000455c 	.word	0x2000455c

08002ba8 <DM_New_Text>:
void DM_Fast_Text(int id);

/**
 * Various string drawing elements. Just puts the string on teh screen with nothing extra.
 */
struct DisplayElement DM_New_Text(int x, int y, int colour, int size, char* text){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b09c      	sub	sp, #112	; 0x70
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
	struct DisplayElement string = getDefaultElement();
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff faf4 	bl	80021a8 <getDefaultElement>
	string.type = TEXT;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	613b      	str	r3, [r7, #16]
	string.x1 = x; string.y1 = y;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	82bb      	strh	r3, [r7, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	82fb      	strh	r3, [r7, #22]
	//Have to calculate the length to make a prpoer hit box
	int strLen = DM_StrLen(text, 128);
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002bd4:	f7ff f958 	bl	8001e88 <DM_StrLen>
 8002bd8:	66f8      	str	r0, [r7, #108]	; 0x6c
	string.x2 = x + ((strLen + 1) * 8); string.y2 = y + 14;
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	833b      	strh	r3, [r7, #24]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	330e      	adds	r3, #14
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	837b      	strh	r3, [r7, #26]
	string.size = size;
 8002bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bfa:	61fb      	str	r3, [r7, #28]
	string.colour = colour;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
	string.text = text;
 8002c00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
	string.draw = DM_Text;
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <DM_New_Text+0x80>)
 8002c06:	653b      	str	r3, [r7, #80]	; 0x50
	string.refresh = ONCE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	return string;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	225c      	movs	r2, #92	; 0x5c
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f009 ffd7 	bl	800cbcc <memcpy>
}
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	3770      	adds	r7, #112	; 0x70
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	08002c2d 	.word	0x08002c2d

08002c2c <DM_Text>:
void DM_Text(int id){
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	6078      	str	r0, [r7, #4]
	draw_string(elements[id].x1, elements[id].y1, elements[id].colour, elements[id].size, elements[id].text);
 8002c34:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <DM_Text+0x70>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	215c      	movs	r1, #92	; 0x5c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3304      	adds	r3, #4
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	461d      	mov	r5, r3
 8002c46:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <DM_Text+0x70>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	215c      	movs	r1, #92	; 0x5c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3306      	adds	r3, #6
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	461e      	mov	r6, r3
 8002c58:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <DM_Text+0x70>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	215c      	movs	r1, #92	; 0x5c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3314      	adds	r3, #20
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	490c      	ldr	r1, [pc, #48]	; (8002c9c <DM_Text+0x70>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	205c      	movs	r0, #92	; 0x5c
 8002c6e:	fb00 f303 	mul.w	r3, r0, r3
 8002c72:	440b      	add	r3, r1
 8002c74:	330c      	adds	r3, #12
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	4808      	ldr	r0, [pc, #32]	; (8002c9c <DM_Text+0x70>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	245c      	movs	r4, #92	; 0x5c
 8002c7e:	fb04 f303 	mul.w	r3, r4, r3
 8002c82:	4403      	add	r3, r0
 8002c84:	332c      	adds	r3, #44	; 0x2c
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4631      	mov	r1, r6
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f001 fac4 	bl	800421c <draw_string>
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c9c:	2000455c 	.word	0x2000455c

08002ca0 <DM_New_Fast_Text>:
struct DisplayElement DM_New_Fast_Text(int x, int y, int colour, int backgroundColour, char* text){
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b09c      	sub	sp, #112	; 0x70
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
	struct DisplayElement string = getDefaultElement();
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fa78 	bl	80021a8 <getDefaultElement>
	string.type = FASTTEXT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	613b      	str	r3, [r7, #16]
	string.x1 = x; string.y1 = y;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	82bb      	strh	r3, [r7, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	82fb      	strh	r3, [r7, #22]
	//Have to calculate the length to make a prpoer hit box
	int strLen = DM_StrLen(text, 128);
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002ccc:	f7ff f8dc 	bl	8001e88 <DM_StrLen>
 8002cd0:	66f8      	str	r0, [r7, #108]	; 0x6c
	string.x2 = x + ((strLen + 1) * 8); string.y2 = y + 14;
 8002cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	833b      	strh	r3, [r7, #24]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	330e      	adds	r3, #14
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	837b      	strh	r3, [r7, #26]
	string.colour = colour;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
	string.bgColour = backgroundColour;
 8002cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	string.text = text;
 8002cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
	string.draw = DM_Fast_Text;
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <DM_New_Fast_Text+0x80>)
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50
	string.refresh = ONCE;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	return string;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f107 0310 	add.w	r3, r7, #16
 8002d0e:	225c      	movs	r2, #92	; 0x5c
 8002d10:	4619      	mov	r1, r3
 8002d12:	f009 ff5b 	bl	800cbcc <memcpy>
}
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	3770      	adds	r7, #112	; 0x70
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	08002d25 	.word	0x08002d25

08002d24 <DM_Fast_Text>:
void DM_Fast_Text(int id){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	6078      	str	r0, [r7, #4]
	draw_fast_string(elements[id].x1, elements[id].y1, elements[id].colour, elements[id].bgColour, elements[id].text);
 8002d2c:	4a19      	ldr	r2, [pc, #100]	; (8002d94 <DM_Fast_Text+0x70>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	215c      	movs	r1, #92	; 0x5c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3304      	adds	r3, #4
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	461d      	mov	r5, r3
 8002d3e:	4a15      	ldr	r2, [pc, #84]	; (8002d94 <DM_Fast_Text+0x70>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	215c      	movs	r1, #92	; 0x5c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3306      	adds	r3, #6
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461e      	mov	r6, r3
 8002d50:	4a10      	ldr	r2, [pc, #64]	; (8002d94 <DM_Fast_Text+0x70>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	215c      	movs	r1, #92	; 0x5c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <DM_Fast_Text+0x70>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	205c      	movs	r0, #92	; 0x5c
 8002d66:	fb00 f303 	mul.w	r3, r0, r3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3318      	adds	r3, #24
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	4808      	ldr	r0, [pc, #32]	; (8002d94 <DM_Fast_Text+0x70>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	245c      	movs	r4, #92	; 0x5c
 8002d76:	fb04 f303 	mul.w	r3, r4, r3
 8002d7a:	4403      	add	r3, r0
 8002d7c:	332c      	adds	r3, #44	; 0x2c
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	460b      	mov	r3, r1
 8002d84:	4631      	mov	r1, r6
 8002d86:	4628      	mov	r0, r5
 8002d88:	f001 fa78 	bl	800427c <draw_fast_string>
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d94:	2000455c 	.word	0x2000455c

08002d98 <DM_New_TextBox>:

/**
 * Creates a Text Box display element for use in the elements array.
 * NOTE: the "Title" property is used for Placeholder Text in this case.
 */
struct DisplayElement DM_New_TextBox(int x, int y, int length, char *placeholderText, char *text) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b09c      	sub	sp, #112	; 0x70
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
	struct DisplayElement textBox = getDefaultElement();
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff f9fc 	bl	80021a8 <getDefaultElement>
	textBox.type = TEXTBOX;
 8002db0:	230d      	movs	r3, #13
 8002db2:	617b      	str	r3, [r7, #20]
	textBox.x1 = x; textBox.y1 = y;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	833b      	strh	r3, [r7, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	837b      	strh	r3, [r7, #26]
	textBox.x2 = x + (length * 18) + 10;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	00d2      	lsls	r2, r2, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	330a      	adds	r3, #10
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	83bb      	strh	r3, [r7, #28]
	textBox.y2 = y + 30;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	331e      	adds	r3, #30
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	83fb      	strh	r3, [r7, #30]

	textBox.selected = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
	textBox.size = 2;
 8002dea:	2302      	movs	r3, #2
 8002dec:	623b      	str	r3, [r7, #32]
	textBox.text = text;
 8002dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002df0:	643b      	str	r3, [r7, #64]	; 0x40
	textBox.title = placeholderText;
 8002df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
	textBox.draw = DM_TextBox;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <DM_New_TextBox+0x88>)
 8002df8:	657b      	str	r3, [r7, #84]	; 0x54
	textBox.refresh = ALWAYS;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	textBox.canFocus = 1;
 8002e00:	2301      	movs	r3, #1
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
	textBox.maxLength = length;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c

	return textBox;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	225c      	movs	r2, #92	; 0x5c
 8002e12:	4619      	mov	r1, r3
 8002e14:	f009 feda 	bl	800cbcc <memcpy>
}
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	3770      	adds	r7, #112	; 0x70
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	08002e25 	.word	0x08002e25

08002e24 <DM_TextBox>:

void DM_TextBox(int id) {
 8002e24:	b5b0      	push	{r4, r5, r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	6078      	str	r0, [r7, #4]
	//Select some appropriate colours
	int fillColour = COLOR_WHITE;
 8002e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e30:	617b      	str	r3, [r7, #20]
	if(elements[id].selected != 0 && focusedElement == id)
 8002e32:	4a9d      	ldr	r2, [pc, #628]	; (80030a8 <DM_TextBox+0x284>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	215c      	movs	r1, #92	; 0x5c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3310      	adds	r3, #16
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <DM_TextBox+0x32>
 8002e46:	4b99      	ldr	r3, [pc, #612]	; (80030ac <DM_TextBox+0x288>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d102      	bne.n	8002e56 <DM_TextBox+0x32>
		fillColour = COLOR_LIGHTBLUE;
 8002e50:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 8002e54:	617b      	str	r3, [r7, #20]

	int textColour = COLOR_BLACK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
	int placeholderTextColour = COLOR_LIGHTGRAY;
 8002e5a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e5e:	60fb      	str	r3, [r7, #12]
	int outlineColour = COLOR_GRAY;
 8002e60:	f248 4310 	movw	r3, #33808	; 0x8410
 8002e64:	60bb      	str	r3, [r7, #8]

	//Draw a nice box
	//Draw the background
	fill_rectangle(elements[id].x1 + 1, elements[id].y1 + 1, elements[id].x2 - 1, elements[id].y2 - 1, fillColour);
 8002e66:	4a90      	ldr	r2, [pc, #576]	; (80030a8 <DM_TextBox+0x284>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	215c      	movs	r1, #92	; 0x5c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	1c58      	adds	r0, r3, #1
 8002e78:	4a8b      	ldr	r2, [pc, #556]	; (80030a8 <DM_TextBox+0x284>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	215c      	movs	r1, #92	; 0x5c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3306      	adds	r3, #6
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	4a87      	ldr	r2, [pc, #540]	; (80030a8 <DM_TextBox+0x284>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	245c      	movs	r4, #92	; 0x5c
 8002e90:	fb04 f303 	mul.w	r3, r4, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3308      	adds	r3, #8
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	1e5a      	subs	r2, r3, #1
 8002e9c:	4c82      	ldr	r4, [pc, #520]	; (80030a8 <DM_TextBox+0x284>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	255c      	movs	r5, #92	; 0x5c
 8002ea2:	fb05 f303 	mul.w	r3, r5, r3
 8002ea6:	4423      	add	r3, r4
 8002ea8:	330a      	adds	r3, #10
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	1e5c      	subs	r4, r3, #1
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	f001 f850 	bl	8003f58 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(elements[id].x1 + 1, elements[id].y1, elements[id].x2, elements[id].y1 + 1, outlineColour);
 8002eb8:	4a7b      	ldr	r2, [pc, #492]	; (80030a8 <DM_TextBox+0x284>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	215c      	movs	r1, #92	; 0x5c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	1c58      	adds	r0, r3, #1
 8002eca:	4a77      	ldr	r2, [pc, #476]	; (80030a8 <DM_TextBox+0x284>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	215c      	movs	r1, #92	; 0x5c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3306      	adds	r3, #6
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	461c      	mov	r4, r3
 8002edc:	4a72      	ldr	r2, [pc, #456]	; (80030a8 <DM_TextBox+0x284>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	215c      	movs	r1, #92	; 0x5c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3308      	adds	r3, #8
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	461d      	mov	r5, r3
 8002eee:	4a6e      	ldr	r2, [pc, #440]	; (80030a8 <DM_TextBox+0x284>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	215c      	movs	r1, #92	; 0x5c
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3306      	adds	r3, #6
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	462a      	mov	r2, r5
 8002f08:	4621      	mov	r1, r4
 8002f0a:	f001 f825 	bl	8003f58 <fill_rectangle>
	//Left border
	fill_rectangle(elements[id].x1, elements[id].y1 + 1, elements[id].x1 + 1, elements[id].y2, outlineColour);
 8002f0e:	4a66      	ldr	r2, [pc, #408]	; (80030a8 <DM_TextBox+0x284>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	215c      	movs	r1, #92	; 0x5c
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	461d      	mov	r5, r3
 8002f20:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <DM_TextBox+0x284>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	215c      	movs	r1, #92	; 0x5c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3306      	adds	r3, #6
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	1c59      	adds	r1, r3, #1
 8002f32:	4a5d      	ldr	r2, [pc, #372]	; (80030a8 <DM_TextBox+0x284>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	205c      	movs	r0, #92	; 0x5c
 8002f38:	fb00 f303 	mul.w	r3, r0, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3304      	adds	r3, #4
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	4858      	ldr	r0, [pc, #352]	; (80030a8 <DM_TextBox+0x284>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	245c      	movs	r4, #92	; 0x5c
 8002f4a:	fb04 f303 	mul.w	r3, r4, r3
 8002f4e:	4403      	add	r3, r0
 8002f50:	330a      	adds	r3, #10
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 fffb 	bl	8003f58 <fill_rectangle>
	//Bottom border
	fill_rectangle(elements[id].x1 + 1, elements[id].y2, elements[id].x2, elements[id].y2 + 1, outlineColour);
 8002f62:	4a51      	ldr	r2, [pc, #324]	; (80030a8 <DM_TextBox+0x284>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	215c      	movs	r1, #92	; 0x5c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	1c58      	adds	r0, r3, #1
 8002f74:	4a4c      	ldr	r2, [pc, #304]	; (80030a8 <DM_TextBox+0x284>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	215c      	movs	r1, #92	; 0x5c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	330a      	adds	r3, #10
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	461c      	mov	r4, r3
 8002f86:	4a48      	ldr	r2, [pc, #288]	; (80030a8 <DM_TextBox+0x284>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	215c      	movs	r1, #92	; 0x5c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3308      	adds	r3, #8
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	461d      	mov	r5, r3
 8002f98:	4a43      	ldr	r2, [pc, #268]	; (80030a8 <DM_TextBox+0x284>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	215c      	movs	r1, #92	; 0x5c
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	330a      	adds	r3, #10
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	462a      	mov	r2, r5
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	f000 ffd0 	bl	8003f58 <fill_rectangle>
	//Right border
	fill_rectangle(elements[id].x2, elements[id].y1 + 1, elements[id].x2 + 1, elements[id].y2, outlineColour);
 8002fb8:	4a3b      	ldr	r2, [pc, #236]	; (80030a8 <DM_TextBox+0x284>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	215c      	movs	r1, #92	; 0x5c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	461d      	mov	r5, r3
 8002fca:	4a37      	ldr	r2, [pc, #220]	; (80030a8 <DM_TextBox+0x284>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	215c      	movs	r1, #92	; 0x5c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3306      	adds	r3, #6
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	1c59      	adds	r1, r3, #1
 8002fdc:	4a32      	ldr	r2, [pc, #200]	; (80030a8 <DM_TextBox+0x284>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	205c      	movs	r0, #92	; 0x5c
 8002fe2:	fb00 f303 	mul.w	r3, r0, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3308      	adds	r3, #8
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	482e      	ldr	r0, [pc, #184]	; (80030a8 <DM_TextBox+0x284>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	245c      	movs	r4, #92	; 0x5c
 8002ff4:	fb04 f303 	mul.w	r3, r4, r3
 8002ff8:	4403      	add	r3, r0
 8002ffa:	330a      	adds	r3, #10
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4603      	mov	r3, r0
 8003006:	4628      	mov	r0, r5
 8003008:	f000 ffa6 	bl	8003f58 <fill_rectangle>

	//Draw the placeholder text or string
	if(elements[id].text[0] == '\0') {
 800300c:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <DM_TextBox+0x284>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	215c      	movs	r1, #92	; 0x5c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	332c      	adds	r3, #44	; 0x2c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11f      	bne.n	8003062 <DM_TextBox+0x23e>
		//If there is no main text, then draw the placeholder
		draw_string(elements[id].x1 + 5, elements[id].y1 + 4, placeholderTextColour, 2, elements[id].title);
 8003022:	4a21      	ldr	r2, [pc, #132]	; (80030a8 <DM_TextBox+0x284>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	215c      	movs	r1, #92	; 0x5c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	3304      	adds	r3, #4
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	1d58      	adds	r0, r3, #5
 8003034:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <DM_TextBox+0x284>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	215c      	movs	r1, #92	; 0x5c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3306      	adds	r3, #6
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	1d19      	adds	r1, r3, #4
 8003046:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <DM_TextBox+0x284>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	245c      	movs	r4, #92	; 0x5c
 800304c:	fb04 f303 	mul.w	r3, r4, r3
 8003050:	4413      	add	r3, r2
 8003052:	3328      	adds	r3, #40	; 0x28
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2302      	movs	r3, #2
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	f001 f8de 	bl	800421c <draw_string>
	} else {
		draw_string(elements[id].x1 + 5, elements[id].y1 + 4, textColour, 2, elements[id].text);
	}
}
 8003060:	e01e      	b.n	80030a0 <DM_TextBox+0x27c>
		draw_string(elements[id].x1 + 5, elements[id].y1 + 4, textColour, 2, elements[id].text);
 8003062:	4a11      	ldr	r2, [pc, #68]	; (80030a8 <DM_TextBox+0x284>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	215c      	movs	r1, #92	; 0x5c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3304      	adds	r3, #4
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	1d58      	adds	r0, r3, #5
 8003074:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <DM_TextBox+0x284>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	215c      	movs	r1, #92	; 0x5c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3306      	adds	r3, #6
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	1d19      	adds	r1, r3, #4
 8003086:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <DM_TextBox+0x284>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	245c      	movs	r4, #92	; 0x5c
 800308c:	fb04 f303 	mul.w	r3, r4, r3
 8003090:	4413      	add	r3, r2
 8003092:	332c      	adds	r3, #44	; 0x2c
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2302      	movs	r3, #2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	f001 f8be 	bl	800421c <draw_string>
}
 80030a0:	bf00      	nop
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bdb0      	pop	{r4, r5, r7, pc}
 80030a8:	2000455c 	.word	0x2000455c
 80030ac:	200050e0 	.word	0x200050e0

080030b0 <DM_TextBox_onPress>:

/**
 * Handles highlighting a text box when it is selected
 */
void DM_TextBox_onPress(int id) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b0ae      	sub	sp, #184	; 0xb8
 80030b4:	af14      	add	r7, sp, #80	; 0x50
 80030b6:	6078      	str	r0, [r7, #4]
	//Report that this box is selected
	elements[id].selected = 1;
 80030b8:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <DM_TextBox_onPress+0x44>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	215c      	movs	r1, #92	; 0x5c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3310      	adds	r3, #16
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

	//Add a number pad to the screen for typing
	DM_Add_Element(DM_New_NumPad());
 80030ca:	f107 030c 	add.w	r3, r7, #12
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fb38 	bl	8002744 <DM_New_NumPad>
 80030d4:	4668      	mov	r0, sp
 80030d6:	f107 031c 	add.w	r3, r7, #28
 80030da:	224c      	movs	r2, #76	; 0x4c
 80030dc:	4619      	mov	r1, r3
 80030de:	f009 fd75 	bl	800cbcc <memcpy>
 80030e2:	f107 030c 	add.w	r3, r7, #12
 80030e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030e8:	f7fe fe88 	bl	8001dfc <DM_Add_Element>
}
 80030ec:	bf00      	nop
 80030ee:	3768      	adds	r7, #104	; 0x68
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	2000455c 	.word	0x2000455c

080030f8 <DM_New_TickBox>:
void DM_TickBox(int id);

/**
 * Create a new tick box element.
 */
struct DisplayElement DM_New_TickBox(int x, int y, int selected) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b09e      	sub	sp, #120	; 0x78
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
	const int width = 30;
 8003106:	231e      	movs	r3, #30
 8003108:	677b      	str	r3, [r7, #116]	; 0x74
	const int height = 30;
 800310a:	231e      	movs	r3, #30
 800310c:	673b      	str	r3, [r7, #112]	; 0x70
	struct DisplayElement box = getDefaultElement();
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff f848 	bl	80021a8 <getDefaultElement>
	box.type = TICKBOX;
 8003118:	230e      	movs	r3, #14
 800311a:	617b      	str	r3, [r7, #20]
	box.x1 = x; box.y1 = y;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	b29b      	uxth	r3, r3
 8003120:	833b      	strh	r3, [r7, #24]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	b29b      	uxth	r3, r3
 8003126:	837b      	strh	r3, [r7, #26]
	box.x2 = x + width; box.y2 = y + height;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	b29a      	uxth	r2, r3
 800312c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312e:	b29b      	uxth	r3, r3
 8003130:	4413      	add	r3, r2
 8003132:	b29b      	uxth	r3, r3
 8003134:	83bb      	strh	r3, [r7, #28]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	b29a      	uxth	r2, r3
 800313a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800313c:	b29b      	uxth	r3, r3
 800313e:	4413      	add	r3, r2
 8003140:	b29b      	uxth	r3, r3
 8003142:	83fb      	strh	r3, [r7, #30]
	box.state = ENABLED;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	box.selected = selected;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
	box.oldState = -1;
 800314e:	23ff      	movs	r3, #255	; 0xff
 8003150:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	box.draw = DM_TickBox;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <DM_New_TickBox+0x80>)
 8003156:	657b      	str	r3, [r7, #84]	; 0x54
	box.refresh = ONCE;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	return box;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4618      	mov	r0, r3
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	225c      	movs	r2, #92	; 0x5c
 8003168:	4619      	mov	r1, r3
 800316a:	f009 fd2f 	bl	800cbcc <memcpy>
}
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	3778      	adds	r7, #120	; 0x78
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	0800317d 	.word	0x0800317d

0800317c <DM_TickBox>:

/**
 * Draw funciton to draw the tick box to the display
 */
void DM_TickBox(int id) {
 800317c:	b5b0      	push	{r4, r5, r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af02      	add	r7, sp, #8
 8003182:	6078      	str	r0, [r7, #4]

	//Draw the background
	//fill_rectangle(elements[id].x1 + 1, elements[id].y1 + 1, elements[id].x2 - 1, elements[id].y2 - 1, SECONDARY_COLOUR);

	//Draw the outline
	empty_rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, PRIMARY_COLOUR, 1);
 8003184:	4a35      	ldr	r2, [pc, #212]	; (800325c <DM_TickBox+0xe0>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	215c      	movs	r1, #92	; 0x5c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	4a31      	ldr	r2, [pc, #196]	; (800325c <DM_TickBox+0xe0>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	215c      	movs	r1, #92	; 0x5c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3306      	adds	r3, #6
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	461c      	mov	r4, r3
 80031a8:	4a2c      	ldr	r2, [pc, #176]	; (800325c <DM_TickBox+0xe0>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	215c      	movs	r1, #92	; 0x5c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3308      	adds	r3, #8
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	461d      	mov	r5, r3
 80031ba:	4a28      	ldr	r2, [pc, #160]	; (800325c <DM_TickBox+0xe0>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	215c      	movs	r1, #92	; 0x5c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	330a      	adds	r3, #10
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	2301      	movs	r3, #1
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	f241 3358 	movw	r3, #4952	; 0x1358
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	462a      	mov	r2, r5
 80031da:	4621      	mov	r1, r4
 80031dc:	f000 fefe 	bl	8003fdc <empty_rectangle>

	//If the box is selected then draw check mark
	int box_fill = 0xF7BE;
 80031e0:	f24f 73be 	movw	r3, #63422	; 0xf7be
 80031e4:	60fb      	str	r3, [r7, #12]
	if(elements[id].selected == 1)
 80031e6:	4a1d      	ldr	r2, [pc, #116]	; (800325c <DM_TickBox+0xe0>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	215c      	movs	r1, #92	; 0x5c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3310      	adds	r3, #16
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <DM_TickBox+0x84>
		box_fill = CHECKED_COLOUR;
 80031fa:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80031fe:	60fb      	str	r3, [r7, #12]
	fill_rectangle(elements[id].x1 + 6, elements[id].y1 + 6, elements[id].x2 - 5, elements[id].y2 - 5, box_fill);
 8003200:	4a16      	ldr	r2, [pc, #88]	; (800325c <DM_TickBox+0xe0>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	215c      	movs	r1, #92	; 0x5c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3304      	adds	r3, #4
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	1d98      	adds	r0, r3, #6
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <DM_TickBox+0xe0>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	215c      	movs	r1, #92	; 0x5c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	3306      	adds	r3, #6
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	1d99      	adds	r1, r3, #6
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <DM_TickBox+0xe0>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	245c      	movs	r4, #92	; 0x5c
 800322a:	fb04 f303 	mul.w	r3, r4, r3
 800322e:	4413      	add	r3, r2
 8003230:	3308      	adds	r3, #8
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	1f5a      	subs	r2, r3, #5
 8003236:	4c09      	ldr	r4, [pc, #36]	; (800325c <DM_TickBox+0xe0>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	255c      	movs	r5, #92	; 0x5c
 800323c:	fb05 f303 	mul.w	r3, r5, r3
 8003240:	4423      	add	r3, r4
 8003242:	330a      	adds	r3, #10
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	1f5c      	subs	r4, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	4623      	mov	r3, r4
 800324e:	f000 fe83 	bl	8003f58 <fill_rectangle>
}
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bdb0      	pop	{r4, r5, r7, pc}
 800325a:	bf00      	nop
 800325c:	2000455c 	.word	0x2000455c

08003260 <DM_TickBox_onPress>:

/**
 * Intrinsic onPress function to update the state of the check box
 */
void DM_TickBox_onPress(int id) {
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

	//Change state
	if(elements[id].selected == 0)
 8003268:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <DM_TickBox_onPress+0x60>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	215c      	movs	r1, #92	; 0x5c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3310      	adds	r3, #16
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <DM_TickBox_onPress+0x30>
		elements[id].selected = 1;
 800327c:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <DM_TickBox_onPress+0x60>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	215c      	movs	r1, #92	; 0x5c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3310      	adds	r3, #16
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e008      	b.n	80032a2 <DM_TickBox_onPress+0x42>
	else
		elements[id].selected = 0;
 8003290:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <DM_TickBox_onPress+0x60>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	215c      	movs	r1, #92	; 0x5c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3310      	adds	r3, #16
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]

	elements[id].refresh = ONCE;
 80032a2:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <DM_TickBox_onPress+0x60>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	215c      	movs	r1, #92	; 0x5c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	333c      	adds	r3, #60	; 0x3c
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]

	return;
 80032b4:	bf00      	nop
}
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	2000455c 	.word	0x2000455c

080032c4 <DM_New_Title_Bar>:
void DM_Title_Bar(int id);

/**
 * Add a title bar to the top of the screen
 */
struct DisplayElement DM_New_Title_Bar(char *title) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b09a      	sub	sp, #104	; 0x68
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
	int height = 40;
 80032ce:	2328      	movs	r3, #40	; 0x28
 80032d0:	667b      	str	r3, [r7, #100]	; 0x64
	struct DisplayElement titleBar = getDefaultElement();
 80032d2:	f107 0308 	add.w	r3, r7, #8
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe ff66 	bl	80021a8 <getDefaultElement>
	titleBar.type = TITLEBAR;
 80032dc:	2307      	movs	r3, #7
 80032de:	60bb      	str	r3, [r7, #8]
	titleBar.x1 = 0; titleBar.y1 = 0; titleBar.x2 = WIDTH; titleBar.y2 = height;
 80032e0:	2300      	movs	r3, #0
 80032e2:	81bb      	strh	r3, [r7, #12]
 80032e4:	2300      	movs	r3, #0
 80032e6:	81fb      	strh	r3, [r7, #14]
 80032e8:	f240 13df 	movw	r3, #479	; 0x1df
 80032ec:	823b      	strh	r3, [r7, #16]
 80032ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	827b      	strh	r3, [r7, #18]
	titleBar.title = title;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
	titleBar.draw = DM_Title_Bar;
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <DM_New_Title_Bar+0x58>)
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
	titleBar.refresh = ONCE;
 80032fc:	2301      	movs	r3, #1
 80032fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	return titleBar;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	225c      	movs	r2, #92	; 0x5c
 800330c:	4619      	mov	r1, r3
 800330e:	f009 fc5d 	bl	800cbcc <memcpy>
}
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	3768      	adds	r7, #104	; 0x68
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	08003321 	.word	0x08003321

08003320 <DM_Title_Bar>:

void DM_Title_Bar(int id) {
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b08d      	sub	sp, #52	; 0x34
 8003324:	af04      	add	r7, sp, #16
 8003326:	6078      	str	r0, [r7, #4]
	int backgroundColour = COLOR_WHITE;
 8003328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332c:	61fb      	str	r3, [r7, #28]
	int foregroundColour = TITLE_COLOUR;
 800332e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003332:	61bb      	str	r3, [r7, #24]
	int textColour = COLOR_BLACK;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
	int halfWidth = (int)((elements[id].x2 - elements[id].x1) / 2);
 8003338:	4a4d      	ldr	r2, [pc, #308]	; (8003470 <DM_Title_Bar+0x150>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	215c      	movs	r1, #92	; 0x5c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3308      	adds	r3, #8
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	4a49      	ldr	r2, [pc, #292]	; (8003470 <DM_Title_Bar+0x150>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	215c      	movs	r1, #92	; 0x5c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3304      	adds	r3, #4
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	1ac3      	subs	r3, r0, r3
 800335c:	0fda      	lsrs	r2, r3, #31
 800335e:	4413      	add	r3, r2
 8003360:	105b      	asrs	r3, r3, #1
 8003362:	613b      	str	r3, [r7, #16]

	//Draw the background
	fill_gradient(elements[id].x1, elements[id].y1, halfWidth, elements[id].y2, backgroundColour, foregroundColour, HORIZONTAL);
 8003364:	4a42      	ldr	r2, [pc, #264]	; (8003470 <DM_Title_Bar+0x150>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	215c      	movs	r1, #92	; 0x5c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	3304      	adds	r3, #4
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	4a3e      	ldr	r2, [pc, #248]	; (8003470 <DM_Title_Bar+0x150>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	215c      	movs	r1, #92	; 0x5c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3306      	adds	r3, #6
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	461c      	mov	r4, r3
 8003388:	4a39      	ldr	r2, [pc, #228]	; (8003470 <DM_Title_Bar+0x150>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	215c      	movs	r1, #92	; 0x5c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	330a      	adds	r3, #10
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	2300      	movs	r3, #0
 800339c:	9302      	str	r3, [sp, #8]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4621      	mov	r1, r4
 80033ac:	f001 f86a 	bl	8004484 <fill_gradient>
	fill_gradient(halfWidth, elements[id].y1, elements[id].x2, elements[id].y2, foregroundColour, backgroundColour, HORIZONTAL);
 80033b0:	4a2f      	ldr	r2, [pc, #188]	; (8003470 <DM_Title_Bar+0x150>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	215c      	movs	r1, #92	; 0x5c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3306      	adds	r3, #6
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <DM_Title_Bar+0x150>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	215c      	movs	r1, #92	; 0x5c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3308      	adds	r3, #8
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	461c      	mov	r4, r3
 80033d4:	4a26      	ldr	r2, [pc, #152]	; (8003470 <DM_Title_Bar+0x150>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	215c      	movs	r1, #92	; 0x5c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	330a      	adds	r3, #10
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	2300      	movs	r3, #0
 80033e8:	9302      	str	r3, [sp, #8]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	4622      	mov	r2, r4
 80033f6:	4601      	mov	r1, r0
 80033f8:	6938      	ldr	r0, [r7, #16]
 80033fa:	f001 f843 	bl	8004484 <fill_gradient>

	//Center the text
	int titleLen = DM_StrLen(elements[id].title, 32);
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <DM_Title_Bar+0x150>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	215c      	movs	r1, #92	; 0x5c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3328      	adds	r3, #40	; 0x28
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2120      	movs	r1, #32
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe fd39 	bl	8001e88 <DM_StrLen>
 8003416:	60f8      	str	r0, [r7, #12]
	draw_string(halfWidth - (titleLen * 9), elements[id].y1 + 10, textColour, 2, elements[id].title);
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4613      	mov	r3, r2
 800341c:	075b      	lsls	r3, r3, #29
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	1a9a      	subs	r2, r3, r2
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	18d0      	adds	r0, r2, r3
 8003428:	4a11      	ldr	r2, [pc, #68]	; (8003470 <DM_Title_Bar+0x150>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	215c      	movs	r1, #92	; 0x5c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	3306      	adds	r3, #6
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	f103 010a 	add.w	r1, r3, #10
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <DM_Title_Bar+0x150>)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	245c      	movs	r4, #92	; 0x5c
 8003442:	fb04 f303 	mul.w	r3, r4, r3
 8003446:	4413      	add	r3, r2
 8003448:	3328      	adds	r3, #40	; 0x28
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2302      	movs	r3, #2
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	f000 fee3 	bl	800421c <draw_string>

	//The BACK button
	//draw_char(10, 10, '<', foregroundColour, 2);
	draw_bitmap_with_alpha(4, 4, COLOR_BLACK, 1, home_small);
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <DM_Title_Bar+0x154>)
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2301      	movs	r3, #1
 800345c:	2200      	movs	r2, #0
 800345e:	2104      	movs	r1, #4
 8003460:	2004      	movs	r0, #4
 8003462:	f000 ffad 	bl	80043c0 <draw_bitmap_with_alpha>
}
 8003466:	bf00      	nop
 8003468:	3724      	adds	r7, #36	; 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}
 800346e:	bf00      	nop
 8003470:	2000455c 	.word	0x2000455c
 8003474:	0800db80 	.word	0x0800db80

08003478 <DM_Title_Bar_onPress>:

/**
 * An intrinsic onPress function for the title bar.
 * Probably handles the BACK button, or maybe a menu later.
 */
void DM_Title_Bar_onPress(int id, int x, int y) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
	int size = 40; // Size of hit box
 8003484:	2328      	movs	r3, #40	; 0x28
 8003486:	617b      	str	r3, [r7, #20]

	//If the top-left corner is pressed then go to HOME
	if(x < 40 && y < 40)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b27      	cmp	r3, #39	; 0x27
 800348c:	dc05      	bgt.n	800349a <DM_Title_Bar_onPress+0x22>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b27      	cmp	r3, #39	; 0x27
 8003492:	dc02      	bgt.n	800349a <DM_Title_Bar_onPress+0x22>
		home_onPress(id);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7fd fc59 	bl	8000d4c <home_onPress>
}
 800349a:	bf00      	nop
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <DFPlayer_sendByte>:
#include "drivers/DFPlayer.h"

/**
 * Send a byte to the UART with flow control.
 */
void DFPlayer_sendByte(unsigned char data) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, &data, 1, 100);
 80034ae:	1df9      	adds	r1, r7, #7
 80034b0:	2364      	movs	r3, #100	; 0x64
 80034b2:	2201      	movs	r2, #1
 80034b4:	4803      	ldr	r0, [pc, #12]	; (80034c4 <DFPlayer_sendByte+0x20>)
 80034b6:	f005 feeb 	bl	8009290 <HAL_UART_Transmit>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20004484 	.word	0x20004484

080034c8 <DFPlayer_calculateChecksum>:
 * the commands look like yet)
 * 
 * Checksum = 0 - (0xFF + 0x06 + command + ACK + dataH + dataL) & 0xFFFF
 * 
 */
unsigned int DFPlayer_calculateChecksum(unsigned char command, unsigned char dataH, unsigned char dataL) {
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
 80034d2:	460b      	mov	r3, r1
 80034d4:	71bb      	strb	r3, [r7, #6]
 80034d6:	4613      	mov	r3, r2
 80034d8:	717b      	strb	r3, [r7, #5]
    unsigned int checksum = 0 - (0xFF + 0x06 + command + dataH + dataL);
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	f203 1205 	addw	r2, r3, #261	; 0x105
 80034e0:	79bb      	ldrb	r3, [r7, #6]
 80034e2:	441a      	add	r2, r3
 80034e4:	797b      	ldrb	r3, [r7, #5]
 80034e6:	4413      	add	r3, r2
 80034e8:	425b      	negs	r3, r3
 80034ea:	60fb      	str	r3, [r7, #12]
    checksum = checksum & 0xFFFF;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	60fb      	str	r3, [r7, #12]
    
    return checksum;
 80034f2:	68fb      	ldr	r3, [r7, #12]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <DFPlayer_sendCommand>:
/**
 * Send a command to the DFPlayer mini
 * Sends two data bytes.
 * Overloaded with another function to send only a single byte.
 */
void DFPlayer_sendCommand(unsigned char command, unsigned char dataH, unsigned char dataL) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
 800350a:	460b      	mov	r3, r1
 800350c:	71bb      	strb	r3, [r7, #6]
 800350e:	4613      	mov	r3, r2
 8003510:	717b      	strb	r3, [r7, #5]
    //Get the checksum
    unsigned int checksum = DFPlayer_calculateChecksum(command, dataH, dataL);
 8003512:	797a      	ldrb	r2, [r7, #5]
 8003514:	79b9      	ldrb	r1, [r7, #6]
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ffd5 	bl	80034c8 <DFPlayer_calculateChecksum>
 800351e:	60f8      	str	r0, [r7, #12]
    
    //Normal command structure
    DFPlayer_sendByte(0x7E);
 8003520:	207e      	movs	r0, #126	; 0x7e
 8003522:	f7ff ffbf 	bl	80034a4 <DFPlayer_sendByte>
    DFPlayer_sendByte(0xFF);
 8003526:	20ff      	movs	r0, #255	; 0xff
 8003528:	f7ff ffbc 	bl	80034a4 <DFPlayer_sendByte>
    DFPlayer_sendByte(0x06);
 800352c:	2006      	movs	r0, #6
 800352e:	f7ff ffb9 	bl	80034a4 <DFPlayer_sendByte>
    DFPlayer_sendByte(command);
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ffb5 	bl	80034a4 <DFPlayer_sendByte>
    DFPlayer_sendByte(0x00); //No ACK needed
 800353a:	2000      	movs	r0, #0
 800353c:	f7ff ffb2 	bl	80034a4 <DFPlayer_sendByte>
    DFPlayer_sendByte(dataH);
 8003540:	79bb      	ldrb	r3, [r7, #6]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ffae 	bl	80034a4 <DFPlayer_sendByte>
    DFPlayer_sendByte(dataL);
 8003548:	797b      	ldrb	r3, [r7, #5]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ffaa 	bl	80034a4 <DFPlayer_sendByte>
    DFPlayer_sendByte(checksum >> 8); //Checksum High byte
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffa4 	bl	80034a4 <DFPlayer_sendByte>
    DFPlayer_sendByte(checksum & 0xFF); //Checksum low byte
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff9f 	bl	80034a4 <DFPlayer_sendByte>
    DFPlayer_sendByte(0xEF);
 8003566:	20ef      	movs	r0, #239	; 0xef
 8003568:	f7ff ff9c 	bl	80034a4 <DFPlayer_sendByte>
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <DFPlayer_getResponse>:
/**
 * Sends a specified command to the module and then awaits a reply
 * 
 * BYO data buffer array
 */
void DFPlayer_getResponse(unsigned char command, unsigned char dataH, unsigned char dataL, unsigned char buff[]) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4603      	mov	r3, r0
 800357e:	71fb      	strb	r3, [r7, #7]
 8003580:	460b      	mov	r3, r1
 8003582:	71bb      	strb	r3, [r7, #6]
 8003584:	4613      	mov	r3, r2
 8003586:	717b      	strb	r3, [r7, #5]
    //Send the request command
    DFPlayer_sendCommand(command, dataH, dataL);
 8003588:	797a      	ldrb	r2, [r7, #5]
 800358a:	79b9      	ldrb	r1, [r7, #6]
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ffb6 	bl	8003500 <DFPlayer_sendCommand>
    /*
    for(int num_bytes = 0; num_bytes < 10; num_bytes++) 
        buff[num_bytes] = DFPlayer_getByte();
        */
    HAL_UART_Receive(&huart1, buff, 10, 250);
 8003594:	23fa      	movs	r3, #250	; 0xfa
 8003596:	220a      	movs	r2, #10
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	4803      	ldr	r0, [pc, #12]	; (80035a8 <DFPlayer_getResponse+0x34>)
 800359c:	f005 ff0c 	bl	80093b8 <HAL_UART_Receive>
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20004484 	.word	0x20004484

080035ac <DFPlayer_setPause>:
}

/**
 * Just sends the PAUSE command. No other data.
 */
void DFPlayer_setPause() {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
    DFPlayer_sendCommand(PAUSE, 0x00, 0x00);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	200e      	movs	r0, #14
 80035b6:	f7ff ffa3 	bl	8003500 <DFPlayer_sendCommand>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}

080035be <DFPlayer_getStatus>:
}

/**
 * Get the current status of the device
 */
int DFPlayer_getStatus() {
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
    unsigned char data[10];
    //Feed the response in to the array
    DFPlayer_getResponse(QUERY_STATUS, 0x00, 0x00, data);
 80035c4:	1d3b      	adds	r3, r7, #4
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	2042      	movs	r0, #66	; 0x42
 80035cc:	f7ff ffd2 	bl	8003574 <DFPlayer_getResponse>
    
    //Return the interesting part of the returned data
    return data[6];
 80035d0:	7abb      	ldrb	r3, [r7, #10]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <DFPlayer_getTracksInFolder>:
}

/**
 * Queries the number of tracks in a specified folder
 */
int DFPlayer_getTracksInFolder(int folder) {
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
    unsigned char data[10];
    //Feed the response in to the array
    DFPlayer_getResponse(QUERY_TRACKS_IN_FOLDER, (folder >> 8), (folder & 0xFF), data);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	121b      	asrs	r3, r3, #8
 80035e6:	b2d9      	uxtb	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	204e      	movs	r0, #78	; 0x4e
 80035f2:	f7ff ffbf 	bl	8003574 <DFPlayer_getResponse>
    
    //Return the interesting part of the returned data
    return data[6];
 80035f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <DFPlayer_resetModule>:

/**
 * Sends the soft reset command
 */
void DFPlayer_resetModule() {
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
    DFPlayer_sendCommand(RESET, 0x00, 0x00);
 8003604:	2200      	movs	r2, #0
 8003606:	2100      	movs	r1, #0
 8003608:	200c      	movs	r0, #12
 800360a:	f7ff ff79 	bl	8003500 <DFPlayer_sendCommand>
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <RTC_update_clock>:
const int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

/*
 * Updates the RTC with a new time and date
 */
void RTC_update_clock(struct Time newTime) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af04      	add	r7, sp, #16
 800361a:	1d3b      	adds	r3, r7, #4
 800361c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    //Convert data to a format friendly for the device
	unsigned char newData[7];
    newData[0] = RTC_convert_decimal_to_seconds(newTime.seconds);
 8003620:	793b      	ldrb	r3, [r7, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f8f1 	bl	800380a <RTC_convert_decimal_to_seconds>
 8003628:	4603      	mov	r3, r0
 800362a:	743b      	strb	r3, [r7, #16]
    newData[1] = RTC_convert_decimal_to_seconds(newTime.minutes);
 800362c:	797b      	ldrb	r3, [r7, #5]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f8eb 	bl	800380a <RTC_convert_decimal_to_seconds>
 8003634:	4603      	mov	r3, r0
 8003636:	747b      	strb	r3, [r7, #17]
    newData[2] = RTC_convert_decimal_to_seconds(newTime.hours);
 8003638:	79bb      	ldrb	r3, [r7, #6]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f8e5 	bl	800380a <RTC_convert_decimal_to_seconds>
 8003640:	4603      	mov	r3, r0
 8003642:	74bb      	strb	r3, [r7, #18]
    newData[3] = dayOfTheWeek(newTime) + 1;
 8003644:	1d3b      	adds	r3, r7, #4
 8003646:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800364a:	f000 f94b 	bl	80038e4 <dayOfTheWeek>
 800364e:	4603      	mov	r3, r0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	3301      	adds	r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	74fb      	strb	r3, [r7, #19]
    newData[4] = RTC_convert_decimal_to_seconds(newTime.day);
 8003658:	7a3b      	ldrb	r3, [r7, #8]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f8d5 	bl	800380a <RTC_convert_decimal_to_seconds>
 8003660:	4603      	mov	r3, r0
 8003662:	753b      	strb	r3, [r7, #20]
    newData[5] = RTC_convert_decimal_to_seconds(newTime.month);
 8003664:	7a7b      	ldrb	r3, [r7, #9]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f8cf 	bl	800380a <RTC_convert_decimal_to_seconds>
 800366c:	4603      	mov	r3, r0
 800366e:	757b      	strb	r3, [r7, #21]
    newData[6] = RTC_convert_decimal_to_seconds(newTime.year - 2000);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f8c7 	bl	800380a <RTC_convert_decimal_to_seconds>
 800367c:	4603      	mov	r3, r0
 800367e:	75bb      	strb	r3, [r7, #22]
    
	if(HAL_I2C_IsDeviceReady (&hi2c1, DS3231_ADDR << 1, 10, 250) == HAL_OK) {
 8003680:	23fa      	movs	r3, #250	; 0xfa
 8003682:	220a      	movs	r2, #10
 8003684:	21d0      	movs	r1, #208	; 0xd0
 8003686:	480b      	ldr	r0, [pc, #44]	; (80036b4 <RTC_update_clock+0xa0>)
 8003688:	f003 faa8 	bl	8006bdc <HAL_I2C_IsDeviceReady>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <RTC_update_clock+0x98>
			//Write the new time/date data to the clock
			HAL_I2C_Mem_Write (&hi2c1, DS3231_ADDR << 1, DS3231_SECONDS, I2C_MEMADD_SIZE_8BIT, newData, 7, 250);
 8003692:	23fa      	movs	r3, #250	; 0xfa
 8003694:	9302      	str	r3, [sp, #8]
 8003696:	2307      	movs	r3, #7
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	f107 0310 	add.w	r3, r7, #16
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2301      	movs	r3, #1
 80036a2:	2200      	movs	r2, #0
 80036a4:	21d0      	movs	r1, #208	; 0xd0
 80036a6:	4803      	ldr	r0, [pc, #12]	; (80036b4 <RTC_update_clock+0xa0>)
 80036a8:	f003 f86a 	bl	8006780 <HAL_I2C_Mem_Write>
	}
}
 80036ac:	bf00      	nop
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200043cc 	.word	0x200043cc

080036b8 <RTC_get_time_date>:

/*
 * Returns a time struct of the current time and date
 */
struct Time RTC_get_time_date() {
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b08d      	sub	sp, #52	; 0x34
 80036bc:	af04      	add	r7, sp, #16
 80036be:	6078      	str	r0, [r7, #4]
    unsigned char timeDate[7];
    struct Time newTime;
    
    //Get the whole chunk of ram as one stream
	if(HAL_I2C_IsDeviceReady (&hi2c1, DS3231_ADDR << 1, 10, 250) == HAL_OK)
 80036c0:	23fa      	movs	r3, #250	; 0xfa
 80036c2:	220a      	movs	r2, #10
 80036c4:	21d0      	movs	r1, #208	; 0xd0
 80036c6:	4827      	ldr	r0, [pc, #156]	; (8003764 <RTC_get_time_date+0xac>)
 80036c8:	f003 fa88 	bl	8006bdc <HAL_I2C_IsDeviceReady>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <RTC_get_time_date+0x34>
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR << 1, DS3231_SECONDS, I2C_MEMADD_SIZE_8BIT, timeDate, 7, 250);
 80036d2:	23fa      	movs	r3, #250	; 0xfa
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	2307      	movs	r3, #7
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	f107 0318 	add.w	r3, r7, #24
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2301      	movs	r3, #1
 80036e2:	2200      	movs	r2, #0
 80036e4:	21d0      	movs	r1, #208	; 0xd0
 80036e6:	481f      	ldr	r0, [pc, #124]	; (8003764 <RTC_get_time_date+0xac>)
 80036e8:	f003 f95e 	bl	80069a8 <HAL_I2C_Mem_Read>
    
    //Have to convert these numbers from the weird HEX format to regular
    //decimal format.
    newTime.seconds = RTC_convert_seconds_to_decimal(timeDate[0]);
 80036ec:	7e3b      	ldrb	r3, [r7, #24]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f83a 	bl	8003768 <RTC_convert_seconds_to_decimal>
 80036f4:	4603      	mov	r3, r0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	733b      	strb	r3, [r7, #12]
    newTime.minutes = RTC_convert_seconds_to_decimal(timeDate[1]);
 80036fa:	7e7b      	ldrb	r3, [r7, #25]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f833 	bl	8003768 <RTC_convert_seconds_to_decimal>
 8003702:	4603      	mov	r3, r0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	737b      	strb	r3, [r7, #13]
    newTime.hours = RTC_convert_hours_to_decimal(timeDate[2]);
 8003708:	7ebb      	ldrb	r3, [r7, #26]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f847 	bl	800379e <RTC_convert_hours_to_decimal>
 8003710:	4603      	mov	r3, r0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	73bb      	strb	r3, [r7, #14]
    newTime.weekday = timeDate[3] - 1;
 8003716:	7efb      	ldrb	r3, [r7, #27]
 8003718:	3b01      	subs	r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	73fb      	strb	r3, [r7, #15]
    newTime.day = RTC_convert_date_to_decimal(timeDate[4]);
 800371e:	7f3b      	ldrb	r3, [r7, #28]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f857 	bl	80037d4 <RTC_convert_date_to_decimal>
 8003726:	4603      	mov	r3, r0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	743b      	strb	r3, [r7, #16]
    //We can re-use the hours and seconds conversion here.
    newTime.month = RTC_convert_hours_to_decimal(timeDate[5]);
 800372c:	7f7b      	ldrb	r3, [r7, #29]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f835 	bl	800379e <RTC_convert_hours_to_decimal>
 8003734:	4603      	mov	r3, r0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	747b      	strb	r3, [r7, #17]
    newTime.year = RTC_convert_seconds_to_decimal(timeDate[6]) + 2000;
 800373a:	7fbb      	ldrb	r3, [r7, #30]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f813 	bl	8003768 <RTC_convert_seconds_to_decimal>
 8003742:	4603      	mov	r3, r0
 8003744:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003748:	617b      	str	r3, [r7, #20]
    
    return newTime;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	461c      	mov	r4, r3
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	3724      	adds	r7, #36	; 0x24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd90      	pop	{r4, r7, pc}
 8003762:	bf00      	nop
 8003764:	200043cc 	.word	0x200043cc

08003768 <RTC_convert_seconds_to_decimal>:

/*
 * Converts a value from the RTC's werid memory format in to a regular
 * decimal number.
 */
int RTC_convert_seconds_to_decimal(unsigned char data) {
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0xF0) >> 4) * 10;
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
    int seconds = data & 0x0F;
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	60bb      	str	r3, [r7, #8]
    
    return tens + seconds;
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4413      	add	r3, r2
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <RTC_convert_hours_to_decimal>:
/*
 * Converts the hours register to a decimal value
 */
int RTC_convert_hours_to_decimal(unsigned char data) {
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4603      	mov	r3, r0
 80037a6:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0x30) >> 4) * 10;
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	111b      	asrs	r3, r3, #4
 80037ac:	f003 0203 	and.w	r2, r3, #3
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
    int digits = data & 0x0F;
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	60bb      	str	r3, [r7, #8]
    
    return tens + digits;
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4413      	add	r3, r2
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <RTC_convert_date_to_decimal>:
/*
 * Converts the DATE register in to a decimal representation
 */
int RTC_convert_date_to_decimal(unsigned char data) {
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0x30) >> 4) * 10;
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	111b      	asrs	r3, r3, #4
 80037e2:	f003 0203 	and.w	r2, r3, #3
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
    int digits = data & 0x0F;
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	60bb      	str	r3, [r7, #8]
    
    return tens + digits;
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4413      	add	r3, r2
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <RTC_convert_decimal_to_seconds>:
/*
 * Converts an integer in to the the format needed for the RTC
 * seconds, minutes, and years register
 */
unsigned char RTC_convert_decimal_to_seconds(int data) {
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
    int tens = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
    //Count the number of tens
    while(data > 9) {
 8003816:	e005      	b.n	8003824 <RTC_convert_decimal_to_seconds+0x1a>
        data -= 10;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3b0a      	subs	r3, #10
 800381c:	607b      	str	r3, [r7, #4]
        tens++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3301      	adds	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
    while(data > 9) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b09      	cmp	r3, #9
 8003828:	dcf6      	bgt.n	8003818 <RTC_convert_decimal_to_seconds+0xe>
    }
    
    //Number of seconds is is whatever is left over
    
    return (tens << 4) | data;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	b25a      	sxtb	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	b25b      	sxtb	r3, r3
 8003834:	4313      	orrs	r3, r2
 8003836:	b25b      	sxtb	r3, r3
 8003838:	b2db      	uxtb	r3, r3
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <checkTimeBounds>:
 * Gregorian calendar.
 * Makes sure that there are no negative numbers, no zeros in the date,
 * correct number of days in each month, etc.
 * If a value if incorrect it will be replaced with the nearest correct value.
 */
struct Time checkTimeBounds(struct Time testTime) {
 8003846:	b590      	push	{r4, r7, lr}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	4638      	mov	r0, r7
 8003850:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    
    //Check years
    if(testTime.year < 2022)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f240 72e5 	movw	r2, #2021	; 0x7e5
 800385a:	4293      	cmp	r3, r2
 800385c:	d802      	bhi.n	8003864 <checkTimeBounds+0x1e>
        testTime.year = 2022;
 800385e:	f240 73e6 	movw	r3, #2022	; 0x7e6
 8003862:	60bb      	str	r3, [r7, #8]
    //Check month
    if(testTime.month > 12)
 8003864:	797b      	ldrb	r3, [r7, #5]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d901      	bls.n	800386e <checkTimeBounds+0x28>
        testTime.month = 1;
 800386a:	2301      	movs	r3, #1
 800386c:	717b      	strb	r3, [r7, #5]
    if(testTime.month < 1)
 800386e:	797b      	ldrb	r3, [r7, #5]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <checkTimeBounds+0x32>
        testTime.month = 12;
 8003874:	230c      	movs	r3, #12
 8003876:	717b      	strb	r3, [r7, #5]
    //Check days - this is the tricky one
    if(testTime.day > getDaysInMonth(testTime.month, testTime.year))
 8003878:	793b      	ldrb	r3, [r7, #4]
 800387a:	461c      	mov	r4, r3
 800387c:	797b      	ldrb	r3, [r7, #5]
 800387e:	461a      	mov	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f000 f88d 	bl	80039a4 <getDaysInMonth>
 800388a:	4603      	mov	r3, r0
 800388c:	429c      	cmp	r4, r3
 800388e:	dd01      	ble.n	8003894 <checkTimeBounds+0x4e>
        testTime.day = 1;
 8003890:	2301      	movs	r3, #1
 8003892:	713b      	strb	r3, [r7, #4]
    if(testTime.day < 1)
 8003894:	793b      	ldrb	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <checkTimeBounds+0x68>
        testTime.day = getDaysInMonth(testTime.month, testTime.year);
 800389a:	797b      	ldrb	r3, [r7, #5]
 800389c:	461a      	mov	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f000 f87e 	bl	80039a4 <getDaysInMonth>
 80038a8:	4603      	mov	r3, r0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	713b      	strb	r3, [r7, #4]
    //Check hours
    if(testTime.hours < 0)
        testTime.hours = 23;
    if(testTime.hours > 23)
 80038ae:	78bb      	ldrb	r3, [r7, #2]
 80038b0:	2b17      	cmp	r3, #23
 80038b2:	d901      	bls.n	80038b8 <checkTimeBounds+0x72>
        testTime.hours = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	70bb      	strb	r3, [r7, #2]
    //Check minutes
    if(testTime.minutes < 0)
        testTime.minutes = 59;
    if(testTime.minutes > 59)
 80038b8:	787b      	ldrb	r3, [r7, #1]
 80038ba:	2b3b      	cmp	r3, #59	; 0x3b
 80038bc:	d901      	bls.n	80038c2 <checkTimeBounds+0x7c>
        testTime.minutes = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	707b      	strb	r3, [r7, #1]
    //Seconds
    if(testTime.seconds < 0)
        testTime.seconds = 59;
    if(testTime.seconds > 59)
 80038c2:	783b      	ldrb	r3, [r7, #0]
 80038c4:	2b3b      	cmp	r3, #59	; 0x3b
 80038c6:	d901      	bls.n	80038cc <checkTimeBounds+0x86>
        testTime.seconds = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	703b      	strb	r3, [r7, #0]
    
    return testTime;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	461c      	mov	r4, r3
 80038d0:	463b      	mov	r3, r7
 80038d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd90      	pop	{r4, r7, pc}
	...

080038e4 <dayOfTheWeek>:
/*
 * Calculates the day of the week.
 * Returns the day of the week as an integer beginning at
 * Sunday = 0
 */
int dayOfTheWeek(struct Time thisTime) {
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int adjustment, mm, yy;
    
 
	adjustment = (14 - thisTime.month) / 12;
 80038f0:	7a7b      	ldrb	r3, [r7, #9]
 80038f2:	f1c3 030e 	rsb	r3, r3, #14
 80038f6:	4a27      	ldr	r2, [pc, #156]	; (8003994 <dayOfTheWeek+0xb0>)
 80038f8:	fb82 1203 	smull	r1, r2, r2, r3
 80038fc:	1052      	asrs	r2, r2, #1
 80038fe:	17db      	asrs	r3, r3, #31
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	61fb      	str	r3, [r7, #28]
	mm = thisTime.month + 12 * adjustment - 2;
 8003904:	7a7b      	ldrb	r3, [r7, #9]
 8003906:	4619      	mov	r1, r3
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	3b02      	subs	r3, #2
 8003916:	61bb      	str	r3, [r7, #24]
	yy = thisTime.year - adjustment;
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	617b      	str	r3, [r7, #20]
	return (thisTime.day + (13 * mm - 1) / 5 +
 8003920:	7a3b      	ldrb	r3, [r7, #8]
 8003922:	4619      	mov	r1, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	3b01      	subs	r3, #1
 8003932:	4a19      	ldr	r2, [pc, #100]	; (8003998 <dayOfTheWeek+0xb4>)
 8003934:	fb82 0203 	smull	r0, r2, r2, r3
 8003938:	1052      	asrs	r2, r2, #1
 800393a:	17db      	asrs	r3, r3, #31
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	18ca      	adds	r2, r1, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	441a      	add	r2, r3
		yy + yy / 4 - yy / 100 + yy / 400) % 7;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	da00      	bge.n	800394c <dayOfTheWeek+0x68>
 800394a:	3303      	adds	r3, #3
 800394c:	109b      	asrs	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4912      	ldr	r1, [pc, #72]	; (800399c <dayOfTheWeek+0xb8>)
 8003954:	fb81 0103 	smull	r0, r1, r1, r3
 8003958:	1149      	asrs	r1, r1, #5
 800395a:	17db      	asrs	r3, r3, #31
 800395c:	1a5b      	subs	r3, r3, r1
 800395e:	441a      	add	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	490e      	ldr	r1, [pc, #56]	; (800399c <dayOfTheWeek+0xb8>)
 8003964:	fb81 0103 	smull	r0, r1, r1, r3
 8003968:	11c9      	asrs	r1, r1, #7
 800396a:	17db      	asrs	r3, r3, #31
 800396c:	1acb      	subs	r3, r1, r3
 800396e:	441a      	add	r2, r3
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <dayOfTheWeek+0xbc>)
 8003972:	fb83 1302 	smull	r1, r3, r3, r2
 8003976:	4413      	add	r3, r2
 8003978:	1099      	asrs	r1, r3, #2
 800397a:	17d3      	asrs	r3, r2, #31
 800397c:	1ac9      	subs	r1, r1, r3
 800397e:	460b      	mov	r3, r1
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	1a5b      	subs	r3, r3, r1
 8003984:	1ad1      	subs	r1, r2, r3
 8003986:	460b      	mov	r3, r1
    
}
 8003988:	4618      	mov	r0, r3
 800398a:	3724      	adds	r7, #36	; 0x24
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	2aaaaaab 	.word	0x2aaaaaab
 8003998:	66666667 	.word	0x66666667
 800399c:	51eb851f 	.word	0x51eb851f
 80039a0:	92492493 	.word	0x92492493

080039a4 <getDaysInMonth>:

/*
 * Returns an array of the number of days in each month for a given year.
 */
int getDaysInMonth(int month, int year) {
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
    //We count months starting at 1, but the array starts at 0.
    int days = days_in_month[month - 1];
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <getDaysInMonth+0x70>)
 80039b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b8:	60fb      	str	r3, [r7, #12]
    /* Rules for leap year:
     * - Divisible by four AND
     * - NOT divisible by 100 OR
     * - Divisible by 400.
     */
    if(month == 2 && ((year%4 == 0 && year%100 != 0) || year%400 == 0)) {
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d121      	bne.n	8003a04 <getDaysInMonth+0x60>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <getDaysInMonth+0x40>
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <getDaysInMonth+0x74>)
 80039ce:	fb83 1302 	smull	r1, r3, r3, r2
 80039d2:	1159      	asrs	r1, r3, #5
 80039d4:	17d3      	asrs	r3, r2, #31
 80039d6:	1acb      	subs	r3, r1, r3
 80039d8:	2164      	movs	r1, #100	; 0x64
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10d      	bne.n	8003a00 <getDaysInMonth+0x5c>
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <getDaysInMonth+0x74>)
 80039e8:	fb83 1302 	smull	r1, r3, r3, r2
 80039ec:	11d9      	asrs	r1, r3, #7
 80039ee:	17d3      	asrs	r3, r2, #31
 80039f0:	1acb      	subs	r3, r1, r3
 80039f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <getDaysInMonth+0x60>
        //Add a day to February
        days = 29;
 8003a00:	231d      	movs	r3, #29
 8003a02:	60fb      	str	r3, [r7, #12]
    }
    
    return days;
 8003a04:	68fb      	ldr	r3, [r7, #12]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	0800eb88 	.word	0x0800eb88
 8003a18:	51eb851f 	.word	0x51eb851f

08003a1c <FT5446_init>:
#include "drivers/FT5446.h"

/**
 * Initialisation routine for the FT5446 module
 */
void FT5446_init() {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af04      	add	r7, sp, #16
	//set auto calibration. The datasheet isn't really clear how this works
	HAL_I2C_Mem_Write(&hi2c1, FT5446_ADDR << 1, FT5446_CALIB_ADDR, I2C_MEMADD_SIZE_8BIT, 0x00, 1, 250);
 8003a22:	23fa      	movs	r3, #250	; 0xfa
 8003a24:	9302      	str	r3, [sp, #8]
 8003a26:	2301      	movs	r3, #1
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	22a0      	movs	r2, #160	; 0xa0
 8003a32:	2170      	movs	r1, #112	; 0x70
 8003a34:	4810      	ldr	r0, [pc, #64]	; (8003a78 <FT5446_init+0x5c>)
 8003a36:	f002 fea3 	bl	8006780 <HAL_I2C_Mem_Write>
	//Enter auto calibration mode
	HAL_I2C_Mem_Write(&hi2c1, FT5446_ADDR << 1, FT5446_STATE_ADDR, I2C_MEMADD_SIZE_8BIT, FT5446_AUTO_CALIB, 1, 250);
 8003a3a:	23fa      	movs	r3, #250	; 0xfa
 8003a3c:	9302      	str	r3, [sp, #8]
 8003a3e:	2301      	movs	r3, #1
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2304      	movs	r3, #4
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2301      	movs	r3, #1
 8003a48:	22a7      	movs	r2, #167	; 0xa7
 8003a4a:	2170      	movs	r1, #112	; 0x70
 8003a4c:	480a      	ldr	r0, [pc, #40]	; (8003a78 <FT5446_init+0x5c>)
 8003a4e:	f002 fe97 	bl	8006780 <HAL_I2C_Mem_Write>

	//some mystery undocumented delay
	HAL_Delay(100);
 8003a52:	2064      	movs	r0, #100	; 0x64
 8003a54:	f002 fa3a 	bl	8005ecc <HAL_Delay>
	//Return to normal mode
	HAL_I2C_Mem_Write(&hi2c1, FT5446_ADDR << 1, FT5446_STATE_ADDR, I2C_MEMADD_SIZE_8BIT, FT5446_WORK_MODE, 1, 250);
 8003a58:	23fa      	movs	r3, #250	; 0xfa
 8003a5a:	9302      	str	r3, [sp, #8]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	9301      	str	r3, [sp, #4]
 8003a60:	2301      	movs	r3, #1
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	2301      	movs	r3, #1
 8003a66:	22a7      	movs	r2, #167	; 0xa7
 8003a68:	2170      	movs	r1, #112	; 0x70
 8003a6a:	4803      	ldr	r0, [pc, #12]	; (8003a78 <FT5446_init+0x5c>)
 8003a6c:	f002 fe88 	bl	8006780 <HAL_I2C_Mem_Write>
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200043cc 	.word	0x200043cc

08003a7c <FT5446_getTouch>:

struct Touch FT5446_getTouch() {
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b08d      	sub	sp, #52	; 0x34
 8003a80:	af04      	add	r7, sp, #16
 8003a82:	6078      	str	r0, [r7, #4]
	struct Touch touch;
	unsigned char touchData[6];

	//Get number of touches
	//Wait for device to be ready
	if(HAL_I2C_IsDeviceReady (&hi2c1, FT5446_ADDR << 1, 10, 250) == HAL_OK) {
 8003a84:	23fa      	movs	r3, #250	; 0xfa
 8003a86:	220a      	movs	r2, #10
 8003a88:	2170      	movs	r1, #112	; 0x70
 8003a8a:	481a      	ldr	r0, [pc, #104]	; (8003af4 <FT5446_getTouch+0x78>)
 8003a8c:	f003 f8a6 	bl	8006bdc <HAL_I2C_IsDeviceReady>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d122      	bne.n	8003adc <FT5446_getTouch+0x60>
		//Get the CTP ram
		HAL_I2C_Mem_Read (&hi2c1, FT5446_ADDR << 1, FT5446_GESTURE_ADDR, I2C_MEMADD_SIZE_8BIT, touchData, 6, 250);
 8003a96:	23fa      	movs	r3, #250	; 0xfa
 8003a98:	9302      	str	r3, [sp, #8]
 8003a9a:	2306      	movs	r3, #6
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	f107 030c 	add.w	r3, r7, #12
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	2170      	movs	r1, #112	; 0x70
 8003aaa:	4812      	ldr	r0, [pc, #72]	; (8003af4 <FT5446_getTouch+0x78>)
 8003aac:	f002 ff7c 	bl	80069a8 <HAL_I2C_Mem_Read>
		//Combine in to regular human numbers
		touch.Y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ab8:	7bfa      	ldrb	r2, [r7, #15]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
		touch.X = ((touchData[4] & 0x0F) << 8) | touchData[5];
 8003abe:	7c3b      	ldrb	r3, [r7, #16]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ac6:	7c7a      	ldrb	r2, [r7, #17]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

		//Get the gesture and n touches values
		touch.gesture = touchData[0];
 8003acc:	7b3b      	ldrb	r3, [r7, #12]
 8003ace:	773b      	strb	r3, [r7, #28]
		touch.nTouches = touchData[1];
 8003ad0:	7b7b      	ldrb	r3, [r7, #13]
 8003ad2:	777b      	strb	r3, [r7, #29]
		touch.state = touchData[2] >> 6;
 8003ad4:	7bbb      	ldrb	r3, [r7, #14]
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	77bb      	strb	r3, [r7, #30]
	}

	return touch;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	461c      	mov	r4, r3
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ae8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	3724      	adds	r7, #36	; 0x24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}
 8003af4:	200043cc 	.word	0x200043cc

08003af8 <parallel_write>:
#include "bigfont/bigfont.h"

/**
 * Writes data to an 16-bit parallel bus.
 */
void parallel_write(unsigned int data) {
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	//Manual, dangerous, GPIO write here because HAL is slow
	WR_PORT->ODR = (~WR_PIN & WR_PORT->ODR);
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <parallel_write+0x54>)
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <parallel_write+0x54>)
 8003b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b0a:	6153      	str	r3, [r2, #20]
    //HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_RESET);

	//In this particular example I'm using PA8:15 and PC8:15
	GPIOC->ODR = (data & 0xFF00) | (GPIOC->ODR & 0x00FF); //Remember, we're using the lower half of these pins for other things.
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <parallel_write+0x58>)
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	490d      	ldr	r1, [pc, #52]	; (8003b50 <parallel_write+0x58>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	614b      	str	r3, [r1, #20]
	GPIOA->ODR = ((data << 8)) | (GPIOA->ODR & 0x00FF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	021a      	lsls	r2, r3, #8
 8003b22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	614b      	str	r3, [r1, #20]

	//
    //HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_SET);
	WR_PORT->ODR = (WR_PIN | WR_PORT->ODR);
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <parallel_write+0x54>)
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <parallel_write+0x54>)
 8003b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b3c:	6153      	str	r3, [r2, #20]
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	48000400 	.word	0x48000400
 8003b50:	48000800 	.word	0x48000800

08003b54 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned int data) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
    //HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
	//Manual low level port write for speed
	DC_PORT->ODR = (DC_PIN | DC_PORT->ODR);
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <lcd_write_data+0x3c>)
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <lcd_write_data+0x3c>)
 8003b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b66:	6153      	str	r3, [r2, #20]
	CS_PORT->ODR = (~CS_PIN & CS_PORT->ODR);
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <lcd_write_data+0x3c>)
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <lcd_write_data+0x3c>)
 8003b6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b72:	6153      	str	r3, [r2, #20]
	parallel_write(data);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ffbf 	bl	8003af8 <parallel_write>
	CS_PORT->ODR = (CS_PIN | CS_PORT->ODR);
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <lcd_write_data+0x3c>)
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <lcd_write_data+0x3c>)
 8003b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b84:	6153      	str	r3, [r2, #20]
    //HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	48000400 	.word	0x48000400

08003b94 <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
    //HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
    //HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
	//Manual low level port write for speed
	DC_PORT->ODR = (~DC_PIN & DC_PORT->ODR);
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <lcd_write_command+0x40>)
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <lcd_write_command+0x40>)
 8003ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ba8:	6153      	str	r3, [r2, #20]
	CS_PORT->ODR = (~CS_PIN & CS_PORT->ODR);
 8003baa:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <lcd_write_command+0x40>)
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <lcd_write_command+0x40>)
 8003bb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bb4:	6153      	str	r3, [r2, #20]
	parallel_write(data);
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ff9d 	bl	8003af8 <parallel_write>
	CS_PORT->ODR = (CS_PIN | CS_PORT->ODR);
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <lcd_write_command+0x40>)
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <lcd_write_command+0x40>)
 8003bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc8:	6153      	str	r3, [r2, #20]
    //HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	48000400 	.word	0x48000400

08003bd8 <swap_int>:
}

/*
 * Swaps two 16-bit integers
 */
void swap_int(unsigned int *num1, unsigned int *num2) {
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
    int temp = *num2;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]
    *num2 = *num1;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	601a      	str	r2, [r3, #0]
    *num1 = temp;
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 8003c04:	b5b0      	push	{r4, r5, r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	ed87 0b00 	vstr	d0, [r7]
    int multiplier = 4;
 8003c0e:	2304      	movs	r3, #4
 8003c10:	617b      	str	r3, [r7, #20]
    double counter = millis;
 8003c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c16:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8003c1a:	e01c      	b.n	8003c56 <delay_ms+0x52>
        while(counter--);
 8003c1c:	bf00      	nop
 8003c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <delay_ms+0x68>)
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	f7fc fb2c 	bl	8000288 <__aeabi_dsub>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	4620      	mov	r0, r4
 8003c42:	4629      	mov	r1, r5
 8003c44:	f7fc fd2e 	bl	80006a4 <__aeabi_dcmpeq>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0e7      	beq.n	8003c1e <delay_ms+0x1a>
        counter = millis;
 8003c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c52:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	1e5a      	subs	r2, r3, #1
 8003c5a:	617a      	str	r2, [r7, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1dd      	bne.n	8003c1c <delay_ms+0x18>
    }
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	3ff00000 	.word	0x3ff00000

08003c70 <lcd_init_parallel>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init_parallel() {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0

    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH (Active LOW)
 8003c74:	2201      	movs	r2, #1
 8003c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c7a:	481d      	ldr	r0, [pc, #116]	; (8003cf0 <lcd_init_parallel+0x80>)
 8003c7c:	f002 fcc0 	bl	8006600 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET); //Chip Select Active LOW
 8003c80:	2201      	movs	r2, #1
 8003c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c86:	481a      	ldr	r0, [pc, #104]	; (8003cf0 <lcd_init_parallel+0x80>)
 8003c88:	f002 fcba 	bl	8006600 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET); //Data / Command select Active LOW
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c92:	4817      	ldr	r0, [pc, #92]	; (8003cf0 <lcd_init_parallel+0x80>)
 8003c94:	f002 fcb4 	bl	8006600 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RD_PORT, RD_PIN, GPIO_PIN_SET); //READ pin HIGH (active LOW)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c9e:	4814      	ldr	r0, [pc, #80]	; (8003cf0 <lcd_init_parallel+0x80>)
 8003ca0:	f002 fcae 	bl	8006600 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_SET); //WRITE pin HIGH (active LOW)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003caa:	4811      	ldr	r0, [pc, #68]	; (8003cf0 <lcd_init_parallel+0x80>)
 8003cac:	f002 fca8 	bl	8006600 <HAL_GPIO_WritePin>
    //Cycle reset pin
    delay_ms(100);
 8003cb0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8003ce8 <lcd_init_parallel+0x78>
 8003cb4:	f7ff ffa6 	bl	8003c04 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cbe:	480c      	ldr	r0, [pc, #48]	; (8003cf0 <lcd_init_parallel+0x80>)
 8003cc0:	f002 fc9e 	bl	8006600 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8003cc4:	2064      	movs	r0, #100	; 0x64
 8003cc6:	f002 f901 	bl	8005ecc <HAL_Delay>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cd0:	4807      	ldr	r0, [pc, #28]	; (8003cf0 <lcd_init_parallel+0x80>)
 8003cd2:	f002 fc95 	bl	8006600 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8003cd6:	2064      	movs	r0, #100	; 0x64
 8003cd8:	f002 f8f8 	bl	8005ecc <HAL_Delay>

    lcd_init_command_list();
 8003cdc:	f000 f80a 	bl	8003cf4 <lcd_init_command_list>

}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	00000000 	.word	0x00000000
 8003cec:	40590000 	.word	0x40590000
 8003cf0:	48000400 	.word	0x48000400

08003cf4 <lcd_init_command_list>:

/**
 * This is the magic initialisation routine.
 */
void lcd_init_command_list(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0

	//********Start Initial Sequence*******//
	lcd_write_command(0xE0); //P-Gamma
 8003cf8:	20e0      	movs	r0, #224	; 0xe0
 8003cfa:	f7ff ff4b 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x00);
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f7ff ff28 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x13);
 8003d04:	2013      	movs	r0, #19
 8003d06:	f7ff ff25 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x18);
 8003d0a:	2018      	movs	r0, #24
 8003d0c:	f7ff ff22 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x04);
 8003d10:	2004      	movs	r0, #4
 8003d12:	f7ff ff1f 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x0F);
 8003d16:	200f      	movs	r0, #15
 8003d18:	f7ff ff1c 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x06);
 8003d1c:	2006      	movs	r0, #6
 8003d1e:	f7ff ff19 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x3A);
 8003d22:	203a      	movs	r0, #58	; 0x3a
 8003d24:	f7ff ff16 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x56);
 8003d28:	2056      	movs	r0, #86	; 0x56
 8003d2a:	f7ff ff13 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x4D);
 8003d2e:	204d      	movs	r0, #77	; 0x4d
 8003d30:	f7ff ff10 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x03);
 8003d34:	2003      	movs	r0, #3
 8003d36:	f7ff ff0d 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x0A);
 8003d3a:	200a      	movs	r0, #10
 8003d3c:	f7ff ff0a 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x06);
 8003d40:	2006      	movs	r0, #6
 8003d42:	f7ff ff07 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x30);
 8003d46:	2030      	movs	r0, #48	; 0x30
 8003d48:	f7ff ff04 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x3E);
 8003d4c:	203e      	movs	r0, #62	; 0x3e
 8003d4e:	f7ff ff01 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x0F);
 8003d52:	200f      	movs	r0, #15
 8003d54:	f7ff fefe 	bl	8003b54 <lcd_write_data>
	lcd_write_command(0XE1); //N-Gamma
 8003d58:	20e1      	movs	r0, #225	; 0xe1
 8003d5a:	f7ff ff1b 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x00);
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f7ff fef8 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x13);
 8003d64:	2013      	movs	r0, #19
 8003d66:	f7ff fef5 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x18);
 8003d6a:	2018      	movs	r0, #24
 8003d6c:	f7ff fef2 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x01);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f7ff feef 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x11);
 8003d76:	2011      	movs	r0, #17
 8003d78:	f7ff feec 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x06);
 8003d7c:	2006      	movs	r0, #6
 8003d7e:	f7ff fee9 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x38);
 8003d82:	2038      	movs	r0, #56	; 0x38
 8003d84:	f7ff fee6 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x34);
 8003d88:	2034      	movs	r0, #52	; 0x34
 8003d8a:	f7ff fee3 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x4D);
 8003d8e:	204d      	movs	r0, #77	; 0x4d
 8003d90:	f7ff fee0 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x06);
 8003d94:	2006      	movs	r0, #6
 8003d96:	f7ff fedd 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x0D);
 8003d9a:	200d      	movs	r0, #13
 8003d9c:	f7ff feda 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x0B);
 8003da0:	200b      	movs	r0, #11
 8003da2:	f7ff fed7 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x31);
 8003da6:	2031      	movs	r0, #49	; 0x31
 8003da8:	f7ff fed4 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x37);
 8003dac:	2037      	movs	r0, #55	; 0x37
 8003dae:	f7ff fed1 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x0F);
 8003db2:	200f      	movs	r0, #15
 8003db4:	f7ff fece 	bl	8003b54 <lcd_write_data>
	lcd_write_command(0xC0);
 8003db8:	20c0      	movs	r0, #192	; 0xc0
 8003dba:	f7ff feeb 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x18);
 8003dbe:	2018      	movs	r0, #24
 8003dc0:	f7ff fec8 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x16);
 8003dc4:	2016      	movs	r0, #22
 8003dc6:	f7ff fec5 	bl	8003b54 <lcd_write_data>
	lcd_write_command(0xC1);
 8003dca:	20c1      	movs	r0, #193	; 0xc1
 8003dcc:	f7ff fee2 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x45);
 8003dd0:	2045      	movs	r0, #69	; 0x45
 8003dd2:	f7ff febf 	bl	8003b54 <lcd_write_data>
	lcd_write_command(0xC5); //VCOM
 8003dd6:	20c5      	movs	r0, #197	; 0xc5
 8003dd8:	f7ff fedc 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x00);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7ff feb9 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x63);
 8003de2:	2063      	movs	r0, #99	; 0x63
 8003de4:	f7ff feb6 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x01);
 8003de8:	2001      	movs	r0, #1
 8003dea:	f7ff feb3 	bl	8003b54 <lcd_write_data>

	lcd_write_command(0x36); //RAM address mode
 8003dee:	2036      	movs	r0, #54	; 0x36
 8003df0:	f7ff fed0 	bl	8003b94 <lcd_write_command>
	//0xF8 and 0x3C are landscape mode. 0x5C and 0x9C for portrait mode.
	if(LANDSCAPE)
		lcd_write_data(0xF8);
 8003df4:	20f8      	movs	r0, #248	; 0xf8
 8003df6:	f7ff fead 	bl	8003b54 <lcd_write_data>
	else
		lcd_write_data(0x5C);

	lcd_write_command(0x3A); //Interface Mode Control
 8003dfa:	203a      	movs	r0, #58	; 0x3a
 8003dfc:	f7ff feca 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x55); //x55 for 16-bit mode OR 0x66 for 18-bit serial mode
 8003e00:	2055      	movs	r0, #85	; 0x55
 8003e02:	f7ff fea7 	bl	8003b54 <lcd_write_data>
	lcd_write_command(0xB0); //Interface Mode Control
 8003e06:	20b0      	movs	r0, #176	; 0xb0
 8003e08:	f7ff fec4 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x80); //SDO not in use
 8003e0c:	2080      	movs	r0, #128	; 0x80
 8003e0e:	f7ff fea1 	bl	8003b54 <lcd_write_data>
	lcd_write_command(0xB1); //Frame rate 70HZ
 8003e12:	20b1      	movs	r0, #177	; 0xb1
 8003e14:	f7ff febe 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x00); //
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7ff fe9b 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x10);
 8003e1e:	2010      	movs	r0, #16
 8003e20:	f7ff fe98 	bl	8003b54 <lcd_write_data>
	lcd_write_command(0xB4);
 8003e24:	20b4      	movs	r0, #180	; 0xb4
 8003e26:	f7ff feb5 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x02);
 8003e2a:	2002      	movs	r0, #2
 8003e2c:	f7ff fe92 	bl	8003b54 <lcd_write_data>

	lcd_write_command(0xB6); //RGB/MCU Interface Control
 8003e30:	20b6      	movs	r0, #182	; 0xb6
 8003e32:	f7ff feaf 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x02);
 8003e36:	2002      	movs	r0, #2
 8003e38:	f7ff fe8c 	bl	8003b54 <lcd_write_data>
	//lcd_write_data(0x22);

	lcd_write_command(0xE9);
 8003e3c:	20e9      	movs	r0, #233	; 0xe9
 8003e3e:	f7ff fea9 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0x00);
 8003e42:	2000      	movs	r0, #0
 8003e44:	f7ff fe86 	bl	8003b54 <lcd_write_data>
	lcd_write_command(0xF7);
 8003e48:	20f7      	movs	r0, #247	; 0xf7
 8003e4a:	f7ff fea3 	bl	8003b94 <lcd_write_command>
	lcd_write_data(0xA9);
 8003e4e:	20a9      	movs	r0, #169	; 0xa9
 8003e50:	f7ff fe80 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x51);
 8003e54:	2051      	movs	r0, #81	; 0x51
 8003e56:	f7ff fe7d 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x2C);
 8003e5a:	202c      	movs	r0, #44	; 0x2c
 8003e5c:	f7ff fe7a 	bl	8003b54 <lcd_write_data>
	lcd_write_data(0x82);
 8003e60:	2082      	movs	r0, #130	; 0x82
 8003e62:	f7ff fe77 	bl	8003b54 <lcd_write_data>
	lcd_write_command(0x11);
 8003e66:	2011      	movs	r0, #17
 8003e68:	f7ff fe94 	bl	8003b94 <lcd_write_command>
	HAL_Delay(120);
 8003e6c:	2078      	movs	r0, #120	; 0x78
 8003e6e:	f002 f82d 	bl	8005ecc <HAL_Delay>
	lcd_write_command(0x21);
 8003e72:	2021      	movs	r0, #33	; 0x21
 8003e74:	f7ff fe8e 	bl	8003b94 <lcd_write_command>


	HAL_Delay(120);
 8003e78:	2078      	movs	r0, #120	; 0x78
 8003e7a:	f002 f827 	bl	8005ecc <HAL_Delay>
	lcd_write_command(0x29);
 8003e7e:	2029      	movs	r0, #41	; 0x29
 8003e80:	f7ff fe88 	bl	8003b94 <lcd_write_command>
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <set_draw_window>:
/*
 * Sets the X,Y position for following commands on the display.
 * Should only be called within a function that draws something
 * to the display.
 */
void set_draw_window(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]

    //Check that the values are in order
    if(x2 < x1)
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d206      	bcs.n	8003eac <set_draw_window+0x24>
        swap_int(&x2, &x1);
 8003e9e:	f107 020c 	add.w	r2, r7, #12
 8003ea2:	1d3b      	adds	r3, r7, #4
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fe96 	bl	8003bd8 <swap_int>
    if(y2 < y1)
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d206      	bcs.n	8003ec2 <set_draw_window+0x3a>
        swap_int(&y2, &y1);
 8003eb4:	f107 0208 	add.w	r2, r7, #8
 8003eb8:	463b      	mov	r3, r7
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fe8b 	bl	8003bd8 <swap_int>

    lcd_write_command(ILI9488_CASET);
 8003ec2:	202a      	movs	r0, #42	; 0x2a
 8003ec4:	f7ff fe66 	bl	8003b94 <lcd_write_command>
    lcd_write_data(x1 >> 8);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fe41 	bl	8003b54 <lcd_write_data>
    lcd_write_data(x1 & 0xFF);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fe3c 	bl	8003b54 <lcd_write_data>

    lcd_write_data(x2 >> 8);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fe37 	bl	8003b54 <lcd_write_data>
    lcd_write_data(x2 & 0xFF);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fe32 	bl	8003b54 <lcd_write_data>

    lcd_write_command(ILI9488_PASET);
 8003ef0:	202b      	movs	r0, #43	; 0x2b
 8003ef2:	f7ff fe4f 	bl	8003b94 <lcd_write_command>
    lcd_write_data(y1 >> 8);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fe2a 	bl	8003b54 <lcd_write_data>
    lcd_write_data(y1 & 0xFF);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fe25 	bl	8003b54 <lcd_write_data>

    lcd_write_data(y2 >> 8);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fe20 	bl	8003b54 <lcd_write_data>
    lcd_write_data(y2 & 0xFF);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fe1b 	bl	8003b54 <lcd_write_data>

    lcd_write_command(ILI9488_RAMWR);
 8003f1e:	202c      	movs	r0, #44	; 0x2c
 8003f20:	f7ff fe38 	bl	8003b94 <lcd_write_command>
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with
 * Colour.
 *
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(unsigned int x, unsigned int y, unsigned int colour) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]

    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff ffa0 	bl	8003e88 <set_draw_window>
    lcd_write_data(colour);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff fe03 	bl	8003b54 <lcd_write_data>
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int colour) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]


    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff ff8b 	bl	8003e88 <set_draw_window>

    // data sections but I don't trust it.)
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003f72:	2201      	movs	r2, #1
 8003f74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f78:	4817      	ldr	r0, [pc, #92]	; (8003fd8 <fill_rectangle+0x80>)
 8003f7a:	f002 fb41 	bl	8006600 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f84:	4814      	ldr	r0, [pc, #80]	; (8003fd8 <fill_rectangle+0x80>)
 8003f86:	f002 fb3b 	bl	8006600 <HAL_GPIO_WritePin>


    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e012      	b.n	8003fb6 <fill_rectangle+0x5e>
        for(int x = 0; x < x2-x1+1; x++) {
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	e005      	b.n	8003fa2 <fill_rectangle+0x4a>
        	parallel_write(colour);
 8003f96:	6a38      	ldr	r0, [r7, #32]
 8003f98:	f7ff fdae 	bl	8003af8 <parallel_write>
        for(int x = 0; x < x2-x1+1; x++) {
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d8f2      	bhi.n	8003f96 <fill_rectangle+0x3e>
    for(int y = 0; y < y2-y1+1 ; y++) {
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d8e5      	bhi.n	8003f90 <fill_rectangle+0x38>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fca:	4803      	ldr	r0, [pc, #12]	; (8003fd8 <fill_rectangle+0x80>)
 8003fcc:	f002 fb18 	bl	8006600 <HAL_GPIO_WritePin>
}
 8003fd0:	bf00      	nop
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	48000400 	.word	0x48000400

08003fdc <empty_rectangle>:

/*
 * draws an empty rectangle with a given border weight.
 */
void empty_rectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int colour, unsigned int border_weight) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]

	//Top border
	fill_rectangle(x1 + border_weight, y1, x2, y1 + 1, colour);
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	18d0      	adds	r0, r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	f7ff ffab 	bl	8003f58 <fill_rectangle>
	//Left border
	fill_rectangle(x1, y1 + border_weight, x1 + 1, y2, colour);
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	18d1      	adds	r1, r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff ffa0 	bl	8003f58 <fill_rectangle>
	//Bottom border
	fill_rectangle(x1 + border_weight, y2, x2, y2 + border_weight, colour);
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	18d0      	adds	r0, r2, r3
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	441a      	add	r2, r3
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	f7ff ff93 	bl	8003f58 <fill_rectangle>
	//Right border
	fill_rectangle(x2, y1 + border_weight, x2 + border_weight, y2, colour);
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	18d1      	adds	r1, r2, r3
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	441a      	add	r2, r3
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff87 	bl	8003f58 <fill_rectangle>
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <draw_char>:

/*
 * Draws a single char to the screen.
 */
void draw_char(unsigned int x, unsigned int y, char c, unsigned int colour, char size) {
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b08b      	sub	sp, #44	; 0x2c
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	71fb      	strb	r3, [r7, #7]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	3b20      	subs	r3, #32
 8004068:	617b      	str	r3, [r7, #20]

    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	e062      	b.n	8004136 <draw_char+0xe2>

        line = FontLarge[font_index][12 - i];
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f1c3 010c 	rsb	r1, r3, #12
 8004076:	4834      	ldr	r0, [pc, #208]	; (8004148 <draw_char+0xf4>)
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	4403      	add	r3, r0
 8004086:	440b      	add	r3, r1
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	74fb      	strb	r3, [r7, #19]

        //Draw the pixels to screen
		for(j=0; j<8; j++) {
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	e04b      	b.n	800412a <draw_char+0xd6>
			if(line & (0x01 << j)) {
 8004092:	7cfa      	ldrb	r2, [r7, #19]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	fa42 f303 	asr.w	r3, r2, r3
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d040      	beq.n	8004124 <draw_char+0xd0>
				if(size == 1) {
 80040a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10c      	bne.n	80040c4 <draw_char+0x70>
					//If we are just doing the smallest size font then do a single pixel each
					draw_pixel(x+(8-j), y+i, colour);
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f103 0008 	add.w	r0, r3, #8
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4413      	add	r3, r2
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	f7ff ff35 	bl	8003f2c <draw_pixel>
 80040c2:	e02f      	b.n	8004124 <draw_char+0xd0>
				}
				else {
					// do a small box to represent each pixel
					fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f1c3 0308 	rsb	r3, r3, #8
 80040ca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	18d0      	adds	r0, r2, r3
 80040d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	18d1      	adds	r1, r2, r3
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f1c3 0308 	rsb	r3, r3, #8
 80040ee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	441a      	add	r2, r3
 80040fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004100:	18d4      	adds	r4, r2, r3
 8004102:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	fb02 f303 	mul.w	r3, r2, r3
 800410c:	461a      	mov	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	441a      	add	r2, r3
 8004112:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004116:	441a      	add	r2, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	4622      	mov	r2, r4
 8004120:	f7ff ff1a 	bl	8003f58 <fill_rectangle>
		for(j=0; j<8; j++) {
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	3301      	adds	r3, #1
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b07      	cmp	r3, #7
 800412e:	ddb0      	ble.n	8004092 <draw_char+0x3e>
    for(i=0; i<13; i++ ) {
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	3301      	adds	r3, #1
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b0c      	cmp	r3, #12
 800413a:	dd99      	ble.n	8004070 <draw_char+0x1c>
				}
			}
		}
    }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3724      	adds	r7, #36	; 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd90      	pop	{r4, r7, pc}
 8004146:	bf00      	nop
 8004148:	0800ebb8 	.word	0x0800ebb8

0800414c <draw_fast_char>:
 * than drawing individual pixels.
 * This will draw over any background image though.
 *
 * NOTE: This sends 130 bytes for a regular sized char
 */
void draw_fast_char(unsigned int x, unsigned int y, char c, unsigned int colour, unsigned int bg_colour) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	71fb      	strb	r3, [r7, #7]
    char line;
    char width = 8;
 800415c:	2308      	movs	r3, #8
 800415e:	76fb      	strb	r3, [r7, #27]
    char height = 13;
 8004160:	230d      	movs	r3, #13
 8004162:	76bb      	strb	r3, [r7, #26]
    unsigned int font_index = (c - 32);
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	3b20      	subs	r3, #32
 8004168:	617b      	str	r3, [r7, #20]
    unsigned int this_px = bg_colour;
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	627b      	str	r3, [r7, #36]	; 0x24

    //Set the drawing region
    set_draw_window(x, y, x + width - 1, y + height);
 800416e:	7efa      	ldrb	r2, [r7, #27]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	1e59      	subs	r1, r3, #1
 8004176:	7eba      	ldrb	r2, [r7, #26]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4413      	add	r3, r2
 800417c:	460a      	mov	r2, r1
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff fe81 	bl	8003e88 <set_draw_window>

    //We will do the SPI write manually here for speed
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8004186:	2201      	movs	r2, #1
 8004188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800418c:	4821      	ldr	r0, [pc, #132]	; (8004214 <draw_fast_char+0xc8>)
 800418e:	f002 fa37 	bl	8006600 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8004192:	2200      	movs	r2, #0
 8004194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004198:	481e      	ldr	r0, [pc, #120]	; (8004214 <draw_fast_char+0xc8>)
 800419a:	f002 fa31 	bl	8006600 <HAL_GPIO_WritePin>

    //Get the line of pixels from the font file
    for(int i=0; i < height; i++ ) {
 800419e:	2300      	movs	r3, #0
 80041a0:	623b      	str	r3, [r7, #32]
 80041a2:	e029      	b.n	80041f8 <draw_fast_char+0xac>
        line = FontLarge[font_index][12 - i];
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	f1c3 010c 	rsb	r1, r3, #12
 80041aa:	481b      	ldr	r0, [pc, #108]	; (8004218 <draw_fast_char+0xcc>)
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	4403      	add	r3, r0
 80041ba:	440b      	add	r3, r1
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	74fb      	strb	r3, [r7, #19]

        //Draw the pixels to screen
        for(int j = width-1; j >= 0; j--) {
 80041c0:	7efb      	ldrb	r3, [r7, #27]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	e011      	b.n	80041ec <draw_fast_char+0xa0>
            //Default pixel colour is the background colour, unless changed below
            this_px = bg_colour;
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
			if((line >> (j)) & 0x01)
 80041cc:	7cfa      	ldrb	r2, [r7, #19]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	fa42 f303 	asr.w	r3, r2, r3
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <draw_fast_char+0x94>
				this_px = colour;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
			parallel_write(this_px);
 80041e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041e2:	f7ff fc89 	bl	8003af8 <parallel_write>
        for(int j = width-1; j >= 0; j--) {
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	daea      	bge.n	80041c8 <draw_fast_char+0x7c>
    for(int i=0; i < height; i++ ) {
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	3301      	adds	r3, #1
 80041f6:	623b      	str	r3, [r7, #32]
 80041f8:	7ebb      	ldrb	r3, [r7, #26]
 80041fa:	6a3a      	ldr	r2, [r7, #32]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	dbd1      	blt.n	80041a4 <draw_fast_char+0x58>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8004200:	2201      	movs	r2, #1
 8004202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004206:	4803      	ldr	r0, [pc, #12]	; (8004214 <draw_fast_char+0xc8>)
 8004208:	f002 f9fa 	bl	8006600 <HAL_GPIO_WritePin>
}
 800420c:	bf00      	nop
 800420e:	3728      	adds	r7, #40	; 0x28
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	48000400 	.word	0x48000400
 8004218:	0800ebb8 	.word	0x0800ebb8

0800421c <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with
 * a given colour and size.
 */
void draw_string(unsigned int x, unsigned int y, unsigned int colour, char size, char *str) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	70fb      	strb	r3, [r7, #3]

    //Work out the size of each character
    int char_width = size * 9;
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
    //Iterate through each character in the string
    int counter = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
    while(str[counter] != '\0') {
 8004238:	e015      	b.n	8004266 <draw_string+0x4a>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 800424a:	6978      	ldr	r0, [r7, #20]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004250:	4413      	add	r3, r2
 8004252:	781a      	ldrb	r2, [r3, #0]
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	f7ff fefa 	bl	8004054 <draw_char>
        //Next character
        counter++;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3301      	adds	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
    while(str[counter] != '\0') {
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426a:	4413      	add	r3, r2
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e3      	bne.n	800423a <draw_string+0x1e>
    }
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <draw_fast_string>:
 * Draws a string using the draw_fast_char() function.
 * This will not preserve any background image and so a custom background
 * colour should be provided.
 * NOTE: Can only be the regular sized font. No scaling.
 */
void draw_fast_string(unsigned int x, unsigned int y, unsigned int colour, unsigned int bg_colour, char *str) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
    //Iterate through each character in the string
    int counter = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 800428e:	e013      	b.n	80042b8 <draw_fast_string+0x3c>
        //Write char to the display
        draw_fast_char(x + (counter * 9), y, str[counter], colour, bg_colour);
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	461a      	mov	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	18d0      	adds	r0, r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	6a3a      	ldr	r2, [r7, #32]
 80042a2:	4413      	add	r3, r2
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	f7ff ff4d 	bl	800414c <draw_fast_char>
        //Next character
        counter++;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	3301      	adds	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6a3a      	ldr	r2, [r7, #32]
 80042bc:	4413      	add	r3, r2
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <draw_fast_string+0x14>
    }
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <draw_bitmap>:
 * Draws a bitmap by directly writing the byte stream to the LCD.
 *
 * So the scaling is done strangely here because writing individual pixels
 * has an overhead of 26 bytes each.
 */
void draw_bitmap(unsigned int x1, unsigned int y1, int scale, const unsigned int *bmp) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08e      	sub	sp, #56	; 0x38
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
	int width = bmp[0];
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
	int height = bmp[1];
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	3304      	adds	r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	623b      	str	r3, [r7, #32]
	unsigned int this_byte;
	int x2 = x1 + (width * scale);
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	61fb      	str	r3, [r7, #28]
	int y2 = y1 + (height * scale);
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	fb02 f303 	mul.w	r3, r2, r3
 8004304:	461a      	mov	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4413      	add	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]

	//Set the drawing region
	set_draw_window(x1, y1, x2 + scale - 2, y2);
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4413      	add	r3, r2
 8004312:	3b02      	subs	r3, #2
 8004314:	461a      	mov	r2, r3
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fdb4 	bl	8003e88 <set_draw_window>

	//We will do the SPI write manually here for speed
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8004320:	2201      	movs	r2, #1
 8004322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004326:	4825      	ldr	r0, [pc, #148]	; (80043bc <draw_bitmap+0xec>)
 8004328:	f002 f96a 	bl	8006600 <HAL_GPIO_WritePin>
	//CS low to begin data
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800432c:	2200      	movs	r2, #0
 800432e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004332:	4822      	ldr	r0, [pc, #136]	; (80043bc <draw_bitmap+0xec>)
 8004334:	f002 f964 	bl	8006600 <HAL_GPIO_WritePin>

	//Write colour to each pixel
	for (int y = 0; y < height; y++) {
 8004338:	2300      	movs	r3, #0
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
 800433c:	e02f      	b.n	800439e <draw_bitmap+0xce>
		//this loop does the vertical axis scaling (two of each line))
		for (int sv = 0; sv < scale; sv++) {
 800433e:	2300      	movs	r3, #0
 8004340:	633b      	str	r3, [r7, #48]	; 0x30
 8004342:	e025      	b.n	8004390 <draw_bitmap+0xc0>
			for (int x = 0; x < width; x++) {
 8004344:	2300      	movs	r3, #0
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004348:	e01b      	b.n	8004382 <draw_bitmap+0xb2>
				//Choose which byte to display depending on the screen orientation
				//NOTE: We add 2 bytes because of the first two bytes being dimension data in the array
				this_byte = bmp[(width * (y)) + x + 2];
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800434e:	fb03 f202 	mul.w	r2, r3, r2
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	4413      	add	r3, r2
 8004356:	3302      	adds	r3, #2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	4413      	add	r3, r2
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	617b      	str	r3, [r7, #20]

				//And this loop does the horizontal axis scale (three bytes per pixel))
				for (int sh = 0; sh < scale; sh++) {
 8004362:	2300      	movs	r3, #0
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
 8004366:	e005      	b.n	8004374 <draw_bitmap+0xa4>
					parallel_write(this_byte);
 8004368:	6978      	ldr	r0, [r7, #20]
 800436a:	f7ff fbc5 	bl	8003af8 <parallel_write>
				for (int sh = 0; sh < scale; sh++) {
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	3301      	adds	r3, #1
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
 8004374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	429a      	cmp	r2, r3
 800437a:	dbf5      	blt.n	8004368 <draw_bitmap+0x98>
			for (int x = 0; x < width; x++) {
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	3301      	adds	r3, #1
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	429a      	cmp	r2, r3
 8004388:	dbdf      	blt.n	800434a <draw_bitmap+0x7a>
		for (int sv = 0; sv < scale; sv++) {
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	3301      	adds	r3, #1
 800438e:	633b      	str	r3, [r7, #48]	; 0x30
 8004390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	429a      	cmp	r2, r3
 8004396:	dbd5      	blt.n	8004344 <draw_bitmap+0x74>
	for (int y = 0; y < height; y++) {
 8004398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439a:	3301      	adds	r3, #1
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
 800439e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	dbcb      	blt.n	800433e <draw_bitmap+0x6e>
			}
		}
	}

	//Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80043a6:	2201      	movs	r2, #1
 80043a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043ac:	4803      	ldr	r0, [pc, #12]	; (80043bc <draw_bitmap+0xec>)
 80043ae:	f002 f927 	bl	8006600 <HAL_GPIO_WritePin>

}
 80043b2:	bf00      	nop
 80043b4:	3738      	adds	r7, #56	; 0x38
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	48000400 	.word	0x48000400

080043c0 <draw_bitmap_with_alpha>:
/**
 * Draws a bitmap, ignoring the specified transparency colour.
 *
 * NOTE: This uses a slow, pixel-by-pixel draw process.
 */
void draw_bitmap_with_alpha(unsigned int x1, unsigned int y1, unsigned int alphaColour, int scale, const unsigned int *bmp) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08c      	sub	sp, #48	; 0x30
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
	int width = bmp[0];
 80043ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	61fb      	str	r3, [r7, #28]
	int height = bmp[1];
 80043d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d6:	3304      	adds	r3, #4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	61bb      	str	r3, [r7, #24]
	unsigned int this_byte;

	//Write colour to each pixel
	for (int y = 0; y < height; y++) {
 80043dc:	2300      	movs	r3, #0
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e0:	e046      	b.n	8004470 <draw_bitmap_with_alpha+0xb0>
		//this loop does the vertical axis scaling (two of each line))
		for (int sv = 0; sv < scale; sv++) {
 80043e2:	2300      	movs	r3, #0
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e6:	e03c      	b.n	8004462 <draw_bitmap_with_alpha+0xa2>
			for (int x = 0; x < width; x++) {
 80043e8:	2300      	movs	r3, #0
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
 80043ec:	e032      	b.n	8004454 <draw_bitmap_with_alpha+0x94>
				//Choose which byte to display depending on the screen orientation
				//NOTE: We add 2 bytes because of the first two bytes being dimension data in the array
				this_byte = bmp[(width * (y)) + x + 2];
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f2:	fb03 f202 	mul.w	r2, r3, r2
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	4413      	add	r3, r2
 80043fa:	3302      	adds	r3, #2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004400:	4413      	add	r3, r2
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	617b      	str	r3, [r7, #20]

				//And this loop does the horizontal axis scale (three bytes per pixel))
				for (int sh = 0; sh < scale; sh++) {
 8004406:	2300      	movs	r3, #0
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	e01c      	b.n	8004446 <draw_bitmap_with_alpha+0x86>
					if(this_byte != alphaColour )
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	d015      	beq.n	8004440 <draw_bitmap_with_alpha+0x80>
						draw_pixel(x1 + (x * scale) + sh, y1 + (y * scale) + sv, this_byte);
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	461a      	mov	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	441a      	add	r2, r3
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	18d0      	adds	r0, r2, r3
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	461a      	mov	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	441a      	add	r2, r3
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	4413      	add	r3, r2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4619      	mov	r1, r3
 800443c:	f7ff fd76 	bl	8003f2c <draw_pixel>
				for (int sh = 0; sh < scale; sh++) {
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	3301      	adds	r3, #1
 8004444:	623b      	str	r3, [r7, #32]
 8004446:	6a3a      	ldr	r2, [r7, #32]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	dbde      	blt.n	800440c <draw_bitmap_with_alpha+0x4c>
			for (int x = 0; x < width; x++) {
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	3301      	adds	r3, #1
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	429a      	cmp	r2, r3
 800445a:	dbc8      	blt.n	80043ee <draw_bitmap_with_alpha+0x2e>
		for (int sv = 0; sv < scale; sv++) {
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	3301      	adds	r3, #1
 8004460:	62bb      	str	r3, [r7, #40]	; 0x28
 8004462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	dbbe      	blt.n	80043e8 <draw_bitmap_with_alpha+0x28>
	for (int y = 0; y < height; y++) {
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	3301      	adds	r3, #1
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	429a      	cmp	r2, r3
 8004476:	dbb4      	blt.n	80043e2 <draw_bitmap_with_alpha+0x22>
				}
			}
		}
	}
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3730      	adds	r7, #48	; 0x30
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <fill_gradient>:

/**
 * Fills a rectangle with a gradient between two colours.
 */
void fill_gradient(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int startColour, unsigned int endColour, Orientation orientation) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b090      	sub	sp, #64	; 0x40
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
	//Calculate each colour channel
	unsigned char rStart = (startColour >> 11) & 0x1F;
 8004492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004494:	0adb      	lsrs	r3, r3, #11
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    unsigned char gStart = (startColour >> 5) & 0x3F;
 80044a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    unsigned char bStart = (startColour) & 0x1F;
 80044ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	unsigned char rEnd = (endColour >> 11) & 0x1F;
 80044ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044bc:	0adb      	lsrs	r3, r3, #11
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    unsigned char gEnd = (endColour >> 5) & 0x3F;
 80044c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char bEnd = (endColour) & 0x1F;
 80044d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	//Number of incremental steps are we doing
    //Depends on orientation
    int steps = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(orientation == HORIZONTAL)
 80044e6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <fill_gradient+0x72>
		steps = (x2 - x1);
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(orientation == VERTICAL)
 80044f6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d103      	bne.n	8004506 <fill_gradient+0x82>
    	steps = (y2 - y1);
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Calculate difference between each colour channel
	float dR = ((float)(rEnd - rStart) / steps);
 8004506:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800450a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	ee07 3a90 	vmov	s15, r3
 8004514:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004526:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float dG = ((float)(gEnd - gStart) / steps);
 800452a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800452e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	ee07 3a90 	vmov	s15, r3
 8004538:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800453c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800454a:	edc7 7a08 	vstr	s15, [r7, #32]
	float dB = ((float)(bEnd - bStart) / steps);
 800454e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8004552:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	ee07 3a90 	vmov	s15, r3
 800455c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800456a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456e:	edc7 7a07 	vstr	s15, [r7, #28]

	//Figure out how often to change the colour
	unsigned int thisR = rStart;
 8004572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004576:	61bb      	str	r3, [r7, #24]
	unsigned int thisG = gStart;
 8004578:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800457c:	617b      	str	r3, [r7, #20]
	unsigned int thisB = bStart;
 800457e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004582:	613b      	str	r3, [r7, #16]

    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff fc7c 	bl	8003e88 <set_draw_window>

    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8004590:	2201      	movs	r2, #1
 8004592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004596:	4857      	ldr	r0, [pc, #348]	; (80046f4 <fill_gradient+0x270>)
 8004598:	f002 f832 	bl	8006600 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045a2:	4854      	ldr	r0, [pc, #336]	; (80046f4 <fill_gradient+0x270>)
 80045a4:	f002 f82c 	bl	8006600 <HAL_GPIO_WritePin>


	//Doing a normal rectangle fill but we change the colour as we go
    //Write colour to each pixel
    unsigned int colour = startColour;
 80045a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045aa:	63bb      	str	r3, [r7, #56]	; 0x38
    for(int y = 0; y <= y2-y1; y++) {
 80045ac:	2300      	movs	r3, #0
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
 80045b0:	e08f      	b.n	80046d2 <fill_gradient+0x24e>
        for(int x = 0; x <= x2-x1; x++) {
 80045b2:	2300      	movs	r3, #0
 80045b4:	633b      	str	r3, [r7, #48]	; 0x30
 80045b6:	e044      	b.n	8004642 <fill_gradient+0x1be>
        	//For a horizontal gradient, update on each X increment
            if(orientation == HORIZONTAL) {
 80045b8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d13a      	bne.n	8004636 <fill_gradient+0x1b2>
    			//Increment the colours
    			thisR = rStart + (int)(dR * x);
 80045c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c6:	ee07 2a90 	vmov	s15, r2
 80045ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045da:	ee17 2a90 	vmov	r2, s15
 80045de:	4413      	add	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
    			thisG = gStart + (int)(dG * x);
 80045e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e8:	ee07 2a90 	vmov	s15, r2
 80045ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80045f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045fc:	ee17 2a90 	vmov	r2, s15
 8004600:	4413      	add	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    			thisB = bStart + (int)(dB * x);
 8004604:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460a:	ee07 2a90 	vmov	s15, r2
 800460e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004612:	edd7 7a07 	vldr	s15, [r7, #28]
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800461e:	ee17 2a90 	vmov	r2, s15
 8004622:	4413      	add	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
    			//Combine them to RGB565
    			colour = (thisR << 11) | (thisG << 5) | (thisB);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	02da      	lsls	r2, r3, #11
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	015b      	lsls	r3, r3, #5
 800462e:	4313      	orrs	r3, r2
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	63bb      	str	r3, [r7, #56]	; 0x38
            }

        	//Send them to the display
        	parallel_write(colour);
 8004636:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004638:	f7ff fa5e 	bl	8003af8 <parallel_write>
        for(int x = 0; x <= x2-x1; x++) {
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	3301      	adds	r3, #1
 8004640:	633b      	str	r3, [r7, #48]	; 0x30
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	429a      	cmp	r2, r3
 800464c:	d2b4      	bcs.n	80045b8 <fill_gradient+0x134>
        }

        //For a vertical gradient, change on each Y increment
        if(orientation == VERTICAL) {
 800464e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004652:	2b01      	cmp	r3, #1
 8004654:	d13a      	bne.n	80046cc <fill_gradient+0x248>
			//Increment the colours
			thisR = rStart + (int)(dR * y);
 8004656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800465a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800465c:	ee07 2a90 	vmov	s15, r2
 8004660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004664:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004670:	ee17 2a90 	vmov	r2, s15
 8004674:	4413      	add	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
			thisG = gStart + (int)(dG * y);
 8004678:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800467c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800467e:	ee07 2a90 	vmov	s15, r2
 8004682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004686:	edd7 7a08 	vldr	s15, [r7, #32]
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004692:	ee17 2a90 	vmov	r2, s15
 8004696:	4413      	add	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
			thisB = bStart + (int)(dB * y);
 800469a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800469e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a0:	ee07 2a90 	vmov	s15, r2
 80046a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80046ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046b4:	ee17 2a90 	vmov	r2, s15
 80046b8:	4413      	add	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
			//Combine them to RGB565
			colour = (thisR << 11) | (thisG << 5) | (thisB);
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	02da      	lsls	r2, r3, #11
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	015b      	lsls	r3, r3, #5
 80046c4:	4313      	orrs	r3, r2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	63bb      	str	r3, [r7, #56]	; 0x38
    for(int y = 0; y <= y2-y1; y++) {
 80046cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ce:	3301      	adds	r3, #1
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	1ad2      	subs	r2, r2, r3
 80046d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046da:	429a      	cmp	r2, r3
 80046dc:	f4bf af69 	bcs.w	80045b2 <fill_gradient+0x12e>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80046e0:	2201      	movs	r2, #1
 80046e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046e6:	4803      	ldr	r0, [pc, #12]	; (80046f4 <fill_gradient+0x270>)
 80046e8:	f001 ff8a 	bl	8006600 <HAL_GPIO_WritePin>
}
 80046ec:	bf00      	nop
 80046ee:	3740      	adds	r7, #64	; 0x40
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	48000400 	.word	0x48000400

080046f8 <ChangeTimeTask>:


/**
 * Main task to display the settings screen.
 */
void ChangeTimeTask(void const * args) {
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 80046fe:	af14      	add	r7, sp, #80	; 0x50
 8004700:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004704:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8004708:	6018      	str	r0, [r3, #0]
	//Some default values
	int textColour = COLOR_GRAY;
 800470a:	f248 4310 	movw	r3, #33808	; 0x8410
 800470e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	char hrs[3] = "\0  ";
 8004712:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004716:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800471a:	4ac8      	ldr	r2, [pc, #800]	; (8004a3c <ChangeTimeTask+0x344>)
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	4611      	mov	r1, r2
 8004720:	8019      	strh	r1, [r3, #0]
 8004722:	3302      	adds	r3, #2
 8004724:	0c12      	lsrs	r2, r2, #16
 8004726:	701a      	strb	r2, [r3, #0]
	char mins[3] = "\0  ";
 8004728:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800472c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004730:	4ac2      	ldr	r2, [pc, #776]	; (8004a3c <ChangeTimeTask+0x344>)
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	4611      	mov	r1, r2
 8004736:	8019      	strh	r1, [r3, #0]
 8004738:	3302      	adds	r3, #2
 800473a:	0c12      	lsrs	r2, r2, #16
 800473c:	701a      	strb	r2, [r3, #0]
	char day[3] = "\0  ";
 800473e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004742:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004746:	4abd      	ldr	r2, [pc, #756]	; (8004a3c <ChangeTimeTask+0x344>)
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	4611      	mov	r1, r2
 800474c:	8019      	strh	r1, [r3, #0]
 800474e:	3302      	adds	r3, #2
 8004750:	0c12      	lsrs	r2, r2, #16
 8004752:	701a      	strb	r2, [r3, #0]
	char month[3] = "\0  ";
 8004754:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800475c:	4ab7      	ldr	r2, [pc, #732]	; (8004a3c <ChangeTimeTask+0x344>)
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	4611      	mov	r1, r2
 8004762:	8019      	strh	r1, [r3, #0]
 8004764:	3302      	adds	r3, #2
 8004766:	0c12      	lsrs	r2, r2, #16
 8004768:	701a      	strb	r2, [r3, #0]
	char year[5] = "\0    ";
 800476a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800476e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004772:	4ab3      	ldr	r2, [pc, #716]	; (8004a40 <ChangeTimeTask+0x348>)
 8004774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004778:	6018      	str	r0, [r3, #0]
 800477a:	3304      	adds	r3, #4
 800477c:	7019      	strb	r1, [r3, #0]

	//Add some dummy display elements
	DM_Add_Element(DM_New_Title_Bar("Change Time/Date"));
 800477e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004782:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004786:	49af      	ldr	r1, [pc, #700]	; (8004a44 <ChangeTimeTask+0x34c>)
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe fd9b 	bl	80032c4 <DM_New_Title_Bar>
 800478e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004792:	f5a3 748e 	sub.w	r4, r3, #284	; 0x11c
 8004796:	4668      	mov	r0, sp
 8004798:	f104 0310 	add.w	r3, r4, #16
 800479c:	224c      	movs	r2, #76	; 0x4c
 800479e:	4619      	mov	r1, r3
 80047a0:	f008 fa14 	bl	800cbcc <memcpy>
 80047a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047a8:	f7fd fb28 	bl	8001dfc <DM_Add_Element>

	//HOME
	struct DisplayElement okBtn = DM_New_Button(BTN_LEFT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 80047ac:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80047b0:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 80047b4:	2300      	movs	r3, #0
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	4ba3      	ldr	r3, [pc, #652]	; (8004a48 <ChangeTimeTask+0x350>)
 80047ba:	f44f 7288 	mov.w	r2, #272	; 0x110
 80047be:	210a      	movs	r1, #10
 80047c0:	f7fd f84c 	bl	800185c <DM_New_Button>
	okBtn.onPress = home_onPress;
 80047c4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80047c8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80047cc:	4a9f      	ldr	r2, [pc, #636]	; (8004a4c <ChangeTimeTask+0x354>)
 80047ce:	645a      	str	r2, [r3, #68]	; 0x44
	int okBtnId = DM_Add_Element(okBtn);
 80047d0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80047d4:	f5a3 74c8 	sub.w	r4, r3, #400	; 0x190
 80047d8:	4668      	mov	r0, sp
 80047da:	f104 0310 	add.w	r3, r4, #16
 80047de:	224c      	movs	r2, #76	; 0x4c
 80047e0:	4619      	mov	r1, r3
 80047e2:	f008 f9f3 	bl	800cbcc <memcpy>
 80047e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047ea:	f7fd fb07 	bl	8001dfc <DM_Add_Element>
 80047ee:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250

	//Save button
	struct DisplayElement saveBtn = DM_New_Button(BTN_MIDDLE_X, BTN_BOTTOM_Y, "SAVE", ENABLED);
 80047f2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80047f6:	f5a3 70f6 	sub.w	r0, r3, #492	; 0x1ec
 80047fa:	2300      	movs	r3, #0
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4b94      	ldr	r3, [pc, #592]	; (8004a50 <ChangeTimeTask+0x358>)
 8004800:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004804:	21be      	movs	r1, #190	; 0xbe
 8004806:	f7fd f829 	bl	800185c <DM_New_Button>
	saveBtn.onPress = save_onPress;
 800480a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800480e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004812:	4a90      	ldr	r2, [pc, #576]	; (8004a54 <ChangeTimeTask+0x35c>)
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(saveBtn);
 8004816:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800481a:	f5a3 74f6 	sub.w	r4, r3, #492	; 0x1ec
 800481e:	4668      	mov	r0, sp
 8004820:	f104 0310 	add.w	r3, r4, #16
 8004824:	224c      	movs	r2, #76	; 0x4c
 8004826:	4619      	mov	r1, r3
 8004828:	f008 f9d0 	bl	800cbcc <memcpy>
 800482c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004830:	f7fd fae4 	bl	8001dfc <DM_Add_Element>

	//The current time in text boxes
	DM_Add_Element(DM_New_Text(10, 45, textColour, 1, "Time:"));
 8004834:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8004838:	4b87      	ldr	r3, [pc, #540]	; (8004a58 <ChangeTimeTask+0x360>)
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	2301      	movs	r3, #1
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004844:	222d      	movs	r2, #45	; 0x2d
 8004846:	210a      	movs	r1, #10
 8004848:	f7fe f9ae 	bl	8002ba8 <DM_New_Text>
 800484c:	4668      	mov	r0, sp
 800484e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8004852:	224c      	movs	r2, #76	; 0x4c
 8004854:	4619      	mov	r1, r3
 8004856:	f008 f9b9 	bl	800cbcc <memcpy>
 800485a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800485e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004860:	f7fd facc 	bl	8001dfc <DM_Add_Element>
	hrsBox = DM_New_TextBox(10, 55, 2, "HH", hrs);
 8004864:	4c7d      	ldr	r4, [pc, #500]	; (8004a5c <ChangeTimeTask+0x364>)
 8004866:	4638      	mov	r0, r7
 8004868:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	4b7c      	ldr	r3, [pc, #496]	; (8004a60 <ChangeTimeTask+0x368>)
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	2302      	movs	r3, #2
 8004874:	2237      	movs	r2, #55	; 0x37
 8004876:	210a      	movs	r1, #10
 8004878:	f7fe fa8e 	bl	8002d98 <DM_New_TextBox>
 800487c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004880:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004884:	4620      	mov	r0, r4
 8004886:	4619      	mov	r1, r3
 8004888:	235c      	movs	r3, #92	; 0x5c
 800488a:	461a      	mov	r2, r3
 800488c:	f008 f99e 	bl	800cbcc <memcpy>
	sprintf(hrsBox.text, "%d", time.hours);
 8004890:	4b72      	ldr	r3, [pc, #456]	; (8004a5c <ChangeTimeTask+0x364>)
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	4a73      	ldr	r2, [pc, #460]	; (8004a64 <ChangeTimeTask+0x36c>)
 8004896:	7892      	ldrb	r2, [r2, #2]
 8004898:	4973      	ldr	r1, [pc, #460]	; (8004a68 <ChangeTimeTask+0x370>)
 800489a:	4618      	mov	r0, r3
 800489c:	f008 faba 	bl	800ce14 <siprintf>
	DM_Add_Element(hrsBox);
 80048a0:	4c6e      	ldr	r4, [pc, #440]	; (8004a5c <ChangeTimeTask+0x364>)
 80048a2:	4668      	mov	r0, sp
 80048a4:	f104 0310 	add.w	r3, r4, #16
 80048a8:	224c      	movs	r2, #76	; 0x4c
 80048aa:	4619      	mov	r1, r3
 80048ac:	f008 f98e 	bl	800cbcc <memcpy>
 80048b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048b4:	f7fd faa2 	bl	8001dfc <DM_Add_Element>
	minsBox = DM_New_TextBox(60, 55, 2, "MM", mins);
 80048b8:	4c6c      	ldr	r4, [pc, #432]	; (8004a6c <ChangeTimeTask+0x374>)
 80048ba:	4638      	mov	r0, r7
 80048bc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	4b6b      	ldr	r3, [pc, #428]	; (8004a70 <ChangeTimeTask+0x378>)
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2302      	movs	r3, #2
 80048c8:	2237      	movs	r2, #55	; 0x37
 80048ca:	213c      	movs	r1, #60	; 0x3c
 80048cc:	f7fe fa64 	bl	8002d98 <DM_New_TextBox>
 80048d0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80048d4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048d8:	4620      	mov	r0, r4
 80048da:	4619      	mov	r1, r3
 80048dc:	235c      	movs	r3, #92	; 0x5c
 80048de:	461a      	mov	r2, r3
 80048e0:	f008 f974 	bl	800cbcc <memcpy>
	sprintf(minsBox.text, "%d", time.minutes);
 80048e4:	4b61      	ldr	r3, [pc, #388]	; (8004a6c <ChangeTimeTask+0x374>)
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	4a5e      	ldr	r2, [pc, #376]	; (8004a64 <ChangeTimeTask+0x36c>)
 80048ea:	7852      	ldrb	r2, [r2, #1]
 80048ec:	495e      	ldr	r1, [pc, #376]	; (8004a68 <ChangeTimeTask+0x370>)
 80048ee:	4618      	mov	r0, r3
 80048f0:	f008 fa90 	bl	800ce14 <siprintf>
	DM_Add_Element(minsBox);
 80048f4:	4c5d      	ldr	r4, [pc, #372]	; (8004a6c <ChangeTimeTask+0x374>)
 80048f6:	4668      	mov	r0, sp
 80048f8:	f104 0310 	add.w	r3, r4, #16
 80048fc:	224c      	movs	r2, #76	; 0x4c
 80048fe:	4619      	mov	r1, r3
 8004900:	f008 f964 	bl	800cbcc <memcpy>
 8004904:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004908:	f7fd fa78 	bl	8001dfc <DM_Add_Element>

	//Current date text boxes
	DM_Add_Element(DM_New_Text(10, 95, textColour, 1, "Date:"));
 800490c:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 8004910:	4b58      	ldr	r3, [pc, #352]	; (8004a74 <ChangeTimeTask+0x37c>)
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	2301      	movs	r3, #1
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800491c:	225f      	movs	r2, #95	; 0x5f
 800491e:	210a      	movs	r1, #10
 8004920:	f7fe f942 	bl	8002ba8 <DM_New_Text>
 8004924:	4668      	mov	r0, sp
 8004926:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800492a:	224c      	movs	r2, #76	; 0x4c
 800492c:	4619      	mov	r1, r3
 800492e:	f008 f94d 	bl	800cbcc <memcpy>
 8004932:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8004936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004938:	f7fd fa60 	bl	8001dfc <DM_Add_Element>
	dayBox = DM_New_TextBox(10, 105, 2, "DD", day);
 800493c:	4c4e      	ldr	r4, [pc, #312]	; (8004a78 <ChangeTimeTask+0x380>)
 800493e:	4638      	mov	r0, r7
 8004940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	4b4d      	ldr	r3, [pc, #308]	; (8004a7c <ChangeTimeTask+0x384>)
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	2302      	movs	r3, #2
 800494c:	2269      	movs	r2, #105	; 0x69
 800494e:	210a      	movs	r1, #10
 8004950:	f7fe fa22 	bl	8002d98 <DM_New_TextBox>
 8004954:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004958:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800495c:	4620      	mov	r0, r4
 800495e:	4619      	mov	r1, r3
 8004960:	235c      	movs	r3, #92	; 0x5c
 8004962:	461a      	mov	r2, r3
 8004964:	f008 f932 	bl	800cbcc <memcpy>
	sprintf(dayBox.text, "%d", time.day);
 8004968:	4b43      	ldr	r3, [pc, #268]	; (8004a78 <ChangeTimeTask+0x380>)
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	4a3d      	ldr	r2, [pc, #244]	; (8004a64 <ChangeTimeTask+0x36c>)
 800496e:	7912      	ldrb	r2, [r2, #4]
 8004970:	493d      	ldr	r1, [pc, #244]	; (8004a68 <ChangeTimeTask+0x370>)
 8004972:	4618      	mov	r0, r3
 8004974:	f008 fa4e 	bl	800ce14 <siprintf>
	DM_Add_Element(dayBox);
 8004978:	4c3f      	ldr	r4, [pc, #252]	; (8004a78 <ChangeTimeTask+0x380>)
 800497a:	4668      	mov	r0, sp
 800497c:	f104 0310 	add.w	r3, r4, #16
 8004980:	224c      	movs	r2, #76	; 0x4c
 8004982:	4619      	mov	r1, r3
 8004984:	f008 f922 	bl	800cbcc <memcpy>
 8004988:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800498c:	f7fd fa36 	bl	8001dfc <DM_Add_Element>
	monthBox = DM_New_TextBox(60, 105, 2, "MM", month);
 8004990:	4c3b      	ldr	r4, [pc, #236]	; (8004a80 <ChangeTimeTask+0x388>)
 8004992:	4638      	mov	r0, r7
 8004994:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	4b35      	ldr	r3, [pc, #212]	; (8004a70 <ChangeTimeTask+0x378>)
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	2302      	movs	r3, #2
 80049a0:	2269      	movs	r2, #105	; 0x69
 80049a2:	213c      	movs	r1, #60	; 0x3c
 80049a4:	f7fe f9f8 	bl	8002d98 <DM_New_TextBox>
 80049a8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80049ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80049b0:	4620      	mov	r0, r4
 80049b2:	4619      	mov	r1, r3
 80049b4:	235c      	movs	r3, #92	; 0x5c
 80049b6:	461a      	mov	r2, r3
 80049b8:	f008 f908 	bl	800cbcc <memcpy>
	sprintf(monthBox.text, "%d", time.month);
 80049bc:	4b30      	ldr	r3, [pc, #192]	; (8004a80 <ChangeTimeTask+0x388>)
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	4a28      	ldr	r2, [pc, #160]	; (8004a64 <ChangeTimeTask+0x36c>)
 80049c2:	7952      	ldrb	r2, [r2, #5]
 80049c4:	4928      	ldr	r1, [pc, #160]	; (8004a68 <ChangeTimeTask+0x370>)
 80049c6:	4618      	mov	r0, r3
 80049c8:	f008 fa24 	bl	800ce14 <siprintf>
	DM_Add_Element(monthBox);
 80049cc:	4c2c      	ldr	r4, [pc, #176]	; (8004a80 <ChangeTimeTask+0x388>)
 80049ce:	4668      	mov	r0, sp
 80049d0:	f104 0310 	add.w	r3, r4, #16
 80049d4:	224c      	movs	r2, #76	; 0x4c
 80049d6:	4619      	mov	r1, r3
 80049d8:	f008 f8f8 	bl	800cbcc <memcpy>
 80049dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049e0:	f7fd fa0c 	bl	8001dfc <DM_Add_Element>
	yearBox = DM_New_TextBox(110, 105, 4, "YYYY", year);
 80049e4:	4c27      	ldr	r4, [pc, #156]	; (8004a84 <ChangeTimeTask+0x38c>)
 80049e6:	4638      	mov	r0, r7
 80049e8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	4b26      	ldr	r3, [pc, #152]	; (8004a88 <ChangeTimeTask+0x390>)
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	2304      	movs	r3, #4
 80049f4:	2269      	movs	r2, #105	; 0x69
 80049f6:	216e      	movs	r1, #110	; 0x6e
 80049f8:	f7fe f9ce 	bl	8002d98 <DM_New_TextBox>
 80049fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004a00:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a04:	4620      	mov	r0, r4
 8004a06:	4619      	mov	r1, r3
 8004a08:	235c      	movs	r3, #92	; 0x5c
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f008 f8de 	bl	800cbcc <memcpy>
	sprintf(yearBox.text, "%d", time.year);
 8004a10:	4b1c      	ldr	r3, [pc, #112]	; (8004a84 <ChangeTimeTask+0x38c>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <ChangeTimeTask+0x36c>)
 8004a16:	6892      	ldr	r2, [r2, #8]
 8004a18:	4913      	ldr	r1, [pc, #76]	; (8004a68 <ChangeTimeTask+0x370>)
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f008 f9fa 	bl	800ce14 <siprintf>
	DM_Add_Element(yearBox);
 8004a20:	4c18      	ldr	r4, [pc, #96]	; (8004a84 <ChangeTimeTask+0x38c>)
 8004a22:	4668      	mov	r0, sp
 8004a24:	f104 0310 	add.w	r3, r4, #16
 8004a28:	224c      	movs	r2, #76	; 0x4c
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f008 f8ce 	bl	800cbcc <memcpy>
 8004a30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a34:	f7fd f9e2 	bl	8001dfc <DM_Add_Element>


	while(1);
 8004a38:	e7fe      	b.n	8004a38 <ChangeTimeTask+0x340>
 8004a3a:	bf00      	nop
 8004a3c:	0800d924 	.word	0x0800d924
 8004a40:	0800d928 	.word	0x0800d928
 8004a44:	0800d8d8 	.word	0x0800d8d8
 8004a48:	0800d8ec 	.word	0x0800d8ec
 8004a4c:	08000d4d 	.word	0x08000d4d
 8004a50:	0800d8f4 	.word	0x0800d8f4
 8004a54:	08004a8d 	.word	0x08004a8d
 8004a58:	0800d8fc 	.word	0x0800d8fc
 8004a5c:	200050ec 	.word	0x200050ec
 8004a60:	0800d904 	.word	0x0800d904
 8004a64:	200040d8 	.word	0x200040d8
 8004a68:	0800d908 	.word	0x0800d908
 8004a6c:	20005148 	.word	0x20005148
 8004a70:	0800d90c 	.word	0x0800d90c
 8004a74:	0800d910 	.word	0x0800d910
 8004a78:	200051a4 	.word	0x200051a4
 8004a7c:	0800d918 	.word	0x0800d918
 8004a80:	20005200 	.word	0x20005200
 8004a84:	2000525c 	.word	0x2000525c
 8004a88:	0800d91c 	.word	0x0800d91c

08004a8c <save_onPress>:
}

/**
 * Saves the selected time to the RTC
 */
void save_onPress(int id) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08e      	sub	sp, #56	; 0x38
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	//Get the time as actual numbers from the text boxes
	int hrs = atoi(hrsBox.text);
 8004a94:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <save_onPress+0xa4>)
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f008 f867 	bl	800cb6c <atoi>
 8004a9e:	6378      	str	r0, [r7, #52]	; 0x34
	int mins = atoi(minsBox.text);
 8004aa0:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <save_onPress+0xa8>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f008 f861 	bl	800cb6c <atoi>
 8004aaa:	6338      	str	r0, [r7, #48]	; 0x30
	int secs = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	int day = atoi(dayBox.text);
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <save_onPress+0xac>)
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f008 f859 	bl	800cb6c <atoi>
 8004aba:	62b8      	str	r0, [r7, #40]	; 0x28
	int month = atoi(monthBox.text);
 8004abc:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <save_onPress+0xb0>)
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f008 f853 	bl	800cb6c <atoi>
 8004ac6:	6278      	str	r0, [r7, #36]	; 0x24
	int year = atoi(yearBox.text);
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <save_onPress+0xb4>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	4618      	mov	r0, r3
 8004ace:	f008 f84d 	bl	800cb6c <atoi>
 8004ad2:	6238      	str	r0, [r7, #32]

	//Get the current time, then update the struct
	struct Time thisTime = RTC_get_time_date();
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fe fded 	bl	80036b8 <RTC_get_time_date>
	//Change the old time to the new time
	thisTime.hours = hrs;
 8004ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	72bb      	strb	r3, [r7, #10]
	thisTime.minutes = mins;
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	727b      	strb	r3, [r7, #9]
	thisTime.seconds = secs;
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	723b      	strb	r3, [r7, #8]
	thisTime.day = day;
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	733b      	strb	r3, [r7, #12]
	thisTime.month = month;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	737b      	strb	r3, [r7, #13]
	thisTime.year = year;
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	613b      	str	r3, [r7, #16]

	//Check bounds and Send it to the device
	RTC_update_clock(checkTimeBounds(thisTime));
 8004b00:	f107 0014 	add.w	r0, r7, #20
 8004b04:	f107 0308 	add.w	r3, r7, #8
 8004b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b0a:	f7fe fe9c 	bl	8003846 <checkTimeBounds>
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b16:	f7fe fd7d 	bl	8003614 <RTC_update_clock>

	//Return to main menu
	xTaskNotify(changeScreenTaskHandle, MAIN_MENU, eSetValueWithOverwrite);
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <save_onPress+0xb8>)
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2203      	movs	r2, #3
 8004b22:	2102      	movs	r1, #2
 8004b24:	f007 f9e2 	bl	800beec <xTaskGenericNotify>

	return;
 8004b28:	bf00      	nop
}
 8004b2a:	3738      	adds	r7, #56	; 0x38
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	200050ec 	.word	0x200050ec
 8004b34:	20005148 	.word	0x20005148
 8004b38:	200051a4 	.word	0x200051a4
 8004b3c:	20005200 	.word	0x20005200
 8004b40:	2000525c 	.word	0x2000525c
 8004b44:	200040cc 	.word	0x200040cc

08004b48 <DeviceTestTask>:
void OK_Press(int id);

/**
 * The main task.
 */
void DeviceTestTask(void const * arguments) {
 8004b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4a:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
 8004b4e:	af14      	add	r7, sp, #80	; 0x50
 8004b50:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004b54:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8004b58:	6018      	str	r0, [r3, #0]

	const unsigned int textColour = COLOR_BLACK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

	//Add some dummy display elements
	DM_Add_Element(DM_New_Title_Bar("Device Test"));
 8004b60:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004b64:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8004b68:	49b9      	ldr	r1, [pc, #740]	; (8004e50 <DeviceTestTask+0x308>)
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fbaa 	bl	80032c4 <DM_New_Title_Bar>
 8004b70:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004b74:	f5a3 7412 	sub.w	r4, r3, #584	; 0x248
 8004b78:	4668      	mov	r0, sp
 8004b7a:	f104 0310 	add.w	r3, r4, #16
 8004b7e:	224c      	movs	r2, #76	; 0x4c
 8004b80:	4619      	mov	r1, r3
 8004b82:	f008 f823 	bl	800cbcc <memcpy>
 8004b86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b8a:	f7fd f937 	bl	8001dfc <DM_Add_Element>

	//Show a loding animation while we test peripherals
	int loadingText = DM_Add_Element(DM_New_Text(208, 160, textColour, 1, "Loading..."));
 8004b8e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8004b92:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004b96:	f5a2 70f6 	sub.w	r0, r2, #492	; 0x1ec
 8004b9a:	4aae      	ldr	r2, [pc, #696]	; (8004e54 <DeviceTestTask+0x30c>)
 8004b9c:	9201      	str	r2, [sp, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	9200      	str	r2, [sp, #0]
 8004ba2:	22a0      	movs	r2, #160	; 0xa0
 8004ba4:	21d0      	movs	r1, #208	; 0xd0
 8004ba6:	f7fd ffff 	bl	8002ba8 <DM_New_Text>
 8004baa:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004bae:	f5a3 74f6 	sub.w	r4, r3, #492	; 0x1ec
 8004bb2:	4668      	mov	r0, sp
 8004bb4:	f104 0310 	add.w	r3, r4, #16
 8004bb8:	224c      	movs	r2, #76	; 0x4c
 8004bba:	4619      	mov	r1, r3
 8004bbc:	f008 f806 	bl	800cbcc <memcpy>
 8004bc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004bc4:	f7fd f91a 	bl	8001dfc <DM_Add_Element>
 8004bc8:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
	int loadingAnimation = DM_Add_Element(DM_New_Animation(218, 180, 1, myAnimation, 3));
 8004bcc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004bd0:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	4b9f      	ldr	r3, [pc, #636]	; (8004e58 <DeviceTestTask+0x310>)
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2301      	movs	r3, #1
 8004bde:	22b4      	movs	r2, #180	; 0xb4
 8004be0:	21da      	movs	r1, #218	; 0xda
 8004be2:	f7fc fd39 	bl	8001658 <DM_New_Animation>
 8004be6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004bea:	f5a3 74c8 	sub.w	r4, r3, #400	; 0x190
 8004bee:	4668      	mov	r0, sp
 8004bf0:	f104 0310 	add.w	r3, r4, #16
 8004bf4:	224c      	movs	r2, #76	; 0x4c
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f007 ffe8 	bl	800cbcc <memcpy>
 8004bfc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c00:	f7fd f8fc 	bl	8001dfc <DM_Add_Element>
 8004c04:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0

	//Reset the MP3 player module
	DFPlayer_resetModule();
 8004c08:	f7fe fcfa 	bl	8003600 <DFPlayer_resetModule>
	//Wait for the device to reset... It's slow
	osDelay(1000);
 8004c0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c10:	f005 f9a6 	bl	8009f60 <osDelay>
	//Test communication with the player
    int status = DFPlayer_getStatus();
 8004c14:	f7fe fcd3 	bl	80035be <DFPlayer_getStatus>
 8004c18:	f8c7 03dc 	str.w	r0, [r7, #988]	; 0x3dc
    int timeout = 10;
 8004c1c:	230a      	movs	r3, #10
 8004c1e:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    int songs = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    while(timeout--) {
 8004c28:	e008      	b.n	8004c3c <DeviceTestTask+0xf4>
    	songs = DFPlayer_getTracksInFolder(0);
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f7fe fcd5 	bl	80035da <DFPlayer_getTracksInFolder>
 8004c30:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
    	if(songs > 0)
 8004c34:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	dc07      	bgt.n	8004c4c <DeviceTestTask+0x104>
    while(timeout--) {
 8004c3c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8004c40:	1e5a      	subs	r2, r3, #1
 8004c42:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ef      	bne.n	8004c2a <DeviceTestTask+0xe2>
 8004c4a:	e000      	b.n	8004c4e <DeviceTestTask+0x106>
    		break;
 8004c4c:	bf00      	nop
    }
    char numSongs[64];
    sprintf(numSongs, "DFPlayer Status: %d, with %d songs.", status, songs);
 8004c4e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8004c52:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8004c56:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8004c5a:	4980      	ldr	r1, [pc, #512]	; (8004e5c <DeviceTestTask+0x314>)
 8004c5c:	f008 f8da 	bl	800ce14 <siprintf>


	//Make a list of I2C devices
	char deviceString[128] = "I2C Devices:";
 8004c60:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004c64:	f5a3 7542 	sub.w	r5, r3, #776	; 0x308
 8004c68:	4b7d      	ldr	r3, [pc, #500]	; (8004e60 <DeviceTestTask+0x318>)
 8004c6a:	462c      	mov	r4, r5
 8004c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c6e:	c407      	stmia	r4!, {r0, r1, r2}
 8004c70:	7023      	strb	r3, [r4, #0]
 8004c72:	f105 030d 	add.w	r3, r5, #13
 8004c76:	2273      	movs	r2, #115	; 0x73
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f007 ffb4 	bl	800cbe8 <memset>
	for(char i = 0; i < 128; i++) {
 8004c80:	2300      	movs	r3, #0
 8004c82:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
 8004c86:	e01a      	b.n	8004cbe <DeviceTestTask+0x176>
		if(HAL_I2C_IsDeviceReady (&hi2c1, i << 1, 10, 250) == HAL_OK) {
 8004c88:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	b299      	uxth	r1, r3
 8004c92:	23fa      	movs	r3, #250	; 0xfa
 8004c94:	220a      	movs	r2, #10
 8004c96:	4873      	ldr	r0, [pc, #460]	; (8004e64 <DeviceTestTask+0x31c>)
 8004c98:	f001 ffa0 	bl	8006bdc <HAL_I2C_IsDeviceReady>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <DeviceTestTask+0x16c>
			sprintf(deviceString, "%s %d", deviceString, i);
 8004ca2:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 8004ca6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004caa:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8004cae:	496e      	ldr	r1, [pc, #440]	; (8004e68 <DeviceTestTask+0x320>)
 8004cb0:	f008 f8b0 	bl	800ce14 <siprintf>
	for(char i = 0; i < 128; i++) {
 8004cb4:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 8004cb8:	3301      	adds	r3, #1
 8004cba:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
 8004cbe:	f997 33ef 	ldrsb.w	r3, [r7, #1007]	; 0x3ef
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	dae0      	bge.n	8004c88 <DeviceTestTask+0x140>
		}
	}

	//Confirm communication with the RTC
	struct Time thisTime = RTC_get_time_date();
 8004cc6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004cca:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fcf2 	bl	80036b8 <RTC_get_time_date>
	char timeDateString[128];
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8004cd4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004cd8:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004cdc:	78db      	ldrb	r3, [r3, #3]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4a60      	ldr	r2, [pc, #384]	; (8004e6c <DeviceTestTask+0x324>)
 8004cea:	1899      	adds	r1, r3, r2
 8004cec:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004cf0:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004cf4:	791b      	ldrb	r3, [r3, #4]
 8004cf6:	469c      	mov	ip, r3
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 8004cf8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004cfc:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004d00:	795b      	ldrb	r3, [r3, #5]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8004d02:	461c      	mov	r4, r3
 8004d04:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004d08:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004d0c:	689b      	ldr	r3, [r3, #8]
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 8004d0e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004d12:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8004d16:	7892      	ldrb	r2, [r2, #2]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8004d18:	4615      	mov	r5, r2
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 8004d1a:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004d1e:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8004d22:	7852      	ldrb	r2, [r2, #1]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8004d24:	4616      	mov	r6, r2
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 8004d26:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004d2a:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8004d2e:	7812      	ldrb	r2, [r2, #0]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8004d30:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8004d34:	9204      	str	r2, [sp, #16]
 8004d36:	9603      	str	r6, [sp, #12]
 8004d38:	9502      	str	r5, [sp, #8]
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	9400      	str	r4, [sp, #0]
 8004d3e:	4663      	mov	r3, ip
 8004d40:	460a      	mov	r2, r1
 8004d42:	494b      	ldr	r1, [pc, #300]	; (8004e70 <DeviceTestTask+0x328>)
 8004d44:	f008 f866 	bl	800ce14 <siprintf>


	//List of I2C devices found
	DM_Add_Element(DM_New_Text(10, 45, textColour, 1, deviceString));
 8004d48:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8004d4c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004d50:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8004d54:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	222d      	movs	r2, #45	; 0x2d
 8004d62:	210a      	movs	r1, #10
 8004d64:	f7fd ff20 	bl	8002ba8 <DM_New_Text>
 8004d68:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004d6c:	f5a3 749a 	sub.w	r4, r3, #308	; 0x134
 8004d70:	4668      	mov	r0, sp
 8004d72:	f104 0310 	add.w	r3, r4, #16
 8004d76:	224c      	movs	r2, #76	; 0x4c
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f007 ff27 	bl	800cbcc <memcpy>
 8004d7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d82:	f7fd f83b 	bl	8001dfc <DM_Add_Element>
	//List tracks on MP3
	DM_Add_Element(DM_New_Text(10, 60, textColour, 1, numSongs));
 8004d86:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8004d8a:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8004d8e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	2301      	movs	r3, #1
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	223c      	movs	r2, #60	; 0x3c
 8004d9c:	210a      	movs	r1, #10
 8004d9e:	f7fd ff03 	bl	8002ba8 <DM_New_Text>
 8004da2:	4668      	mov	r0, sp
 8004da4:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8004da8:	224c      	movs	r2, #76	; 0x4c
 8004daa:	4619      	mov	r1, r3
 8004dac:	f007 ff0e 	bl	800cbcc <memcpy>
 8004db0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8004db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004db6:	f7fd f821 	bl	8001dfc <DM_Add_Element>
	//List current time on the clock
	DM_Add_Element(DM_New_Text(10, 75, textColour, 1, timeDateString));
 8004dba:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8004dbe:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 8004dc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	2301      	movs	r3, #1
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	224b      	movs	r2, #75	; 0x4b
 8004dd0:	210a      	movs	r1, #10
 8004dd2:	f7fd fee9 	bl	8002ba8 <DM_New_Text>
 8004dd6:	4668      	mov	r0, sp
 8004dd8:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8004ddc:	224c      	movs	r2, #76	; 0x4c
 8004dde:	4619      	mov	r1, r3
 8004de0:	f007 fef4 	bl	800cbcc <memcpy>
 8004de4:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8004de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dea:	f7fd f807 	bl	8001dfc <DM_Add_Element>

	//Remove the loading animations
	DM_Remove_Element(loadingText);
 8004dee:	f8d7 03e4 	ldr.w	r0, [r7, #996]	; 0x3e4
 8004df2:	f7fd f86b 	bl	8001ecc <DM_Remove_Element>
	DM_Remove_Element(loadingAnimation);
 8004df6:	f8d7 03e0 	ldr.w	r0, [r7, #992]	; 0x3e0
 8004dfa:	f7fd f867 	bl	8001ecc <DM_Remove_Element>

	//OK button
	struct DisplayElement okBtn = DM_New_Button(BTN_RIGHT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 8004dfe:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004e02:	f5a3 707c 	sub.w	r0, r3, #1008	; 0x3f0
 8004e06:	2300      	movs	r3, #0
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <DeviceTestTask+0x32c>)
 8004e0c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004e10:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8004e14:	f7fc fd22 	bl	800185c <DM_New_Button>
	okBtn.onPress = OK_Press;
 8004e18:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004e1c:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <DeviceTestTask+0x330>)
 8004e22:	645a      	str	r2, [r3, #68]	; 0x44
	int okBtnId = DM_Add_Element(okBtn);
 8004e24:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004e28:	f5a3 747c 	sub.w	r4, r3, #1008	; 0x3f0
 8004e2c:	4668      	mov	r0, sp
 8004e2e:	f104 0310 	add.w	r3, r4, #16
 8004e32:	224c      	movs	r2, #76	; 0x4c
 8004e34:	4619      	mov	r1, r3
 8004e36:	f007 fec9 	bl	800cbcc <memcpy>
 8004e3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e3e:	f7fc ffdd 	bl	8001dfc <DM_Add_Element>
 8004e42:	f8c7 03d8 	str.w	r0, [r7, #984]	; 0x3d8

	while(1) {
		osDelay(1000);
 8004e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e4a:	f005 f889 	bl	8009f60 <osDelay>
 8004e4e:	e7fa      	b.n	8004e46 <DeviceTestTask+0x2fe>
 8004e50:	0800d930 	.word	0x0800d930
 8004e54:	0800d93c 	.word	0x0800d93c
 8004e58:	20000004 	.word	0x20000004
 8004e5c:	0800d948 	.word	0x0800d948
 8004e60:	0800d998 	.word	0x0800d998
 8004e64:	200043cc 	.word	0x200043cc
 8004e68:	0800d96c 	.word	0x0800d96c
 8004e6c:	0800f08c 	.word	0x0800f08c
 8004e70:	0800d974 	.word	0x0800d974
 8004e74:	0800d990 	.word	0x0800d990
 8004e78:	08004e7d 	.word	0x08004e7d

08004e7c <OK_Press>:
	}
}

void OK_Press(int id) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	//Stop the music playing
	DFPlayer_setPause();
 8004e84:	f7fe fb92 	bl	80035ac <DFPlayer_setPause>

	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, MAIN_MENU, eSetValueWithOverwrite);
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <OK_Press+0x24>)
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2203      	movs	r2, #3
 8004e90:	2102      	movs	r1, #2
 8004e92:	f007 f82b 	bl	800beec <xTaskGenericNotify>
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200040cc 	.word	0x200040cc

08004ea4 <EditTimerTask>:


/**
 * Entry point for the Edit Time screen.
 */
void EditTimerTask(void const * arguments) {
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	f6ad 1d24 	subw	sp, sp, #2340	; 0x924
 8004eaa:	af14      	add	r7, sp, #80	; 0x50
 8004eac:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004eb0:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 8004eb4:	6018      	str	r0, [r3, #0]
	//Some default colours
	const int textColour = COLOR_BLACK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc

	//Variables used throughout the page
	char hrs[3] = "\0  ";
 8004ebc:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004ec0:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 8004ec4:	4ae7      	ldr	r2, [pc, #924]	; (8005264 <EditTimerTask+0x3c0>)
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	4611      	mov	r1, r2
 8004eca:	8019      	strh	r1, [r3, #0]
 8004ecc:	3302      	adds	r3, #2
 8004ece:	0c12      	lsrs	r2, r2, #16
 8004ed0:	701a      	strb	r2, [r3, #0]
	char mins[3] = "\0  ";
 8004ed2:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004ed6:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8004eda:	4ae2      	ldr	r2, [pc, #904]	; (8005264 <EditTimerTask+0x3c0>)
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	8019      	strh	r1, [r3, #0]
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	0c12      	lsrs	r2, r2, #16
 8004ee6:	701a      	strb	r2, [r3, #0]
	char secs[3] = "00\0";
 8004ee8:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004eec:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 8004ef0:	4add      	ldr	r2, [pc, #884]	; (8005268 <EditTimerTask+0x3c4>)
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	8019      	strh	r1, [r3, #0]
 8004ef8:	3302      	adds	r3, #2
 8004efa:	0c12      	lsrs	r2, r2, #16
 8004efc:	701a      	strb	r2, [r3, #0]
	char duration[4] = "\0   ";
 8004efe:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004f02:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 8004f06:	4ad9      	ldr	r2, [pc, #868]	; (800526c <EditTimerTask+0x3c8>)
 8004f08:	601a      	str	r2, [r3, #0]
	struct DisplayElement minsBox;
	struct DisplayElement secsBox;
	struct DisplayElement durationBox;

	//Start with the screen elements
	DM_Add_Element(DM_New_Title_Bar("Edit Timer"));
 8004f0a:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004f0e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f12:	49d7      	ldr	r1, [pc, #860]	; (8005270 <EditTimerTask+0x3cc>)
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe f9d5 	bl	80032c4 <DM_New_Title_Bar>
 8004f1a:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004f1e:	f2a3 648c 	subw	r4, r3, #1676	; 0x68c
 8004f22:	4668      	mov	r0, sp
 8004f24:	f104 0310 	add.w	r3, r4, #16
 8004f28:	224c      	movs	r2, #76	; 0x4c
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	f007 fe4e 	bl	800cbcc <memcpy>
 8004f30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f34:	f7fc ff62 	bl	8001dfc <DM_Add_Element>

	//HOME
	struct DisplayElement okBtn = DM_New_Button(BTN_LEFT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 8004f38:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004f3c:	f6a3 0068 	subw	r0, r3, #2152	; 0x868
 8004f40:	2300      	movs	r3, #0
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4bcb      	ldr	r3, [pc, #812]	; (8005274 <EditTimerTask+0x3d0>)
 8004f46:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004f4a:	210a      	movs	r1, #10
 8004f4c:	f7fc fc86 	bl	800185c <DM_New_Button>
	okBtn.onPress = home_onPress;
 8004f50:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004f54:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8004f58:	4ac7      	ldr	r2, [pc, #796]	; (8005278 <EditTimerTask+0x3d4>)
 8004f5a:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(okBtn);
 8004f5c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004f60:	f6a3 0468 	subw	r4, r3, #2152	; 0x868
 8004f64:	4668      	mov	r0, sp
 8004f66:	f104 0310 	add.w	r3, r4, #16
 8004f6a:	224c      	movs	r2, #76	; 0x4c
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f007 fe2d 	bl	800cbcc <memcpy>
 8004f72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f76:	f7fc ff41 	bl	8001dfc <DM_Add_Element>

	//Save button
	struct DisplayElement saveBtn = DM_New_Button(BTN_MIDDLE_X, BTN_BOTTOM_Y, "SAVE", ENABLED);
 8004f7a:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004f7e:	f6a3 00c4 	subw	r0, r3, #2244	; 0x8c4
 8004f82:	2300      	movs	r3, #0
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	4bbd      	ldr	r3, [pc, #756]	; (800527c <EditTimerTask+0x3d8>)
 8004f88:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004f8c:	21be      	movs	r1, #190	; 0xbe
 8004f8e:	f7fc fc65 	bl	800185c <DM_New_Button>
	//saveBtn.onPress = save_onPress;
	DM_Add_Element(saveBtn);
 8004f92:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004f96:	f6a3 04c4 	subw	r4, r3, #2244	; 0x8c4
 8004f9a:	4668      	mov	r0, sp
 8004f9c:	f104 0310 	add.w	r3, r4, #16
 8004fa0:	224c      	movs	r2, #76	; 0x4c
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	f007 fe12 	bl	800cbcc <memcpy>
 8004fa8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fac:	f7fc ff26 	bl	8001dfc <DM_Add_Element>


	//Time elements
	DM_Add_Element(DM_New_Text(10, 45, textColour, 1, "Start Time:"));
 8004fb0:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004fb4:	f5a3 60c6 	sub.w	r0, r3, #1584	; 0x630
 8004fb8:	4bb1      	ldr	r3, [pc, #708]	; (8005280 <EditTimerTask+0x3dc>)
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 8004fc4:	222d      	movs	r2, #45	; 0x2d
 8004fc6:	210a      	movs	r1, #10
 8004fc8:	f7fd fdee 	bl	8002ba8 <DM_New_Text>
 8004fcc:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004fd0:	f5a3 64c6 	sub.w	r4, r3, #1584	; 0x630
 8004fd4:	4668      	mov	r0, sp
 8004fd6:	f104 0310 	add.w	r3, r4, #16
 8004fda:	224c      	movs	r2, #76	; 0x4c
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f007 fdf5 	bl	800cbcc <memcpy>
 8004fe2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fe6:	f7fc ff09 	bl	8001dfc <DM_Add_Element>
	hrsBox = DM_New_TextBox(10, 55, 2, "HH", hrs);
 8004fea:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004fee:	f5a3 60df 	sub.w	r0, r3, #1784	; 0x6f8
 8004ff2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	4ba2      	ldr	r3, [pc, #648]	; (8005284 <EditTimerTask+0x3e0>)
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	2237      	movs	r2, #55	; 0x37
 8005000:	210a      	movs	r1, #10
 8005002:	f7fd fec9 	bl	8002d98 <DM_New_TextBox>
	DM_Add_Element(hrsBox);
 8005006:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800500a:	f5a3 64df 	sub.w	r4, r3, #1784	; 0x6f8
 800500e:	4668      	mov	r0, sp
 8005010:	f104 0310 	add.w	r3, r4, #16
 8005014:	224c      	movs	r2, #76	; 0x4c
 8005016:	4619      	mov	r1, r3
 8005018:	f007 fdd8 	bl	800cbcc <memcpy>
 800501c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005020:	f7fc feec 	bl	8001dfc <DM_Add_Element>
	minsBox = DM_New_TextBox(60, 55, 2, "MM", mins);
 8005024:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005028:	f2a3 7054 	subw	r0, r3, #1876	; 0x754
 800502c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	4b95      	ldr	r3, [pc, #596]	; (8005288 <EditTimerTask+0x3e4>)
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	2302      	movs	r3, #2
 8005038:	2237      	movs	r2, #55	; 0x37
 800503a:	213c      	movs	r1, #60	; 0x3c
 800503c:	f7fd feac 	bl	8002d98 <DM_New_TextBox>
	DM_Add_Element(minsBox);
 8005040:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005044:	f2a3 7454 	subw	r4, r3, #1876	; 0x754
 8005048:	4668      	mov	r0, sp
 800504a:	f104 0310 	add.w	r3, r4, #16
 800504e:	224c      	movs	r2, #76	; 0x4c
 8005050:	4619      	mov	r1, r3
 8005052:	f007 fdbb 	bl	800cbcc <memcpy>
 8005056:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800505a:	f7fc fecf 	bl	8001dfc <DM_Add_Element>
	secsBox = DM_New_TextBox(110, 55, 2, "SS", secs);
 800505e:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005062:	f5a3 60f6 	sub.w	r0, r3, #1968	; 0x7b0
 8005066:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	4b87      	ldr	r3, [pc, #540]	; (800528c <EditTimerTask+0x3e8>)
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2302      	movs	r3, #2
 8005072:	2237      	movs	r2, #55	; 0x37
 8005074:	216e      	movs	r1, #110	; 0x6e
 8005076:	f7fd fe8f 	bl	8002d98 <DM_New_TextBox>
	DM_Add_Element(secsBox);
 800507a:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800507e:	f5a3 64f6 	sub.w	r4, r3, #1968	; 0x7b0
 8005082:	4668      	mov	r0, sp
 8005084:	f104 0310 	add.w	r3, r4, #16
 8005088:	224c      	movs	r2, #76	; 0x4c
 800508a:	4619      	mov	r1, r3
 800508c:	f007 fd9e 	bl	800cbcc <memcpy>
 8005090:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005094:	f7fc feb2 	bl	8001dfc <DM_Add_Element>
	//Duration
	DM_Add_Element(DM_New_Text(180, 45, textColour, 1, "Duration:"));
 8005098:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800509c:	f2a3 50d4 	subw	r0, r3, #1492	; 0x5d4
 80050a0:	4b7b      	ldr	r3, [pc, #492]	; (8005290 <EditTimerTask+0x3ec>)
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	2301      	movs	r3, #1
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 80050ac:	222d      	movs	r2, #45	; 0x2d
 80050ae:	21b4      	movs	r1, #180	; 0xb4
 80050b0:	f7fd fd7a 	bl	8002ba8 <DM_New_Text>
 80050b4:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80050b8:	f2a3 54d4 	subw	r4, r3, #1492	; 0x5d4
 80050bc:	4668      	mov	r0, sp
 80050be:	f104 0310 	add.w	r3, r4, #16
 80050c2:	224c      	movs	r2, #76	; 0x4c
 80050c4:	4619      	mov	r1, r3
 80050c6:	f007 fd81 	bl	800cbcc <memcpy>
 80050ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80050ce:	f7fc fe95 	bl	8001dfc <DM_Add_Element>
	durationBox = DM_New_TextBox(180, 55, 4, "Secs", duration);
 80050d2:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80050d6:	f6a3 000c 	subw	r0, r3, #2060	; 0x80c
 80050da:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	4b6c      	ldr	r3, [pc, #432]	; (8005294 <EditTimerTask+0x3f0>)
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	2304      	movs	r3, #4
 80050e6:	2237      	movs	r2, #55	; 0x37
 80050e8:	21b4      	movs	r1, #180	; 0xb4
 80050ea:	f7fd fe55 	bl	8002d98 <DM_New_TextBox>
	DM_Add_Element(durationBox);
 80050ee:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80050f2:	f6a3 040c 	subw	r4, r3, #2060	; 0x80c
 80050f6:	4668      	mov	r0, sp
 80050f8:	f104 0310 	add.w	r3, r4, #16
 80050fc:	224c      	movs	r2, #76	; 0x4c
 80050fe:	4619      	mov	r1, r3
 8005100:	f007 fd64 	bl	800cbcc <memcpy>
 8005104:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005108:	f7fc fe78 	bl	8001dfc <DM_Add_Element>

	//Days to enable
	DM_Add_Element(DM_New_Text(10, 100, textColour, 1, "Days to Run:"));
 800510c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005110:	f5a3 60af 	sub.w	r0, r3, #1400	; 0x578
 8005114:	4b60      	ldr	r3, [pc, #384]	; (8005298 <EditTimerTask+0x3f4>)
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	2301      	movs	r3, #1
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 8005120:	2264      	movs	r2, #100	; 0x64
 8005122:	210a      	movs	r1, #10
 8005124:	f7fd fd40 	bl	8002ba8 <DM_New_Text>
 8005128:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800512c:	f5a3 64af 	sub.w	r4, r3, #1400	; 0x578
 8005130:	4668      	mov	r0, sp
 8005132:	f104 0310 	add.w	r3, r4, #16
 8005136:	224c      	movs	r2, #76	; 0x4c
 8005138:	4619      	mov	r1, r3
 800513a:	f007 fd47 	bl	800cbcc <memcpy>
 800513e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005142:	f7fc fe5b 	bl	8001dfc <DM_Add_Element>
	int xPos = 10;
 8005146:	230a      	movs	r3, #10
 8005148:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
	int yPos = 120;
 800514c:	2378      	movs	r3, #120	; 0x78
 800514e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
	const int space = 40;
 8005152:	2328      	movs	r3, #40	; 0x28
 8005154:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
	const int offset = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
	DM_Add_Element(DM_New_Text(xPos, yPos, COLOR_BLACK, 1, "SUN"));
 800515e:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005162:	f2a3 501c 	subw	r0, r3, #1308	; 0x51c
 8005166:	4b4d      	ldr	r3, [pc, #308]	; (800529c <EditTimerTask+0x3f8>)
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	2301      	movs	r3, #1
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2300      	movs	r3, #0
 8005170:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8005174:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 8005178:	f7fd fd16 	bl	8002ba8 <DM_New_Text>
 800517c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005180:	f2a3 541c 	subw	r4, r3, #1308	; 0x51c
 8005184:	4668      	mov	r0, sp
 8005186:	f104 0310 	add.w	r3, r4, #16
 800518a:	224c      	movs	r2, #76	; 0x4c
 800518c:	4619      	mov	r1, r3
 800518e:	f007 fd1d 	bl	800cbcc <memcpy>
 8005192:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005196:	f7fc fe31 	bl	8001dfc <DM_Add_Element>
	DM_Add_Element(DM_New_TickBox(xPos + offset, yPos + 10, 0));
 800519a:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 800519e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80051a2:	18d1      	adds	r1, r2, r3
 80051a4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80051a8:	f103 020a 	add.w	r2, r3, #10
 80051ac:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80051b0:	f5a3 6098 	sub.w	r0, r3, #1216	; 0x4c0
 80051b4:	2300      	movs	r3, #0
 80051b6:	f7fd ff9f 	bl	80030f8 <DM_New_TickBox>
 80051ba:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80051be:	f5a3 6498 	sub.w	r4, r3, #1216	; 0x4c0
 80051c2:	4668      	mov	r0, sp
 80051c4:	f104 0310 	add.w	r3, r4, #16
 80051c8:	224c      	movs	r2, #76	; 0x4c
 80051ca:	4619      	mov	r1, r3
 80051cc:	f007 fcfe 	bl	800cbcc <memcpy>
 80051d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80051d4:	f7fc fe12 	bl	8001dfc <DM_Add_Element>
	xPos += space;
 80051d8:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 80051dc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80051e0:	4413      	add	r3, r2
 80051e2:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
	DM_Add_Element(DM_New_Text(xPos, yPos, COLOR_BLACK, 1, "MON"));
 80051e6:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80051ea:	f2a3 4064 	subw	r0, r3, #1124	; 0x464
 80051ee:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <EditTimerTask+0x3fc>)
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	2301      	movs	r3, #1
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80051fc:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 8005200:	f7fd fcd2 	bl	8002ba8 <DM_New_Text>
 8005204:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005208:	f2a3 4464 	subw	r4, r3, #1124	; 0x464
 800520c:	4668      	mov	r0, sp
 800520e:	f104 0310 	add.w	r3, r4, #16
 8005212:	224c      	movs	r2, #76	; 0x4c
 8005214:	4619      	mov	r1, r3
 8005216:	f007 fcd9 	bl	800cbcc <memcpy>
 800521a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800521e:	f7fc fded 	bl	8001dfc <DM_Add_Element>
	DM_Add_Element(DM_New_TickBox(xPos + offset, yPos + 10, 0));
 8005222:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 8005226:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800522a:	18d1      	adds	r1, r2, r3
 800522c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8005230:	f103 020a 	add.w	r2, r3, #10
 8005234:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005238:	f5a3 6081 	sub.w	r0, r3, #1032	; 0x408
 800523c:	2300      	movs	r3, #0
 800523e:	f7fd ff5b 	bl	80030f8 <DM_New_TickBox>
 8005242:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005246:	f5a3 6481 	sub.w	r4, r3, #1032	; 0x408
 800524a:	4668      	mov	r0, sp
 800524c:	f104 0310 	add.w	r3, r4, #16
 8005250:	224c      	movs	r2, #76	; 0x4c
 8005252:	4619      	mov	r1, r3
 8005254:	f007 fcba 	bl	800cbcc <memcpy>
 8005258:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800525c:	f7fc fdce 	bl	8001dfc <DM_Add_Element>
 8005260:	e020      	b.n	80052a4 <EditTimerTask+0x400>
 8005262:	bf00      	nop
 8005264:	0800da8c 	.word	0x0800da8c
 8005268:	0800da90 	.word	0x0800da90
 800526c:	20202000 	.word	0x20202000
 8005270:	0800da18 	.word	0x0800da18
 8005274:	0800da24 	.word	0x0800da24
 8005278:	08000d4d 	.word	0x08000d4d
 800527c:	0800da2c 	.word	0x0800da2c
 8005280:	0800da34 	.word	0x0800da34
 8005284:	0800da40 	.word	0x0800da40
 8005288:	0800da44 	.word	0x0800da44
 800528c:	0800da48 	.word	0x0800da48
 8005290:	0800da4c 	.word	0x0800da4c
 8005294:	0800da58 	.word	0x0800da58
 8005298:	0800da60 	.word	0x0800da60
 800529c:	0800da70 	.word	0x0800da70
 80052a0:	0800da74 	.word	0x0800da74
	xPos += space;
 80052a4:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 80052a8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80052ac:	4413      	add	r3, r2
 80052ae:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
	DM_Add_Element(DM_New_Text(xPos, yPos, COLOR_BLACK, 1, "TUE"));
 80052b2:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80052b6:	f5a3 706b 	sub.w	r0, r3, #940	; 0x3ac
 80052ba:	4ba0      	ldr	r3, [pc, #640]	; (800553c <EditTimerTask+0x698>)
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	2301      	movs	r3, #1
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80052c8:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 80052cc:	f7fd fc6c 	bl	8002ba8 <DM_New_Text>
 80052d0:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80052d4:	f5a3 746b 	sub.w	r4, r3, #940	; 0x3ac
 80052d8:	4668      	mov	r0, sp
 80052da:	f104 0310 	add.w	r3, r4, #16
 80052de:	224c      	movs	r2, #76	; 0x4c
 80052e0:	4619      	mov	r1, r3
 80052e2:	f007 fc73 	bl	800cbcc <memcpy>
 80052e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80052ea:	f7fc fd87 	bl	8001dfc <DM_Add_Element>
	DM_Add_Element(DM_New_TickBox(xPos + offset, yPos + 10, 0));
 80052ee:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 80052f2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80052f6:	18d1      	adds	r1, r2, r3
 80052f8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80052fc:	f103 020a 	add.w	r2, r3, #10
 8005300:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005304:	f5a3 7054 	sub.w	r0, r3, #848	; 0x350
 8005308:	2300      	movs	r3, #0
 800530a:	f7fd fef5 	bl	80030f8 <DM_New_TickBox>
 800530e:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005312:	f5a3 7454 	sub.w	r4, r3, #848	; 0x350
 8005316:	4668      	mov	r0, sp
 8005318:	f104 0310 	add.w	r3, r4, #16
 800531c:	224c      	movs	r2, #76	; 0x4c
 800531e:	4619      	mov	r1, r3
 8005320:	f007 fc54 	bl	800cbcc <memcpy>
 8005324:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005328:	f7fc fd68 	bl	8001dfc <DM_Add_Element>
	xPos += space;
 800532c:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 8005330:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8005334:	4413      	add	r3, r2
 8005336:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
	DM_Add_Element(DM_New_Text(xPos, yPos, COLOR_BLACK, 1, "WED"));
 800533a:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800533e:	f5a3 703d 	sub.w	r0, r3, #756	; 0x2f4
 8005342:	4b7f      	ldr	r3, [pc, #508]	; (8005540 <EditTimerTask+0x69c>)
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	2301      	movs	r3, #1
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	2300      	movs	r3, #0
 800534c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8005350:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 8005354:	f7fd fc28 	bl	8002ba8 <DM_New_Text>
 8005358:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800535c:	f5a3 743d 	sub.w	r4, r3, #756	; 0x2f4
 8005360:	4668      	mov	r0, sp
 8005362:	f104 0310 	add.w	r3, r4, #16
 8005366:	224c      	movs	r2, #76	; 0x4c
 8005368:	4619      	mov	r1, r3
 800536a:	f007 fc2f 	bl	800cbcc <memcpy>
 800536e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005372:	f7fc fd43 	bl	8001dfc <DM_Add_Element>
	DM_Add_Element(DM_New_TickBox(xPos + offset, yPos + 10, 0));
 8005376:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 800537a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800537e:	18d1      	adds	r1, r2, r3
 8005380:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8005384:	f103 020a 	add.w	r2, r3, #10
 8005388:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800538c:	f5a3 7026 	sub.w	r0, r3, #664	; 0x298
 8005390:	2300      	movs	r3, #0
 8005392:	f7fd feb1 	bl	80030f8 <DM_New_TickBox>
 8005396:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800539a:	f5a3 7426 	sub.w	r4, r3, #664	; 0x298
 800539e:	4668      	mov	r0, sp
 80053a0:	f104 0310 	add.w	r3, r4, #16
 80053a4:	224c      	movs	r2, #76	; 0x4c
 80053a6:	4619      	mov	r1, r3
 80053a8:	f007 fc10 	bl	800cbcc <memcpy>
 80053ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80053b0:	f7fc fd24 	bl	8001dfc <DM_Add_Element>
	xPos += space;
 80053b4:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 80053b8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80053bc:	4413      	add	r3, r2
 80053be:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
	DM_Add_Element(DM_New_Text(xPos, yPos, COLOR_BLACK, 1, "THU"));
 80053c2:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80053c6:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 80053ca:	4b5e      	ldr	r3, [pc, #376]	; (8005544 <EditTimerTask+0x6a0>)
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	2301      	movs	r3, #1
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	2300      	movs	r3, #0
 80053d4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80053d8:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 80053dc:	f7fd fbe4 	bl	8002ba8 <DM_New_Text>
 80053e0:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80053e4:	f5a3 740f 	sub.w	r4, r3, #572	; 0x23c
 80053e8:	4668      	mov	r0, sp
 80053ea:	f104 0310 	add.w	r3, r4, #16
 80053ee:	224c      	movs	r2, #76	; 0x4c
 80053f0:	4619      	mov	r1, r3
 80053f2:	f007 fbeb 	bl	800cbcc <memcpy>
 80053f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80053fa:	f7fc fcff 	bl	8001dfc <DM_Add_Element>
	DM_Add_Element(DM_New_TickBox(xPos + offset, yPos + 10, 0));
 80053fe:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 8005402:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8005406:	18d1      	adds	r1, r2, r3
 8005408:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800540c:	f103 020a 	add.w	r2, r3, #10
 8005410:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005414:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8005418:	2300      	movs	r3, #0
 800541a:	f7fd fe6d 	bl	80030f8 <DM_New_TickBox>
 800541e:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005422:	f5a3 74f0 	sub.w	r4, r3, #480	; 0x1e0
 8005426:	4668      	mov	r0, sp
 8005428:	f104 0310 	add.w	r3, r4, #16
 800542c:	224c      	movs	r2, #76	; 0x4c
 800542e:	4619      	mov	r1, r3
 8005430:	f007 fbcc 	bl	800cbcc <memcpy>
 8005434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005438:	f7fc fce0 	bl	8001dfc <DM_Add_Element>
	xPos += space;
 800543c:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 8005440:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8005444:	4413      	add	r3, r2
 8005446:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
	DM_Add_Element(DM_New_Text(xPos, yPos, COLOR_BLACK, 1, "FRI"));
 800544a:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800544e:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 8005452:	4b3d      	ldr	r3, [pc, #244]	; (8005548 <EditTimerTask+0x6a4>)
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	2301      	movs	r3, #1
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	2300      	movs	r3, #0
 800545c:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8005460:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 8005464:	f7fd fba0 	bl	8002ba8 <DM_New_Text>
 8005468:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800546c:	f5a3 74c2 	sub.w	r4, r3, #388	; 0x184
 8005470:	4668      	mov	r0, sp
 8005472:	f104 0310 	add.w	r3, r4, #16
 8005476:	224c      	movs	r2, #76	; 0x4c
 8005478:	4619      	mov	r1, r3
 800547a:	f007 fba7 	bl	800cbcc <memcpy>
 800547e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005482:	f7fc fcbb 	bl	8001dfc <DM_Add_Element>
	DM_Add_Element(DM_New_TickBox(xPos + offset, yPos + 10, 0));
 8005486:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 800548a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800548e:	18d1      	adds	r1, r2, r3
 8005490:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8005494:	f103 020a 	add.w	r2, r3, #10
 8005498:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800549c:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 80054a0:	2300      	movs	r3, #0
 80054a2:	f7fd fe29 	bl	80030f8 <DM_New_TickBox>
 80054a6:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80054aa:	f5a3 7494 	sub.w	r4, r3, #296	; 0x128
 80054ae:	4668      	mov	r0, sp
 80054b0:	f104 0310 	add.w	r3, r4, #16
 80054b4:	224c      	movs	r2, #76	; 0x4c
 80054b6:	4619      	mov	r1, r3
 80054b8:	f007 fb88 	bl	800cbcc <memcpy>
 80054bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80054c0:	f7fc fc9c 	bl	8001dfc <DM_Add_Element>
	xPos += space;
 80054c4:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 80054c8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80054cc:	4413      	add	r3, r2
 80054ce:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
	DM_Add_Element(DM_New_Text(xPos, yPos, COLOR_BLACK, 1, "SAT"));
 80054d2:	f607 0004 	addw	r0, r7, #2052	; 0x804
 80054d6:	4b1d      	ldr	r3, [pc, #116]	; (800554c <EditTimerTask+0x6a8>)
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	2301      	movs	r3, #1
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	2300      	movs	r3, #0
 80054e0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80054e4:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 80054e8:	f7fd fb5e 	bl	8002ba8 <DM_New_Text>
 80054ec:	4668      	mov	r0, sp
 80054ee:	f607 0314 	addw	r3, r7, #2068	; 0x814
 80054f2:	224c      	movs	r2, #76	; 0x4c
 80054f4:	4619      	mov	r1, r3
 80054f6:	f007 fb69 	bl	800cbcc <memcpy>
 80054fa:	f607 0304 	addw	r3, r7, #2052	; 0x804
 80054fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005500:	f7fc fc7c 	bl	8001dfc <DM_Add_Element>
	DM_Add_Element(DM_New_TickBox(xPos + offset, yPos + 10, 0));
 8005504:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 8005508:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800550c:	18d1      	adds	r1, r2, r3
 800550e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8005512:	f103 020a 	add.w	r2, r3, #10
 8005516:	f507 6006 	add.w	r0, r7, #2144	; 0x860
 800551a:	2300      	movs	r3, #0
 800551c:	f7fd fdec 	bl	80030f8 <DM_New_TickBox>
 8005520:	4668      	mov	r0, sp
 8005522:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8005526:	224c      	movs	r2, #76	; 0x4c
 8005528:	4619      	mov	r1, r3
 800552a:	f007 fb4f 	bl	800cbcc <memcpy>
 800552e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8005532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005534:	f7fc fc62 	bl	8001dfc <DM_Add_Element>




	while(1);
 8005538:	e7fe      	b.n	8005538 <EditTimerTask+0x694>
 800553a:	bf00      	nop
 800553c:	0800da78 	.word	0x0800da78
 8005540:	0800da7c 	.word	0x0800da7c
 8005544:	0800da80 	.word	0x0800da80
 8005548:	0800da84 	.word	0x0800da84
 800554c:	0800da88 	.word	0x0800da88

08005550 <MainMenuTask>:

/**
 * The main display which is currently a clock. Called Main Menu
 * for historical reasons. Is not actually a menu.
 */
void MainMenuTask(void const * arguments) {
 8005550:	b590      	push	{r4, r7, lr}
 8005552:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 8005556:	af14      	add	r7, sp, #80	; 0x50
 8005558:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800555c:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8005560:	6018      	str	r0, [r3, #0]

	const unsigned int textColour = COLOR_LIGHTGRAY;
 8005562:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005566:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0

	//Put the current date at the top of the screen
	sprintf(fancyDateString, "%s %d / %d / %d", dayName[time.weekday], time.day, time.month, time.year);
 800556a:	4be5      	ldr	r3, [pc, #916]	; (8005900 <MainMenuTask+0x3b0>)
 800556c:	78db      	ldrb	r3, [r3, #3]
 800556e:	461a      	mov	r2, r3
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	4ae2      	ldr	r2, [pc, #904]	; (8005904 <MainMenuTask+0x3b4>)
 800557a:	441a      	add	r2, r3
 800557c:	4be0      	ldr	r3, [pc, #896]	; (8005900 <MainMenuTask+0x3b0>)
 800557e:	791b      	ldrb	r3, [r3, #4]
 8005580:	4618      	mov	r0, r3
 8005582:	4bdf      	ldr	r3, [pc, #892]	; (8005900 <MainMenuTask+0x3b0>)
 8005584:	795b      	ldrb	r3, [r3, #5]
 8005586:	4619      	mov	r1, r3
 8005588:	4bdd      	ldr	r3, [pc, #884]	; (8005900 <MainMenuTask+0x3b0>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	9301      	str	r3, [sp, #4]
 800558e:	9100      	str	r1, [sp, #0]
 8005590:	4603      	mov	r3, r0
 8005592:	49dd      	ldr	r1, [pc, #884]	; (8005908 <MainMenuTask+0x3b8>)
 8005594:	48dd      	ldr	r0, [pc, #884]	; (800590c <MainMenuTask+0x3bc>)
 8005596:	f007 fc3d 	bl	800ce14 <siprintf>
	dateTextId = DM_Add_Element(DM_New_Fast_Text(150, 10, textColour, COLOR_WHITE, fancyDateString));
 800559a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800559e:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 80055a2:	f5a2 70d2 	sub.w	r0, r2, #420	; 0x1a4
 80055a6:	4ad9      	ldr	r2, [pc, #868]	; (800590c <MainMenuTask+0x3bc>)
 80055a8:	9201      	str	r2, [sp, #4]
 80055aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ae:	9200      	str	r2, [sp, #0]
 80055b0:	220a      	movs	r2, #10
 80055b2:	2196      	movs	r1, #150	; 0x96
 80055b4:	f7fd fb74 	bl	8002ca0 <DM_New_Fast_Text>
 80055b8:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80055bc:	f5a3 74d2 	sub.w	r4, r3, #420	; 0x1a4
 80055c0:	4668      	mov	r0, sp
 80055c2:	f104 0310 	add.w	r3, r4, #16
 80055c6:	224c      	movs	r2, #76	; 0x4c
 80055c8:	4619      	mov	r1, r3
 80055ca:	f007 faff 	bl	800cbcc <memcpy>
 80055ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80055d2:	f7fc fc13 	bl	8001dfc <DM_Add_Element>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4acd      	ldr	r2, [pc, #820]	; (8005910 <MainMenuTask+0x3c0>)
 80055da:	6013      	str	r3, [r2, #0]

	//Double gradient effect
	DM_Add_Element(DM_New_Fill_Gradient(0, 90, WIDTH, 120, COLOR_WHITE, COLOR_BLACK, VERTICAL));
 80055dc:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80055e0:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 80055e4:	2301      	movs	r3, #1
 80055e6:	9303      	str	r3, [sp, #12]
 80055e8:	2300      	movs	r3, #0
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	2378      	movs	r3, #120	; 0x78
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	f240 13df 	movw	r3, #479	; 0x1df
 80055fa:	225a      	movs	r2, #90	; 0x5a
 80055fc:	2100      	movs	r1, #0
 80055fe:	f7fc fe85 	bl	800230c <DM_New_Fill_Gradient>
 8005602:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005606:	f5a3 74a4 	sub.w	r4, r3, #328	; 0x148
 800560a:	4668      	mov	r0, sp
 800560c:	f104 0310 	add.w	r3, r4, #16
 8005610:	224c      	movs	r2, #76	; 0x4c
 8005612:	4619      	mov	r1, r3
 8005614:	f007 fada 	bl	800cbcc <memcpy>
 8005618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800561c:	f7fc fbee 	bl	8001dfc <DM_Add_Element>
	DM_Add_Element(DM_New_Fill_Rectangle(0, 120, WIDTH, 184, COLOR_BLACK));
 8005620:	f507 707f 	add.w	r0, r7, #1020	; 0x3fc
 8005624:	2300      	movs	r3, #0
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	23b8      	movs	r3, #184	; 0xb8
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	f240 13df 	movw	r3, #479	; 0x1df
 8005630:	2278      	movs	r2, #120	; 0x78
 8005632:	2100      	movs	r1, #0
 8005634:	f7fc fdfe 	bl	8002234 <DM_New_Fill_Rectangle>
 8005638:	4668      	mov	r0, sp
 800563a:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800563e:	224c      	movs	r2, #76	; 0x4c
 8005640:	4619      	mov	r1, r3
 8005642:	f007 fac3 	bl	800cbcc <memcpy>
 8005646:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800564a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800564c:	f7fc fbd6 	bl	8001dfc <DM_Add_Element>
	DM_Add_Element(DM_New_Fill_Gradient(0, 184, WIDTH, 214, COLOR_BLACK, COLOR_WHITE, VERTICAL));
 8005650:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 8005654:	2301      	movs	r3, #1
 8005656:	9303      	str	r3, [sp, #12]
 8005658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800565c:	9302      	str	r3, [sp, #8]
 800565e:	2300      	movs	r3, #0
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	23d6      	movs	r3, #214	; 0xd6
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	f240 13df 	movw	r3, #479	; 0x1df
 800566a:	22b8      	movs	r2, #184	; 0xb8
 800566c:	2100      	movs	r1, #0
 800566e:	f7fc fe4d 	bl	800230c <DM_New_Fill_Gradient>
 8005672:	4668      	mov	r0, sp
 8005674:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8005678:	224c      	movs	r2, #76	; 0x4c
 800567a:	4619      	mov	r1, r3
 800567c:	f007 faa6 	bl	800cbcc <memcpy>
 8005680:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005686:	f7fc fbb9 	bl	8001dfc <DM_Add_Element>

	//Draw some digits
	const int xMargin = 16;
 800568a:	2310      	movs	r3, #16
 800568c:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
	const int digitWidth = 64;
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
	const int colonWidth = 16;
 8005696:	2310      	movs	r3, #16
 8005698:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4

	struct DisplayElement digit1 = DM_New_Bitmap(xMargin, 120, 1, num_1);
 800569c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80056a0:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 80056a4:	4b9b      	ldr	r3, [pc, #620]	; (8005914 <MainMenuTask+0x3c4>)
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	2301      	movs	r3, #1
 80056aa:	2278      	movs	r2, #120	; 0x78
 80056ac:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 80056b0:	f7fc f85e 	bl	8001770 <DM_New_Bitmap>
	struct DisplayElement digit2 = DM_New_Bitmap(xMargin + digitWidth, 120, 1, num_5);
 80056b4:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 80056b8:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 80056bc:	18d1      	adds	r1, r2, r3
 80056be:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80056c2:	f5a3 7017 	sub.w	r0, r3, #604	; 0x25c
 80056c6:	4b94      	ldr	r3, [pc, #592]	; (8005918 <MainMenuTask+0x3c8>)
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	2301      	movs	r3, #1
 80056cc:	2278      	movs	r2, #120	; 0x78
 80056ce:	f7fc f84f 	bl	8001770 <DM_New_Bitmap>
	struct DisplayElement colon1 = DM_New_Bitmap(xMargin + (digitWidth * 2) - colonWidth, 120, 1, colon);
 80056d2:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 80056d6:	005a      	lsls	r2, r3, #1
 80056d8:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80056dc:	441a      	add	r2, r3
 80056de:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80056e2:	1ad1      	subs	r1, r2, r3
 80056e4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80056e8:	f5a3 702e 	sub.w	r0, r3, #696	; 0x2b8
 80056ec:	4b8b      	ldr	r3, [pc, #556]	; (800591c <MainMenuTask+0x3cc>)
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	2301      	movs	r3, #1
 80056f2:	2278      	movs	r2, #120	; 0x78
 80056f4:	f7fc f83c 	bl	8001770 <DM_New_Bitmap>
	struct DisplayElement digit3 = DM_New_Bitmap(xMargin + (2 * digitWidth) + (2 * colonWidth), 120, 1, num_2);
 80056f8:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 80056fc:	005a      	lsls	r2, r3, #1
 80056fe:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8005702:	441a      	add	r2, r3
 8005704:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	18d1      	adds	r1, r2, r3
 800570c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005710:	f5a3 7045 	sub.w	r0, r3, #788	; 0x314
 8005714:	4b82      	ldr	r3, [pc, #520]	; (8005920 <MainMenuTask+0x3d0>)
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2301      	movs	r3, #1
 800571a:	2278      	movs	r2, #120	; 0x78
 800571c:	f7fc f828 	bl	8001770 <DM_New_Bitmap>
	struct DisplayElement digit4 = DM_New_Bitmap(xMargin + (3 * digitWidth) + (2 * colonWidth), 120, 1, num_4);
 8005720:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8005724:	4613      	mov	r3, r2
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	441a      	add	r2, r3
 800572a:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 800572e:	441a      	add	r2, r3
 8005730:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	18d1      	adds	r1, r2, r3
 8005738:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800573c:	f5a3 705c 	sub.w	r0, r3, #880	; 0x370
 8005740:	4b78      	ldr	r3, [pc, #480]	; (8005924 <MainMenuTask+0x3d4>)
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	2301      	movs	r3, #1
 8005746:	2278      	movs	r2, #120	; 0x78
 8005748:	f7fc f812 	bl	8001770 <DM_New_Bitmap>
	struct DisplayElement colon2 = DM_New_Bitmap(xMargin + (digitWidth * 4) + colonWidth, 120, 1, colon);
 800574c:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8005750:	009a      	lsls	r2, r3, #2
 8005752:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8005756:	441a      	add	r2, r3
 8005758:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800575c:	18d1      	adds	r1, r2, r3
 800575e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005762:	f5a3 7073 	sub.w	r0, r3, #972	; 0x3cc
 8005766:	4b6d      	ldr	r3, [pc, #436]	; (800591c <MainMenuTask+0x3cc>)
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	2301      	movs	r3, #1
 800576c:	2278      	movs	r2, #120	; 0x78
 800576e:	f7fb ffff 	bl	8001770 <DM_New_Bitmap>
	struct DisplayElement digit5 = DM_New_Bitmap(xMargin + (5 * digitWidth), 120, 1, num_5);
 8005772:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	441a      	add	r2, r3
 800577c:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8005780:	18d1      	adds	r1, r2, r3
 8005782:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005786:	f5a3 6085 	sub.w	r0, r3, #1064	; 0x428
 800578a:	4b63      	ldr	r3, [pc, #396]	; (8005918 <MainMenuTask+0x3c8>)
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	2301      	movs	r3, #1
 8005790:	2278      	movs	r2, #120	; 0x78
 8005792:	f7fb ffed 	bl	8001770 <DM_New_Bitmap>
	struct DisplayElement digit6 = DM_New_Bitmap(xMargin + (6 * digitWidth), 120, 1, num_7);
 8005796:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800579a:	4613      	mov	r3, r2
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	4413      	add	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	461a      	mov	r2, r3
 80057a4:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80057a8:	18d1      	adds	r1, r2, r3
 80057aa:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80057ae:	f2a3 4084 	subw	r0, r3, #1156	; 0x484
 80057b2:	4b5d      	ldr	r3, [pc, #372]	; (8005928 <MainMenuTask+0x3d8>)
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	2301      	movs	r3, #1
 80057b8:	2278      	movs	r2, #120	; 0x78
 80057ba:	f7fb ffd9 	bl	8001770 <DM_New_Bitmap>


	int digit1Id = DM_Add_Element(digit1);
 80057be:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80057c2:	f5a3 7400 	sub.w	r4, r3, #512	; 0x200
 80057c6:	4668      	mov	r0, sp
 80057c8:	f104 0310 	add.w	r3, r4, #16
 80057cc:	224c      	movs	r2, #76	; 0x4c
 80057ce:	4619      	mov	r1, r3
 80057d0:	f007 f9fc 	bl	800cbcc <memcpy>
 80057d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80057d8:	f7fc fb10 	bl	8001dfc <DM_Add_Element>
 80057dc:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
	int colon1Id = DM_Add_Element(colon1); //colon
 80057e0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80057e4:	f5a3 742e 	sub.w	r4, r3, #696	; 0x2b8
 80057e8:	4668      	mov	r0, sp
 80057ea:	f104 0310 	add.w	r3, r4, #16
 80057ee:	224c      	movs	r2, #76	; 0x4c
 80057f0:	4619      	mov	r1, r3
 80057f2:	f007 f9eb 	bl	800cbcc <memcpy>
 80057f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80057fa:	f7fc faff 	bl	8001dfc <DM_Add_Element>
 80057fe:	f8c7 04cc 	str.w	r0, [r7, #1228]	; 0x4cc
	int digit2Id = DM_Add_Element(digit2);
 8005802:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005806:	f5a3 7417 	sub.w	r4, r3, #604	; 0x25c
 800580a:	4668      	mov	r0, sp
 800580c:	f104 0310 	add.w	r3, r4, #16
 8005810:	224c      	movs	r2, #76	; 0x4c
 8005812:	4619      	mov	r1, r3
 8005814:	f007 f9da 	bl	800cbcc <memcpy>
 8005818:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800581c:	f7fc faee 	bl	8001dfc <DM_Add_Element>
 8005820:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8

	int digit3Id = DM_Add_Element(digit3);
 8005824:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005828:	f5a3 7445 	sub.w	r4, r3, #788	; 0x314
 800582c:	4668      	mov	r0, sp
 800582e:	f104 0310 	add.w	r3, r4, #16
 8005832:	224c      	movs	r2, #76	; 0x4c
 8005834:	4619      	mov	r1, r3
 8005836:	f007 f9c9 	bl	800cbcc <memcpy>
 800583a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800583e:	f7fc fadd 	bl	8001dfc <DM_Add_Element>
 8005842:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4
	int colon2Id = DM_Add_Element(colon2); //colon
 8005846:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800584a:	f5a3 7473 	sub.w	r4, r3, #972	; 0x3cc
 800584e:	4668      	mov	r0, sp
 8005850:	f104 0310 	add.w	r3, r4, #16
 8005854:	224c      	movs	r2, #76	; 0x4c
 8005856:	4619      	mov	r1, r3
 8005858:	f007 f9b8 	bl	800cbcc <memcpy>
 800585c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005860:	f7fc facc 	bl	8001dfc <DM_Add_Element>
 8005864:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
	int digit4Id = DM_Add_Element(digit4);
 8005868:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800586c:	f5a3 745c 	sub.w	r4, r3, #880	; 0x370
 8005870:	4668      	mov	r0, sp
 8005872:	f104 0310 	add.w	r3, r4, #16
 8005876:	224c      	movs	r2, #76	; 0x4c
 8005878:	4619      	mov	r1, r3
 800587a:	f007 f9a7 	bl	800cbcc <memcpy>
 800587e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005882:	f7fc fabb 	bl	8001dfc <DM_Add_Element>
 8005886:	f8c7 04bc 	str.w	r0, [r7, #1212]	; 0x4bc

	int digit5Id = DM_Add_Element(digit5);
 800588a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800588e:	f5a3 6485 	sub.w	r4, r3, #1064	; 0x428
 8005892:	4668      	mov	r0, sp
 8005894:	f104 0310 	add.w	r3, r4, #16
 8005898:	224c      	movs	r2, #76	; 0x4c
 800589a:	4619      	mov	r1, r3
 800589c:	f007 f996 	bl	800cbcc <memcpy>
 80058a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80058a4:	f7fc faaa 	bl	8001dfc <DM_Add_Element>
 80058a8:	f8c7 04b8 	str.w	r0, [r7, #1208]	; 0x4b8
	int digit6Id = DM_Add_Element(digit6);
 80058ac:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80058b0:	f2a3 4484 	subw	r4, r3, #1156	; 0x484
 80058b4:	4668      	mov	r0, sp
 80058b6:	f104 0310 	add.w	r3, r4, #16
 80058ba:	224c      	movs	r2, #76	; 0x4c
 80058bc:	4619      	mov	r1, r3
 80058be:	f007 f985 	bl	800cbcc <memcpy>
 80058c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80058c6:	f7fc fa99 	bl	8001dfc <DM_Add_Element>
 80058ca:	f8c7 04b4 	str.w	r0, [r7, #1204]	; 0x4b4

	//Button for settings
	struct DisplayElement button2 = DM_New_Button(BTN_MIDDLE_X, BTN_BOTTOM_Y, "MENU", ENABLED);
 80058ce:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80058d2:	f5a3 609c 	sub.w	r0, r3, #1248	; 0x4e0
 80058d6:	2300      	movs	r3, #0
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	4b14      	ldr	r3, [pc, #80]	; (800592c <MainMenuTask+0x3dc>)
 80058dc:	f44f 7288 	mov.w	r2, #272	; 0x110
 80058e0:	21be      	movs	r1, #190	; 0xbe
 80058e2:	f7fb ffbb 	bl	800185c <DM_New_Button>
	button2.onPress = settingsScreen_onPress;
 80058e6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80058ea:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80058ee:	4a10      	ldr	r2, [pc, #64]	; (8005930 <MainMenuTask+0x3e0>)
 80058f0:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(button2);
 80058f2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80058f6:	f5a3 649c 	sub.w	r4, r3, #1248	; 0x4e0
 80058fa:	4668      	mov	r0, sp
 80058fc:	e01a      	b.n	8005934 <MainMenuTask+0x3e4>
 80058fe:	bf00      	nop
 8005900:	200040d8 	.word	0x200040d8
 8005904:	080120ec 	.word	0x080120ec
 8005908:	0800da94 	.word	0x0800da94
 800590c:	200052b8 	.word	0x200052b8
 8005910:	200052d8 	.word	0x200052d8
 8005914:	0801613c 	.word	0x0801613c
 8005918:	0802615c 	.word	0x0802615c
 800591c:	20000010 	.word	0x20000010
 8005920:	0801a144 	.word	0x0801a144
 8005924:	08022154 	.word	0x08022154
 8005928:	0802e16c 	.word	0x0802e16c
 800592c:	0800daa4 	.word	0x0800daa4
 8005930:	08005b55 	.word	0x08005b55
 8005934:	f104 0310 	add.w	r3, r4, #16
 8005938:	224c      	movs	r2, #76	; 0x4c
 800593a:	4619      	mov	r1, r3
 800593c:	f007 f946 	bl	800cbcc <memcpy>
 8005940:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005944:	f7fc fa5a 	bl	8001dfc <DM_Add_Element>

	//Previous time to compare to new time and decide to update
	char oldMin = '0';
 8005948:	2330      	movs	r3, #48	; 0x30
 800594a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7

	//The main loop
	while(1) {
		//Update the bitmaps with the new time
		//check if we need to update the whole lot, or just seconds
		if(oldMin != timeString[3]) {
 800594e:	4b7b      	ldr	r3, [pc, #492]	; (8005b3c <MainMenuTask+0x5ec>)
 8005950:	78db      	ldrb	r3, [r3, #3]
 8005952:	f897 24e7 	ldrb.w	r2, [r7, #1255]	; 0x4e7
 8005956:	429a      	cmp	r2, r3
 8005958:	f000 80af 	beq.w	8005aba <MainMenuTask+0x56a>
			digit1.bitmap = Char_To_Bmp(timeString[0]);
 800595c:	4b77      	ldr	r3, [pc, #476]	; (8005b3c <MainMenuTask+0x5ec>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f909 	bl	8005b78 <Char_To_Bmp>
 8005966:	4602      	mov	r2, r0
 8005968:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800596c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8005970:	621a      	str	r2, [r3, #32]
			digit2.bitmap = Char_To_Bmp(timeString[1]);
 8005972:	4b72      	ldr	r3, [pc, #456]	; (8005b3c <MainMenuTask+0x5ec>)
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f8fe 	bl	8005b78 <Char_To_Bmp>
 800597c:	4602      	mov	r2, r0
 800597e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005982:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005986:	621a      	str	r2, [r3, #32]
			DM_Replace_Element(digit1Id, digit1);
 8005988:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800598c:	f5a3 7400 	sub.w	r4, r3, #512	; 0x200
 8005990:	4668      	mov	r0, sp
 8005992:	f104 030c 	add.w	r3, r4, #12
 8005996:	2250      	movs	r2, #80	; 0x50
 8005998:	4619      	mov	r1, r3
 800599a:	f007 f917 	bl	800cbcc <memcpy>
 800599e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80059a2:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 80059a6:	f7fc fa4f 	bl	8001e48 <DM_Replace_Element>
			DM_Replace_Element(colon1Id, colon1);
 80059aa:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80059ae:	f5a3 742e 	sub.w	r4, r3, #696	; 0x2b8
 80059b2:	4668      	mov	r0, sp
 80059b4:	f104 030c 	add.w	r3, r4, #12
 80059b8:	2250      	movs	r2, #80	; 0x50
 80059ba:	4619      	mov	r1, r3
 80059bc:	f007 f906 	bl	800cbcc <memcpy>
 80059c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80059c4:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 80059c8:	f7fc fa3e 	bl	8001e48 <DM_Replace_Element>
			DM_Replace_Element(digit2Id, digit2);
 80059cc:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80059d0:	f5a3 7417 	sub.w	r4, r3, #604	; 0x25c
 80059d4:	4668      	mov	r0, sp
 80059d6:	f104 030c 	add.w	r3, r4, #12
 80059da:	2250      	movs	r2, #80	; 0x50
 80059dc:	4619      	mov	r1, r3
 80059de:	f007 f8f5 	bl	800cbcc <memcpy>
 80059e2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80059e6:	f8d7 04c8 	ldr.w	r0, [r7, #1224]	; 0x4c8
 80059ea:	f7fc fa2d 	bl	8001e48 <DM_Replace_Element>

			digit3.bitmap = Char_To_Bmp(timeString[2]);
 80059ee:	4b53      	ldr	r3, [pc, #332]	; (8005b3c <MainMenuTask+0x5ec>)
 80059f0:	789b      	ldrb	r3, [r3, #2]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f8c0 	bl	8005b78 <Char_To_Bmp>
 80059f8:	4602      	mov	r2, r0
 80059fa:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80059fe:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8005a02:	621a      	str	r2, [r3, #32]
			digit4.bitmap = Char_To_Bmp(timeString[3]);
 8005a04:	4b4d      	ldr	r3, [pc, #308]	; (8005b3c <MainMenuTask+0x5ec>)
 8005a06:	78db      	ldrb	r3, [r3, #3]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 f8b5 	bl	8005b78 <Char_To_Bmp>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005a14:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8005a18:	621a      	str	r2, [r3, #32]
			DM_Replace_Element(digit3Id, digit3);
 8005a1a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005a1e:	f5a3 7445 	sub.w	r4, r3, #788	; 0x314
 8005a22:	4668      	mov	r0, sp
 8005a24:	f104 030c 	add.w	r3, r4, #12
 8005a28:	2250      	movs	r2, #80	; 0x50
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f007 f8ce 	bl	800cbcc <memcpy>
 8005a30:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8005a34:	f8d7 04c4 	ldr.w	r0, [r7, #1220]	; 0x4c4
 8005a38:	f7fc fa06 	bl	8001e48 <DM_Replace_Element>
			DM_Replace_Element(colon2Id, colon2);
 8005a3c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005a40:	f5a3 7473 	sub.w	r4, r3, #972	; 0x3cc
 8005a44:	4668      	mov	r0, sp
 8005a46:	f104 030c 	add.w	r3, r4, #12
 8005a4a:	2250      	movs	r2, #80	; 0x50
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f007 f8bd 	bl	800cbcc <memcpy>
 8005a52:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8005a56:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	; 0x4c0
 8005a5a:	f7fc f9f5 	bl	8001e48 <DM_Replace_Element>
			DM_Replace_Element(digit4Id, digit4);
 8005a5e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005a62:	f5a3 745c 	sub.w	r4, r3, #880	; 0x370
 8005a66:	4668      	mov	r0, sp
 8005a68:	f104 030c 	add.w	r3, r4, #12
 8005a6c:	2250      	movs	r2, #80	; 0x50
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f007 f8ac 	bl	800cbcc <memcpy>
 8005a74:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8005a78:	f8d7 04bc 	ldr.w	r0, [r7, #1212]	; 0x4bc
 8005a7c:	f7fc f9e4 	bl	8001e48 <DM_Replace_Element>

			//Update the date string and register the text for update
			sprintf(fancyDateString, "%s %d / %d / %d", dayName[time.weekday], time.day, time.month, time.year);
 8005a80:	4b2f      	ldr	r3, [pc, #188]	; (8005b40 <MainMenuTask+0x5f0>)
 8005a82:	78db      	ldrb	r3, [r3, #3]
 8005a84:	461a      	mov	r2, r3
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4a2d      	ldr	r2, [pc, #180]	; (8005b44 <MainMenuTask+0x5f4>)
 8005a90:	441a      	add	r2, r3
 8005a92:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <MainMenuTask+0x5f0>)
 8005a94:	791b      	ldrb	r3, [r3, #4]
 8005a96:	4618      	mov	r0, r3
 8005a98:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <MainMenuTask+0x5f0>)
 8005a9a:	795b      	ldrb	r3, [r3, #5]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4b28      	ldr	r3, [pc, #160]	; (8005b40 <MainMenuTask+0x5f0>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	9100      	str	r1, [sp, #0]
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4927      	ldr	r1, [pc, #156]	; (8005b48 <MainMenuTask+0x5f8>)
 8005aaa:	4828      	ldr	r0, [pc, #160]	; (8005b4c <MainMenuTask+0x5fc>)
 8005aac:	f007 f9b2 	bl	800ce14 <siprintf>
			DM_Refresh_Element(dateTextId);
 8005ab0:	4b27      	ldr	r3, [pc, #156]	; (8005b50 <MainMenuTask+0x600>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fc f98b 	bl	8001dd0 <DM_Refresh_Element>
		}
		//Update the seconds componetnts
		digit5.bitmap = Char_To_Bmp(timeString[4]);
 8005aba:	4b20      	ldr	r3, [pc, #128]	; (8005b3c <MainMenuTask+0x5ec>)
 8005abc:	791b      	ldrb	r3, [r3, #4]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f85a 	bl	8005b78 <Char_To_Bmp>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005aca:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8005ace:	621a      	str	r2, [r3, #32]
		digit6.bitmap = Char_To_Bmp(timeString[5]);
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <MainMenuTask+0x5ec>)
 8005ad2:	795b      	ldrb	r3, [r3, #5]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f84f 	bl	8005b78 <Char_To_Bmp>
 8005ada:	4602      	mov	r2, r0
 8005adc:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005ae0:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8005ae4:	621a      	str	r2, [r3, #32]
		DM_Replace_Element(digit5Id, digit5);
 8005ae6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005aea:	f5a3 6485 	sub.w	r4, r3, #1064	; 0x428
 8005aee:	4668      	mov	r0, sp
 8005af0:	f104 030c 	add.w	r3, r4, #12
 8005af4:	2250      	movs	r2, #80	; 0x50
 8005af6:	4619      	mov	r1, r3
 8005af8:	f007 f868 	bl	800cbcc <memcpy>
 8005afc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8005b00:	f8d7 04b8 	ldr.w	r0, [r7, #1208]	; 0x4b8
 8005b04:	f7fc f9a0 	bl	8001e48 <DM_Replace_Element>
		DM_Replace_Element(digit6Id, digit6);
 8005b08:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005b0c:	f2a3 4484 	subw	r4, r3, #1156	; 0x484
 8005b10:	4668      	mov	r0, sp
 8005b12:	f104 030c 	add.w	r3, r4, #12
 8005b16:	2250      	movs	r2, #80	; 0x50
 8005b18:	4619      	mov	r1, r3
 8005b1a:	f007 f857 	bl	800cbcc <memcpy>
 8005b1e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8005b22:	f8d7 04b4 	ldr.w	r0, [r7, #1204]	; 0x4b4
 8005b26:	f7fc f98f 	bl	8001e48 <DM_Replace_Element>

		//Update the old minutes flag for the next update
		oldMin = timeString[3];
 8005b2a:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <MainMenuTask+0x5ec>)
 8005b2c:	78db      	ldrb	r3, [r3, #3]
 8005b2e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7

		osDelay(1000);
 8005b32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b36:	f004 fa13 	bl	8009f60 <osDelay>
		if(oldMin != timeString[3]) {
 8005b3a:	e708      	b.n	800594e <MainMenuTask+0x3fe>
 8005b3c:	200040e4 	.word	0x200040e4
 8005b40:	200040d8 	.word	0x200040d8
 8005b44:	080120ec 	.word	0x080120ec
 8005b48:	0800da94 	.word	0x0800da94
 8005b4c:	200052b8 	.word	0x200052b8
 8005b50:	200052d8 	.word	0x200052d8

08005b54 <settingsScreen_onPress>:
}

/**
 * onPress callback for the settings screen button
 */
void settingsScreen_onPress(int id) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	xTaskNotify(changeScreenTaskHandle, TIMER_LIST, eSetValueWithOverwrite);
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <settingsScreen_onPress+0x20>)
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	2300      	movs	r3, #0
 8005b62:	2203      	movs	r2, #3
 8005b64:	2106      	movs	r1, #6
 8005b66:	f006 f9c1 	bl	800beec <xTaskGenericNotify>
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200040cc 	.word	0x200040cc

08005b78 <Char_To_Bmp>:
}

/**
 * Converts a char to a bitmap represnting that number.
 */
unsigned int* Char_To_Bmp(char c) {
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	71fb      	strb	r3, [r7, #7]
	switch(c) {
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	3b30      	subs	r3, #48	; 0x30
 8005b86:	2b09      	cmp	r3, #9
 8005b88:	d82a      	bhi.n	8005be0 <Char_To_Bmp+0x68>
 8005b8a:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <Char_To_Bmp+0x18>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bbd 	.word	0x08005bbd
 8005b98:	08005bc1 	.word	0x08005bc1
 8005b9c:	08005bc5 	.word	0x08005bc5
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bcd 	.word	0x08005bcd
 8005ba8:	08005bd1 	.word	0x08005bd1
 8005bac:	08005bd5 	.word	0x08005bd5
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005bdd 	.word	0x08005bdd
	case '0':
		return num_0;
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <Char_To_Bmp+0x78>)
 8005bba:	e012      	b.n	8005be2 <Char_To_Bmp+0x6a>
	case '1':
		return num_1;
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <Char_To_Bmp+0x7c>)
 8005bbe:	e010      	b.n	8005be2 <Char_To_Bmp+0x6a>
	case '2':
		return num_2;
 8005bc0:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <Char_To_Bmp+0x80>)
 8005bc2:	e00e      	b.n	8005be2 <Char_To_Bmp+0x6a>
	case '3':
		return num_3;
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <Char_To_Bmp+0x84>)
 8005bc6:	e00c      	b.n	8005be2 <Char_To_Bmp+0x6a>
	case '4':
		return num_4;
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <Char_To_Bmp+0x88>)
 8005bca:	e00a      	b.n	8005be2 <Char_To_Bmp+0x6a>
	case '5':
		return num_5;
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <Char_To_Bmp+0x8c>)
 8005bce:	e008      	b.n	8005be2 <Char_To_Bmp+0x6a>
	case '6':
		return num_6;
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <Char_To_Bmp+0x90>)
 8005bd2:	e006      	b.n	8005be2 <Char_To_Bmp+0x6a>
	case '7':
		return num_7;
 8005bd4:	4b0d      	ldr	r3, [pc, #52]	; (8005c0c <Char_To_Bmp+0x94>)
 8005bd6:	e004      	b.n	8005be2 <Char_To_Bmp+0x6a>
	case '8':
		return num_8;
 8005bd8:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <Char_To_Bmp+0x98>)
 8005bda:	e002      	b.n	8005be2 <Char_To_Bmp+0x6a>
	case '9':
		return num_9;
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <Char_To_Bmp+0x9c>)
 8005bde:	e000      	b.n	8005be2 <Char_To_Bmp+0x6a>
	}

	return num_0;
 8005be0:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <Char_To_Bmp+0x78>)
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	08012134 	.word	0x08012134
 8005bf4:	0801613c 	.word	0x0801613c
 8005bf8:	0801a144 	.word	0x0801a144
 8005bfc:	0801e14c 	.word	0x0801e14c
 8005c00:	08022154 	.word	0x08022154
 8005c04:	0802615c 	.word	0x0802615c
 8005c08:	0802a164 	.word	0x0802a164
 8005c0c:	0802e16c 	.word	0x0802e16c
 8005c10:	08032174 	.word	0x08032174
 8005c14:	0803617c 	.word	0x0803617c

08005c18 <SettingsTask>:
void changeTime_onPress(int id);

/**
 * Main task to display the settings screen.
 */
void SettingsTask(void const * args) {
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b0f3      	sub	sp, #460	; 0x1cc
 8005c1c:	af14      	add	r7, sp, #80	; 0x50
 8005c1e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c22:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005c26:	6018      	str	r0, [r3, #0]
	//Add some dummy display elements
	DM_Add_Element(DM_New_Title_Bar("Settings"));
 8005c28:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005c2c:	4934      	ldr	r1, [pc, #208]	; (8005d00 <SettingsTask+0xe8>)
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fd fb48 	bl	80032c4 <DM_New_Title_Bar>
 8005c34:	4668      	mov	r0, sp
 8005c36:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8005c3a:	224c      	movs	r2, #76	; 0x4c
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	f006 ffc5 	bl	800cbcc <memcpy>
 8005c42:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c48:	f7fc f8d8 	bl	8001dfc <DM_Add_Element>

	//HOME
	struct DisplayElement okBtn = DM_New_Button(BTN_LEFT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 8005c4c:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8005c50:	2300      	movs	r3, #0
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <SettingsTask+0xec>)
 8005c56:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005c5a:	210a      	movs	r1, #10
 8005c5c:	f7fb fdfe 	bl	800185c <DM_New_Button>
	okBtn.onPress = home_onPress;
 8005c60:	4b29      	ldr	r3, [pc, #164]	; (8005d08 <SettingsTask+0xf0>)
 8005c62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	DM_Add_Element(okBtn);
 8005c66:	4668      	mov	r0, sp
 8005c68:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005c6c:	224c      	movs	r2, #76	; 0x4c
 8005c6e:	4619      	mov	r1, r3
 8005c70:	f006 ffac 	bl	800cbcc <memcpy>
 8005c74:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c7a:	f7fc f8bf 	bl	8001dfc <DM_Add_Element>

	//Change time/date button
	struct DisplayElement changeTimeBtn = DM_New_Button(BTN_LEFT_X, 45, "Change Time/Date", ENABLED);
 8005c7e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c82:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8005c86:	2300      	movs	r3, #0
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <SettingsTask+0xf4>)
 8005c8c:	222d      	movs	r2, #45	; 0x2d
 8005c8e:	210a      	movs	r1, #10
 8005c90:	f7fb fde4 	bl	800185c <DM_New_Button>
	changeTimeBtn.onPress = changeTime_onPress;
 8005c94:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005c98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c9c:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <SettingsTask+0xf8>)
 8005c9e:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(changeTimeBtn);
 8005ca0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005ca4:	f5a3 748a 	sub.w	r4, r3, #276	; 0x114
 8005ca8:	4668      	mov	r0, sp
 8005caa:	f104 0310 	add.w	r3, r4, #16
 8005cae:	224c      	movs	r2, #76	; 0x4c
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f006 ff8b 	bl	800cbcc <memcpy>
 8005cb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005cba:	f7fc f89f 	bl	8001dfc <DM_Add_Element>


	//Button for the device test
	struct DisplayElement button1 = DM_New_Button(BTN_LEFT_X, 100, "Test Device", ENABLED);
 8005cbe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005cc2:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <SettingsTask+0xfc>)
 8005ccc:	2264      	movs	r2, #100	; 0x64
 8005cce:	210a      	movs	r1, #10
 8005cd0:	f7fb fdc4 	bl	800185c <DM_New_Button>
	button1.onPress = deviceTest_onPress;
 8005cd4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005cd8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005cdc:	4a0e      	ldr	r2, [pc, #56]	; (8005d18 <SettingsTask+0x100>)
 8005cde:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(button1);
 8005ce0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005ce4:	f5a3 74b8 	sub.w	r4, r3, #368	; 0x170
 8005ce8:	4668      	mov	r0, sp
 8005cea:	f104 0310 	add.w	r3, r4, #16
 8005cee:	224c      	movs	r2, #76	; 0x4c
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	f006 ff6b 	bl	800cbcc <memcpy>
 8005cf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005cfa:	f7fc f87f 	bl	8001dfc <DM_Add_Element>

	while(1);
 8005cfe:	e7fe      	b.n	8005cfe <SettingsTask+0xe6>
 8005d00:	0800daac 	.word	0x0800daac
 8005d04:	0800dab8 	.word	0x0800dab8
 8005d08:	08000d4d 	.word	0x08000d4d
 8005d0c:	0800dac0 	.word	0x0800dac0
 8005d10:	08005d1d 	.word	0x08005d1d
 8005d14:	0800dad4 	.word	0x0800dad4
 8005d18:	08005d41 	.word	0x08005d41

08005d1c <changeTime_onPress>:
}

/**
 * Goes to the change time/date screen
 */
void changeTime_onPress(int id) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	//Go to the change time/date screen
	xTaskNotify(changeScreenTaskHandle, CHANGE_TIME_DATE, eSetValueWithOverwrite);
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <changeTime_onPress+0x20>)
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	2104      	movs	r1, #4
 8005d2e:	f006 f8dd 	bl	800beec <xTaskGenericNotify>

	return;
 8005d32:	bf00      	nop
}
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	200040cc 	.word	0x200040cc

08005d40 <deviceTest_onPress>:


/**
 * Callback for the Test Device button
 */
void deviceTest_onPress(int id) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, DEVICE_TEST, eSetValueWithOverwrite);
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <deviceTest_onPress+0x20>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2203      	movs	r2, #3
 8005d50:	2100      	movs	r1, #0
 8005d52:	f006 f8cb 	bl	800beec <xTaskGenericNotify>
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	200040cc 	.word	0x200040cc

08005d64 <TimerListTask>:


/**
 * Entry point for the Edit Time screen.
 */
void TimerListTask(void const * arguments) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b0c6      	sub	sp, #280	; 0x118
 8005d68:	af14      	add	r7, sp, #80	; 0x50
 8005d6a:	6078      	str	r0, [r7, #4]
	//Some default colours
	const int textColour = COLOR_BLACK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	//Start with the screen elements
	DM_Add_Element(DM_New_Title_Bar("Timers"));
 8005d72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d76:	4917      	ldr	r1, [pc, #92]	; (8005dd4 <TimerListTask+0x70>)
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fd faa3 	bl	80032c4 <DM_New_Title_Bar>
 8005d7e:	4668      	mov	r0, sp
 8005d80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005d84:	224c      	movs	r2, #76	; 0x4c
 8005d86:	4619      	mov	r1, r3
 8005d88:	f006 ff20 	bl	800cbcc <memcpy>
 8005d8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d92:	f7fc f833 	bl	8001dfc <DM_Add_Element>

	//Main list
	struct DisplayElement timersList = DM_New_List(0, 50, WIDTH, HEIGHT - 50, dummyList, numItems);
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <TimerListTask+0x74>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f107 000c 	add.w	r0, r7, #12
 8005d9e:	9302      	str	r3, [sp, #8]
 8005da0:	4b0e      	ldr	r3, [pc, #56]	; (8005ddc <TimerListTask+0x78>)
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	f240 130d 	movw	r3, #269	; 0x10d
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	f240 13df 	movw	r3, #479	; 0x1df
 8005dae:	2232      	movs	r2, #50	; 0x32
 8005db0:	2100      	movs	r1, #0
 8005db2:	f7fc fb31 	bl	8002418 <DM_New_List>
	timersList.onPress = timerList_onPress;
 8005db6:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <TimerListTask+0x7c>)
 8005db8:	653b      	str	r3, [r7, #80]	; 0x50
	DM_Add_Element(timersList);
 8005dba:	4668      	mov	r0, sp
 8005dbc:	f107 031c 	add.w	r3, r7, #28
 8005dc0:	224c      	movs	r2, #76	; 0x4c
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	f006 ff02 	bl	800cbcc <memcpy>
 8005dc8:	f107 030c 	add.w	r3, r7, #12
 8005dcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dce:	f7fc f815 	bl	8001dfc <DM_Add_Element>

	while(1);
 8005dd2:	e7fe      	b.n	8005dd2 <TimerListTask+0x6e>
 8005dd4:	0800db28 	.word	0x0800db28
 8005dd8:	20004034 	.word	0x20004034
 8005ddc:	20004018 	.word	0x20004018
 8005de0:	08005de5 	.word	0x08005de5

08005de4 <timerList_onPress>:
}

/**
 * Called when a timer item is pressed. Called by the intrinsic List onPress element.
 */
void timerList_onPress(int id) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	//Open the EDIT timer page
	xTaskNotify(changeScreenTaskHandle, EDIT_TIMER, eSetValueWithOverwrite);
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <timerList_onPress+0x20>)
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	2300      	movs	r3, #0
 8005df2:	2203      	movs	r2, #3
 8005df4:	2105      	movs	r1, #5
 8005df6:	f006 f879 	bl	800beec <xTaskGenericNotify>
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	200040cc 	.word	0x200040cc

08005e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e0c:	f7fb fc12 	bl	8001634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e10:	480c      	ldr	r0, [pc, #48]	; (8005e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e12:	490d      	ldr	r1, [pc, #52]	; (8005e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e14:	4a0d      	ldr	r2, [pc, #52]	; (8005e4c <LoopForever+0xe>)
  movs r3, #0
 8005e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e18:	e002      	b.n	8005e20 <LoopCopyDataInit>

08005e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e1e:	3304      	adds	r3, #4

08005e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e24:	d3f9      	bcc.n	8005e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e26:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e28:	4c0a      	ldr	r4, [pc, #40]	; (8005e54 <LoopForever+0x16>)
  movs r3, #0
 8005e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e2c:	e001      	b.n	8005e32 <LoopFillZerobss>

08005e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e30:	3204      	adds	r2, #4

08005e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e34:	d3fb      	bcc.n	8005e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e36:	f006 fea3 	bl	800cb80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e3a:	f7fa ffc7 	bl	8000dcc <main>

08005e3e <LoopForever>:

LoopForever:
    b LoopForever
 8005e3e:	e7fe      	b.n	8005e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005e40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e48:	200040a8 	.word	0x200040a8
  ldr r2, =_sidata
 8005e4c:	0803a328 	.word	0x0803a328
  ldr r2, =_sbss
 8005e50:	200040a8 	.word	0x200040a8
  ldr r4, =_ebss
 8005e54:	2000a264 	.word	0x2000a264

08005e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e58:	e7fe      	b.n	8005e58 <ADC1_2_IRQHandler>

08005e5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e64:	2003      	movs	r0, #3
 8005e66:	f000 f902 	bl	800606e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e6a:	200f      	movs	r0, #15
 8005e6c:	f7fb fb16 	bl	800149c <HAL_InitTick>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	71fb      	strb	r3, [r7, #7]
 8005e7a:	e001      	b.n	8005e80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e7c:	f7fb f9c8 	bl	8001210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e80:	79fb      	ldrb	r3, [r7, #7]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <HAL_IncTick+0x20>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_IncTick+0x24>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	4a04      	ldr	r2, [pc, #16]	; (8005eb0 <HAL_IncTick+0x24>)
 8005e9e:	6013      	str	r3, [r2, #0]
}
 8005ea0:	bf00      	nop
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	2000403c 	.word	0x2000403c
 8005eb0:	200052dc 	.word	0x200052dc

08005eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8005eb8:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <HAL_GetTick+0x14>)
 8005eba:	681b      	ldr	r3, [r3, #0]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	200052dc 	.word	0x200052dc

08005ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ed4:	f7ff ffee 	bl	8005eb4 <HAL_GetTick>
 8005ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee4:	d005      	beq.n	8005ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <HAL_Delay+0x44>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ef2:	bf00      	nop
 8005ef4:	f7ff ffde 	bl	8005eb4 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d8f7      	bhi.n	8005ef4 <HAL_Delay+0x28>
  {
  }
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	2000403c 	.word	0x2000403c

08005f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f24:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <__NVIC_SetPriorityGrouping+0x44>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f30:	4013      	ands	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f46:	4a04      	ldr	r2, [pc, #16]	; (8005f58 <__NVIC_SetPriorityGrouping+0x44>)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	60d3      	str	r3, [r2, #12]
}
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f60:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <__NVIC_GetPriorityGrouping+0x18>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	f003 0307 	and.w	r3, r3, #7
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	e000ed00 	.word	0xe000ed00

08005f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	db0b      	blt.n	8005fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	f003 021f 	and.w	r2, r3, #31
 8005f90:	4907      	ldr	r1, [pc, #28]	; (8005fb0 <__NVIC_EnableIRQ+0x38>)
 8005f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	2001      	movs	r0, #1
 8005f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	e000e100 	.word	0xe000e100

08005fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	db0a      	blt.n	8005fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	490c      	ldr	r1, [pc, #48]	; (8006000 <__NVIC_SetPriority+0x4c>)
 8005fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd2:	0112      	lsls	r2, r2, #4
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fdc:	e00a      	b.n	8005ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	4908      	ldr	r1, [pc, #32]	; (8006004 <__NVIC_SetPriority+0x50>)
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	3b04      	subs	r3, #4
 8005fec:	0112      	lsls	r2, r2, #4
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	761a      	strb	r2, [r3, #24]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	e000e100 	.word	0xe000e100
 8006004:	e000ed00 	.word	0xe000ed00

08006008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	; 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f1c3 0307 	rsb	r3, r3, #7
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf28      	it	cs
 8006026:	2304      	movcs	r3, #4
 8006028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3304      	adds	r3, #4
 800602e:	2b06      	cmp	r3, #6
 8006030:	d902      	bls.n	8006038 <NVIC_EncodePriority+0x30>
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3b03      	subs	r3, #3
 8006036:	e000      	b.n	800603a <NVIC_EncodePriority+0x32>
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800603c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43da      	mvns	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	401a      	ands	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	fa01 f303 	lsl.w	r3, r1, r3
 800605a:	43d9      	mvns	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006060:	4313      	orrs	r3, r2
         );
}
 8006062:	4618      	mov	r0, r3
 8006064:	3724      	adds	r7, #36	; 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff ff4c 	bl	8005f14 <__NVIC_SetPriorityGrouping>
}
 800607c:	bf00      	nop
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006096:	f7ff ff61 	bl	8005f5c <__NVIC_GetPriorityGrouping>
 800609a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	6978      	ldr	r0, [r7, #20]
 80060a2:	f7ff ffb1 	bl	8006008 <NVIC_EncodePriority>
 80060a6:	4602      	mov	r2, r0
 80060a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ac:	4611      	mov	r1, r2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff ff80 	bl	8005fb4 <__NVIC_SetPriority>
}
 80060b4:	bf00      	nop
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff ff54 	bl	8005f78 <__NVIC_EnableIRQ>
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e054      	b.n	8006194 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	7f5b      	ldrb	r3, [r3, #29]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb f8b0 	bl	8001260 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	791b      	ldrb	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10c      	bne.n	8006128 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a22      	ldr	r2, [pc, #136]	; (800619c <HAL_CRC_Init+0xc4>)
 8006114:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0218 	bic.w	r2, r2, #24
 8006124:	609a      	str	r2, [r3, #8]
 8006126:	e00c      	b.n	8006142 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6899      	ldr	r1, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	461a      	mov	r2, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f834 	bl	80061a0 <HAL_CRCEx_Polynomial_Set>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e028      	b.n	8006194 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	795b      	ldrb	r3, [r3, #5]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d105      	bne.n	8006156 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006152:	611a      	str	r2, [r3, #16]
 8006154:	e004      	b.n	8006160 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6912      	ldr	r2, [r2, #16]
 800615e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	04c11db7 	.word	0x04c11db7

080061a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80061b0:	231f      	movs	r3, #31
 80061b2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80061b4:	bf00      	nop
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1e5a      	subs	r2, r3, #1
 80061ba:	613a      	str	r2, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d009      	beq.n	80061d4 <HAL_CRCEx_Polynomial_Set+0x34>
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0f0      	beq.n	80061b6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b18      	cmp	r3, #24
 80061d8:	d846      	bhi.n	8006268 <HAL_CRCEx_Polynomial_Set+0xc8>
 80061da:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80061dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e0:	0800626f 	.word	0x0800626f
 80061e4:	08006269 	.word	0x08006269
 80061e8:	08006269 	.word	0x08006269
 80061ec:	08006269 	.word	0x08006269
 80061f0:	08006269 	.word	0x08006269
 80061f4:	08006269 	.word	0x08006269
 80061f8:	08006269 	.word	0x08006269
 80061fc:	08006269 	.word	0x08006269
 8006200:	0800625d 	.word	0x0800625d
 8006204:	08006269 	.word	0x08006269
 8006208:	08006269 	.word	0x08006269
 800620c:	08006269 	.word	0x08006269
 8006210:	08006269 	.word	0x08006269
 8006214:	08006269 	.word	0x08006269
 8006218:	08006269 	.word	0x08006269
 800621c:	08006269 	.word	0x08006269
 8006220:	08006251 	.word	0x08006251
 8006224:	08006269 	.word	0x08006269
 8006228:	08006269 	.word	0x08006269
 800622c:	08006269 	.word	0x08006269
 8006230:	08006269 	.word	0x08006269
 8006234:	08006269 	.word	0x08006269
 8006238:	08006269 	.word	0x08006269
 800623c:	08006269 	.word	0x08006269
 8006240:	08006245 	.word	0x08006245
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b06      	cmp	r3, #6
 8006248:	d913      	bls.n	8006272 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800624e:	e010      	b.n	8006272 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b07      	cmp	r3, #7
 8006254:	d90f      	bls.n	8006276 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800625a:	e00c      	b.n	8006276 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b0f      	cmp	r3, #15
 8006260:	d90b      	bls.n	800627a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006266:	e008      	b.n	800627a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	75fb      	strb	r3, [r7, #23]
      break;
 800626c:	e006      	b.n	800627c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800626e:	bf00      	nop
 8006270:	e004      	b.n	800627c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006272:	bf00      	nop
 8006274:	e002      	b.n	800627c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006276:	bf00      	nop
 8006278:	e000      	b.n	800627c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800627a:	bf00      	nop
  }
  if (status == HAL_OK)
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10d      	bne.n	800629e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f023 0118 	bic.w	r1, r3, #24
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	430a      	orrs	r2, r1
 800629c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062ba:	e17f      	b.n	80065bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	2101      	movs	r1, #1
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	fa01 f303 	lsl.w	r3, r1, r3
 80062c8:	4013      	ands	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8171 	beq.w	80065b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d005      	beq.n	80062ec <HAL_GPIO_Init+0x40>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d130      	bne.n	800634e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	2203      	movs	r2, #3
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	43db      	mvns	r3, r3
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	4013      	ands	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006322:	2201      	movs	r2, #1
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	43db      	mvns	r3, r3
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4013      	ands	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	091b      	lsrs	r3, r3, #4
 8006338:	f003 0201 	and.w	r2, r3, #1
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	2b03      	cmp	r3, #3
 8006358:	d118      	bne.n	800638c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006360:	2201      	movs	r2, #1
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	43db      	mvns	r3, r3
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4013      	ands	r3, r2
 800636e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	08db      	lsrs	r3, r3, #3
 8006376:	f003 0201 	and.w	r2, r3, #1
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	2b03      	cmp	r3, #3
 8006396:	d017      	beq.n	80063c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	2203      	movs	r2, #3
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	43db      	mvns	r3, r3
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4013      	ands	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f003 0303 	and.w	r3, r3, #3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d123      	bne.n	800641c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	08da      	lsrs	r2, r3, #3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3208      	adds	r2, #8
 80063dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	220f      	movs	r2, #15
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	43db      	mvns	r3, r3
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4013      	ands	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	08da      	lsrs	r2, r3, #3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3208      	adds	r2, #8
 8006416:	6939      	ldr	r1, [r7, #16]
 8006418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	2203      	movs	r2, #3
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	43db      	mvns	r3, r3
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4013      	ands	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f003 0203 	and.w	r2, r3, #3
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	fa02 f303 	lsl.w	r3, r2, r3
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 80ac 	beq.w	80065b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800645e:	4b5f      	ldr	r3, [pc, #380]	; (80065dc <HAL_GPIO_Init+0x330>)
 8006460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006462:	4a5e      	ldr	r2, [pc, #376]	; (80065dc <HAL_GPIO_Init+0x330>)
 8006464:	f043 0301 	orr.w	r3, r3, #1
 8006468:	6613      	str	r3, [r2, #96]	; 0x60
 800646a:	4b5c      	ldr	r3, [pc, #368]	; (80065dc <HAL_GPIO_Init+0x330>)
 800646c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	60bb      	str	r3, [r7, #8]
 8006474:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006476:	4a5a      	ldr	r2, [pc, #360]	; (80065e0 <HAL_GPIO_Init+0x334>)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	089b      	lsrs	r3, r3, #2
 800647c:	3302      	adds	r3, #2
 800647e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006482:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	220f      	movs	r2, #15
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	43db      	mvns	r3, r3
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4013      	ands	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064a0:	d025      	beq.n	80064ee <HAL_GPIO_Init+0x242>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a4f      	ldr	r2, [pc, #316]	; (80065e4 <HAL_GPIO_Init+0x338>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d01f      	beq.n	80064ea <HAL_GPIO_Init+0x23e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a4e      	ldr	r2, [pc, #312]	; (80065e8 <HAL_GPIO_Init+0x33c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d019      	beq.n	80064e6 <HAL_GPIO_Init+0x23a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a4d      	ldr	r2, [pc, #308]	; (80065ec <HAL_GPIO_Init+0x340>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d013      	beq.n	80064e2 <HAL_GPIO_Init+0x236>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a4c      	ldr	r2, [pc, #304]	; (80065f0 <HAL_GPIO_Init+0x344>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00d      	beq.n	80064de <HAL_GPIO_Init+0x232>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a4b      	ldr	r2, [pc, #300]	; (80065f4 <HAL_GPIO_Init+0x348>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d007      	beq.n	80064da <HAL_GPIO_Init+0x22e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a4a      	ldr	r2, [pc, #296]	; (80065f8 <HAL_GPIO_Init+0x34c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_GPIO_Init+0x22a>
 80064d2:	2306      	movs	r3, #6
 80064d4:	e00c      	b.n	80064f0 <HAL_GPIO_Init+0x244>
 80064d6:	2307      	movs	r3, #7
 80064d8:	e00a      	b.n	80064f0 <HAL_GPIO_Init+0x244>
 80064da:	2305      	movs	r3, #5
 80064dc:	e008      	b.n	80064f0 <HAL_GPIO_Init+0x244>
 80064de:	2304      	movs	r3, #4
 80064e0:	e006      	b.n	80064f0 <HAL_GPIO_Init+0x244>
 80064e2:	2303      	movs	r3, #3
 80064e4:	e004      	b.n	80064f0 <HAL_GPIO_Init+0x244>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e002      	b.n	80064f0 <HAL_GPIO_Init+0x244>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <HAL_GPIO_Init+0x244>
 80064ee:	2300      	movs	r3, #0
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	f002 0203 	and.w	r2, r2, #3
 80064f6:	0092      	lsls	r2, r2, #2
 80064f8:	4093      	lsls	r3, r2
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006500:	4937      	ldr	r1, [pc, #220]	; (80065e0 <HAL_GPIO_Init+0x334>)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	089b      	lsrs	r3, r3, #2
 8006506:	3302      	adds	r3, #2
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800650e:	4b3b      	ldr	r3, [pc, #236]	; (80065fc <HAL_GPIO_Init+0x350>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	43db      	mvns	r3, r3
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4013      	ands	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006532:	4a32      	ldr	r2, [pc, #200]	; (80065fc <HAL_GPIO_Init+0x350>)
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006538:	4b30      	ldr	r3, [pc, #192]	; (80065fc <HAL_GPIO_Init+0x350>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	43db      	mvns	r3, r3
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4013      	ands	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800655c:	4a27      	ldr	r2, [pc, #156]	; (80065fc <HAL_GPIO_Init+0x350>)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006562:	4b26      	ldr	r3, [pc, #152]	; (80065fc <HAL_GPIO_Init+0x350>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	43db      	mvns	r3, r3
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4013      	ands	r3, r2
 8006570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006586:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <HAL_GPIO_Init+0x350>)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <HAL_GPIO_Init+0x350>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	43db      	mvns	r3, r3
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4013      	ands	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80065b0:	4a12      	ldr	r2, [pc, #72]	; (80065fc <HAL_GPIO_Init+0x350>)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	3301      	adds	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	fa22 f303 	lsr.w	r3, r2, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f47f ae78 	bne.w	80062bc <HAL_GPIO_Init+0x10>
  }
}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40021000 	.word	0x40021000
 80065e0:	40010000 	.word	0x40010000
 80065e4:	48000400 	.word	0x48000400
 80065e8:	48000800 	.word	0x48000800
 80065ec:	48000c00 	.word	0x48000c00
 80065f0:	48001000 	.word	0x48001000
 80065f4:	48001400 	.word	0x48001400
 80065f8:	48001800 	.word	0x48001800
 80065fc:	40010400 	.word	0x40010400

08006600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	807b      	strh	r3, [r7, #2]
 800660c:	4613      	mov	r3, r2
 800660e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006610:	787b      	ldrb	r3, [r7, #1]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006616:	887a      	ldrh	r2, [r7, #2]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800661c:	e002      	b.n	8006624 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800661e:	887a      	ldrh	r2, [r7, #2]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	4603      	mov	r3, r0
 8006638:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800663a:	4b08      	ldr	r3, [pc, #32]	; (800665c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800663c:	695a      	ldr	r2, [r3, #20]
 800663e:	88fb      	ldrh	r3, [r7, #6]
 8006640:	4013      	ands	r3, r2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d006      	beq.n	8006654 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006646:	4a05      	ldr	r2, [pc, #20]	; (800665c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006648:	88fb      	ldrh	r3, [r7, #6]
 800664a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800664c:	88fb      	ldrh	r3, [r7, #6]
 800664e:	4618      	mov	r0, r3
 8006650:	f7fa fba8 	bl	8000da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40010400 	.word	0x40010400

08006660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e081      	b.n	8006776 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fa fe0a 	bl	80012a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2224      	movs	r2, #36	; 0x24
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0201 	bic.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d107      	bne.n	80066da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066d6:	609a      	str	r2, [r3, #8]
 80066d8:	e006      	b.n	80066e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80066e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d104      	bne.n	80066fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6812      	ldr	r2, [r2, #0]
 8006704:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800671c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	69d9      	ldr	r1, [r3, #28]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1a      	ldr	r2, [r3, #32]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	4608      	mov	r0, r1
 800678a:	4611      	mov	r1, r2
 800678c:	461a      	mov	r2, r3
 800678e:	4603      	mov	r3, r0
 8006790:	817b      	strh	r3, [r7, #10]
 8006792:	460b      	mov	r3, r1
 8006794:	813b      	strh	r3, [r7, #8]
 8006796:	4613      	mov	r3, r2
 8006798:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	f040 80f9 	bne.w	800699a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_I2C_Mem_Write+0x34>
 80067ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d105      	bne.n	80067c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e0ed      	b.n	800699c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_I2C_Mem_Write+0x4e>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e0e6      	b.n	800699c <HAL_I2C_Mem_Write+0x21c>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067d6:	f7ff fb6d 	bl	8005eb4 <HAL_GetTick>
 80067da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	2319      	movs	r3, #25
 80067e2:	2201      	movs	r2, #1
 80067e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fbcb 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0d1      	b.n	800699c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2221      	movs	r2, #33	; 0x21
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2240      	movs	r2, #64	; 0x40
 8006804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a3a      	ldr	r2, [r7, #32]
 8006812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006820:	88f8      	ldrh	r0, [r7, #6]
 8006822:	893a      	ldrh	r2, [r7, #8]
 8006824:	8979      	ldrh	r1, [r7, #10]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	4603      	mov	r3, r0
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fadb 	bl	8006dec <I2C_RequestMemoryWrite>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e0a9      	b.n	800699c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	2bff      	cmp	r3, #255	; 0xff
 8006850:	d90e      	bls.n	8006870 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	22ff      	movs	r2, #255	; 0xff
 8006856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685c:	b2da      	uxtb	r2, r3
 800685e:	8979      	ldrh	r1, [r7, #10]
 8006860:	2300      	movs	r3, #0
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 fd33 	bl	80072d4 <I2C_TransferConfig>
 800686e:	e00f      	b.n	8006890 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687e:	b2da      	uxtb	r2, r3
 8006880:	8979      	ldrh	r1, [r7, #10]
 8006882:	2300      	movs	r3, #0
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fd22 	bl	80072d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fbb5 	bl	8007004 <I2C_WaitOnTXISFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e07b      	b.n	800699c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d034      	beq.n	8006948 <HAL_I2C_Mem_Write+0x1c8>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d130      	bne.n	8006948 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	2200      	movs	r2, #0
 80068ee:	2180      	movs	r1, #128	; 0x80
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fb47 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e04d      	b.n	800699c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006904:	b29b      	uxth	r3, r3
 8006906:	2bff      	cmp	r3, #255	; 0xff
 8006908:	d90e      	bls.n	8006928 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	22ff      	movs	r2, #255	; 0xff
 800690e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006914:	b2da      	uxtb	r2, r3
 8006916:	8979      	ldrh	r1, [r7, #10]
 8006918:	2300      	movs	r3, #0
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fcd7 	bl	80072d4 <I2C_TransferConfig>
 8006926:	e00f      	b.n	8006948 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006936:	b2da      	uxtb	r2, r3
 8006938:	8979      	ldrh	r1, [r7, #10]
 800693a:	2300      	movs	r3, #0
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fcc6 	bl	80072d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d19e      	bne.n	8006890 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fb94 	bl	8007084 <I2C_WaitOnSTOPFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e01a      	b.n	800699c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2220      	movs	r2, #32
 800696c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6859      	ldr	r1, [r3, #4]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <HAL_I2C_Mem_Write+0x224>)
 800697a:	400b      	ands	r3, r1
 800697c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e000      	b.n	800699c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800699a:	2302      	movs	r3, #2
  }
}
 800699c:	4618      	mov	r0, r3
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	fe00e800 	.word	0xfe00e800

080069a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	4608      	mov	r0, r1
 80069b2:	4611      	mov	r1, r2
 80069b4:	461a      	mov	r2, r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	817b      	strh	r3, [r7, #10]
 80069ba:	460b      	mov	r3, r1
 80069bc:	813b      	strh	r3, [r7, #8]
 80069be:	4613      	mov	r3, r2
 80069c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	f040 80fd 	bne.w	8006bca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <HAL_I2C_Mem_Read+0x34>
 80069d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d105      	bne.n	80069e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e0f1      	b.n	8006bcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d101      	bne.n	80069f6 <HAL_I2C_Mem_Read+0x4e>
 80069f2:	2302      	movs	r3, #2
 80069f4:	e0ea      	b.n	8006bcc <HAL_I2C_Mem_Read+0x224>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069fe:	f7ff fa59 	bl	8005eb4 <HAL_GetTick>
 8006a02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	2319      	movs	r3, #25
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fab7 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0d5      	b.n	8006bcc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2222      	movs	r2, #34	; 0x22
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2240      	movs	r2, #64	; 0x40
 8006a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a48:	88f8      	ldrh	r0, [r7, #6]
 8006a4a:	893a      	ldrh	r2, [r7, #8]
 8006a4c:	8979      	ldrh	r1, [r7, #10]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	9301      	str	r3, [sp, #4]
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	4603      	mov	r3, r0
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 fa1b 	bl	8006e94 <I2C_RequestMemoryRead>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0ad      	b.n	8006bcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2bff      	cmp	r3, #255	; 0xff
 8006a78:	d90e      	bls.n	8006a98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	22ff      	movs	r2, #255	; 0xff
 8006a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	8979      	ldrh	r1, [r7, #10]
 8006a88:	4b52      	ldr	r3, [pc, #328]	; (8006bd4 <HAL_I2C_Mem_Read+0x22c>)
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 fc1f 	bl	80072d4 <I2C_TransferConfig>
 8006a96:	e00f      	b.n	8006ab8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	8979      	ldrh	r1, [r7, #10]
 8006aaa:	4b4a      	ldr	r3, [pc, #296]	; (8006bd4 <HAL_I2C_Mem_Read+0x22c>)
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 fc0e 	bl	80072d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2104      	movs	r1, #4
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fa5e 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e07c      	b.n	8006bcc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d034      	beq.n	8006b78 <HAL_I2C_Mem_Read+0x1d0>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d130      	bne.n	8006b78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2180      	movs	r1, #128	; 0x80
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fa2f 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e04d      	b.n	8006bcc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2bff      	cmp	r3, #255	; 0xff
 8006b38:	d90e      	bls.n	8006b58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	22ff      	movs	r2, #255	; 0xff
 8006b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	8979      	ldrh	r1, [r7, #10]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 fbbf 	bl	80072d4 <I2C_TransferConfig>
 8006b56:	e00f      	b.n	8006b78 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	8979      	ldrh	r1, [r7, #10]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fbae 	bl	80072d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d19a      	bne.n	8006ab8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fa7c 	bl	8007084 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e01a      	b.n	8006bcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6859      	ldr	r1, [r3, #4]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <HAL_I2C_Mem_Read+0x230>)
 8006baa:	400b      	ands	r3, r1
 8006bac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e000      	b.n	8006bcc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
  }
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	80002400 	.word	0x80002400
 8006bd8:	fe00e800 	.word	0xfe00e800

08006bdc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	; 0x28
 8006be0:	af02      	add	r7, sp, #8
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	460b      	mov	r3, r1
 8006bea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006bec:	2300      	movs	r3, #0
 8006bee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	f040 80f1 	bne.w	8006de0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c0c:	d101      	bne.n	8006c12 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e0e7      	b.n	8006de2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_I2C_IsDeviceReady+0x44>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e0e0      	b.n	8006de2 <HAL_I2C_IsDeviceReady+0x206>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2224      	movs	r2, #36	; 0x24
 8006c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d107      	bne.n	8006c4e <HAL_I2C_IsDeviceReady+0x72>
 8006c3e:	897b      	ldrh	r3, [r7, #10]
 8006c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c4c:	e004      	b.n	8006c58 <HAL_I2C_IsDeviceReady+0x7c>
 8006c4e:	897b      	ldrh	r3, [r7, #10]
 8006c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c54:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	6812      	ldr	r2, [r2, #0]
 8006c5c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006c5e:	f7ff f929 	bl	8005eb4 <HAL_GetTick>
 8006c62:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	bf0c      	ite	eq
 8006c72:	2301      	moveq	r3, #1
 8006c74:	2300      	movne	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	2b10      	cmp	r3, #16
 8006c86:	bf0c      	ite	eq
 8006c88:	2301      	moveq	r3, #1
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006c90:	e034      	b.n	8006cfc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c98:	d01a      	beq.n	8006cd0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c9a:	f7ff f90b 	bl	8005eb4 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d302      	bcc.n	8006cb0 <HAL_I2C_IsDeviceReady+0xd4>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10f      	bne.n	8006cd0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbc:	f043 0220 	orr.w	r2, r3, #32
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e088      	b.n	8006de2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	bf0c      	ite	eq
 8006cde:	2301      	moveq	r3, #1
 8006ce0:	2300      	movne	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f003 0310 	and.w	r3, r3, #16
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	bf0c      	ite	eq
 8006cf4:	2301      	moveq	r3, #1
 8006cf6:	2300      	movne	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006cfc:	7ffb      	ldrb	r3, [r7, #31]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d102      	bne.n	8006d08 <HAL_I2C_IsDeviceReady+0x12c>
 8006d02:	7fbb      	ldrb	r3, [r7, #30]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0c4      	beq.n	8006c92 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	2b10      	cmp	r3, #16
 8006d14:	d01a      	beq.n	8006d4c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2120      	movs	r1, #32
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f92f 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e058      	b.n	8006de2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2220      	movs	r2, #32
 8006d36:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e04a      	b.n	8006de2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2200      	movs	r2, #0
 8006d54:	2120      	movs	r1, #32
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f914 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e03d      	b.n	8006de2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2220      	movs	r2, #32
 8006d74:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d118      	bne.n	8006db0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d8c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2200      	movs	r2, #0
 8006d96:	2120      	movs	r1, #32
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f8f3 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e01c      	b.n	8006de2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2220      	movs	r2, #32
 8006dae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	3301      	adds	r3, #1
 8006db4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	f63f af3b 	bhi.w	8006c36 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dcc:	f043 0220 	orr.w	r2, r3, #32
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006de0:	2302      	movs	r3, #2
  }
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	4608      	mov	r0, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	817b      	strh	r3, [r7, #10]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	813b      	strh	r3, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	8979      	ldrh	r1, [r7, #10]
 8006e0c:	4b20      	ldr	r3, [pc, #128]	; (8006e90 <I2C_RequestMemoryWrite+0xa4>)
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fa5d 	bl	80072d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	69b9      	ldr	r1, [r7, #24]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f8f0 	bl	8007004 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e02c      	b.n	8006e88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d105      	bne.n	8006e40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e34:	893b      	ldrh	r3, [r7, #8]
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	629a      	str	r2, [r3, #40]	; 0x28
 8006e3e:	e015      	b.n	8006e6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e40:	893b      	ldrh	r3, [r7, #8]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	69b9      	ldr	r1, [r7, #24]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f8d6 	bl	8007004 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e012      	b.n	8006e88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e62:	893b      	ldrh	r3, [r7, #8]
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2200      	movs	r2, #0
 8006e74:	2180      	movs	r1, #128	; 0x80
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 f884 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	80002000 	.word	0x80002000

08006e94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	817b      	strh	r3, [r7, #10]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	813b      	strh	r3, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	8979      	ldrh	r1, [r7, #10]
 8006eb4:	4b20      	ldr	r3, [pc, #128]	; (8006f38 <I2C_RequestMemoryRead+0xa4>)
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fa0a 	bl	80072d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	69b9      	ldr	r1, [r7, #24]
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f89d 	bl	8007004 <I2C_WaitOnTXISFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e02c      	b.n	8006f2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d105      	bne.n	8006ee6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006eda:	893b      	ldrh	r3, [r7, #8]
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ee4:	e015      	b.n	8006f12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ee6:	893b      	ldrh	r3, [r7, #8]
 8006ee8:	0a1b      	lsrs	r3, r3, #8
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	69b9      	ldr	r1, [r7, #24]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f883 	bl	8007004 <I2C_WaitOnTXISFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e012      	b.n	8006f2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f08:	893b      	ldrh	r3, [r7, #8]
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2140      	movs	r1, #64	; 0x40
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f831 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e000      	b.n	8006f2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	80002000 	.word	0x80002000

08006f3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d103      	bne.n	8006f5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2200      	movs	r2, #0
 8006f58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d007      	beq.n	8006f78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	619a      	str	r2, [r3, #24]
  }
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	4613      	mov	r3, r2
 8006f92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f94:	e022      	b.n	8006fdc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f9c:	d01e      	beq.n	8006fdc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9e:	f7fe ff89 	bl	8005eb4 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d302      	bcc.n	8006fb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d113      	bne.n	8006fdc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb8:	f043 0220 	orr.w	r2, r3, #32
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e00f      	b.n	8006ffc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d0cd      	beq.n	8006f96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007010:	e02c      	b.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	68b9      	ldr	r1, [r7, #8]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 f870 	bl	80070fc <I2C_IsErrorOccurred>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e02a      	b.n	800707c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800702c:	d01e      	beq.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702e:	f7fe ff41 	bl	8005eb4 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	d302      	bcc.n	8007044 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d113      	bne.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007048:	f043 0220 	orr.w	r2, r3, #32
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e007      	b.n	800707c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d1cb      	bne.n	8007012 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007090:	e028      	b.n	80070e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f830 	bl	80070fc <I2C_IsErrorOccurred>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e026      	b.n	80070f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a6:	f7fe ff05 	bl	8005eb4 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d302      	bcc.n	80070bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d113      	bne.n	80070e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c0:	f043 0220 	orr.w	r2, r3, #32
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e007      	b.n	80070f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d1cf      	bne.n	8007092 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	; 0x28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	d075      	beq.n	8007214 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2210      	movs	r2, #16
 800712e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007130:	e056      	b.n	80071e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007138:	d052      	beq.n	80071e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800713a:	f7fe febb 	bl	8005eb4 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	429a      	cmp	r2, r3
 8007148:	d302      	bcc.n	8007150 <I2C_IsErrorOccurred+0x54>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d147      	bne.n	80071e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800715a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007162:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800716e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007172:	d12e      	bne.n	80071d2 <I2C_IsErrorOccurred+0xd6>
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800717a:	d02a      	beq.n	80071d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800717c:	7cfb      	ldrb	r3, [r7, #19]
 800717e:	2b20      	cmp	r3, #32
 8007180:	d027      	beq.n	80071d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007190:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007192:	f7fe fe8f 	bl	8005eb4 <HAL_GetTick>
 8007196:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007198:	e01b      	b.n	80071d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800719a:	f7fe fe8b 	bl	8005eb4 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b19      	cmp	r3, #25
 80071a6:	d914      	bls.n	80071d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ac:	f043 0220 	orr.w	r2, r3, #32
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	f003 0320 	and.w	r3, r3, #32
 80071dc:	2b20      	cmp	r3, #32
 80071de:	d1dc      	bne.n	800719a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d003      	beq.n	80071f6 <I2C_IsErrorOccurred+0xfa>
 80071ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d09d      	beq.n	8007132 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80071f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d103      	bne.n	8007206 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2220      	movs	r2, #32
 8007204:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	f043 0304 	orr.w	r3, r3, #4
 800720c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00b      	beq.n	800723e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007236:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00b      	beq.n	8007260 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	f043 0308 	orr.w	r3, r3, #8
 800724e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007258:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00b      	beq.n	8007282 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	f043 0302 	orr.w	r3, r3, #2
 8007270:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800727a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01c      	beq.n	80072c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f7ff fe56 	bl	8006f3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6859      	ldr	r1, [r3, #4]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <I2C_IsErrorOccurred+0x1d4>)
 800729c:	400b      	ands	r3, r1
 800729e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80072c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3728      	adds	r7, #40	; 0x28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	fe00e800 	.word	0xfe00e800

080072d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	817b      	strh	r3, [r7, #10]
 80072e2:	4613      	mov	r3, r2
 80072e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072e6:	897b      	ldrh	r3, [r7, #10]
 80072e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072ec:	7a7b      	ldrb	r3, [r7, #9]
 80072ee:	041b      	lsls	r3, r3, #16
 80072f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007302:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	0d5b      	lsrs	r3, r3, #21
 800730e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <I2C_TransferConfig+0x60>)
 8007314:	430b      	orrs	r3, r1
 8007316:	43db      	mvns	r3, r3
 8007318:	ea02 0103 	and.w	r1, r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	03ff63ff 	.word	0x03ff63ff

08007338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b20      	cmp	r3, #32
 800734c:	d138      	bne.n	80073c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007354:	2b01      	cmp	r3, #1
 8007356:	d101      	bne.n	800735c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007358:	2302      	movs	r3, #2
 800735a:	e032      	b.n	80073c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2224      	movs	r2, #36	; 0x24
 8007368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800738a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6819      	ldr	r1, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0201 	orr.w	r2, r2, #1
 80073aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	e000      	b.n	80073c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073c0:	2302      	movs	r3, #2
  }
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b085      	sub	sp, #20
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d139      	bne.n	8007458 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d101      	bne.n	80073f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073ee:	2302      	movs	r3, #2
 80073f0:	e033      	b.n	800745a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2224      	movs	r2, #36	; 0x24
 80073fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0201 	bic.w	r2, r2, #1
 8007410:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007420:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	e000      	b.n	800745a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007458:	2302      	movs	r3, #2
  }
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
	...

08007468 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800746c:	4b04      	ldr	r3, [pc, #16]	; (8007480 <HAL_PWREx_GetVoltageRange+0x18>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007474:	4618      	mov	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	40007000 	.word	0x40007000

08007484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007492:	d130      	bne.n	80074f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007494:	4b23      	ldr	r3, [pc, #140]	; (8007524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800749c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a0:	d038      	beq.n	8007514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074a2:	4b20      	ldr	r3, [pc, #128]	; (8007524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80074aa:	4a1e      	ldr	r2, [pc, #120]	; (8007524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074b2:	4b1d      	ldr	r3, [pc, #116]	; (8007528 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2232      	movs	r2, #50	; 0x32
 80074b8:	fb02 f303 	mul.w	r3, r2, r3
 80074bc:	4a1b      	ldr	r2, [pc, #108]	; (800752c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80074be:	fba2 2303 	umull	r2, r3, r2, r3
 80074c2:	0c9b      	lsrs	r3, r3, #18
 80074c4:	3301      	adds	r3, #1
 80074c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074c8:	e002      	b.n	80074d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074d0:	4b14      	ldr	r3, [pc, #80]	; (8007524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074dc:	d102      	bne.n	80074e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1f2      	bne.n	80074ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074e4:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f0:	d110      	bne.n	8007514 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e00f      	b.n	8007516 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007502:	d007      	beq.n	8007514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007504:	4b07      	ldr	r3, [pc, #28]	; (8007524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800750c:	4a05      	ldr	r2, [pc, #20]	; (8007524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800750e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007512:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	40007000 	.word	0x40007000
 8007528:	20000000 	.word	0x20000000
 800752c:	431bde83 	.word	0x431bde83

08007530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e3ca      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007542:	4b97      	ldr	r3, [pc, #604]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 030c 	and.w	r3, r3, #12
 800754a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800754c:	4b94      	ldr	r3, [pc, #592]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80e4 	beq.w	800772c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d007      	beq.n	800757a <HAL_RCC_OscConfig+0x4a>
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b0c      	cmp	r3, #12
 800756e:	f040 808b 	bne.w	8007688 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b01      	cmp	r3, #1
 8007576:	f040 8087 	bne.w	8007688 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800757a:	4b89      	ldr	r3, [pc, #548]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <HAL_RCC_OscConfig+0x62>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e3a2      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1a      	ldr	r2, [r3, #32]
 8007596:	4b82      	ldr	r3, [pc, #520]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d004      	beq.n	80075ac <HAL_RCC_OscConfig+0x7c>
 80075a2:	4b7f      	ldr	r3, [pc, #508]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075aa:	e005      	b.n	80075b8 <HAL_RCC_OscConfig+0x88>
 80075ac:	4b7c      	ldr	r3, [pc, #496]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80075ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075b2:	091b      	lsrs	r3, r3, #4
 80075b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d223      	bcs.n	8007604 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fd87 	bl	80080d4 <RCC_SetFlashLatencyFromMSIRange>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e383      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075d0:	4b73      	ldr	r3, [pc, #460]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a72      	ldr	r2, [pc, #456]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80075d6:	f043 0308 	orr.w	r3, r3, #8
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	4b70      	ldr	r3, [pc, #448]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	496d      	ldr	r1, [pc, #436]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075ee:	4b6c      	ldr	r3, [pc, #432]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	4968      	ldr	r1, [pc, #416]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	604b      	str	r3, [r1, #4]
 8007602:	e025      	b.n	8007650 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007604:	4b66      	ldr	r3, [pc, #408]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a65      	ldr	r2, [pc, #404]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 800760a:	f043 0308 	orr.w	r3, r3, #8
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	4b63      	ldr	r3, [pc, #396]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	4960      	ldr	r1, [pc, #384]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 800761e:	4313      	orrs	r3, r2
 8007620:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007622:	4b5f      	ldr	r3, [pc, #380]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	021b      	lsls	r3, r3, #8
 8007630:	495b      	ldr	r1, [pc, #364]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007632:	4313      	orrs	r3, r2
 8007634:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d109      	bne.n	8007650 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	4618      	mov	r0, r3
 8007642:	f000 fd47 	bl	80080d4 <RCC_SetFlashLatencyFromMSIRange>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e343      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007650:	f000 fc4a 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 8007654:	4602      	mov	r2, r0
 8007656:	4b52      	ldr	r3, [pc, #328]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	091b      	lsrs	r3, r3, #4
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	4950      	ldr	r1, [pc, #320]	; (80077a4 <HAL_RCC_OscConfig+0x274>)
 8007662:	5ccb      	ldrb	r3, [r1, r3]
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	fa22 f303 	lsr.w	r3, r2, r3
 800766c:	4a4e      	ldr	r2, [pc, #312]	; (80077a8 <HAL_RCC_OscConfig+0x278>)
 800766e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007670:	4b4e      	ldr	r3, [pc, #312]	; (80077ac <HAL_RCC_OscConfig+0x27c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4618      	mov	r0, r3
 8007676:	f7f9 ff11 	bl	800149c <HAL_InitTick>
 800767a:	4603      	mov	r3, r0
 800767c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d052      	beq.n	800772a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	e327      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d032      	beq.n	80076f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007690:	4b43      	ldr	r3, [pc, #268]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a42      	ldr	r2, [pc, #264]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007696:	f043 0301 	orr.w	r3, r3, #1
 800769a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800769c:	f7fe fc0a 	bl	8005eb4 <HAL_GetTick>
 80076a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80076a4:	f7fe fc06 	bl	8005eb4 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e310      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076b6:	4b3a      	ldr	r3, [pc, #232]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0f0      	beq.n	80076a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076c2:	4b37      	ldr	r3, [pc, #220]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a36      	ldr	r2, [pc, #216]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80076c8:	f043 0308 	orr.w	r3, r3, #8
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	4b34      	ldr	r3, [pc, #208]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	4931      	ldr	r1, [pc, #196]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076e0:	4b2f      	ldr	r3, [pc, #188]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	021b      	lsls	r3, r3, #8
 80076ee:	492c      	ldr	r1, [pc, #176]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	604b      	str	r3, [r1, #4]
 80076f4:	e01a      	b.n	800772c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80076f6:	4b2a      	ldr	r3, [pc, #168]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a29      	ldr	r2, [pc, #164]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 80076fc:	f023 0301 	bic.w	r3, r3, #1
 8007700:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007702:	f7fe fbd7 	bl	8005eb4 <HAL_GetTick>
 8007706:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007708:	e008      	b.n	800771c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800770a:	f7fe fbd3 	bl	8005eb4 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e2dd      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800771c:	4b20      	ldr	r3, [pc, #128]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f0      	bne.n	800770a <HAL_RCC_OscConfig+0x1da>
 8007728:	e000      	b.n	800772c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800772a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d074      	beq.n	8007822 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b08      	cmp	r3, #8
 800773c:	d005      	beq.n	800774a <HAL_RCC_OscConfig+0x21a>
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b0c      	cmp	r3, #12
 8007742:	d10e      	bne.n	8007762 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b03      	cmp	r3, #3
 8007748:	d10b      	bne.n	8007762 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800774a:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d064      	beq.n	8007820 <HAL_RCC_OscConfig+0x2f0>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d160      	bne.n	8007820 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e2ba      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800776a:	d106      	bne.n	800777a <HAL_RCC_OscConfig+0x24a>
 800776c:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a0b      	ldr	r2, [pc, #44]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	e026      	b.n	80077c8 <HAL_RCC_OscConfig+0x298>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007782:	d115      	bne.n	80077b0 <HAL_RCC_OscConfig+0x280>
 8007784:	4b06      	ldr	r3, [pc, #24]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a05      	ldr	r2, [pc, #20]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 800778a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	4b03      	ldr	r3, [pc, #12]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a02      	ldr	r2, [pc, #8]	; (80077a0 <HAL_RCC_OscConfig+0x270>)
 8007796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	e014      	b.n	80077c8 <HAL_RCC_OscConfig+0x298>
 800779e:	bf00      	nop
 80077a0:	40021000 	.word	0x40021000
 80077a4:	0800db38 	.word	0x0800db38
 80077a8:	20000000 	.word	0x20000000
 80077ac:	20004038 	.word	0x20004038
 80077b0:	4ba0      	ldr	r3, [pc, #640]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a9f      	ldr	r2, [pc, #636]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80077b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	4b9d      	ldr	r3, [pc, #628]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a9c      	ldr	r2, [pc, #624]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80077c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d013      	beq.n	80077f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d0:	f7fe fb70 	bl	8005eb4 <HAL_GetTick>
 80077d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077d8:	f7fe fb6c 	bl	8005eb4 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b64      	cmp	r3, #100	; 0x64
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e276      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ea:	4b92      	ldr	r3, [pc, #584]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0f0      	beq.n	80077d8 <HAL_RCC_OscConfig+0x2a8>
 80077f6:	e014      	b.n	8007822 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f8:	f7fe fb5c 	bl	8005eb4 <HAL_GetTick>
 80077fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077fe:	e008      	b.n	8007812 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007800:	f7fe fb58 	bl	8005eb4 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b64      	cmp	r3, #100	; 0x64
 800780c:	d901      	bls.n	8007812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e262      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007812:	4b88      	ldr	r3, [pc, #544]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1f0      	bne.n	8007800 <HAL_RCC_OscConfig+0x2d0>
 800781e:	e000      	b.n	8007822 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d060      	beq.n	80078f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b04      	cmp	r3, #4
 8007832:	d005      	beq.n	8007840 <HAL_RCC_OscConfig+0x310>
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b0c      	cmp	r3, #12
 8007838:	d119      	bne.n	800786e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d116      	bne.n	800786e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007840:	4b7c      	ldr	r3, [pc, #496]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <HAL_RCC_OscConfig+0x328>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e23f      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007858:	4b76      	ldr	r3, [pc, #472]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	061b      	lsls	r3, r3, #24
 8007866:	4973      	ldr	r1, [pc, #460]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007868:	4313      	orrs	r3, r2
 800786a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800786c:	e040      	b.n	80078f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d023      	beq.n	80078be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007876:	4b6f      	ldr	r3, [pc, #444]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a6e      	ldr	r2, [pc, #440]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 800787c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007882:	f7fe fb17 	bl	8005eb4 <HAL_GetTick>
 8007886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007888:	e008      	b.n	800789c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800788a:	f7fe fb13 	bl	8005eb4 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	2b02      	cmp	r3, #2
 8007896:	d901      	bls.n	800789c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e21d      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800789c:	4b65      	ldr	r3, [pc, #404]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d0f0      	beq.n	800788a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a8:	4b62      	ldr	r3, [pc, #392]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	061b      	lsls	r3, r3, #24
 80078b6:	495f      	ldr	r1, [pc, #380]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	604b      	str	r3, [r1, #4]
 80078bc:	e018      	b.n	80078f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078be:	4b5d      	ldr	r3, [pc, #372]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a5c      	ldr	r2, [pc, #368]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ca:	f7fe faf3 	bl	8005eb4 <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078d2:	f7fe faef 	bl	8005eb4 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e1f9      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078e4:	4b53      	ldr	r3, [pc, #332]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1f0      	bne.n	80078d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d03c      	beq.n	8007976 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d01c      	beq.n	800793e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007904:	4b4b      	ldr	r3, [pc, #300]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800790a:	4a4a      	ldr	r2, [pc, #296]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 800790c:	f043 0301 	orr.w	r3, r3, #1
 8007910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007914:	f7fe face 	bl	8005eb4 <HAL_GetTick>
 8007918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800791a:	e008      	b.n	800792e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800791c:	f7fe faca 	bl	8005eb4 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e1d4      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800792e:	4b41      	ldr	r3, [pc, #260]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0ef      	beq.n	800791c <HAL_RCC_OscConfig+0x3ec>
 800793c:	e01b      	b.n	8007976 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800793e:	4b3d      	ldr	r3, [pc, #244]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007944:	4a3b      	ldr	r2, [pc, #236]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007946:	f023 0301 	bic.w	r3, r3, #1
 800794a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800794e:	f7fe fab1 	bl	8005eb4 <HAL_GetTick>
 8007952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007954:	e008      	b.n	8007968 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007956:	f7fe faad 	bl	8005eb4 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d901      	bls.n	8007968 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e1b7      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007968:	4b32      	ldr	r3, [pc, #200]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 800796a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1ef      	bne.n	8007956 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 80a6 	beq.w	8007ad0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007984:	2300      	movs	r3, #0
 8007986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007988:	4b2a      	ldr	r3, [pc, #168]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 800798a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10d      	bne.n	80079b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007994:	4b27      	ldr	r3, [pc, #156]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007998:	4a26      	ldr	r2, [pc, #152]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 800799a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799e:	6593      	str	r3, [r2, #88]	; 0x58
 80079a0:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80079a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ac:	2301      	movs	r3, #1
 80079ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079b0:	4b21      	ldr	r3, [pc, #132]	; (8007a38 <HAL_RCC_OscConfig+0x508>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d118      	bne.n	80079ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079bc:	4b1e      	ldr	r3, [pc, #120]	; (8007a38 <HAL_RCC_OscConfig+0x508>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1d      	ldr	r2, [pc, #116]	; (8007a38 <HAL_RCC_OscConfig+0x508>)
 80079c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079c8:	f7fe fa74 	bl	8005eb4 <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079ce:	e008      	b.n	80079e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079d0:	f7fe fa70 	bl	8005eb4 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e17a      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <HAL_RCC_OscConfig+0x508>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0f0      	beq.n	80079d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d108      	bne.n	8007a08 <HAL_RCC_OscConfig+0x4d8>
 80079f6:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80079f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fc:	4a0d      	ldr	r2, [pc, #52]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 80079fe:	f043 0301 	orr.w	r3, r3, #1
 8007a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a06:	e029      	b.n	8007a5c <HAL_RCC_OscConfig+0x52c>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b05      	cmp	r3, #5
 8007a0e:	d115      	bne.n	8007a3c <HAL_RCC_OscConfig+0x50c>
 8007a10:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a16:	4a07      	ldr	r2, [pc, #28]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007a18:	f043 0304 	orr.w	r3, r3, #4
 8007a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a20:	4b04      	ldr	r3, [pc, #16]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a26:	4a03      	ldr	r2, [pc, #12]	; (8007a34 <HAL_RCC_OscConfig+0x504>)
 8007a28:	f043 0301 	orr.w	r3, r3, #1
 8007a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a30:	e014      	b.n	8007a5c <HAL_RCC_OscConfig+0x52c>
 8007a32:	bf00      	nop
 8007a34:	40021000 	.word	0x40021000
 8007a38:	40007000 	.word	0x40007000
 8007a3c:	4b9c      	ldr	r3, [pc, #624]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a42:	4a9b      	ldr	r2, [pc, #620]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007a44:	f023 0301 	bic.w	r3, r3, #1
 8007a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a4c:	4b98      	ldr	r3, [pc, #608]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a52:	4a97      	ldr	r2, [pc, #604]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007a54:	f023 0304 	bic.w	r3, r3, #4
 8007a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d016      	beq.n	8007a92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a64:	f7fe fa26 	bl	8005eb4 <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a6a:	e00a      	b.n	8007a82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a6c:	f7fe fa22 	bl	8005eb4 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e12a      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a82:	4b8b      	ldr	r3, [pc, #556]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0ed      	beq.n	8007a6c <HAL_RCC_OscConfig+0x53c>
 8007a90:	e015      	b.n	8007abe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a92:	f7fe fa0f 	bl	8005eb4 <HAL_GetTick>
 8007a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a98:	e00a      	b.n	8007ab0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a9a:	f7fe fa0b 	bl	8005eb4 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e113      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ab0:	4b7f      	ldr	r3, [pc, #508]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1ed      	bne.n	8007a9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007abe:	7ffb      	ldrb	r3, [r7, #31]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d105      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ac4:	4b7a      	ldr	r3, [pc, #488]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac8:	4a79      	ldr	r2, [pc, #484]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ace:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 80fe 	beq.w	8007cd6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	f040 80d0 	bne.w	8007c84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007ae4:	4b72      	ldr	r3, [pc, #456]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f003 0203 	and.w	r2, r3, #3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d130      	bne.n	8007b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b02:	3b01      	subs	r3, #1
 8007b04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d127      	bne.n	8007b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d11f      	bne.n	8007b5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b24:	2a07      	cmp	r2, #7
 8007b26:	bf14      	ite	ne
 8007b28:	2201      	movne	r2, #1
 8007b2a:	2200      	moveq	r2, #0
 8007b2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d113      	bne.n	8007b5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3c:	085b      	lsrs	r3, r3, #1
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d109      	bne.n	8007b5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b50:	085b      	lsrs	r3, r3, #1
 8007b52:	3b01      	subs	r3, #1
 8007b54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d06e      	beq.n	8007c38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	2b0c      	cmp	r3, #12
 8007b5e:	d069      	beq.n	8007c34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007b60:	4b53      	ldr	r3, [pc, #332]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d105      	bne.n	8007b78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007b6c:	4b50      	ldr	r3, [pc, #320]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0ad      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007b7c:	4b4c      	ldr	r3, [pc, #304]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a4b      	ldr	r2, [pc, #300]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b88:	f7fe f994 	bl	8005eb4 <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b90:	f7fe f990 	bl	8005eb4 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e09a      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ba2:	4b43      	ldr	r3, [pc, #268]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f0      	bne.n	8007b90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bae:	4b40      	ldr	r3, [pc, #256]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	4b40      	ldr	r3, [pc, #256]	; (8007cb4 <HAL_RCC_OscConfig+0x784>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007bbe:	3a01      	subs	r2, #1
 8007bc0:	0112      	lsls	r2, r2, #4
 8007bc2:	4311      	orrs	r1, r2
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bc8:	0212      	lsls	r2, r2, #8
 8007bca:	4311      	orrs	r1, r2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007bd0:	0852      	lsrs	r2, r2, #1
 8007bd2:	3a01      	subs	r2, #1
 8007bd4:	0552      	lsls	r2, r2, #21
 8007bd6:	4311      	orrs	r1, r2
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007bdc:	0852      	lsrs	r2, r2, #1
 8007bde:	3a01      	subs	r2, #1
 8007be0:	0652      	lsls	r2, r2, #25
 8007be2:	4311      	orrs	r1, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007be8:	0912      	lsrs	r2, r2, #4
 8007bea:	0452      	lsls	r2, r2, #17
 8007bec:	430a      	orrs	r2, r1
 8007bee:	4930      	ldr	r1, [pc, #192]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007bf4:	4b2e      	ldr	r3, [pc, #184]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a2d      	ldr	r2, [pc, #180]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c00:	4b2b      	ldr	r3, [pc, #172]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	4a2a      	ldr	r2, [pc, #168]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c0c:	f7fe f952 	bl	8005eb4 <HAL_GetTick>
 8007c10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c14:	f7fe f94e 	bl	8005eb4 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e058      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c26:	4b22      	ldr	r3, [pc, #136]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0f0      	beq.n	8007c14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c32:	e050      	b.n	8007cd6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e04f      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c38:	4b1d      	ldr	r3, [pc, #116]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d148      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007c44:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a19      	ldr	r2, [pc, #100]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c50:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	4a16      	ldr	r2, [pc, #88]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c5c:	f7fe f92a 	bl	8005eb4 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c64:	f7fe f926 	bl	8005eb4 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e030      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c76:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0f0      	beq.n	8007c64 <HAL_RCC_OscConfig+0x734>
 8007c82:	e028      	b.n	8007cd6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	2b0c      	cmp	r3, #12
 8007c88:	d023      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a08      	ldr	r2, [pc, #32]	; (8007cb0 <HAL_RCC_OscConfig+0x780>)
 8007c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c96:	f7fe f90d 	bl	8005eb4 <HAL_GetTick>
 8007c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c9c:	e00c      	b.n	8007cb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c9e:	f7fe f909 	bl	8005eb4 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d905      	bls.n	8007cb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e013      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cb8:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <HAL_RCC_OscConfig+0x7b0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1ec      	bne.n	8007c9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007cc4:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <HAL_RCC_OscConfig+0x7b0>)
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	4905      	ldr	r1, [pc, #20]	; (8007ce0 <HAL_RCC_OscConfig+0x7b0>)
 8007cca:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <HAL_RCC_OscConfig+0x7b4>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	60cb      	str	r3, [r1, #12]
 8007cd0:	e001      	b.n	8007cd6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	40021000 	.word	0x40021000
 8007ce4:	feeefffc 	.word	0xfeeefffc

08007ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e0e7      	b.n	8007ecc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cfc:	4b75      	ldr	r3, [pc, #468]	; (8007ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d910      	bls.n	8007d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d0a:	4b72      	ldr	r3, [pc, #456]	; (8007ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f023 0207 	bic.w	r2, r3, #7
 8007d12:	4970      	ldr	r1, [pc, #448]	; (8007ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1a:	4b6e      	ldr	r3, [pc, #440]	; (8007ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d001      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e0cf      	b.n	8007ecc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d010      	beq.n	8007d5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	4b66      	ldr	r3, [pc, #408]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d908      	bls.n	8007d5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d48:	4b63      	ldr	r3, [pc, #396]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	4960      	ldr	r1, [pc, #384]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d04c      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d107      	bne.n	8007d7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d6e:	4b5a      	ldr	r3, [pc, #360]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d121      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e0a6      	b.n	8007ecc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d107      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d86:	4b54      	ldr	r3, [pc, #336]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d115      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e09a      	b.n	8007ecc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d107      	bne.n	8007dae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d9e:	4b4e      	ldr	r3, [pc, #312]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e08e      	b.n	8007ecc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007dae:	4b4a      	ldr	r3, [pc, #296]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e086      	b.n	8007ecc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dbe:	4b46      	ldr	r3, [pc, #280]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f023 0203 	bic.w	r2, r3, #3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	4943      	ldr	r1, [pc, #268]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dd0:	f7fe f870 	bl	8005eb4 <HAL_GetTick>
 8007dd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dd6:	e00a      	b.n	8007dee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dd8:	f7fe f86c 	bl	8005eb4 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d901      	bls.n	8007dee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e06e      	b.n	8007ecc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dee:	4b3a      	ldr	r3, [pc, #232]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 020c 	and.w	r2, r3, #12
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d1eb      	bne.n	8007dd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d010      	beq.n	8007e2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	4b31      	ldr	r3, [pc, #196]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d208      	bcs.n	8007e2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e1c:	4b2e      	ldr	r3, [pc, #184]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	492b      	ldr	r1, [pc, #172]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e2e:	4b29      	ldr	r3, [pc, #164]	; (8007ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d210      	bcs.n	8007e5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e3c:	4b25      	ldr	r3, [pc, #148]	; (8007ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f023 0207 	bic.w	r2, r3, #7
 8007e44:	4923      	ldr	r1, [pc, #140]	; (8007ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e4c:	4b21      	ldr	r3, [pc, #132]	; (8007ed4 <HAL_RCC_ClockConfig+0x1ec>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d001      	beq.n	8007e5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e036      	b.n	8007ecc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0304 	and.w	r3, r3, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d008      	beq.n	8007e7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	4918      	ldr	r1, [pc, #96]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d009      	beq.n	8007e9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e88:	4b13      	ldr	r3, [pc, #76]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	4910      	ldr	r1, [pc, #64]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e9c:	f000 f824 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	091b      	lsrs	r3, r3, #4
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	490b      	ldr	r1, [pc, #44]	; (8007edc <HAL_RCC_ClockConfig+0x1f4>)
 8007eae:	5ccb      	ldrb	r3, [r1, r3]
 8007eb0:	f003 031f 	and.w	r3, r3, #31
 8007eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb8:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8007eba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007ebc:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <HAL_RCC_ClockConfig+0x1fc>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7f9 faeb 	bl	800149c <HAL_InitTick>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	72fb      	strb	r3, [r7, #11]

  return status;
 8007eca:	7afb      	ldrb	r3, [r7, #11]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	40022000 	.word	0x40022000
 8007ed8:	40021000 	.word	0x40021000
 8007edc:	0800db38 	.word	0x0800db38
 8007ee0:	20000000 	.word	0x20000000
 8007ee4:	20004038 	.word	0x20004038

08007ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b089      	sub	sp, #36	; 0x24
 8007eec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ef6:	4b3e      	ldr	r3, [pc, #248]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 030c 	and.w	r3, r3, #12
 8007efe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f00:	4b3b      	ldr	r3, [pc, #236]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_RCC_GetSysClockFreq+0x34>
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2b0c      	cmp	r3, #12
 8007f14:	d121      	bne.n	8007f5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d11e      	bne.n	8007f5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007f1c:	4b34      	ldr	r3, [pc, #208]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0308 	and.w	r3, r3, #8
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d107      	bne.n	8007f38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007f28:	4b31      	ldr	r3, [pc, #196]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f2e:	0a1b      	lsrs	r3, r3, #8
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	61fb      	str	r3, [r7, #28]
 8007f36:	e005      	b.n	8007f44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f38:	4b2d      	ldr	r3, [pc, #180]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	091b      	lsrs	r3, r3, #4
 8007f3e:	f003 030f 	and.w	r3, r3, #15
 8007f42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f44:	4a2b      	ldr	r2, [pc, #172]	; (8007ff4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10d      	bne.n	8007f70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f58:	e00a      	b.n	8007f70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	d102      	bne.n	8007f66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f60:	4b25      	ldr	r3, [pc, #148]	; (8007ff8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f62:	61bb      	str	r3, [r7, #24]
 8007f64:	e004      	b.n	8007f70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d101      	bne.n	8007f70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f6c:	4b23      	ldr	r3, [pc, #140]	; (8007ffc <HAL_RCC_GetSysClockFreq+0x114>)
 8007f6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b0c      	cmp	r3, #12
 8007f74:	d134      	bne.n	8007fe0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f76:	4b1e      	ldr	r3, [pc, #120]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d003      	beq.n	8007f8e <HAL_RCC_GetSysClockFreq+0xa6>
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d003      	beq.n	8007f94 <HAL_RCC_GetSysClockFreq+0xac>
 8007f8c:	e005      	b.n	8007f9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007f8e:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f90:	617b      	str	r3, [r7, #20]
      break;
 8007f92:	e005      	b.n	8007fa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007f94:	4b19      	ldr	r3, [pc, #100]	; (8007ffc <HAL_RCC_GetSysClockFreq+0x114>)
 8007f96:	617b      	str	r3, [r7, #20]
      break;
 8007f98:	e002      	b.n	8007fa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	617b      	str	r3, [r7, #20]
      break;
 8007f9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007fa0:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	091b      	lsrs	r3, r3, #4
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	3301      	adds	r3, #1
 8007fac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007fae:	4b10      	ldr	r3, [pc, #64]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	0a1b      	lsrs	r3, r3, #8
 8007fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	fb03 f202 	mul.w	r2, r3, r2
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fc6:	4b0a      	ldr	r3, [pc, #40]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	0e5b      	lsrs	r3, r3, #25
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3724      	adds	r7, #36	; 0x24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	40021000 	.word	0x40021000
 8007ff4:	0800db50 	.word	0x0800db50
 8007ff8:	00f42400 	.word	0x00f42400
 8007ffc:	007a1200 	.word	0x007a1200

08008000 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008000:	b480      	push	{r7}
 8008002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008004:	4b03      	ldr	r3, [pc, #12]	; (8008014 <HAL_RCC_GetHCLKFreq+0x14>)
 8008006:	681b      	ldr	r3, [r3, #0]
}
 8008008:	4618      	mov	r0, r3
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000000 	.word	0x20000000

08008018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800801c:	f7ff fff0 	bl	8008000 <HAL_RCC_GetHCLKFreq>
 8008020:	4602      	mov	r2, r0
 8008022:	4b06      	ldr	r3, [pc, #24]	; (800803c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	0a1b      	lsrs	r3, r3, #8
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	4904      	ldr	r1, [pc, #16]	; (8008040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800802e:	5ccb      	ldrb	r3, [r1, r3]
 8008030:	f003 031f 	and.w	r3, r3, #31
 8008034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008038:	4618      	mov	r0, r3
 800803a:	bd80      	pop	{r7, pc}
 800803c:	40021000 	.word	0x40021000
 8008040:	0800db48 	.word	0x0800db48

08008044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008048:	f7ff ffda 	bl	8008000 <HAL_RCC_GetHCLKFreq>
 800804c:	4602      	mov	r2, r0
 800804e:	4b06      	ldr	r3, [pc, #24]	; (8008068 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	0adb      	lsrs	r3, r3, #11
 8008054:	f003 0307 	and.w	r3, r3, #7
 8008058:	4904      	ldr	r1, [pc, #16]	; (800806c <HAL_RCC_GetPCLK2Freq+0x28>)
 800805a:	5ccb      	ldrb	r3, [r1, r3]
 800805c:	f003 031f 	and.w	r3, r3, #31
 8008060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008064:	4618      	mov	r0, r3
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40021000 	.word	0x40021000
 800806c:	0800db48 	.word	0x0800db48

08008070 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	220f      	movs	r2, #15
 800807e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008080:	4b12      	ldr	r3, [pc, #72]	; (80080cc <HAL_RCC_GetClockConfig+0x5c>)
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f003 0203 	and.w	r2, r3, #3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800808c:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <HAL_RCC_GetClockConfig+0x5c>)
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008098:	4b0c      	ldr	r3, [pc, #48]	; (80080cc <HAL_RCC_GetClockConfig+0x5c>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <HAL_RCC_GetClockConfig+0x5c>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	08db      	lsrs	r3, r3, #3
 80080aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80080b2:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <HAL_RCC_GetClockConfig+0x60>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0207 	and.w	r2, r3, #7
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	601a      	str	r2, [r3, #0]
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	40021000 	.word	0x40021000
 80080d0:	40022000 	.word	0x40022000

080080d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80080e0:	4b2a      	ldr	r3, [pc, #168]	; (800818c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80080ec:	f7ff f9bc 	bl	8007468 <HAL_PWREx_GetVoltageRange>
 80080f0:	6178      	str	r0, [r7, #20]
 80080f2:	e014      	b.n	800811e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80080f4:	4b25      	ldr	r3, [pc, #148]	; (800818c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f8:	4a24      	ldr	r2, [pc, #144]	; (800818c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080fe:	6593      	str	r3, [r2, #88]	; 0x58
 8008100:	4b22      	ldr	r3, [pc, #136]	; (800818c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800810c:	f7ff f9ac 	bl	8007468 <HAL_PWREx_GetVoltageRange>
 8008110:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008112:	4b1e      	ldr	r3, [pc, #120]	; (800818c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008116:	4a1d      	ldr	r2, [pc, #116]	; (800818c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800811c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008124:	d10b      	bne.n	800813e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b80      	cmp	r3, #128	; 0x80
 800812a:	d919      	bls.n	8008160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2ba0      	cmp	r3, #160	; 0xa0
 8008130:	d902      	bls.n	8008138 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008132:	2302      	movs	r3, #2
 8008134:	613b      	str	r3, [r7, #16]
 8008136:	e013      	b.n	8008160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008138:	2301      	movs	r3, #1
 800813a:	613b      	str	r3, [r7, #16]
 800813c:	e010      	b.n	8008160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b80      	cmp	r3, #128	; 0x80
 8008142:	d902      	bls.n	800814a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008144:	2303      	movs	r3, #3
 8008146:	613b      	str	r3, [r7, #16]
 8008148:	e00a      	b.n	8008160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b80      	cmp	r3, #128	; 0x80
 800814e:	d102      	bne.n	8008156 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008150:	2302      	movs	r3, #2
 8008152:	613b      	str	r3, [r7, #16]
 8008154:	e004      	b.n	8008160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b70      	cmp	r3, #112	; 0x70
 800815a:	d101      	bne.n	8008160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800815c:	2301      	movs	r3, #1
 800815e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f023 0207 	bic.w	r2, r3, #7
 8008168:	4909      	ldr	r1, [pc, #36]	; (8008190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008170:	4b07      	ldr	r3, [pc, #28]	; (8008190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	429a      	cmp	r2, r3
 800817c:	d001      	beq.n	8008182 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	40021000 	.word	0x40021000
 8008190:	40022000 	.word	0x40022000

08008194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800819c:	2300      	movs	r3, #0
 800819e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081a0:	2300      	movs	r3, #0
 80081a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d041      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081b8:	d02a      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80081ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081be:	d824      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80081c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081c4:	d008      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80081c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081ca:	d81e      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00a      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80081d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081d4:	d010      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80081d6:	e018      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80081d8:	4b86      	ldr	r3, [pc, #536]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	4a85      	ldr	r2, [pc, #532]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081e4:	e015      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3304      	adds	r3, #4
 80081ea:	2100      	movs	r1, #0
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 fabb 	bl	8008768 <RCCEx_PLLSAI1_Config>
 80081f2:	4603      	mov	r3, r0
 80081f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081f6:	e00c      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3320      	adds	r3, #32
 80081fc:	2100      	movs	r1, #0
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fba6 	bl	8008950 <RCCEx_PLLSAI2_Config>
 8008204:	4603      	mov	r3, r0
 8008206:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008208:	e003      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	74fb      	strb	r3, [r7, #19]
      break;
 800820e:	e000      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008212:	7cfb      	ldrb	r3, [r7, #19]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10b      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008218:	4b76      	ldr	r3, [pc, #472]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800821a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008226:	4973      	ldr	r1, [pc, #460]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008228:	4313      	orrs	r3, r2
 800822a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800822e:	e001      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008230:	7cfb      	ldrb	r3, [r7, #19]
 8008232:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d041      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008244:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008248:	d02a      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800824a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800824e:	d824      	bhi.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008254:	d008      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800825a:	d81e      	bhi.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00a      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008264:	d010      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008266:	e018      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008268:	4b62      	ldr	r3, [pc, #392]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	4a61      	ldr	r2, [pc, #388]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800826e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008272:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008274:	e015      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3304      	adds	r3, #4
 800827a:	2100      	movs	r1, #0
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fa73 	bl	8008768 <RCCEx_PLLSAI1_Config>
 8008282:	4603      	mov	r3, r0
 8008284:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008286:	e00c      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3320      	adds	r3, #32
 800828c:	2100      	movs	r1, #0
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fb5e 	bl	8008950 <RCCEx_PLLSAI2_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008298:	e003      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	74fb      	strb	r3, [r7, #19]
      break;
 800829e:	e000      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80082a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082a2:	7cfb      	ldrb	r3, [r7, #19]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10b      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80082a8:	4b52      	ldr	r3, [pc, #328]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082b6:	494f      	ldr	r1, [pc, #316]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80082be:	e001      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c0:	7cfb      	ldrb	r3, [r7, #19]
 80082c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80a0 	beq.w	8008412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082d2:	2300      	movs	r3, #0
 80082d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80082d6:	4b47      	ldr	r3, [pc, #284]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80082e6:	2300      	movs	r3, #0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00d      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ec:	4b41      	ldr	r3, [pc, #260]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f0:	4a40      	ldr	r2, [pc, #256]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082f6:	6593      	str	r3, [r2, #88]	; 0x58
 80082f8:	4b3e      	ldr	r3, [pc, #248]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008300:	60bb      	str	r3, [r7, #8]
 8008302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008304:	2301      	movs	r3, #1
 8008306:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008308:	4b3b      	ldr	r3, [pc, #236]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a3a      	ldr	r2, [pc, #232]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800830e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008314:	f7fd fdce 	bl	8005eb4 <HAL_GetTick>
 8008318:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800831a:	e009      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800831c:	f7fd fdca 	bl	8005eb4 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	2b02      	cmp	r3, #2
 8008328:	d902      	bls.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	74fb      	strb	r3, [r7, #19]
        break;
 800832e:	e005      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008330:	4b31      	ldr	r3, [pc, #196]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0ef      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800833c:	7cfb      	ldrb	r3, [r7, #19]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d15c      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008342:	4b2c      	ldr	r3, [pc, #176]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800834c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01f      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	429a      	cmp	r2, r3
 800835e:	d019      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008360:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800836a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800836c:	4b21      	ldr	r3, [pc, #132]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800836e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008372:	4a20      	ldr	r2, [pc, #128]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800837c:	4b1d      	ldr	r3, [pc, #116]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800837e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008382:	4a1c      	ldr	r2, [pc, #112]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800838c:	4a19      	ldr	r2, [pc, #100]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d016      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839e:	f7fd fd89 	bl	8005eb4 <HAL_GetTick>
 80083a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083a4:	e00b      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083a6:	f7fd fd85 	bl	8005eb4 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d902      	bls.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	74fb      	strb	r3, [r7, #19]
            break;
 80083bc:	e006      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083be:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0ec      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80083cc:	7cfb      	ldrb	r3, [r7, #19]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10c      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083d2:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e2:	4904      	ldr	r1, [pc, #16]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80083ea:	e009      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083ec:	7cfb      	ldrb	r3, [r7, #19]
 80083ee:	74bb      	strb	r3, [r7, #18]
 80083f0:	e006      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80083f2:	bf00      	nop
 80083f4:	40021000 	.word	0x40021000
 80083f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fc:	7cfb      	ldrb	r3, [r7, #19]
 80083fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008400:	7c7b      	ldrb	r3, [r7, #17]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d105      	bne.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008406:	4b9e      	ldr	r3, [pc, #632]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840a:	4a9d      	ldr	r2, [pc, #628]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800840c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008410:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800841e:	4b98      	ldr	r3, [pc, #608]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008424:	f023 0203 	bic.w	r2, r3, #3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	4994      	ldr	r1, [pc, #592]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008440:	4b8f      	ldr	r3, [pc, #572]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008446:	f023 020c 	bic.w	r2, r3, #12
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844e:	498c      	ldr	r1, [pc, #560]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008450:	4313      	orrs	r3, r2
 8008452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008462:	4b87      	ldr	r3, [pc, #540]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008468:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	4983      	ldr	r1, [pc, #524]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008472:	4313      	orrs	r3, r2
 8008474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00a      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008484:	4b7e      	ldr	r3, [pc, #504]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008492:	497b      	ldr	r1, [pc, #492]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008494:	4313      	orrs	r3, r2
 8008496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0310 	and.w	r3, r3, #16
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80084a6:	4b76      	ldr	r3, [pc, #472]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084b4:	4972      	ldr	r1, [pc, #456]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084c8:	4b6d      	ldr	r3, [pc, #436]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d6:	496a      	ldr	r1, [pc, #424]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084ea:	4b65      	ldr	r3, [pc, #404]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f8:	4961      	ldr	r1, [pc, #388]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800850c:	4b5c      	ldr	r3, [pc, #368]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008512:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800851a:	4959      	ldr	r1, [pc, #356]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800851c:	4313      	orrs	r3, r2
 800851e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800852e:	4b54      	ldr	r3, [pc, #336]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008534:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853c:	4950      	ldr	r1, [pc, #320]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008550:	4b4b      	ldr	r3, [pc, #300]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008556:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855e:	4948      	ldr	r1, [pc, #288]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008560:	4313      	orrs	r3, r2
 8008562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008572:	4b43      	ldr	r3, [pc, #268]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008580:	493f      	ldr	r1, [pc, #252]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008582:	4313      	orrs	r3, r2
 8008584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d028      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008594:	4b3a      	ldr	r3, [pc, #232]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800859a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a2:	4937      	ldr	r1, [pc, #220]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085b2:	d106      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085b4:	4b32      	ldr	r3, [pc, #200]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	4a31      	ldr	r2, [pc, #196]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085be:	60d3      	str	r3, [r2, #12]
 80085c0:	e011      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085ca:	d10c      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	2101      	movs	r1, #1
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f8c8 	bl	8008768 <RCCEx_PLLSAI1_Config>
 80085d8:	4603      	mov	r3, r0
 80085da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80085dc:	7cfb      	ldrb	r3, [r7, #19]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80085e2:	7cfb      	ldrb	r3, [r7, #19]
 80085e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d028      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80085f2:	4b23      	ldr	r3, [pc, #140]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008600:	491f      	ldr	r1, [pc, #124]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008602:	4313      	orrs	r3, r2
 8008604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008610:	d106      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008612:	4b1b      	ldr	r3, [pc, #108]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	4a1a      	ldr	r2, [pc, #104]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800861c:	60d3      	str	r3, [r2, #12]
 800861e:	e011      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008624:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008628:	d10c      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3304      	adds	r3, #4
 800862e:	2101      	movs	r1, #1
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f899 	bl	8008768 <RCCEx_PLLSAI1_Config>
 8008636:	4603      	mov	r3, r0
 8008638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800863a:	7cfb      	ldrb	r3, [r7, #19]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008640:	7cfb      	ldrb	r3, [r7, #19]
 8008642:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d02b      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008650:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800865e:	4908      	ldr	r1, [pc, #32]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008660:	4313      	orrs	r3, r2
 8008662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800866a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800866e:	d109      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008670:	4b03      	ldr	r3, [pc, #12]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	4a02      	ldr	r2, [pc, #8]	; (8008680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800867a:	60d3      	str	r3, [r2, #12]
 800867c:	e014      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800867e:	bf00      	nop
 8008680:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800868c:	d10c      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	2101      	movs	r1, #1
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f867 	bl	8008768 <RCCEx_PLLSAI1_Config>
 800869a:	4603      	mov	r3, r0
 800869c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800869e:	7cfb      	ldrb	r3, [r7, #19]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80086a4:	7cfb      	ldrb	r3, [r7, #19]
 80086a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d02f      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086b4:	4b2b      	ldr	r3, [pc, #172]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80086b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086c2:	4928      	ldr	r1, [pc, #160]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086d2:	d10d      	bne.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3304      	adds	r3, #4
 80086d8:	2102      	movs	r1, #2
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f844 	bl	8008768 <RCCEx_PLLSAI1_Config>
 80086e0:	4603      	mov	r3, r0
 80086e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086e4:	7cfb      	ldrb	r3, [r7, #19]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d014      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80086ea:	7cfb      	ldrb	r3, [r7, #19]
 80086ec:	74bb      	strb	r3, [r7, #18]
 80086ee:	e011      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f8:	d10c      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3320      	adds	r3, #32
 80086fe:	2102      	movs	r1, #2
 8008700:	4618      	mov	r0, r3
 8008702:	f000 f925 	bl	8008950 <RCCEx_PLLSAI2_Config>
 8008706:	4603      	mov	r3, r0
 8008708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800870a:	7cfb      	ldrb	r3, [r7, #19]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008710:	7cfb      	ldrb	r3, [r7, #19]
 8008712:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00a      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008720:	4b10      	ldr	r3, [pc, #64]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008726:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800872e:	490d      	ldr	r1, [pc, #52]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008730:	4313      	orrs	r3, r2
 8008732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008742:	4b08      	ldr	r3, [pc, #32]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008748:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008752:	4904      	ldr	r1, [pc, #16]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008754:	4313      	orrs	r3, r2
 8008756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800875a:	7cbb      	ldrb	r3, [r7, #18]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40021000 	.word	0x40021000

08008768 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008776:	4b75      	ldr	r3, [pc, #468]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d018      	beq.n	80087b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008782:	4b72      	ldr	r3, [pc, #456]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0203 	and.w	r2, r3, #3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d10d      	bne.n	80087ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
       ||
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800879a:	4b6c      	ldr	r3, [pc, #432]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	091b      	lsrs	r3, r3, #4
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
       ||
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d047      	beq.n	800883e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	73fb      	strb	r3, [r7, #15]
 80087b2:	e044      	b.n	800883e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d018      	beq.n	80087ee <RCCEx_PLLSAI1_Config+0x86>
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d825      	bhi.n	800880c <RCCEx_PLLSAI1_Config+0xa4>
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d002      	beq.n	80087ca <RCCEx_PLLSAI1_Config+0x62>
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d009      	beq.n	80087dc <RCCEx_PLLSAI1_Config+0x74>
 80087c8:	e020      	b.n	800880c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087ca:	4b60      	ldr	r3, [pc, #384]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d11d      	bne.n	8008812 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087da:	e01a      	b.n	8008812 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80087dc:	4b5b      	ldr	r3, [pc, #364]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d116      	bne.n	8008816 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087ec:	e013      	b.n	8008816 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087ee:	4b57      	ldr	r3, [pc, #348]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10f      	bne.n	800881a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087fa:	4b54      	ldr	r3, [pc, #336]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d109      	bne.n	800881a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800880a:	e006      	b.n	800881a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
      break;
 8008810:	e004      	b.n	800881c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008812:	bf00      	nop
 8008814:	e002      	b.n	800881c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008816:	bf00      	nop
 8008818:	e000      	b.n	800881c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800881a:	bf00      	nop
    }

    if(status == HAL_OK)
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10d      	bne.n	800883e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008822:	4b4a      	ldr	r3, [pc, #296]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6819      	ldr	r1, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	3b01      	subs	r3, #1
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	430b      	orrs	r3, r1
 8008838:	4944      	ldr	r1, [pc, #272]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 800883a:	4313      	orrs	r3, r2
 800883c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d17d      	bne.n	8008940 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008844:	4b41      	ldr	r3, [pc, #260]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a40      	ldr	r2, [pc, #256]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 800884a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800884e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008850:	f7fd fb30 	bl	8005eb4 <HAL_GetTick>
 8008854:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008856:	e009      	b.n	800886c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008858:	f7fd fb2c 	bl	8005eb4 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b02      	cmp	r3, #2
 8008864:	d902      	bls.n	800886c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	73fb      	strb	r3, [r7, #15]
        break;
 800886a:	e005      	b.n	8008878 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800886c:	4b37      	ldr	r3, [pc, #220]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1ef      	bne.n	8008858 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d160      	bne.n	8008940 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d111      	bne.n	80088a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008884:	4b31      	ldr	r3, [pc, #196]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800888c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	6892      	ldr	r2, [r2, #8]
 8008894:	0211      	lsls	r1, r2, #8
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	68d2      	ldr	r2, [r2, #12]
 800889a:	0912      	lsrs	r2, r2, #4
 800889c:	0452      	lsls	r2, r2, #17
 800889e:	430a      	orrs	r2, r1
 80088a0:	492a      	ldr	r1, [pc, #168]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	610b      	str	r3, [r1, #16]
 80088a6:	e027      	b.n	80088f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d112      	bne.n	80088d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088ae:	4b27      	ldr	r3, [pc, #156]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80088b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6892      	ldr	r2, [r2, #8]
 80088be:	0211      	lsls	r1, r2, #8
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	6912      	ldr	r2, [r2, #16]
 80088c4:	0852      	lsrs	r2, r2, #1
 80088c6:	3a01      	subs	r2, #1
 80088c8:	0552      	lsls	r2, r2, #21
 80088ca:	430a      	orrs	r2, r1
 80088cc:	491f      	ldr	r1, [pc, #124]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	610b      	str	r3, [r1, #16]
 80088d2:	e011      	b.n	80088f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088d4:	4b1d      	ldr	r3, [pc, #116]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80088dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	6892      	ldr	r2, [r2, #8]
 80088e4:	0211      	lsls	r1, r2, #8
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6952      	ldr	r2, [r2, #20]
 80088ea:	0852      	lsrs	r2, r2, #1
 80088ec:	3a01      	subs	r2, #1
 80088ee:	0652      	lsls	r2, r2, #25
 80088f0:	430a      	orrs	r2, r1
 80088f2:	4916      	ldr	r1, [pc, #88]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088f4:	4313      	orrs	r3, r2
 80088f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80088f8:	4b14      	ldr	r3, [pc, #80]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a13      	ldr	r2, [pc, #76]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 80088fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008902:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008904:	f7fd fad6 	bl	8005eb4 <HAL_GetTick>
 8008908:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800890a:	e009      	b.n	8008920 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800890c:	f7fd fad2 	bl	8005eb4 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b02      	cmp	r3, #2
 8008918:	d902      	bls.n	8008920 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	73fb      	strb	r3, [r7, #15]
          break;
 800891e:	e005      	b.n	800892c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008920:	4b0a      	ldr	r3, [pc, #40]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0ef      	beq.n	800890c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d106      	bne.n	8008940 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008932:	4b06      	ldr	r3, [pc, #24]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	4904      	ldr	r1, [pc, #16]	; (800894c <RCCEx_PLLSAI1_Config+0x1e4>)
 800893c:	4313      	orrs	r3, r2
 800893e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	40021000 	.word	0x40021000

08008950 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800895e:	4b6a      	ldr	r3, [pc, #424]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	f003 0303 	and.w	r3, r3, #3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d018      	beq.n	800899c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800896a:	4b67      	ldr	r3, [pc, #412]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f003 0203 	and.w	r2, r3, #3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d10d      	bne.n	8008996 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
       ||
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008982:	4b61      	ldr	r3, [pc, #388]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	091b      	lsrs	r3, r3, #4
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
       ||
 8008992:	429a      	cmp	r2, r3
 8008994:	d047      	beq.n	8008a26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	73fb      	strb	r3, [r7, #15]
 800899a:	e044      	b.n	8008a26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d018      	beq.n	80089d6 <RCCEx_PLLSAI2_Config+0x86>
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d825      	bhi.n	80089f4 <RCCEx_PLLSAI2_Config+0xa4>
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d002      	beq.n	80089b2 <RCCEx_PLLSAI2_Config+0x62>
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d009      	beq.n	80089c4 <RCCEx_PLLSAI2_Config+0x74>
 80089b0:	e020      	b.n	80089f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80089b2:	4b55      	ldr	r3, [pc, #340]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d11d      	bne.n	80089fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089c2:	e01a      	b.n	80089fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80089c4:	4b50      	ldr	r3, [pc, #320]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d116      	bne.n	80089fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089d4:	e013      	b.n	80089fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80089d6:	4b4c      	ldr	r3, [pc, #304]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10f      	bne.n	8008a02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80089e2:	4b49      	ldr	r3, [pc, #292]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d109      	bne.n	8008a02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089f2:	e006      	b.n	8008a02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	73fb      	strb	r3, [r7, #15]
      break;
 80089f8:	e004      	b.n	8008a04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80089fa:	bf00      	nop
 80089fc:	e002      	b.n	8008a04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80089fe:	bf00      	nop
 8008a00:	e000      	b.n	8008a04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008a02:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10d      	bne.n	8008a26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008a0a:	4b3f      	ldr	r3, [pc, #252]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6819      	ldr	r1, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	430b      	orrs	r3, r1
 8008a20:	4939      	ldr	r1, [pc, #228]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d167      	bne.n	8008afc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008a2c:	4b36      	ldr	r3, [pc, #216]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a35      	ldr	r2, [pc, #212]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a38:	f7fd fa3c 	bl	8005eb4 <HAL_GetTick>
 8008a3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a3e:	e009      	b.n	8008a54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a40:	f7fd fa38 	bl	8005eb4 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d902      	bls.n	8008a54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	73fb      	strb	r3, [r7, #15]
        break;
 8008a52:	e005      	b.n	8008a60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a54:	4b2c      	ldr	r3, [pc, #176]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1ef      	bne.n	8008a40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d14a      	bne.n	8008afc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d111      	bne.n	8008a90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a6c:	4b26      	ldr	r3, [pc, #152]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	6892      	ldr	r2, [r2, #8]
 8008a7c:	0211      	lsls	r1, r2, #8
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68d2      	ldr	r2, [r2, #12]
 8008a82:	0912      	lsrs	r2, r2, #4
 8008a84:	0452      	lsls	r2, r2, #17
 8008a86:	430a      	orrs	r2, r1
 8008a88:	491f      	ldr	r1, [pc, #124]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	614b      	str	r3, [r1, #20]
 8008a8e:	e011      	b.n	8008ab4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a90:	4b1d      	ldr	r3, [pc, #116]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6892      	ldr	r2, [r2, #8]
 8008aa0:	0211      	lsls	r1, r2, #8
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6912      	ldr	r2, [r2, #16]
 8008aa6:	0852      	lsrs	r2, r2, #1
 8008aa8:	3a01      	subs	r2, #1
 8008aaa:	0652      	lsls	r2, r2, #25
 8008aac:	430a      	orrs	r2, r1
 8008aae:	4916      	ldr	r1, [pc, #88]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008ab4:	4b14      	ldr	r3, [pc, #80]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a13      	ldr	r2, [pc, #76]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008abe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac0:	f7fd f9f8 	bl	8005eb4 <HAL_GetTick>
 8008ac4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ac6:	e009      	b.n	8008adc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ac8:	f7fd f9f4 	bl	8005eb4 <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d902      	bls.n	8008adc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	73fb      	strb	r3, [r7, #15]
          break;
 8008ada:	e005      	b.n	8008ae8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0ef      	beq.n	8008ac8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d106      	bne.n	8008afc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008aee:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008af0:	695a      	ldr	r2, [r3, #20]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	4904      	ldr	r1, [pc, #16]	; (8008b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	40021000 	.word	0x40021000

08008b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e095      	b.n	8008c4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d108      	bne.n	8008b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b2e:	d009      	beq.n	8008b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	61da      	str	r2, [r3, #28]
 8008b36:	e005      	b.n	8008b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7f8 fbfc 	bl	800135c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b84:	d902      	bls.n	8008b8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	e002      	b.n	8008b92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008b9a:	d007      	beq.n	8008bac <HAL_SPI_Init+0xa0>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ba4:	d002      	beq.n	8008bac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008be4:	431a      	orrs	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bee:	ea42 0103 	orr.w	r1, r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	0c1b      	lsrs	r3, r3, #16
 8008c08:	f003 0204 	and.w	r2, r3, #4
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	431a      	orrs	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1a:	f003 0308 	and.w	r3, r3, #8
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c28:	ea42 0103 	orr.w	r1, r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e049      	b.n	8008cf8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f841 	bl	8008d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2202      	movs	r2, #2
 8008c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4610      	mov	r0, r2
 8008c92:	f000 f9f7 	bl	8009084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d001      	beq.n	8008d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e04f      	b.n	8008dcc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68da      	ldr	r2, [r3, #12]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 0201 	orr.w	r2, r2, #1
 8008d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a23      	ldr	r2, [pc, #140]	; (8008dd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d01d      	beq.n	8008d8a <HAL_TIM_Base_Start_IT+0x76>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d56:	d018      	beq.n	8008d8a <HAL_TIM_Base_Start_IT+0x76>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a1f      	ldr	r2, [pc, #124]	; (8008ddc <HAL_TIM_Base_Start_IT+0xc8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d013      	beq.n	8008d8a <HAL_TIM_Base_Start_IT+0x76>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a1e      	ldr	r2, [pc, #120]	; (8008de0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d00e      	beq.n	8008d8a <HAL_TIM_Base_Start_IT+0x76>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a1c      	ldr	r2, [pc, #112]	; (8008de4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d009      	beq.n	8008d8a <HAL_TIM_Base_Start_IT+0x76>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a1b      	ldr	r2, [pc, #108]	; (8008de8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d004      	beq.n	8008d8a <HAL_TIM_Base_Start_IT+0x76>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a19      	ldr	r2, [pc, #100]	; (8008dec <HAL_TIM_Base_Start_IT+0xd8>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d115      	bne.n	8008db6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	4b17      	ldr	r3, [pc, #92]	; (8008df0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d92:	4013      	ands	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b06      	cmp	r3, #6
 8008d9a:	d015      	beq.n	8008dc8 <HAL_TIM_Base_Start_IT+0xb4>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da2:	d011      	beq.n	8008dc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f042 0201 	orr.w	r2, r2, #1
 8008db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db4:	e008      	b.n	8008dc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f042 0201 	orr.w	r2, r2, #1
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	e000      	b.n	8008dca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	40012c00 	.word	0x40012c00
 8008ddc:	40000400 	.word	0x40000400
 8008de0:	40000800 	.word	0x40000800
 8008de4:	40000c00 	.word	0x40000c00
 8008de8:	40013400 	.word	0x40013400
 8008dec:	40014000 	.word	0x40014000
 8008df0:	00010007 	.word	0x00010007

08008df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d122      	bne.n	8008e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d11b      	bne.n	8008e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f06f 0202 	mvn.w	r2, #2
 8008e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f905 	bl	8009046 <HAL_TIM_IC_CaptureCallback>
 8008e3c:	e005      	b.n	8008e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f8f7 	bl	8009032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f908 	bl	800905a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d122      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d11b      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f06f 0204 	mvn.w	r2, #4
 8008e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2202      	movs	r2, #2
 8008e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f8db 	bl	8009046 <HAL_TIM_IC_CaptureCallback>
 8008e90:	e005      	b.n	8008e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f8cd 	bl	8009032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f8de 	bl	800905a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f003 0308 	and.w	r3, r3, #8
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d122      	bne.n	8008ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f003 0308 	and.w	r3, r3, #8
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d11b      	bne.n	8008ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f06f 0208 	mvn.w	r2, #8
 8008ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2204      	movs	r2, #4
 8008ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f8b1 	bl	8009046 <HAL_TIM_IC_CaptureCallback>
 8008ee4:	e005      	b.n	8008ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f8a3 	bl	8009032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f8b4 	bl	800905a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	f003 0310 	and.w	r3, r3, #16
 8008f02:	2b10      	cmp	r3, #16
 8008f04:	d122      	bne.n	8008f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f003 0310 	and.w	r3, r3, #16
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	d11b      	bne.n	8008f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f06f 0210 	mvn.w	r2, #16
 8008f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2208      	movs	r2, #8
 8008f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f887 	bl	8009046 <HAL_TIM_IC_CaptureCallback>
 8008f38:	e005      	b.n	8008f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f879 	bl	8009032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f88a 	bl	800905a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d10e      	bne.n	8008f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d107      	bne.n	8008f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f06f 0201 	mvn.w	r2, #1
 8008f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7f8 f934 	bl	80011e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f82:	2b80      	cmp	r3, #128	; 0x80
 8008f84:	d10e      	bne.n	8008fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f90:	2b80      	cmp	r3, #128	; 0x80
 8008f92:	d107      	bne.n	8008fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f914 	bl	80091cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb2:	d10e      	bne.n	8008fd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fbe:	2b80      	cmp	r3, #128	; 0x80
 8008fc0:	d107      	bne.n	8008fd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f907 	bl	80091e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d10e      	bne.n	8008ffe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fea:	2b40      	cmp	r3, #64	; 0x40
 8008fec:	d107      	bne.n	8008ffe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f838 	bl	800906e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	f003 0320 	and.w	r3, r3, #32
 8009008:	2b20      	cmp	r3, #32
 800900a:	d10e      	bne.n	800902a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b20      	cmp	r3, #32
 8009018:	d107      	bne.n	800902a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f06f 0220 	mvn.w	r2, #32
 8009022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f8c7 	bl	80091b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800902a:	bf00      	nop
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009032:	b480      	push	{r7}
 8009034:	b083      	sub	sp, #12
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800904e:	bf00      	nop
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800905a:	b480      	push	{r7}
 800905c:	b083      	sub	sp, #12
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009062:	bf00      	nop
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
	...

08009084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a40      	ldr	r2, [pc, #256]	; (8009198 <TIM_Base_SetConfig+0x114>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d013      	beq.n	80090c4 <TIM_Base_SetConfig+0x40>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a2:	d00f      	beq.n	80090c4 <TIM_Base_SetConfig+0x40>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a3d      	ldr	r2, [pc, #244]	; (800919c <TIM_Base_SetConfig+0x118>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d00b      	beq.n	80090c4 <TIM_Base_SetConfig+0x40>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a3c      	ldr	r2, [pc, #240]	; (80091a0 <TIM_Base_SetConfig+0x11c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d007      	beq.n	80090c4 <TIM_Base_SetConfig+0x40>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a3b      	ldr	r2, [pc, #236]	; (80091a4 <TIM_Base_SetConfig+0x120>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d003      	beq.n	80090c4 <TIM_Base_SetConfig+0x40>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a3a      	ldr	r2, [pc, #232]	; (80091a8 <TIM_Base_SetConfig+0x124>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d108      	bne.n	80090d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a2f      	ldr	r2, [pc, #188]	; (8009198 <TIM_Base_SetConfig+0x114>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d01f      	beq.n	800911e <TIM_Base_SetConfig+0x9a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e4:	d01b      	beq.n	800911e <TIM_Base_SetConfig+0x9a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a2c      	ldr	r2, [pc, #176]	; (800919c <TIM_Base_SetConfig+0x118>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d017      	beq.n	800911e <TIM_Base_SetConfig+0x9a>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a2b      	ldr	r2, [pc, #172]	; (80091a0 <TIM_Base_SetConfig+0x11c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d013      	beq.n	800911e <TIM_Base_SetConfig+0x9a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a2a      	ldr	r2, [pc, #168]	; (80091a4 <TIM_Base_SetConfig+0x120>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d00f      	beq.n	800911e <TIM_Base_SetConfig+0x9a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a29      	ldr	r2, [pc, #164]	; (80091a8 <TIM_Base_SetConfig+0x124>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d00b      	beq.n	800911e <TIM_Base_SetConfig+0x9a>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a28      	ldr	r2, [pc, #160]	; (80091ac <TIM_Base_SetConfig+0x128>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d007      	beq.n	800911e <TIM_Base_SetConfig+0x9a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a27      	ldr	r2, [pc, #156]	; (80091b0 <TIM_Base_SetConfig+0x12c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d003      	beq.n	800911e <TIM_Base_SetConfig+0x9a>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a26      	ldr	r2, [pc, #152]	; (80091b4 <TIM_Base_SetConfig+0x130>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d108      	bne.n	8009130 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	4313      	orrs	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	4313      	orrs	r3, r2
 800913c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	689a      	ldr	r2, [r3, #8]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a10      	ldr	r2, [pc, #64]	; (8009198 <TIM_Base_SetConfig+0x114>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00f      	beq.n	800917c <TIM_Base_SetConfig+0xf8>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a12      	ldr	r2, [pc, #72]	; (80091a8 <TIM_Base_SetConfig+0x124>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d00b      	beq.n	800917c <TIM_Base_SetConfig+0xf8>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a11      	ldr	r2, [pc, #68]	; (80091ac <TIM_Base_SetConfig+0x128>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d007      	beq.n	800917c <TIM_Base_SetConfig+0xf8>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a10      	ldr	r2, [pc, #64]	; (80091b0 <TIM_Base_SetConfig+0x12c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d003      	beq.n	800917c <TIM_Base_SetConfig+0xf8>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a0f      	ldr	r2, [pc, #60]	; (80091b4 <TIM_Base_SetConfig+0x130>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d103      	bne.n	8009184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	691a      	ldr	r2, [r3, #16]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	615a      	str	r2, [r3, #20]
}
 800918a:	bf00      	nop
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	40012c00 	.word	0x40012c00
 800919c:	40000400 	.word	0x40000400
 80091a0:	40000800 	.word	0x40000800
 80091a4:	40000c00 	.word	0x40000c00
 80091a8:	40013400 	.word	0x40013400
 80091ac:	40014000 	.word	0x40014000
 80091b0:	40014400 	.word	0x40014400
 80091b4:	40014800 	.word	0x40014800

080091b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e040      	b.n	8009288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800920a:	2b00      	cmp	r3, #0
 800920c:	d106      	bne.n	800921c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7f8 f8e2 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2224      	movs	r2, #36	; 0x24
 8009220:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0201 	bic.w	r2, r2, #1
 8009230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f992 	bl	800955c <UART_SetConfig>
 8009238:	4603      	mov	r3, r0
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e022      	b.n	8009288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fc3e 	bl	8009acc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800925e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689a      	ldr	r2, [r3, #8]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800926e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0201 	orr.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fcc5 	bl	8009c10 <UART_CheckIdleState>
 8009286:	4603      	mov	r3, r0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b08a      	sub	sp, #40	; 0x28
 8009294:	af02      	add	r7, sp, #8
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	4613      	mov	r3, r2
 800929e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	f040 8082 	bne.w	80093ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <HAL_UART_Transmit+0x26>
 80092b0:	88fb      	ldrh	r3, [r7, #6]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e07a      	b.n	80093b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d101      	bne.n	80092c8 <HAL_UART_Transmit+0x38>
 80092c4:	2302      	movs	r3, #2
 80092c6:	e073      	b.n	80093b0 <HAL_UART_Transmit+0x120>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2221      	movs	r2, #33	; 0x21
 80092dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092de:	f7fc fde9 	bl	8005eb4 <HAL_GetTick>
 80092e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	88fa      	ldrh	r2, [r7, #6]
 80092e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	88fa      	ldrh	r2, [r7, #6]
 80092f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fc:	d108      	bne.n	8009310 <HAL_UART_Transmit+0x80>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d104      	bne.n	8009310 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009306:	2300      	movs	r3, #0
 8009308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	e003      	b.n	8009318 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009320:	e02d      	b.n	800937e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2200      	movs	r2, #0
 800932a:	2180      	movs	r1, #128	; 0x80
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 fcb8 	bl	8009ca2 <UART_WaitOnFlagUntilTimeout>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e039      	b.n	80093b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10b      	bne.n	800935a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	881a      	ldrh	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800934e:	b292      	uxth	r2, r2
 8009350:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	3302      	adds	r3, #2
 8009356:	61bb      	str	r3, [r7, #24]
 8009358:	e008      	b.n	800936c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	781a      	ldrb	r2, [r3, #0]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	b292      	uxth	r2, r2
 8009364:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	3301      	adds	r3, #1
 800936a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009372:	b29b      	uxth	r3, r3
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009384:	b29b      	uxth	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1cb      	bne.n	8009322 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2200      	movs	r2, #0
 8009392:	2140      	movs	r1, #64	; 0x40
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 fc84 	bl	8009ca2 <UART_WaitOnFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e005      	b.n	80093b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2220      	movs	r2, #32
 80093a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	e000      	b.n	80093b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80093ae:	2302      	movs	r3, #2
  }
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3720      	adds	r7, #32
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08a      	sub	sp, #40	; 0x28
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	603b      	str	r3, [r7, #0]
 80093c4:	4613      	mov	r3, r2
 80093c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093cc:	2b20      	cmp	r3, #32
 80093ce:	f040 80bf 	bne.w	8009550 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <HAL_UART_Receive+0x26>
 80093d8:	88fb      	ldrh	r3, [r7, #6]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e0b7      	b.n	8009552 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d101      	bne.n	80093f0 <HAL_UART_Receive+0x38>
 80093ec:	2302      	movs	r3, #2
 80093ee:	e0b0      	b.n	8009552 <HAL_UART_Receive+0x19a>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2222      	movs	r2, #34	; 0x22
 8009404:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800940c:	f7fc fd52 	bl	8005eb4 <HAL_GetTick>
 8009410:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	88fa      	ldrh	r2, [r7, #6]
 8009416:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	88fa      	ldrh	r2, [r7, #6]
 800941e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800942a:	d10e      	bne.n	800944a <HAL_UART_Receive+0x92>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d105      	bne.n	8009440 <HAL_UART_Receive+0x88>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f240 12ff 	movw	r2, #511	; 0x1ff
 800943a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800943e:	e02d      	b.n	800949c <HAL_UART_Receive+0xe4>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	22ff      	movs	r2, #255	; 0xff
 8009444:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009448:	e028      	b.n	800949c <HAL_UART_Receive+0xe4>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10d      	bne.n	800946e <HAL_UART_Receive+0xb6>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d104      	bne.n	8009464 <HAL_UART_Receive+0xac>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	22ff      	movs	r2, #255	; 0xff
 800945e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009462:	e01b      	b.n	800949c <HAL_UART_Receive+0xe4>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	227f      	movs	r2, #127	; 0x7f
 8009468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800946c:	e016      	b.n	800949c <HAL_UART_Receive+0xe4>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009476:	d10d      	bne.n	8009494 <HAL_UART_Receive+0xdc>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d104      	bne.n	800948a <HAL_UART_Receive+0xd2>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	227f      	movs	r2, #127	; 0x7f
 8009484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009488:	e008      	b.n	800949c <HAL_UART_Receive+0xe4>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	223f      	movs	r2, #63	; 0x3f
 800948e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009492:	e003      	b.n	800949c <HAL_UART_Receive+0xe4>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ac:	d108      	bne.n	80094c0 <HAL_UART_Receive+0x108>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d104      	bne.n	80094c0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	61bb      	str	r3, [r7, #24]
 80094be:	e003      	b.n	80094c8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094c4:	2300      	movs	r3, #0
 80094c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80094d0:	e033      	b.n	800953a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	2200      	movs	r2, #0
 80094da:	2120      	movs	r1, #32
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f000 fbe0 	bl	8009ca2 <UART_WaitOnFlagUntilTimeout>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d001      	beq.n	80094ec <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e032      	b.n	8009552 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10c      	bne.n	800950c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	8a7b      	ldrh	r3, [r7, #18]
 80094fc:	4013      	ands	r3, r2
 80094fe:	b29a      	uxth	r2, r3
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	3302      	adds	r3, #2
 8009508:	61bb      	str	r3, [r7, #24]
 800950a:	e00d      	b.n	8009528 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009512:	b29b      	uxth	r3, r3
 8009514:	b2da      	uxtb	r2, r3
 8009516:	8a7b      	ldrh	r3, [r7, #18]
 8009518:	b2db      	uxtb	r3, r3
 800951a:	4013      	ands	r3, r2
 800951c:	b2da      	uxtb	r2, r3
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	3301      	adds	r3, #1
 8009526:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800952e:	b29b      	uxth	r3, r3
 8009530:	3b01      	subs	r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009540:	b29b      	uxth	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1c5      	bne.n	80094d2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2220      	movs	r2, #32
 800954a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	e000      	b.n	8009552 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8009550:	2302      	movs	r3, #2
  }
}
 8009552:	4618      	mov	r0, r3
 8009554:	3720      	adds	r7, #32
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800955c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009560:	b08a      	sub	sp, #40	; 0x28
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	689a      	ldr	r2, [r3, #8]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	431a      	orrs	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	431a      	orrs	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	4313      	orrs	r3, r2
 8009582:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	4ba4      	ldr	r3, [pc, #656]	; (800981c <UART_SetConfig+0x2c0>)
 800958c:	4013      	ands	r3, r2
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	6812      	ldr	r2, [r2, #0]
 8009592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009594:	430b      	orrs	r3, r1
 8009596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	68da      	ldr	r2, [r3, #12]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	430a      	orrs	r2, r1
 80095ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a99      	ldr	r2, [pc, #612]	; (8009820 <UART_SetConfig+0x2c4>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d004      	beq.n	80095c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c4:	4313      	orrs	r3, r2
 80095c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d8:	430a      	orrs	r2, r1
 80095da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a90      	ldr	r2, [pc, #576]	; (8009824 <UART_SetConfig+0x2c8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d126      	bne.n	8009634 <UART_SetConfig+0xd8>
 80095e6:	4b90      	ldr	r3, [pc, #576]	; (8009828 <UART_SetConfig+0x2cc>)
 80095e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ec:	f003 0303 	and.w	r3, r3, #3
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d81b      	bhi.n	800962c <UART_SetConfig+0xd0>
 80095f4:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <UART_SetConfig+0xa0>)
 80095f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fa:	bf00      	nop
 80095fc:	0800960d 	.word	0x0800960d
 8009600:	0800961d 	.word	0x0800961d
 8009604:	08009615 	.word	0x08009615
 8009608:	08009625 	.word	0x08009625
 800960c:	2301      	movs	r3, #1
 800960e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009612:	e116      	b.n	8009842 <UART_SetConfig+0x2e6>
 8009614:	2302      	movs	r3, #2
 8009616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800961a:	e112      	b.n	8009842 <UART_SetConfig+0x2e6>
 800961c:	2304      	movs	r3, #4
 800961e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009622:	e10e      	b.n	8009842 <UART_SetConfig+0x2e6>
 8009624:	2308      	movs	r3, #8
 8009626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800962a:	e10a      	b.n	8009842 <UART_SetConfig+0x2e6>
 800962c:	2310      	movs	r3, #16
 800962e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009632:	e106      	b.n	8009842 <UART_SetConfig+0x2e6>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a7c      	ldr	r2, [pc, #496]	; (800982c <UART_SetConfig+0x2d0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d138      	bne.n	80096b0 <UART_SetConfig+0x154>
 800963e:	4b7a      	ldr	r3, [pc, #488]	; (8009828 <UART_SetConfig+0x2cc>)
 8009640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009644:	f003 030c 	and.w	r3, r3, #12
 8009648:	2b0c      	cmp	r3, #12
 800964a:	d82d      	bhi.n	80096a8 <UART_SetConfig+0x14c>
 800964c:	a201      	add	r2, pc, #4	; (adr r2, 8009654 <UART_SetConfig+0xf8>)
 800964e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009652:	bf00      	nop
 8009654:	08009689 	.word	0x08009689
 8009658:	080096a9 	.word	0x080096a9
 800965c:	080096a9 	.word	0x080096a9
 8009660:	080096a9 	.word	0x080096a9
 8009664:	08009699 	.word	0x08009699
 8009668:	080096a9 	.word	0x080096a9
 800966c:	080096a9 	.word	0x080096a9
 8009670:	080096a9 	.word	0x080096a9
 8009674:	08009691 	.word	0x08009691
 8009678:	080096a9 	.word	0x080096a9
 800967c:	080096a9 	.word	0x080096a9
 8009680:	080096a9 	.word	0x080096a9
 8009684:	080096a1 	.word	0x080096a1
 8009688:	2300      	movs	r3, #0
 800968a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800968e:	e0d8      	b.n	8009842 <UART_SetConfig+0x2e6>
 8009690:	2302      	movs	r3, #2
 8009692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009696:	e0d4      	b.n	8009842 <UART_SetConfig+0x2e6>
 8009698:	2304      	movs	r3, #4
 800969a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800969e:	e0d0      	b.n	8009842 <UART_SetConfig+0x2e6>
 80096a0:	2308      	movs	r3, #8
 80096a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096a6:	e0cc      	b.n	8009842 <UART_SetConfig+0x2e6>
 80096a8:	2310      	movs	r3, #16
 80096aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096ae:	e0c8      	b.n	8009842 <UART_SetConfig+0x2e6>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a5e      	ldr	r2, [pc, #376]	; (8009830 <UART_SetConfig+0x2d4>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d125      	bne.n	8009706 <UART_SetConfig+0x1aa>
 80096ba:	4b5b      	ldr	r3, [pc, #364]	; (8009828 <UART_SetConfig+0x2cc>)
 80096bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80096c4:	2b30      	cmp	r3, #48	; 0x30
 80096c6:	d016      	beq.n	80096f6 <UART_SetConfig+0x19a>
 80096c8:	2b30      	cmp	r3, #48	; 0x30
 80096ca:	d818      	bhi.n	80096fe <UART_SetConfig+0x1a2>
 80096cc:	2b20      	cmp	r3, #32
 80096ce:	d00a      	beq.n	80096e6 <UART_SetConfig+0x18a>
 80096d0:	2b20      	cmp	r3, #32
 80096d2:	d814      	bhi.n	80096fe <UART_SetConfig+0x1a2>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <UART_SetConfig+0x182>
 80096d8:	2b10      	cmp	r3, #16
 80096da:	d008      	beq.n	80096ee <UART_SetConfig+0x192>
 80096dc:	e00f      	b.n	80096fe <UART_SetConfig+0x1a2>
 80096de:	2300      	movs	r3, #0
 80096e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096e4:	e0ad      	b.n	8009842 <UART_SetConfig+0x2e6>
 80096e6:	2302      	movs	r3, #2
 80096e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096ec:	e0a9      	b.n	8009842 <UART_SetConfig+0x2e6>
 80096ee:	2304      	movs	r3, #4
 80096f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096f4:	e0a5      	b.n	8009842 <UART_SetConfig+0x2e6>
 80096f6:	2308      	movs	r3, #8
 80096f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096fc:	e0a1      	b.n	8009842 <UART_SetConfig+0x2e6>
 80096fe:	2310      	movs	r3, #16
 8009700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009704:	e09d      	b.n	8009842 <UART_SetConfig+0x2e6>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a4a      	ldr	r2, [pc, #296]	; (8009834 <UART_SetConfig+0x2d8>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d125      	bne.n	800975c <UART_SetConfig+0x200>
 8009710:	4b45      	ldr	r3, [pc, #276]	; (8009828 <UART_SetConfig+0x2cc>)
 8009712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009716:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800971a:	2bc0      	cmp	r3, #192	; 0xc0
 800971c:	d016      	beq.n	800974c <UART_SetConfig+0x1f0>
 800971e:	2bc0      	cmp	r3, #192	; 0xc0
 8009720:	d818      	bhi.n	8009754 <UART_SetConfig+0x1f8>
 8009722:	2b80      	cmp	r3, #128	; 0x80
 8009724:	d00a      	beq.n	800973c <UART_SetConfig+0x1e0>
 8009726:	2b80      	cmp	r3, #128	; 0x80
 8009728:	d814      	bhi.n	8009754 <UART_SetConfig+0x1f8>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <UART_SetConfig+0x1d8>
 800972e:	2b40      	cmp	r3, #64	; 0x40
 8009730:	d008      	beq.n	8009744 <UART_SetConfig+0x1e8>
 8009732:	e00f      	b.n	8009754 <UART_SetConfig+0x1f8>
 8009734:	2300      	movs	r3, #0
 8009736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800973a:	e082      	b.n	8009842 <UART_SetConfig+0x2e6>
 800973c:	2302      	movs	r3, #2
 800973e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009742:	e07e      	b.n	8009842 <UART_SetConfig+0x2e6>
 8009744:	2304      	movs	r3, #4
 8009746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800974a:	e07a      	b.n	8009842 <UART_SetConfig+0x2e6>
 800974c:	2308      	movs	r3, #8
 800974e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009752:	e076      	b.n	8009842 <UART_SetConfig+0x2e6>
 8009754:	2310      	movs	r3, #16
 8009756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800975a:	e072      	b.n	8009842 <UART_SetConfig+0x2e6>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a35      	ldr	r2, [pc, #212]	; (8009838 <UART_SetConfig+0x2dc>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d12a      	bne.n	80097bc <UART_SetConfig+0x260>
 8009766:	4b30      	ldr	r3, [pc, #192]	; (8009828 <UART_SetConfig+0x2cc>)
 8009768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800976c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009774:	d01a      	beq.n	80097ac <UART_SetConfig+0x250>
 8009776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800977a:	d81b      	bhi.n	80097b4 <UART_SetConfig+0x258>
 800977c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009780:	d00c      	beq.n	800979c <UART_SetConfig+0x240>
 8009782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009786:	d815      	bhi.n	80097b4 <UART_SetConfig+0x258>
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <UART_SetConfig+0x238>
 800978c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009790:	d008      	beq.n	80097a4 <UART_SetConfig+0x248>
 8009792:	e00f      	b.n	80097b4 <UART_SetConfig+0x258>
 8009794:	2300      	movs	r3, #0
 8009796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800979a:	e052      	b.n	8009842 <UART_SetConfig+0x2e6>
 800979c:	2302      	movs	r3, #2
 800979e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097a2:	e04e      	b.n	8009842 <UART_SetConfig+0x2e6>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097aa:	e04a      	b.n	8009842 <UART_SetConfig+0x2e6>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097b2:	e046      	b.n	8009842 <UART_SetConfig+0x2e6>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097ba:	e042      	b.n	8009842 <UART_SetConfig+0x2e6>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a17      	ldr	r2, [pc, #92]	; (8009820 <UART_SetConfig+0x2c4>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d13a      	bne.n	800983c <UART_SetConfig+0x2e0>
 80097c6:	4b18      	ldr	r3, [pc, #96]	; (8009828 <UART_SetConfig+0x2cc>)
 80097c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80097d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097d4:	d01a      	beq.n	800980c <UART_SetConfig+0x2b0>
 80097d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097da:	d81b      	bhi.n	8009814 <UART_SetConfig+0x2b8>
 80097dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097e0:	d00c      	beq.n	80097fc <UART_SetConfig+0x2a0>
 80097e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097e6:	d815      	bhi.n	8009814 <UART_SetConfig+0x2b8>
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <UART_SetConfig+0x298>
 80097ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097f0:	d008      	beq.n	8009804 <UART_SetConfig+0x2a8>
 80097f2:	e00f      	b.n	8009814 <UART_SetConfig+0x2b8>
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097fa:	e022      	b.n	8009842 <UART_SetConfig+0x2e6>
 80097fc:	2302      	movs	r3, #2
 80097fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009802:	e01e      	b.n	8009842 <UART_SetConfig+0x2e6>
 8009804:	2304      	movs	r3, #4
 8009806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800980a:	e01a      	b.n	8009842 <UART_SetConfig+0x2e6>
 800980c:	2308      	movs	r3, #8
 800980e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009812:	e016      	b.n	8009842 <UART_SetConfig+0x2e6>
 8009814:	2310      	movs	r3, #16
 8009816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800981a:	e012      	b.n	8009842 <UART_SetConfig+0x2e6>
 800981c:	efff69f3 	.word	0xefff69f3
 8009820:	40008000 	.word	0x40008000
 8009824:	40013800 	.word	0x40013800
 8009828:	40021000 	.word	0x40021000
 800982c:	40004400 	.word	0x40004400
 8009830:	40004800 	.word	0x40004800
 8009834:	40004c00 	.word	0x40004c00
 8009838:	40005000 	.word	0x40005000
 800983c:	2310      	movs	r3, #16
 800983e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a9f      	ldr	r2, [pc, #636]	; (8009ac4 <UART_SetConfig+0x568>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d17a      	bne.n	8009942 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800984c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009850:	2b08      	cmp	r3, #8
 8009852:	d824      	bhi.n	800989e <UART_SetConfig+0x342>
 8009854:	a201      	add	r2, pc, #4	; (adr r2, 800985c <UART_SetConfig+0x300>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	08009881 	.word	0x08009881
 8009860:	0800989f 	.word	0x0800989f
 8009864:	08009889 	.word	0x08009889
 8009868:	0800989f 	.word	0x0800989f
 800986c:	0800988f 	.word	0x0800988f
 8009870:	0800989f 	.word	0x0800989f
 8009874:	0800989f 	.word	0x0800989f
 8009878:	0800989f 	.word	0x0800989f
 800987c:	08009897 	.word	0x08009897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009880:	f7fe fbca 	bl	8008018 <HAL_RCC_GetPCLK1Freq>
 8009884:	61f8      	str	r0, [r7, #28]
        break;
 8009886:	e010      	b.n	80098aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009888:	4b8f      	ldr	r3, [pc, #572]	; (8009ac8 <UART_SetConfig+0x56c>)
 800988a:	61fb      	str	r3, [r7, #28]
        break;
 800988c:	e00d      	b.n	80098aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800988e:	f7fe fb2b 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 8009892:	61f8      	str	r0, [r7, #28]
        break;
 8009894:	e009      	b.n	80098aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800989a:	61fb      	str	r3, [r7, #28]
        break;
 800989c:	e005      	b.n	80098aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80098a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 80fb 	beq.w	8009aa8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	4613      	mov	r3, r2
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	4413      	add	r3, r2
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d305      	bcc.n	80098ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80098c8:	69fa      	ldr	r2, [r7, #28]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d903      	bls.n	80098d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80098d4:	e0e8      	b.n	8009aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	2200      	movs	r2, #0
 80098da:	461c      	mov	r4, r3
 80098dc:	4615      	mov	r5, r2
 80098de:	f04f 0200 	mov.w	r2, #0
 80098e2:	f04f 0300 	mov.w	r3, #0
 80098e6:	022b      	lsls	r3, r5, #8
 80098e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80098ec:	0222      	lsls	r2, r4, #8
 80098ee:	68f9      	ldr	r1, [r7, #12]
 80098f0:	6849      	ldr	r1, [r1, #4]
 80098f2:	0849      	lsrs	r1, r1, #1
 80098f4:	2000      	movs	r0, #0
 80098f6:	4688      	mov	r8, r1
 80098f8:	4681      	mov	r9, r0
 80098fa:	eb12 0a08 	adds.w	sl, r2, r8
 80098fe:	eb43 0b09 	adc.w	fp, r3, r9
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	603b      	str	r3, [r7, #0]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009910:	4650      	mov	r0, sl
 8009912:	4659      	mov	r1, fp
 8009914:	f7f6 fef8 	bl	8000708 <__aeabi_uldivmod>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4613      	mov	r3, r2
 800991e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009926:	d308      	bcc.n	800993a <UART_SetConfig+0x3de>
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800992e:	d204      	bcs.n	800993a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	60da      	str	r2, [r3, #12]
 8009938:	e0b6      	b.n	8009aa8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009940:	e0b2      	b.n	8009aa8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800994a:	d15e      	bne.n	8009a0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800994c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009950:	2b08      	cmp	r3, #8
 8009952:	d828      	bhi.n	80099a6 <UART_SetConfig+0x44a>
 8009954:	a201      	add	r2, pc, #4	; (adr r2, 800995c <UART_SetConfig+0x400>)
 8009956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995a:	bf00      	nop
 800995c:	08009981 	.word	0x08009981
 8009960:	08009989 	.word	0x08009989
 8009964:	08009991 	.word	0x08009991
 8009968:	080099a7 	.word	0x080099a7
 800996c:	08009997 	.word	0x08009997
 8009970:	080099a7 	.word	0x080099a7
 8009974:	080099a7 	.word	0x080099a7
 8009978:	080099a7 	.word	0x080099a7
 800997c:	0800999f 	.word	0x0800999f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009980:	f7fe fb4a 	bl	8008018 <HAL_RCC_GetPCLK1Freq>
 8009984:	61f8      	str	r0, [r7, #28]
        break;
 8009986:	e014      	b.n	80099b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009988:	f7fe fb5c 	bl	8008044 <HAL_RCC_GetPCLK2Freq>
 800998c:	61f8      	str	r0, [r7, #28]
        break;
 800998e:	e010      	b.n	80099b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009990:	4b4d      	ldr	r3, [pc, #308]	; (8009ac8 <UART_SetConfig+0x56c>)
 8009992:	61fb      	str	r3, [r7, #28]
        break;
 8009994:	e00d      	b.n	80099b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009996:	f7fe faa7 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 800999a:	61f8      	str	r0, [r7, #28]
        break;
 800999c:	e009      	b.n	80099b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800999e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a2:	61fb      	str	r3, [r7, #28]
        break;
 80099a4:	e005      	b.n	80099b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80099b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d077      	beq.n	8009aa8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	005a      	lsls	r2, r3, #1
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	085b      	lsrs	r3, r3, #1
 80099c2:	441a      	add	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	2b0f      	cmp	r3, #15
 80099d2:	d916      	bls.n	8009a02 <UART_SetConfig+0x4a6>
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099da:	d212      	bcs.n	8009a02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	f023 030f 	bic.w	r3, r3, #15
 80099e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	085b      	lsrs	r3, r3, #1
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	f003 0307 	and.w	r3, r3, #7
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	8afb      	ldrh	r3, [r7, #22]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	8afa      	ldrh	r2, [r7, #22]
 80099fe:	60da      	str	r2, [r3, #12]
 8009a00:	e052      	b.n	8009aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009a08:	e04e      	b.n	8009aa8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a0e:	2b08      	cmp	r3, #8
 8009a10:	d827      	bhi.n	8009a62 <UART_SetConfig+0x506>
 8009a12:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <UART_SetConfig+0x4bc>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009a3d 	.word	0x08009a3d
 8009a1c:	08009a45 	.word	0x08009a45
 8009a20:	08009a4d 	.word	0x08009a4d
 8009a24:	08009a63 	.word	0x08009a63
 8009a28:	08009a53 	.word	0x08009a53
 8009a2c:	08009a63 	.word	0x08009a63
 8009a30:	08009a63 	.word	0x08009a63
 8009a34:	08009a63 	.word	0x08009a63
 8009a38:	08009a5b 	.word	0x08009a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a3c:	f7fe faec 	bl	8008018 <HAL_RCC_GetPCLK1Freq>
 8009a40:	61f8      	str	r0, [r7, #28]
        break;
 8009a42:	e014      	b.n	8009a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a44:	f7fe fafe 	bl	8008044 <HAL_RCC_GetPCLK2Freq>
 8009a48:	61f8      	str	r0, [r7, #28]
        break;
 8009a4a:	e010      	b.n	8009a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a4c:	4b1e      	ldr	r3, [pc, #120]	; (8009ac8 <UART_SetConfig+0x56c>)
 8009a4e:	61fb      	str	r3, [r7, #28]
        break;
 8009a50:	e00d      	b.n	8009a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a52:	f7fe fa49 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 8009a56:	61f8      	str	r0, [r7, #28]
        break;
 8009a58:	e009      	b.n	8009a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a5e:	61fb      	str	r3, [r7, #28]
        break;
 8009a60:	e005      	b.n	8009a6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009a6c:	bf00      	nop
    }

    if (pclk != 0U)
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d019      	beq.n	8009aa8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	085a      	lsrs	r2, r3, #1
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	441a      	add	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	2b0f      	cmp	r3, #15
 8009a8c:	d909      	bls.n	8009aa2 <UART_SetConfig+0x546>
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a94:	d205      	bcs.n	8009aa2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	60da      	str	r2, [r3, #12]
 8009aa0:	e002      	b.n	8009aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009ab4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3728      	adds	r7, #40	; 0x28
 8009abc:	46bd      	mov	sp, r7
 8009abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ac2:	bf00      	nop
 8009ac4:	40008000 	.word	0x40008000
 8009ac8:	00f42400 	.word	0x00f42400

08009acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00a      	beq.n	8009af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	430a      	orrs	r2, r1
 8009af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00a      	beq.n	8009b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	430a      	orrs	r2, r1
 8009b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00a      	beq.n	8009b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	f003 0308 	and.w	r3, r3, #8
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00a      	beq.n	8009b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00a      	beq.n	8009b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	430a      	orrs	r2, r1
 8009b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01a      	beq.n	8009be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bca:	d10a      	bne.n	8009be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	605a      	str	r2, [r3, #4]
  }
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c20:	f7fc f948 	bl	8005eb4 <HAL_GetTick>
 8009c24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0308 	and.w	r3, r3, #8
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d10e      	bne.n	8009c52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f82d 	bl	8009ca2 <UART_WaitOnFlagUntilTimeout>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e023      	b.n	8009c9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0304 	and.w	r3, r3, #4
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	d10e      	bne.n	8009c7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f817 	bl	8009ca2 <UART_WaitOnFlagUntilTimeout>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e00d      	b.n	8009c9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2220      	movs	r2, #32
 8009c88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b09c      	sub	sp, #112	; 0x70
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	603b      	str	r3, [r7, #0]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cb2:	e0a5      	b.n	8009e00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cba:	f000 80a1 	beq.w	8009e00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cbe:	f7fc f8f9 	bl	8005eb4 <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d302      	bcc.n	8009cd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8009cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d13e      	bne.n	8009d52 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ce8:	667b      	str	r3, [r7, #100]	; 0x64
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009cfa:	e841 2300 	strex	r3, r2, [r1]
 8009cfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e6      	bne.n	8009cd4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d10:	e853 3f00 	ldrex	r3, [r3]
 8009d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d18:	f023 0301 	bic.w	r3, r3, #1
 8009d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3308      	adds	r3, #8
 8009d24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d26:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e5      	bne.n	8009d06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2220      	movs	r2, #32
 8009d44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e067      	b.n	8009e22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0304 	and.w	r3, r3, #4
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d04f      	beq.n	8009e00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d6e:	d147      	bne.n	8009e00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d78:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	e853 3f00 	ldrex	r3, [r3]
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	461a      	mov	r2, r3
 8009d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d98:	637b      	str	r3, [r7, #52]	; 0x34
 8009d9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009da0:	e841 2300 	strex	r3, r2, [r1]
 8009da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1e6      	bne.n	8009d7a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3308      	adds	r3, #8
 8009db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	e853 3f00 	ldrex	r3, [r3]
 8009dba:	613b      	str	r3, [r7, #16]
   return(result);
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f023 0301 	bic.w	r3, r3, #1
 8009dc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3308      	adds	r3, #8
 8009dca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009dcc:	623a      	str	r2, [r7, #32]
 8009dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd0:	69f9      	ldr	r1, [r7, #28]
 8009dd2:	6a3a      	ldr	r2, [r7, #32]
 8009dd4:	e841 2300 	strex	r3, r2, [r1]
 8009dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1e5      	bne.n	8009dac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2220      	movs	r2, #32
 8009de4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2220      	movs	r2, #32
 8009dea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2220      	movs	r2, #32
 8009df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e010      	b.n	8009e22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	69da      	ldr	r2, [r3, #28]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	bf0c      	ite	eq
 8009e10:	2301      	moveq	r3, #1
 8009e12:	2300      	movne	r3, #0
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	461a      	mov	r2, r3
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	f43f af4a 	beq.w	8009cb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3770      	adds	r7, #112	; 0x70
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b085      	sub	sp, #20
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	4603      	mov	r3, r0
 8009e32:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e3c:	2b84      	cmp	r3, #132	; 0x84
 8009e3e:	d005      	beq.n	8009e4c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009e40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	3303      	adds	r3, #3
 8009e4a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e60:	f3ef 8305 	mrs	r3, IPSR
 8009e64:	607b      	str	r3, [r7, #4]
  return(result);
 8009e66:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	bf14      	ite	ne
 8009e6c:	2301      	movne	r3, #1
 8009e6e:	2300      	moveq	r3, #0
 8009e70:	b2db      	uxtb	r3, r3
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009e82:	f001 fa05 	bl	800b290 <vTaskStartScheduler>
  
  return osOK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8e:	b089      	sub	sp, #36	; 0x24
 8009e90:	af04      	add	r7, sp, #16
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d020      	beq.n	8009ee0 <osThreadCreate+0x54>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d01c      	beq.n	8009ee0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685c      	ldr	r4, [r3, #4]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681d      	ldr	r5, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	691e      	ldr	r6, [r3, #16]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff ffb6 	bl	8009e2a <makeFreeRtosPriority>
 8009ebe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ec8:	9202      	str	r2, [sp, #8]
 8009eca:	9301      	str	r3, [sp, #4]
 8009ecc:	9100      	str	r1, [sp, #0]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	4632      	mov	r2, r6
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 ff6d 	bl	800adb4 <xTaskCreateStatic>
 8009eda:	4603      	mov	r3, r0
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e01c      	b.n	8009f1a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685c      	ldr	r4, [r3, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009eec:	b29e      	uxth	r6, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7ff ff98 	bl	8009e2a <makeFreeRtosPriority>
 8009efa:	4602      	mov	r2, r0
 8009efc:	f107 030c 	add.w	r3, r7, #12
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	9200      	str	r2, [sp, #0]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	4632      	mov	r2, r6
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 ffaf 	bl	800ae6e <xTaskCreate>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d001      	beq.n	8009f1a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	e000      	b.n	8009f1c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f24 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 f8eb 	bl	800b108 <vTaskDelete>
  return osOK;
 8009f32:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	af00      	add	r7, sp, #0
  taskYIELD();
 8009f40:	4b06      	ldr	r3, [pc, #24]	; (8009f5c <osThreadYield+0x20>)
 8009f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	f3bf 8f6f 	isb	sy
  
  return osOK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	e000ed04 	.word	0xe000ed04

08009f60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <osDelay+0x16>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	e000      	b.n	8009f78 <osDelay+0x18>
 8009f76:	2301      	movs	r3, #1
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f001 f955 	bl	800b228 <vTaskDelay>
  
  return osOK;
 8009f7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d007      	beq.n	8009fa8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	f000 faad 	bl	800a4fe <xQueueCreateMutexStatic>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	e003      	b.n	8009fb0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009fa8:	2001      	movs	r0, #1
 8009faa:	f000 fa90 	bl	800a4ce <xQueueCreateMutex>
 8009fae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <osMutexWait+0x18>
    return osErrorParameter;
 8009fcc:	2380      	movs	r3, #128	; 0x80
 8009fce:	e03a      	b.n	800a046 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fda:	d103      	bne.n	8009fe4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	e009      	b.n	8009ff8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d006      	beq.n	8009ff8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <osMutexWait+0x40>
      ticks = 1;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009ff8:	f7ff ff2f 	bl	8009e5a <inHandlerMode>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d017      	beq.n	800a032 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a002:	f107 0308 	add.w	r3, r7, #8
 800a006:	461a      	mov	r2, r3
 800a008:	2100      	movs	r1, #0
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fd2a 	bl	800aa64 <xQueueReceiveFromISR>
 800a010:	4603      	mov	r3, r0
 800a012:	2b01      	cmp	r3, #1
 800a014:	d001      	beq.n	800a01a <osMutexWait+0x62>
      return osErrorOS;
 800a016:	23ff      	movs	r3, #255	; 0xff
 800a018:	e015      	b.n	800a046 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d011      	beq.n	800a044 <osMutexWait+0x8c>
 800a020:	4b0b      	ldr	r3, [pc, #44]	; (800a050 <osMutexWait+0x98>)
 800a022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	e008      	b.n	800a044 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a032:	68f9      	ldr	r1, [r7, #12]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fc09 	bl	800a84c <xQueueSemaphoreTake>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d001      	beq.n	800a044 <osMutexWait+0x8c>
    return osErrorOS;
 800a040:	23ff      	movs	r3, #255	; 0xff
 800a042:	e000      	b.n	800a046 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	e000ed04 	.word	0xe000ed04

0800a054 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a060:	2300      	movs	r3, #0
 800a062:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a064:	f7ff fef9 	bl	8009e5a <inHandlerMode>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d016      	beq.n	800a09c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a06e:	f107 0308 	add.w	r3, r7, #8
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fb5b 	bl	800a730 <xQueueGiveFromISR>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d001      	beq.n	800a084 <osMutexRelease+0x30>
      return osErrorOS;
 800a080:	23ff      	movs	r3, #255	; 0xff
 800a082:	e017      	b.n	800a0b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d013      	beq.n	800a0b2 <osMutexRelease+0x5e>
 800a08a:	4b0c      	ldr	r3, [pc, #48]	; (800a0bc <osMutexRelease+0x68>)
 800a08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	e00a      	b.n	800a0b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a09c:	2300      	movs	r3, #0
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fa46 	bl	800a534 <xQueueGenericSend>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d001      	beq.n	800a0b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a0ae:	23ff      	movs	r3, #255	; 0xff
 800a0b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	e000ed04 	.word	0xe000ed04

0800a0c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f103 0208 	add.w	r2, r3, #8
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f103 0208 	add.w	r2, r3, #8
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f103 0208 	add.w	r2, r3, #8
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a10e:	bf00      	nop
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a11a:	b480      	push	{r7}
 800a11c:	b085      	sub	sp, #20
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	689a      	ldr	r2, [r3, #8]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	1c5a      	adds	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
}
 800a156:	bf00      	nop
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a162:	b480      	push	{r7}
 800a164:	b085      	sub	sp, #20
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a178:	d103      	bne.n	800a182 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	e00c      	b.n	800a19c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3308      	adds	r3, #8
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	e002      	b.n	800a190 <vListInsert+0x2e>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d2f6      	bcs.n	800a18a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	601a      	str	r2, [r3, #0]
}
 800a1c8:	bf00      	nop
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	6892      	ldr	r2, [r2, #8]
 800a1ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	6852      	ldr	r2, [r2, #4]
 800a1f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d103      	bne.n	800a208 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	1e5a      	subs	r2, r3, #1
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10a      	bne.n	800a252 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a24e:	bf00      	nop
 800a250:	e7fe      	b.n	800a250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a252:	f002 f97f 	bl	800c554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a262:	fb01 f303 	mul.w	r3, r1, r3
 800a266:	441a      	add	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a282:	3b01      	subs	r3, #1
 800a284:	68f9      	ldr	r1, [r7, #12]
 800a286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a288:	fb01 f303 	mul.w	r3, r1, r3
 800a28c:	441a      	add	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	22ff      	movs	r2, #255	; 0xff
 800a296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	22ff      	movs	r2, #255	; 0xff
 800a29e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d114      	bne.n	800a2d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d01a      	beq.n	800a2e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3310      	adds	r3, #16
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f001 fa3d 	bl	800b734 <xTaskRemoveFromEventList>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d012      	beq.n	800a2e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	; (800a2f4 <xQueueGenericReset+0xcc>)
 800a2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c6:	601a      	str	r2, [r3, #0]
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	e009      	b.n	800a2e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3310      	adds	r3, #16
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff fef2 	bl	800a0c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3324      	adds	r3, #36	; 0x24
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff feed 	bl	800a0c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a2e6:	f002 f965 	bl	800c5b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a2ea:	2301      	movs	r3, #1
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08e      	sub	sp, #56	; 0x38
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <xQueueGenericCreateStatic+0x52>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <xQueueGenericCreateStatic+0x56>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <xQueueGenericCreateStatic+0x58>
 800a34e:	2300      	movs	r3, #0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10a      	bne.n	800a36a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	623b      	str	r3, [r7, #32]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d102      	bne.n	800a376 <xQueueGenericCreateStatic+0x7e>
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <xQueueGenericCreateStatic+0x82>
 800a376:	2301      	movs	r3, #1
 800a378:	e000      	b.n	800a37c <xQueueGenericCreateStatic+0x84>
 800a37a:	2300      	movs	r3, #0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10a      	bne.n	800a396 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	61fb      	str	r3, [r7, #28]
}
 800a392:	bf00      	nop
 800a394:	e7fe      	b.n	800a394 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a396:	2348      	movs	r3, #72	; 0x48
 800a398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2b48      	cmp	r3, #72	; 0x48
 800a39e:	d00a      	beq.n	800a3b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	61bb      	str	r3, [r7, #24]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a3b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00d      	beq.n	800a3de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	68b9      	ldr	r1, [r7, #8]
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 f83f 	bl	800a45c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3730      	adds	r7, #48	; 0x30
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08a      	sub	sp, #40	; 0x28
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10a      	bne.n	800a412 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	613b      	str	r3, [r7, #16]
}
 800a40e:	bf00      	nop
 800a410:	e7fe      	b.n	800a410 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	fb02 f303 	mul.w	r3, r2, r3
 800a41a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	3348      	adds	r3, #72	; 0x48
 800a420:	4618      	mov	r0, r3
 800a422:	f002 f9b9 	bl	800c798 <pvPortMalloc>
 800a426:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d011      	beq.n	800a452 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	3348      	adds	r3, #72	; 0x48
 800a436:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a440:	79fa      	ldrb	r2, [r7, #7]
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	4613      	mov	r3, r2
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	68b9      	ldr	r1, [r7, #8]
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 f805 	bl	800a45c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a452:	69bb      	ldr	r3, [r7, #24]
	}
 800a454:	4618      	mov	r0, r3
 800a456:	3720      	adds	r7, #32
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d103      	bne.n	800a478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	69ba      	ldr	r2, [r7, #24]
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	e002      	b.n	800a47e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a48a:	2101      	movs	r1, #1
 800a48c:	69b8      	ldr	r0, [r7, #24]
 800a48e:	f7ff fecb 	bl	800a228 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a492:	bf00      	nop
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00e      	beq.n	800a4c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2100      	movs	r1, #0
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f837 	bl	800a534 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a4c6:	bf00      	nop
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b086      	sub	sp, #24
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	2300      	movs	r3, #0
 800a4de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a4e0:	79fb      	ldrb	r3, [r7, #7]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	6939      	ldr	r1, [r7, #16]
 800a4e6:	6978      	ldr	r0, [r7, #20]
 800a4e8:	f7ff ff7e 	bl	800a3e8 <xQueueGenericCreate>
 800a4ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f7ff ffd3 	bl	800a49a <prvInitialiseMutex>

		return xNewQueue;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
	}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b088      	sub	sp, #32
 800a502:	af02      	add	r7, sp, #8
 800a504:	4603      	mov	r3, r0
 800a506:	6039      	str	r1, [r7, #0]
 800a508:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a50a:	2301      	movs	r3, #1
 800a50c:	617b      	str	r3, [r7, #20]
 800a50e:	2300      	movs	r3, #0
 800a510:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2200      	movs	r2, #0
 800a51a:	6939      	ldr	r1, [r7, #16]
 800a51c:	6978      	ldr	r0, [r7, #20]
 800a51e:	f7ff feeb 	bl	800a2f8 <xQueueGenericCreateStatic>
 800a522:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7ff ffb8 	bl	800a49a <prvInitialiseMutex>

		return xNewQueue;
 800a52a:	68fb      	ldr	r3, [r7, #12]
	}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08e      	sub	sp, #56	; 0x38
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a542:	2300      	movs	r3, #0
 800a544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10a      	bne.n	800a566 <xQueueGenericSend+0x32>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a562:	bf00      	nop
 800a564:	e7fe      	b.n	800a564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d103      	bne.n	800a574 <xQueueGenericSend+0x40>
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <xQueueGenericSend+0x44>
 800a574:	2301      	movs	r3, #1
 800a576:	e000      	b.n	800a57a <xQueueGenericSend+0x46>
 800a578:	2300      	movs	r3, #0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <xQueueGenericSend+0x60>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2b02      	cmp	r3, #2
 800a598:	d103      	bne.n	800a5a2 <xQueueGenericSend+0x6e>
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d101      	bne.n	800a5a6 <xQueueGenericSend+0x72>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e000      	b.n	800a5a8 <xQueueGenericSend+0x74>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10a      	bne.n	800a5c2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	623b      	str	r3, [r7, #32]
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5c2:	f001 fa77 	bl	800bab4 <xTaskGetSchedulerState>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d102      	bne.n	800a5d2 <xQueueGenericSend+0x9e>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <xQueueGenericSend+0xa2>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e000      	b.n	800a5d8 <xQueueGenericSend+0xa4>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	61fb      	str	r3, [r7, #28]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5f2:	f001 ffaf 	bl	800c554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d302      	bcc.n	800a608 <xQueueGenericSend+0xd4>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b02      	cmp	r3, #2
 800a606:	d129      	bne.n	800a65c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	68b9      	ldr	r1, [r7, #8]
 800a60c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a60e:	f000 fac1 	bl	800ab94 <prvCopyDataToQueue>
 800a612:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d010      	beq.n	800a63e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61e:	3324      	adds	r3, #36	; 0x24
 800a620:	4618      	mov	r0, r3
 800a622:	f001 f887 	bl	800b734 <xTaskRemoveFromEventList>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d013      	beq.n	800a654 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a62c:	4b3f      	ldr	r3, [pc, #252]	; (800a72c <xQueueGenericSend+0x1f8>)
 800a62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	e00a      	b.n	800a654 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a640:	2b00      	cmp	r3, #0
 800a642:	d007      	beq.n	800a654 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a644:	4b39      	ldr	r3, [pc, #228]	; (800a72c <xQueueGenericSend+0x1f8>)
 800a646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a64a:	601a      	str	r2, [r3, #0]
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a654:	f001 ffae 	bl	800c5b4 <vPortExitCritical>
				return pdPASS;
 800a658:	2301      	movs	r3, #1
 800a65a:	e063      	b.n	800a724 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d103      	bne.n	800a66a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a662:	f001 ffa7 	bl	800c5b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a666:	2300      	movs	r3, #0
 800a668:	e05c      	b.n	800a724 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d106      	bne.n	800a67e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a670:	f107 0314 	add.w	r3, r7, #20
 800a674:	4618      	mov	r0, r3
 800a676:	f001 f8bf 	bl	800b7f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a67a:	2301      	movs	r3, #1
 800a67c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a67e:	f001 ff99 	bl	800c5b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a682:	f000 fe6f 	bl	800b364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a686:	f001 ff65 	bl	800c554 <vPortEnterCritical>
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a690:	b25b      	sxtb	r3, r3
 800a692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a696:	d103      	bne.n	800a6a0 <xQueueGenericSend+0x16c>
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6a6:	b25b      	sxtb	r3, r3
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6ac:	d103      	bne.n	800a6b6 <xQueueGenericSend+0x182>
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6b6:	f001 ff7d 	bl	800c5b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6ba:	1d3a      	adds	r2, r7, #4
 800a6bc:	f107 0314 	add.w	r3, r7, #20
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f001 f8ae 	bl	800b824 <xTaskCheckForTimeOut>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d124      	bne.n	800a718 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a6ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6d0:	f000 fb58 	bl	800ad84 <prvIsQueueFull>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d018      	beq.n	800a70c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	3310      	adds	r3, #16
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 f802 	bl	800b6ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a6e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ea:	f000 fae3 	bl	800acb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a6ee:	f000 fe47 	bl	800b380 <xTaskResumeAll>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f47f af7c 	bne.w	800a5f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a6fa:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <xQueueGenericSend+0x1f8>)
 800a6fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a700:	601a      	str	r2, [r3, #0]
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	e772      	b.n	800a5f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a70c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a70e:	f000 fad1 	bl	800acb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a712:	f000 fe35 	bl	800b380 <xTaskResumeAll>
 800a716:	e76c      	b.n	800a5f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a71a:	f000 facb 	bl	800acb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a71e:	f000 fe2f 	bl	800b380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a724:	4618      	mov	r0, r3
 800a726:	3738      	adds	r7, #56	; 0x38
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	e000ed04 	.word	0xe000ed04

0800a730 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08e      	sub	sp, #56	; 0x38
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10a      	bne.n	800a75a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	623b      	str	r3, [r7, #32]
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	61fb      	str	r3, [r7, #28]
}
 800a774:	bf00      	nop
 800a776:	e7fe      	b.n	800a776 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d103      	bne.n	800a788 <xQueueGiveFromISR+0x58>
 800a780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d101      	bne.n	800a78c <xQueueGiveFromISR+0x5c>
 800a788:	2301      	movs	r3, #1
 800a78a:	e000      	b.n	800a78e <xQueueGiveFromISR+0x5e>
 800a78c:	2300      	movs	r3, #0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10a      	bne.n	800a7a8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	61bb      	str	r3, [r7, #24]
}
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7a8:	f001 ffb6 	bl	800c718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a7ac:	f3ef 8211 	mrs	r2, BASEPRI
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	617a      	str	r2, [r7, #20]
 800a7c2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a7c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7cc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d22b      	bcs.n	800a830 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a7ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7f2:	d112      	bne.n	800a81a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d016      	beq.n	800a82a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	3324      	adds	r3, #36	; 0x24
 800a800:	4618      	mov	r0, r3
 800a802:	f000 ff97 	bl	800b734 <xTaskRemoveFromEventList>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00e      	beq.n	800a82a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00b      	beq.n	800a82a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2201      	movs	r2, #1
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	e007      	b.n	800a82a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a81a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a81e:	3301      	adds	r3, #1
 800a820:	b2db      	uxtb	r3, r3
 800a822:	b25a      	sxtb	r2, r3
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a82a:	2301      	movs	r3, #1
 800a82c:	637b      	str	r3, [r7, #52]	; 0x34
 800a82e:	e001      	b.n	800a834 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a830:	2300      	movs	r3, #0
 800a832:	637b      	str	r3, [r7, #52]	; 0x34
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a83e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a842:	4618      	mov	r0, r3
 800a844:	3738      	adds	r7, #56	; 0x38
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08e      	sub	sp, #56	; 0x38
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a856:	2300      	movs	r3, #0
 800a858:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a85e:	2300      	movs	r3, #0
 800a860:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	623b      	str	r3, [r7, #32]
}
 800a87a:	bf00      	nop
 800a87c:	e7fe      	b.n	800a87c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	61fb      	str	r3, [r7, #28]
}
 800a898:	bf00      	nop
 800a89a:	e7fe      	b.n	800a89a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a89c:	f001 f90a 	bl	800bab4 <xTaskGetSchedulerState>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d102      	bne.n	800a8ac <xQueueSemaphoreTake+0x60>
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <xQueueSemaphoreTake+0x64>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e000      	b.n	800a8b2 <xQueueSemaphoreTake+0x66>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10a      	bne.n	800a8cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	61bb      	str	r3, [r7, #24]
}
 800a8c8:	bf00      	nop
 800a8ca:	e7fe      	b.n	800a8ca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8cc:	f001 fe42 	bl	800c554 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d024      	beq.n	800a926 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8de:	1e5a      	subs	r2, r3, #1
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d104      	bne.n	800a8f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a8ec:	f001 fa8a 	bl	800be04 <pvTaskIncrementMutexHeldCount>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00f      	beq.n	800a91e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	3310      	adds	r3, #16
 800a902:	4618      	mov	r0, r3
 800a904:	f000 ff16 	bl	800b734 <xTaskRemoveFromEventList>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d007      	beq.n	800a91e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a90e:	4b54      	ldr	r3, [pc, #336]	; (800aa60 <xQueueSemaphoreTake+0x214>)
 800a910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a91e:	f001 fe49 	bl	800c5b4 <vPortExitCritical>
				return pdPASS;
 800a922:	2301      	movs	r3, #1
 800a924:	e097      	b.n	800aa56 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d111      	bne.n	800a950 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00a      	beq.n	800a948 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	617b      	str	r3, [r7, #20]
}
 800a944:	bf00      	nop
 800a946:	e7fe      	b.n	800a946 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a948:	f001 fe34 	bl	800c5b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a94c:	2300      	movs	r3, #0
 800a94e:	e082      	b.n	800aa56 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a952:	2b00      	cmp	r3, #0
 800a954:	d106      	bne.n	800a964 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a956:	f107 030c 	add.w	r3, r7, #12
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 ff4c 	bl	800b7f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a960:	2301      	movs	r3, #1
 800a962:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a964:	f001 fe26 	bl	800c5b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a968:	f000 fcfc 	bl	800b364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a96c:	f001 fdf2 	bl	800c554 <vPortEnterCritical>
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a976:	b25b      	sxtb	r3, r3
 800a978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a97c:	d103      	bne.n	800a986 <xQueueSemaphoreTake+0x13a>
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a98c:	b25b      	sxtb	r3, r3
 800a98e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a992:	d103      	bne.n	800a99c <xQueueSemaphoreTake+0x150>
 800a994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a996:	2200      	movs	r2, #0
 800a998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a99c:	f001 fe0a 	bl	800c5b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9a0:	463a      	mov	r2, r7
 800a9a2:	f107 030c 	add.w	r3, r7, #12
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 ff3b 	bl	800b824 <xTaskCheckForTimeOut>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d132      	bne.n	800aa1a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9b6:	f000 f9cf 	bl	800ad58 <prvIsQueueEmpty>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d026      	beq.n	800aa0e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d109      	bne.n	800a9dc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a9c8:	f001 fdc4 	bl	800c554 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f001 f88d 	bl	800baf0 <xTaskPriorityInherit>
 800a9d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a9d8:	f001 fdec 	bl	800c5b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	3324      	adds	r3, #36	; 0x24
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f000 fe81 	bl	800b6ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9ec:	f000 f962 	bl	800acb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9f0:	f000 fcc6 	bl	800b380 <xTaskResumeAll>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f47f af68 	bne.w	800a8cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a9fc:	4b18      	ldr	r3, [pc, #96]	; (800aa60 <xQueueSemaphoreTake+0x214>)
 800a9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	e75e      	b.n	800a8cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa10:	f000 f950 	bl	800acb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa14:	f000 fcb4 	bl	800b380 <xTaskResumeAll>
 800aa18:	e758      	b.n	800a8cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa1c:	f000 f94a 	bl	800acb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa20:	f000 fcae 	bl	800b380 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa26:	f000 f997 	bl	800ad58 <prvIsQueueEmpty>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f43f af4d 	beq.w	800a8cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00d      	beq.n	800aa54 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aa38:	f001 fd8c 	bl	800c554 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa3e:	f000 f891 	bl	800ab64 <prvGetDisinheritPriorityAfterTimeout>
 800aa42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f001 f94c 	bl	800bce8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa50:	f001 fdb0 	bl	800c5b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3738      	adds	r7, #56	; 0x38
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	e000ed04 	.word	0xe000ed04

0800aa64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b08e      	sub	sp, #56	; 0x38
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10a      	bne.n	800aa90 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	623b      	str	r3, [r7, #32]
}
 800aa8c:	bf00      	nop
 800aa8e:	e7fe      	b.n	800aa8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d103      	bne.n	800aa9e <xQueueReceiveFromISR+0x3a>
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d101      	bne.n	800aaa2 <xQueueReceiveFromISR+0x3e>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e000      	b.n	800aaa4 <xQueueReceiveFromISR+0x40>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10a      	bne.n	800aabe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	61fb      	str	r3, [r7, #28]
}
 800aaba:	bf00      	nop
 800aabc:	e7fe      	b.n	800aabc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aabe:	f001 fe2b 	bl	800c718 <vPortValidateInterruptPriority>
	__asm volatile
 800aac2:	f3ef 8211 	mrs	r2, BASEPRI
 800aac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	61ba      	str	r2, [r7, #24]
 800aad8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aada:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aadc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d02f      	beq.n	800ab4a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaf8:	f000 f8b6 	bl	800ac68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	1e5a      	subs	r2, r3, #1
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab0c:	d112      	bne.n	800ab34 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d016      	beq.n	800ab44 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	3310      	adds	r3, #16
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fe0a 	bl	800b734 <xTaskRemoveFromEventList>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00e      	beq.n	800ab44 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00b      	beq.n	800ab44 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	e007      	b.n	800ab44 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab38:	3301      	adds	r3, #1
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	b25a      	sxtb	r2, r3
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ab44:	2301      	movs	r3, #1
 800ab46:	637b      	str	r3, [r7, #52]	; 0x34
 800ab48:	e001      	b.n	800ab4e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f383 8811 	msr	BASEPRI, r3
}
 800ab58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3738      	adds	r7, #56	; 0x38
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d006      	beq.n	800ab82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f1c3 0307 	rsb	r3, r3, #7
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	e001      	b.n	800ab86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ab82:	2300      	movs	r3, #0
 800ab84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ab86:	68fb      	ldr	r3, [r7, #12]
	}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aba0:	2300      	movs	r3, #0
 800aba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10d      	bne.n	800abce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d14d      	bne.n	800ac56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f001 f80c 	bl	800bbdc <xTaskPriorityDisinherit>
 800abc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	609a      	str	r2, [r3, #8]
 800abcc:	e043      	b.n	800ac56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d119      	bne.n	800ac08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6858      	ldr	r0, [r3, #4]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abdc:	461a      	mov	r2, r3
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	f001 fff4 	bl	800cbcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	685a      	ldr	r2, [r3, #4]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abec:	441a      	add	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d32b      	bcc.n	800ac56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	605a      	str	r2, [r3, #4]
 800ac06:	e026      	b.n	800ac56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	68d8      	ldr	r0, [r3, #12]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac10:	461a      	mov	r2, r3
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	f001 ffda 	bl	800cbcc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	68da      	ldr	r2, [r3, #12]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac20:	425b      	negs	r3, r3
 800ac22:	441a      	add	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	68da      	ldr	r2, [r3, #12]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d207      	bcs.n	800ac44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	689a      	ldr	r2, [r3, #8]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3c:	425b      	negs	r3, r3
 800ac3e:	441a      	add	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d105      	bne.n	800ac56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	3b01      	subs	r3, #1
 800ac54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac5e:	697b      	ldr	r3, [r7, #20]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d018      	beq.n	800acac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68da      	ldr	r2, [r3, #12]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac82:	441a      	add	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68da      	ldr	r2, [r3, #12]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d303      	bcc.n	800ac9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	68d9      	ldr	r1, [r3, #12]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca4:	461a      	mov	r2, r3
 800aca6:	6838      	ldr	r0, [r7, #0]
 800aca8:	f001 ff90 	bl	800cbcc <memcpy>
	}
}
 800acac:	bf00      	nop
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acbc:	f001 fc4a 	bl	800c554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acc8:	e011      	b.n	800acee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d012      	beq.n	800acf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	3324      	adds	r3, #36	; 0x24
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 fd2c 	bl	800b734 <xTaskRemoveFromEventList>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ace2:	f000 fe01 	bl	800b8e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
 800ace8:	3b01      	subs	r3, #1
 800acea:	b2db      	uxtb	r3, r3
 800acec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	dce9      	bgt.n	800acca <prvUnlockQueue+0x16>
 800acf6:	e000      	b.n	800acfa <prvUnlockQueue+0x46>
					break;
 800acf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	22ff      	movs	r2, #255	; 0xff
 800acfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad02:	f001 fc57 	bl	800c5b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad06:	f001 fc25 	bl	800c554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad12:	e011      	b.n	800ad38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d012      	beq.n	800ad42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3310      	adds	r3, #16
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 fd07 	bl	800b734 <xTaskRemoveFromEventList>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad2c:	f000 fddc 	bl	800b8e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	3b01      	subs	r3, #1
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	dce9      	bgt.n	800ad14 <prvUnlockQueue+0x60>
 800ad40:	e000      	b.n	800ad44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	22ff      	movs	r2, #255	; 0xff
 800ad48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad4c:	f001 fc32 	bl	800c5b4 <vPortExitCritical>
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad60:	f001 fbf8 	bl	800c554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d102      	bne.n	800ad72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	e001      	b.n	800ad76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad72:	2300      	movs	r3, #0
 800ad74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad76:	f001 fc1d 	bl	800c5b4 <vPortExitCritical>

	return xReturn;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad8c:	f001 fbe2 	bl	800c554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d102      	bne.n	800ada2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	e001      	b.n	800ada6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ada2:	2300      	movs	r3, #0
 800ada4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ada6:	f001 fc05 	bl	800c5b4 <vPortExitCritical>

	return xReturn;
 800adaa:	68fb      	ldr	r3, [r7, #12]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08e      	sub	sp, #56	; 0x38
 800adb8:	af04      	add	r7, sp, #16
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
 800adc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <xTaskCreateStatic+0x2a>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	623b      	str	r3, [r7, #32]
}
 800adda:	bf00      	nop
 800addc:	e7fe      	b.n	800addc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800adde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <xTaskCreateStatic+0x46>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	61fb      	str	r3, [r7, #28]
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adfa:	23b4      	movs	r3, #180	; 0xb4
 800adfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	2bb4      	cmp	r3, #180	; 0xb4
 800ae02:	d00a      	beq.n	800ae1a <xTaskCreateStatic+0x66>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	61bb      	str	r3, [r7, #24]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d01e      	beq.n	800ae60 <xTaskCreateStatic+0xac>
 800ae22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01b      	beq.n	800ae60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	2202      	movs	r2, #2
 800ae36:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	9303      	str	r3, [sp, #12]
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae40:	9302      	str	r3, [sp, #8]
 800ae42:	f107 0314 	add.w	r3, r7, #20
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	68b9      	ldr	r1, [r7, #8]
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f000 f850 	bl	800aef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae5a:	f000 f8eb 	bl	800b034 <prvAddNewTaskToReadyList>
 800ae5e:	e001      	b.n	800ae64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae64:	697b      	ldr	r3, [r7, #20]
	}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3728      	adds	r7, #40	; 0x28
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b08c      	sub	sp, #48	; 0x30
 800ae72:	af04      	add	r7, sp, #16
 800ae74:	60f8      	str	r0, [r7, #12]
 800ae76:	60b9      	str	r1, [r7, #8]
 800ae78:	603b      	str	r3, [r7, #0]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae7e:	88fb      	ldrh	r3, [r7, #6]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4618      	mov	r0, r3
 800ae84:	f001 fc88 	bl	800c798 <pvPortMalloc>
 800ae88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00e      	beq.n	800aeae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae90:	20b4      	movs	r0, #180	; 0xb4
 800ae92:	f001 fc81 	bl	800c798 <pvPortMalloc>
 800ae96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	631a      	str	r2, [r3, #48]	; 0x30
 800aea4:	e005      	b.n	800aeb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aea6:	6978      	ldr	r0, [r7, #20]
 800aea8:	f001 fd42 	bl	800c930 <vPortFree>
 800aeac:	e001      	b.n	800aeb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d017      	beq.n	800aee8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aec0:	88fa      	ldrh	r2, [r7, #6]
 800aec2:	2300      	movs	r3, #0
 800aec4:	9303      	str	r3, [sp, #12]
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	9302      	str	r3, [sp, #8]
 800aeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	68b9      	ldr	r1, [r7, #8]
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f000 f80e 	bl	800aef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aedc:	69f8      	ldr	r0, [r7, #28]
 800aede:	f000 f8a9 	bl	800b034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aee2:	2301      	movs	r3, #1
 800aee4:	61bb      	str	r3, [r7, #24]
 800aee6:	e002      	b.n	800aeee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aeec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aeee:	69bb      	ldr	r3, [r7, #24]
	}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3720      	adds	r7, #32
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b088      	sub	sp, #32
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af10:	3b01      	subs	r3, #1
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	f023 0307 	bic.w	r3, r3, #7
 800af1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	f003 0307 	and.w	r3, r3, #7
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <prvInitialiseNewTask+0x48>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	617b      	str	r3, [r7, #20]
}
 800af3c:	bf00      	nop
 800af3e:	e7fe      	b.n	800af3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d01f      	beq.n	800af86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af46:	2300      	movs	r3, #0
 800af48:	61fb      	str	r3, [r7, #28]
 800af4a:	e012      	b.n	800af72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	4413      	add	r3, r2
 800af52:	7819      	ldrb	r1, [r3, #0]
 800af54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	4413      	add	r3, r2
 800af5a:	3334      	adds	r3, #52	; 0x34
 800af5c:	460a      	mov	r2, r1
 800af5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	4413      	add	r3, r2
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d006      	beq.n	800af7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	3301      	adds	r3, #1
 800af70:	61fb      	str	r3, [r7, #28]
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	2b0f      	cmp	r3, #15
 800af76:	d9e9      	bls.n	800af4c <prvInitialiseNewTask+0x54>
 800af78:	e000      	b.n	800af7c <prvInitialiseNewTask+0x84>
			{
				break;
 800af7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af84:	e003      	b.n	800af8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	2b06      	cmp	r3, #6
 800af92:	d901      	bls.n	800af98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af94:	2306      	movs	r3, #6
 800af96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	2200      	movs	r2, #0
 800afa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	3304      	adds	r3, #4
 800afae:	4618      	mov	r0, r3
 800afb0:	f7ff f8a6 	bl	800a100 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb6:	3318      	adds	r3, #24
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff f8a1 	bl	800a100 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	f1c3 0207 	rsb	r2, r3, #7
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	334c      	adds	r3, #76	; 0x4c
 800afe8:	2260      	movs	r2, #96	; 0x60
 800afea:	2100      	movs	r1, #0
 800afec:	4618      	mov	r0, r3
 800afee:	f001 fdfb 	bl	800cbe8 <memset>
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	4a0c      	ldr	r2, [pc, #48]	; (800b028 <prvInitialiseNewTask+0x130>)
 800aff6:	651a      	str	r2, [r3, #80]	; 0x50
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	4a0c      	ldr	r2, [pc, #48]	; (800b02c <prvInitialiseNewTask+0x134>)
 800affc:	655a      	str	r2, [r3, #84]	; 0x54
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	4a0b      	ldr	r2, [pc, #44]	; (800b030 <prvInitialiseNewTask+0x138>)
 800b002:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	68f9      	ldr	r1, [r7, #12]
 800b008:	69b8      	ldr	r0, [r7, #24]
 800b00a:	f001 f977 	bl	800c2fc <pxPortInitialiseStack>
 800b00e:	4602      	mov	r2, r0
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b016:	2b00      	cmp	r3, #0
 800b018:	d002      	beq.n	800b020 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b01e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b020:	bf00      	nop
 800b022:	3720      	adds	r7, #32
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	0803a1a4 	.word	0x0803a1a4
 800b02c:	0803a1c4 	.word	0x0803a1c4
 800b030:	0803a184 	.word	0x0803a184

0800b034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b03c:	f001 fa8a 	bl	800c554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b040:	4b2a      	ldr	r3, [pc, #168]	; (800b0ec <prvAddNewTaskToReadyList+0xb8>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3301      	adds	r3, #1
 800b046:	4a29      	ldr	r2, [pc, #164]	; (800b0ec <prvAddNewTaskToReadyList+0xb8>)
 800b048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b04a:	4b29      	ldr	r3, [pc, #164]	; (800b0f0 <prvAddNewTaskToReadyList+0xbc>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d109      	bne.n	800b066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b052:	4a27      	ldr	r2, [pc, #156]	; (800b0f0 <prvAddNewTaskToReadyList+0xbc>)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b058:	4b24      	ldr	r3, [pc, #144]	; (800b0ec <prvAddNewTaskToReadyList+0xb8>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d110      	bne.n	800b082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b060:	f000 fc66 	bl	800b930 <prvInitialiseTaskLists>
 800b064:	e00d      	b.n	800b082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b066:	4b23      	ldr	r3, [pc, #140]	; (800b0f4 <prvAddNewTaskToReadyList+0xc0>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d109      	bne.n	800b082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b06e:	4b20      	ldr	r3, [pc, #128]	; (800b0f0 <prvAddNewTaskToReadyList+0xbc>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	429a      	cmp	r2, r3
 800b07a:	d802      	bhi.n	800b082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b07c:	4a1c      	ldr	r2, [pc, #112]	; (800b0f0 <prvAddNewTaskToReadyList+0xbc>)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b082:	4b1d      	ldr	r3, [pc, #116]	; (800b0f8 <prvAddNewTaskToReadyList+0xc4>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3301      	adds	r3, #1
 800b088:	4a1b      	ldr	r2, [pc, #108]	; (800b0f8 <prvAddNewTaskToReadyList+0xc4>)
 800b08a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	2201      	movs	r2, #1
 800b092:	409a      	lsls	r2, r3
 800b094:	4b19      	ldr	r3, [pc, #100]	; (800b0fc <prvAddNewTaskToReadyList+0xc8>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4313      	orrs	r3, r2
 800b09a:	4a18      	ldr	r2, [pc, #96]	; (800b0fc <prvAddNewTaskToReadyList+0xc8>)
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4a15      	ldr	r2, [pc, #84]	; (800b100 <prvAddNewTaskToReadyList+0xcc>)
 800b0ac:	441a      	add	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	f7ff f830 	bl	800a11a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0ba:	f001 fa7b 	bl	800c5b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0be:	4b0d      	ldr	r3, [pc, #52]	; (800b0f4 <prvAddNewTaskToReadyList+0xc0>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00e      	beq.n	800b0e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0c6:	4b0a      	ldr	r3, [pc, #40]	; (800b0f0 <prvAddNewTaskToReadyList+0xbc>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d207      	bcs.n	800b0e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0d4:	4b0b      	ldr	r3, [pc, #44]	; (800b104 <prvAddNewTaskToReadyList+0xd0>)
 800b0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0e4:	bf00      	nop
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	200053e0 	.word	0x200053e0
 800b0f0:	200052e0 	.word	0x200052e0
 800b0f4:	200053ec 	.word	0x200053ec
 800b0f8:	200053fc 	.word	0x200053fc
 800b0fc:	200053e8 	.word	0x200053e8
 800b100:	200052e4 	.word	0x200052e4
 800b104:	e000ed04 	.word	0xe000ed04

0800b108 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b110:	f001 fa20 	bl	800c554 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d102      	bne.n	800b120 <vTaskDelete+0x18>
 800b11a:	4b39      	ldr	r3, [pc, #228]	; (800b200 <vTaskDelete+0xf8>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	e000      	b.n	800b122 <vTaskDelete+0x1a>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	3304      	adds	r3, #4
 800b128:	4618      	mov	r0, r3
 800b12a:	f7ff f853 	bl	800a1d4 <uxListRemove>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d115      	bne.n	800b160 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b138:	4932      	ldr	r1, [pc, #200]	; (800b204 <vTaskDelete+0xfc>)
 800b13a:	4613      	mov	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	440b      	add	r3, r1
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10a      	bne.n	800b160 <vTaskDelete+0x58>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14e:	2201      	movs	r2, #1
 800b150:	fa02 f303 	lsl.w	r3, r2, r3
 800b154:	43da      	mvns	r2, r3
 800b156:	4b2c      	ldr	r3, [pc, #176]	; (800b208 <vTaskDelete+0x100>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4013      	ands	r3, r2
 800b15c:	4a2a      	ldr	r2, [pc, #168]	; (800b208 <vTaskDelete+0x100>)
 800b15e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b164:	2b00      	cmp	r3, #0
 800b166:	d004      	beq.n	800b172 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3318      	adds	r3, #24
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7ff f831 	bl	800a1d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b172:	4b26      	ldr	r3, [pc, #152]	; (800b20c <vTaskDelete+0x104>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3301      	adds	r3, #1
 800b178:	4a24      	ldr	r2, [pc, #144]	; (800b20c <vTaskDelete+0x104>)
 800b17a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b17c:	4b20      	ldr	r3, [pc, #128]	; (800b200 <vTaskDelete+0xf8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	429a      	cmp	r2, r3
 800b184:	d10b      	bne.n	800b19e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3304      	adds	r3, #4
 800b18a:	4619      	mov	r1, r3
 800b18c:	4820      	ldr	r0, [pc, #128]	; (800b210 <vTaskDelete+0x108>)
 800b18e:	f7fe ffc4 	bl	800a11a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b192:	4b20      	ldr	r3, [pc, #128]	; (800b214 <vTaskDelete+0x10c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3301      	adds	r3, #1
 800b198:	4a1e      	ldr	r2, [pc, #120]	; (800b214 <vTaskDelete+0x10c>)
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	e009      	b.n	800b1b2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b19e:	4b1e      	ldr	r3, [pc, #120]	; (800b218 <vTaskDelete+0x110>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	4a1c      	ldr	r2, [pc, #112]	; (800b218 <vTaskDelete+0x110>)
 800b1a6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f000 fc2f 	bl	800ba0c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b1ae:	f000 fc61 	bl	800ba74 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b1b2:	f001 f9ff 	bl	800c5b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b1b6:	4b19      	ldr	r3, [pc, #100]	; (800b21c <vTaskDelete+0x114>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d01b      	beq.n	800b1f6 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b1be:	4b10      	ldr	r3, [pc, #64]	; (800b200 <vTaskDelete+0xf8>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d116      	bne.n	800b1f6 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b1c8:	4b15      	ldr	r3, [pc, #84]	; (800b220 <vTaskDelete+0x118>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00a      	beq.n	800b1e6 <vTaskDelete+0xde>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60bb      	str	r3, [r7, #8]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <vTaskDelete+0x11c>)
 800b1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ec:	601a      	str	r2, [r3, #0]
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1f6:	bf00      	nop
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	200052e0 	.word	0x200052e0
 800b204:	200052e4 	.word	0x200052e4
 800b208:	200053e8 	.word	0x200053e8
 800b20c:	200053fc 	.word	0x200053fc
 800b210:	200053b4 	.word	0x200053b4
 800b214:	200053c8 	.word	0x200053c8
 800b218:	200053e0 	.word	0x200053e0
 800b21c:	200053ec 	.word	0x200053ec
 800b220:	20005408 	.word	0x20005408
 800b224:	e000ed04 	.word	0xe000ed04

0800b228 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b230:	2300      	movs	r3, #0
 800b232:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d017      	beq.n	800b26a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b23a:	4b13      	ldr	r3, [pc, #76]	; (800b288 <vTaskDelay+0x60>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00a      	beq.n	800b258 <vTaskDelay+0x30>
	__asm volatile
 800b242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	60bb      	str	r3, [r7, #8]
}
 800b254:	bf00      	nop
 800b256:	e7fe      	b.n	800b256 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b258:	f000 f884 	bl	800b364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b25c:	2100      	movs	r1, #0
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 ffe6 	bl	800c230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b264:	f000 f88c 	bl	800b380 <xTaskResumeAll>
 800b268:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d107      	bne.n	800b280 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b270:	4b06      	ldr	r3, [pc, #24]	; (800b28c <vTaskDelay+0x64>)
 800b272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b276:	601a      	str	r2, [r3, #0]
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b280:	bf00      	nop
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	20005408 	.word	0x20005408
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08a      	sub	sp, #40	; 0x28
 800b294:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b296:	2300      	movs	r3, #0
 800b298:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b29a:	2300      	movs	r3, #0
 800b29c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b29e:	463a      	mov	r2, r7
 800b2a0:	1d39      	adds	r1, r7, #4
 800b2a2:	f107 0308 	add.w	r3, r7, #8
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7f5 fd62 	bl	8000d70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	9202      	str	r2, [sp, #8]
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	460a      	mov	r2, r1
 800b2be:	4921      	ldr	r1, [pc, #132]	; (800b344 <vTaskStartScheduler+0xb4>)
 800b2c0:	4821      	ldr	r0, [pc, #132]	; (800b348 <vTaskStartScheduler+0xb8>)
 800b2c2:	f7ff fd77 	bl	800adb4 <xTaskCreateStatic>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	4a20      	ldr	r2, [pc, #128]	; (800b34c <vTaskStartScheduler+0xbc>)
 800b2ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2cc:	4b1f      	ldr	r3, [pc, #124]	; (800b34c <vTaskStartScheduler+0xbc>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	e001      	b.n	800b2de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d11b      	bne.n	800b31c <vTaskStartScheduler+0x8c>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	613b      	str	r3, [r7, #16]
}
 800b2f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2f8:	4b15      	ldr	r3, [pc, #84]	; (800b350 <vTaskStartScheduler+0xc0>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	334c      	adds	r3, #76	; 0x4c
 800b2fe:	4a15      	ldr	r2, [pc, #84]	; (800b354 <vTaskStartScheduler+0xc4>)
 800b300:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <vTaskStartScheduler+0xc8>)
 800b304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b308:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b30a:	4b14      	ldr	r3, [pc, #80]	; (800b35c <vTaskStartScheduler+0xcc>)
 800b30c:	2201      	movs	r2, #1
 800b30e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b310:	4b13      	ldr	r3, [pc, #76]	; (800b360 <vTaskStartScheduler+0xd0>)
 800b312:	2200      	movs	r2, #0
 800b314:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b316:	f001 f87b 	bl	800c410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b31a:	e00e      	b.n	800b33a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b322:	d10a      	bne.n	800b33a <vTaskStartScheduler+0xaa>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	60fb      	str	r3, [r7, #12]
}
 800b336:	bf00      	nop
 800b338:	e7fe      	b.n	800b338 <vTaskStartScheduler+0xa8>
}
 800b33a:	bf00      	nop
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	0800db30 	.word	0x0800db30
 800b348:	0800b901 	.word	0x0800b901
 800b34c:	20005404 	.word	0x20005404
 800b350:	200052e0 	.word	0x200052e0
 800b354:	20004044 	.word	0x20004044
 800b358:	20005400 	.word	0x20005400
 800b35c:	200053ec 	.word	0x200053ec
 800b360:	200053e4 	.word	0x200053e4

0800b364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b368:	4b04      	ldr	r3, [pc, #16]	; (800b37c <vTaskSuspendAll+0x18>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	4a03      	ldr	r2, [pc, #12]	; (800b37c <vTaskSuspendAll+0x18>)
 800b370:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b372:	bf00      	nop
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	20005408 	.word	0x20005408

0800b380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b38a:	2300      	movs	r3, #0
 800b38c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b38e:	4b41      	ldr	r3, [pc, #260]	; (800b494 <xTaskResumeAll+0x114>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10a      	bne.n	800b3ac <xTaskResumeAll+0x2c>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	603b      	str	r3, [r7, #0]
}
 800b3a8:	bf00      	nop
 800b3aa:	e7fe      	b.n	800b3aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3ac:	f001 f8d2 	bl	800c554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3b0:	4b38      	ldr	r3, [pc, #224]	; (800b494 <xTaskResumeAll+0x114>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	4a37      	ldr	r2, [pc, #220]	; (800b494 <xTaskResumeAll+0x114>)
 800b3b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ba:	4b36      	ldr	r3, [pc, #216]	; (800b494 <xTaskResumeAll+0x114>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d161      	bne.n	800b486 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3c2:	4b35      	ldr	r3, [pc, #212]	; (800b498 <xTaskResumeAll+0x118>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d05d      	beq.n	800b486 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3ca:	e02e      	b.n	800b42a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3cc:	4b33      	ldr	r3, [pc, #204]	; (800b49c <xTaskResumeAll+0x11c>)
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3318      	adds	r3, #24
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe fefb 	bl	800a1d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fe fef6 	bl	800a1d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	409a      	lsls	r2, r3
 800b3f0:	4b2b      	ldr	r3, [pc, #172]	; (800b4a0 <xTaskResumeAll+0x120>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	4a2a      	ldr	r2, [pc, #168]	; (800b4a0 <xTaskResumeAll+0x120>)
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fe:	4613      	mov	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4a27      	ldr	r2, [pc, #156]	; (800b4a4 <xTaskResumeAll+0x124>)
 800b408:	441a      	add	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3304      	adds	r3, #4
 800b40e:	4619      	mov	r1, r3
 800b410:	4610      	mov	r0, r2
 800b412:	f7fe fe82 	bl	800a11a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41a:	4b23      	ldr	r3, [pc, #140]	; (800b4a8 <xTaskResumeAll+0x128>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	429a      	cmp	r2, r3
 800b422:	d302      	bcc.n	800b42a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b424:	4b21      	ldr	r3, [pc, #132]	; (800b4ac <xTaskResumeAll+0x12c>)
 800b426:	2201      	movs	r2, #1
 800b428:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b42a:	4b1c      	ldr	r3, [pc, #112]	; (800b49c <xTaskResumeAll+0x11c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1cc      	bne.n	800b3cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b438:	f000 fb1c 	bl	800ba74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b43c:	4b1c      	ldr	r3, [pc, #112]	; (800b4b0 <xTaskResumeAll+0x130>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d010      	beq.n	800b46a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b448:	f000 f836 	bl	800b4b8 <xTaskIncrementTick>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b452:	4b16      	ldr	r3, [pc, #88]	; (800b4ac <xTaskResumeAll+0x12c>)
 800b454:	2201      	movs	r2, #1
 800b456:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1f1      	bne.n	800b448 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b464:	4b12      	ldr	r3, [pc, #72]	; (800b4b0 <xTaskResumeAll+0x130>)
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b46a:	4b10      	ldr	r3, [pc, #64]	; (800b4ac <xTaskResumeAll+0x12c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d009      	beq.n	800b486 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b472:	2301      	movs	r3, #1
 800b474:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b476:	4b0f      	ldr	r3, [pc, #60]	; (800b4b4 <xTaskResumeAll+0x134>)
 800b478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b486:	f001 f895 	bl	800c5b4 <vPortExitCritical>

	return xAlreadyYielded;
 800b48a:	68bb      	ldr	r3, [r7, #8]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	20005408 	.word	0x20005408
 800b498:	200053e0 	.word	0x200053e0
 800b49c:	200053a0 	.word	0x200053a0
 800b4a0:	200053e8 	.word	0x200053e8
 800b4a4:	200052e4 	.word	0x200052e4
 800b4a8:	200052e0 	.word	0x200052e0
 800b4ac:	200053f4 	.word	0x200053f4
 800b4b0:	200053f0 	.word	0x200053f0
 800b4b4:	e000ed04 	.word	0xe000ed04

0800b4b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4c2:	4b4e      	ldr	r3, [pc, #312]	; (800b5fc <xTaskIncrementTick+0x144>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f040 808e 	bne.w	800b5e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4cc:	4b4c      	ldr	r3, [pc, #304]	; (800b600 <xTaskIncrementTick+0x148>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4d4:	4a4a      	ldr	r2, [pc, #296]	; (800b600 <xTaskIncrementTick+0x148>)
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d120      	bne.n	800b522 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4e0:	4b48      	ldr	r3, [pc, #288]	; (800b604 <xTaskIncrementTick+0x14c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <xTaskIncrementTick+0x48>
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	603b      	str	r3, [r7, #0]
}
 800b4fc:	bf00      	nop
 800b4fe:	e7fe      	b.n	800b4fe <xTaskIncrementTick+0x46>
 800b500:	4b40      	ldr	r3, [pc, #256]	; (800b604 <xTaskIncrementTick+0x14c>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	60fb      	str	r3, [r7, #12]
 800b506:	4b40      	ldr	r3, [pc, #256]	; (800b608 <xTaskIncrementTick+0x150>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a3e      	ldr	r2, [pc, #248]	; (800b604 <xTaskIncrementTick+0x14c>)
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	4a3e      	ldr	r2, [pc, #248]	; (800b608 <xTaskIncrementTick+0x150>)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6013      	str	r3, [r2, #0]
 800b514:	4b3d      	ldr	r3, [pc, #244]	; (800b60c <xTaskIncrementTick+0x154>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	3301      	adds	r3, #1
 800b51a:	4a3c      	ldr	r2, [pc, #240]	; (800b60c <xTaskIncrementTick+0x154>)
 800b51c:	6013      	str	r3, [r2, #0]
 800b51e:	f000 faa9 	bl	800ba74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b522:	4b3b      	ldr	r3, [pc, #236]	; (800b610 <xTaskIncrementTick+0x158>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d348      	bcc.n	800b5be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b52c:	4b35      	ldr	r3, [pc, #212]	; (800b604 <xTaskIncrementTick+0x14c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d104      	bne.n	800b540 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b536:	4b36      	ldr	r3, [pc, #216]	; (800b610 <xTaskIncrementTick+0x158>)
 800b538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b53c:	601a      	str	r2, [r3, #0]
					break;
 800b53e:	e03e      	b.n	800b5be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b540:	4b30      	ldr	r3, [pc, #192]	; (800b604 <xTaskIncrementTick+0x14c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	429a      	cmp	r2, r3
 800b556:	d203      	bcs.n	800b560 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b558:	4a2d      	ldr	r2, [pc, #180]	; (800b610 <xTaskIncrementTick+0x158>)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b55e:	e02e      	b.n	800b5be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	3304      	adds	r3, #4
 800b564:	4618      	mov	r0, r3
 800b566:	f7fe fe35 	bl	800a1d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d004      	beq.n	800b57c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	3318      	adds	r3, #24
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe fe2c 	bl	800a1d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	2201      	movs	r2, #1
 800b582:	409a      	lsls	r2, r3
 800b584:	4b23      	ldr	r3, [pc, #140]	; (800b614 <xTaskIncrementTick+0x15c>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4313      	orrs	r3, r2
 800b58a:	4a22      	ldr	r2, [pc, #136]	; (800b614 <xTaskIncrementTick+0x15c>)
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b592:	4613      	mov	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4a1f      	ldr	r2, [pc, #124]	; (800b618 <xTaskIncrementTick+0x160>)
 800b59c:	441a      	add	r2, r3
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	3304      	adds	r3, #4
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	f7fe fdb8 	bl	800a11a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ae:	4b1b      	ldr	r3, [pc, #108]	; (800b61c <xTaskIncrementTick+0x164>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d3b9      	bcc.n	800b52c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5bc:	e7b6      	b.n	800b52c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5be:	4b17      	ldr	r3, [pc, #92]	; (800b61c <xTaskIncrementTick+0x164>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c4:	4914      	ldr	r1, [pc, #80]	; (800b618 <xTaskIncrementTick+0x160>)
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	440b      	add	r3, r1
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d901      	bls.n	800b5da <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b5da:	4b11      	ldr	r3, [pc, #68]	; (800b620 <xTaskIncrementTick+0x168>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d007      	beq.n	800b5f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	617b      	str	r3, [r7, #20]
 800b5e6:	e004      	b.n	800b5f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5e8:	4b0e      	ldr	r3, [pc, #56]	; (800b624 <xTaskIncrementTick+0x16c>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	4a0d      	ldr	r2, [pc, #52]	; (800b624 <xTaskIncrementTick+0x16c>)
 800b5f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5f2:	697b      	ldr	r3, [r7, #20]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	20005408 	.word	0x20005408
 800b600:	200053e4 	.word	0x200053e4
 800b604:	20005398 	.word	0x20005398
 800b608:	2000539c 	.word	0x2000539c
 800b60c:	200053f8 	.word	0x200053f8
 800b610:	20005400 	.word	0x20005400
 800b614:	200053e8 	.word	0x200053e8
 800b618:	200052e4 	.word	0x200052e4
 800b61c:	200052e0 	.word	0x200052e0
 800b620:	200053f4 	.word	0x200053f4
 800b624:	200053f0 	.word	0x200053f0

0800b628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b628:	b480      	push	{r7}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b62e:	4b29      	ldr	r3, [pc, #164]	; (800b6d4 <vTaskSwitchContext+0xac>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d003      	beq.n	800b63e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b636:	4b28      	ldr	r3, [pc, #160]	; (800b6d8 <vTaskSwitchContext+0xb0>)
 800b638:	2201      	movs	r2, #1
 800b63a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b63c:	e044      	b.n	800b6c8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b63e:	4b26      	ldr	r3, [pc, #152]	; (800b6d8 <vTaskSwitchContext+0xb0>)
 800b640:	2200      	movs	r2, #0
 800b642:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b644:	4b25      	ldr	r3, [pc, #148]	; (800b6dc <vTaskSwitchContext+0xb4>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	fab3 f383 	clz	r3, r3
 800b650:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b652:	7afb      	ldrb	r3, [r7, #11]
 800b654:	f1c3 031f 	rsb	r3, r3, #31
 800b658:	617b      	str	r3, [r7, #20]
 800b65a:	4921      	ldr	r1, [pc, #132]	; (800b6e0 <vTaskSwitchContext+0xb8>)
 800b65c:	697a      	ldr	r2, [r7, #20]
 800b65e:	4613      	mov	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	440b      	add	r3, r1
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10a      	bne.n	800b684 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	607b      	str	r3, [r7, #4]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <vTaskSwitchContext+0x5a>
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	4613      	mov	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4a14      	ldr	r2, [pc, #80]	; (800b6e0 <vTaskSwitchContext+0xb8>)
 800b690:	4413      	add	r3, r2
 800b692:	613b      	str	r3, [r7, #16]
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	605a      	str	r2, [r3, #4]
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	3308      	adds	r3, #8
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d104      	bne.n	800b6b4 <vTaskSwitchContext+0x8c>
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	685a      	ldr	r2, [r3, #4]
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	605a      	str	r2, [r3, #4]
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	4a0a      	ldr	r2, [pc, #40]	; (800b6e4 <vTaskSwitchContext+0xbc>)
 800b6bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b6be:	4b09      	ldr	r3, [pc, #36]	; (800b6e4 <vTaskSwitchContext+0xbc>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	334c      	adds	r3, #76	; 0x4c
 800b6c4:	4a08      	ldr	r2, [pc, #32]	; (800b6e8 <vTaskSwitchContext+0xc0>)
 800b6c6:	6013      	str	r3, [r2, #0]
}
 800b6c8:	bf00      	nop
 800b6ca:	371c      	adds	r7, #28
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr
 800b6d4:	20005408 	.word	0x20005408
 800b6d8:	200053f4 	.word	0x200053f4
 800b6dc:	200053e8 	.word	0x200053e8
 800b6e0:	200052e4 	.word	0x200052e4
 800b6e4:	200052e0 	.word	0x200052e0
 800b6e8:	20004044 	.word	0x20004044

0800b6ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	60fb      	str	r3, [r7, #12]
}
 800b70e:	bf00      	nop
 800b710:	e7fe      	b.n	800b710 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b712:	4b07      	ldr	r3, [pc, #28]	; (800b730 <vTaskPlaceOnEventList+0x44>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3318      	adds	r3, #24
 800b718:	4619      	mov	r1, r3
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7fe fd21 	bl	800a162 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b720:	2101      	movs	r1, #1
 800b722:	6838      	ldr	r0, [r7, #0]
 800b724:	f000 fd84 	bl	800c230 <prvAddCurrentTaskToDelayedList>
}
 800b728:	bf00      	nop
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	200052e0 	.word	0x200052e0

0800b734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10a      	bne.n	800b760 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	60fb      	str	r3, [r7, #12]
}
 800b75c:	bf00      	nop
 800b75e:	e7fe      	b.n	800b75e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	3318      	adds	r3, #24
 800b764:	4618      	mov	r0, r3
 800b766:	f7fe fd35 	bl	800a1d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b76a:	4b1d      	ldr	r3, [pc, #116]	; (800b7e0 <xTaskRemoveFromEventList+0xac>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d11c      	bne.n	800b7ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	3304      	adds	r3, #4
 800b776:	4618      	mov	r0, r3
 800b778:	f7fe fd2c 	bl	800a1d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b780:	2201      	movs	r2, #1
 800b782:	409a      	lsls	r2, r3
 800b784:	4b17      	ldr	r3, [pc, #92]	; (800b7e4 <xTaskRemoveFromEventList+0xb0>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4313      	orrs	r3, r2
 800b78a:	4a16      	ldr	r2, [pc, #88]	; (800b7e4 <xTaskRemoveFromEventList+0xb0>)
 800b78c:	6013      	str	r3, [r2, #0]
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4a13      	ldr	r2, [pc, #76]	; (800b7e8 <xTaskRemoveFromEventList+0xb4>)
 800b79c:	441a      	add	r2, r3
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	f7fe fcb8 	bl	800a11a <vListInsertEnd>
 800b7aa:	e005      	b.n	800b7b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	3318      	adds	r3, #24
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	480e      	ldr	r0, [pc, #56]	; (800b7ec <xTaskRemoveFromEventList+0xb8>)
 800b7b4:	f7fe fcb1 	bl	800a11a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7bc:	4b0c      	ldr	r3, [pc, #48]	; (800b7f0 <xTaskRemoveFromEventList+0xbc>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d905      	bls.n	800b7d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b7ca:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <xTaskRemoveFromEventList+0xc0>)
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	601a      	str	r2, [r3, #0]
 800b7d0:	e001      	b.n	800b7d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7d6:	697b      	ldr	r3, [r7, #20]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	20005408 	.word	0x20005408
 800b7e4:	200053e8 	.word	0x200053e8
 800b7e8:	200052e4 	.word	0x200052e4
 800b7ec:	200053a0 	.word	0x200053a0
 800b7f0:	200052e0 	.word	0x200052e0
 800b7f4:	200053f4 	.word	0x200053f4

0800b7f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b800:	4b06      	ldr	r3, [pc, #24]	; (800b81c <vTaskInternalSetTimeOutState+0x24>)
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b808:	4b05      	ldr	r3, [pc, #20]	; (800b820 <vTaskInternalSetTimeOutState+0x28>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	605a      	str	r2, [r3, #4]
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr
 800b81c:	200053f8 	.word	0x200053f8
 800b820:	200053e4 	.word	0x200053e4

0800b824 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b088      	sub	sp, #32
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10a      	bne.n	800b84a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	613b      	str	r3, [r7, #16]
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10a      	bne.n	800b866 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	60fb      	str	r3, [r7, #12]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b866:	f000 fe75 	bl	800c554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b86a:	4b1d      	ldr	r3, [pc, #116]	; (800b8e0 <xTaskCheckForTimeOut+0xbc>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	69ba      	ldr	r2, [r7, #24]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b882:	d102      	bne.n	800b88a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b884:	2300      	movs	r3, #0
 800b886:	61fb      	str	r3, [r7, #28]
 800b888:	e023      	b.n	800b8d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	4b15      	ldr	r3, [pc, #84]	; (800b8e4 <xTaskCheckForTimeOut+0xc0>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	429a      	cmp	r2, r3
 800b894:	d007      	beq.n	800b8a6 <xTaskCheckForTimeOut+0x82>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d302      	bcc.n	800b8a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	61fb      	str	r3, [r7, #28]
 800b8a4:	e015      	b.n	800b8d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	697a      	ldr	r2, [r7, #20]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d20b      	bcs.n	800b8c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	1ad2      	subs	r2, r2, r3
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff ff9b 	bl	800b7f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	61fb      	str	r3, [r7, #28]
 800b8c6:	e004      	b.n	800b8d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b8d2:	f000 fe6f 	bl	800c5b4 <vPortExitCritical>

	return xReturn;
 800b8d6:	69fb      	ldr	r3, [r7, #28]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3720      	adds	r7, #32
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	200053e4 	.word	0x200053e4
 800b8e4:	200053f8 	.word	0x200053f8

0800b8e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8ec:	4b03      	ldr	r3, [pc, #12]	; (800b8fc <vTaskMissedYield+0x14>)
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	601a      	str	r2, [r3, #0]
}
 800b8f2:	bf00      	nop
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	200053f4 	.word	0x200053f4

0800b900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b908:	f000 f852 	bl	800b9b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b90c:	4b06      	ldr	r3, [pc, #24]	; (800b928 <prvIdleTask+0x28>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d9f9      	bls.n	800b908 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b914:	4b05      	ldr	r3, [pc, #20]	; (800b92c <prvIdleTask+0x2c>)
 800b916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b91a:	601a      	str	r2, [r3, #0]
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b924:	e7f0      	b.n	800b908 <prvIdleTask+0x8>
 800b926:	bf00      	nop
 800b928:	200052e4 	.word	0x200052e4
 800b92c:	e000ed04 	.word	0xe000ed04

0800b930 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b936:	2300      	movs	r3, #0
 800b938:	607b      	str	r3, [r7, #4]
 800b93a:	e00c      	b.n	800b956 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	4613      	mov	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4a12      	ldr	r2, [pc, #72]	; (800b990 <prvInitialiseTaskLists+0x60>)
 800b948:	4413      	add	r3, r2
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fe fbb8 	bl	800a0c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	3301      	adds	r3, #1
 800b954:	607b      	str	r3, [r7, #4]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b06      	cmp	r3, #6
 800b95a:	d9ef      	bls.n	800b93c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b95c:	480d      	ldr	r0, [pc, #52]	; (800b994 <prvInitialiseTaskLists+0x64>)
 800b95e:	f7fe fbaf 	bl	800a0c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b962:	480d      	ldr	r0, [pc, #52]	; (800b998 <prvInitialiseTaskLists+0x68>)
 800b964:	f7fe fbac 	bl	800a0c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b968:	480c      	ldr	r0, [pc, #48]	; (800b99c <prvInitialiseTaskLists+0x6c>)
 800b96a:	f7fe fba9 	bl	800a0c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b96e:	480c      	ldr	r0, [pc, #48]	; (800b9a0 <prvInitialiseTaskLists+0x70>)
 800b970:	f7fe fba6 	bl	800a0c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b974:	480b      	ldr	r0, [pc, #44]	; (800b9a4 <prvInitialiseTaskLists+0x74>)
 800b976:	f7fe fba3 	bl	800a0c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b97a:	4b0b      	ldr	r3, [pc, #44]	; (800b9a8 <prvInitialiseTaskLists+0x78>)
 800b97c:	4a05      	ldr	r2, [pc, #20]	; (800b994 <prvInitialiseTaskLists+0x64>)
 800b97e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b980:	4b0a      	ldr	r3, [pc, #40]	; (800b9ac <prvInitialiseTaskLists+0x7c>)
 800b982:	4a05      	ldr	r2, [pc, #20]	; (800b998 <prvInitialiseTaskLists+0x68>)
 800b984:	601a      	str	r2, [r3, #0]
}
 800b986:	bf00      	nop
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	200052e4 	.word	0x200052e4
 800b994:	20005370 	.word	0x20005370
 800b998:	20005384 	.word	0x20005384
 800b99c:	200053a0 	.word	0x200053a0
 800b9a0:	200053b4 	.word	0x200053b4
 800b9a4:	200053cc 	.word	0x200053cc
 800b9a8:	20005398 	.word	0x20005398
 800b9ac:	2000539c 	.word	0x2000539c

0800b9b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9b6:	e019      	b.n	800b9ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b9b8:	f000 fdcc 	bl	800c554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9bc:	4b10      	ldr	r3, [pc, #64]	; (800ba00 <prvCheckTasksWaitingTermination+0x50>)
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fc03 	bl	800a1d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <prvCheckTasksWaitingTermination+0x54>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	4a0b      	ldr	r2, [pc, #44]	; (800ba04 <prvCheckTasksWaitingTermination+0x54>)
 800b9d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b9d8:	4b0b      	ldr	r3, [pc, #44]	; (800ba08 <prvCheckTasksWaitingTermination+0x58>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	4a0a      	ldr	r2, [pc, #40]	; (800ba08 <prvCheckTasksWaitingTermination+0x58>)
 800b9e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b9e2:	f000 fde7 	bl	800c5b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f810 	bl	800ba0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9ec:	4b06      	ldr	r3, [pc, #24]	; (800ba08 <prvCheckTasksWaitingTermination+0x58>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1e1      	bne.n	800b9b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	200053b4 	.word	0x200053b4
 800ba04:	200053e0 	.word	0x200053e0
 800ba08:	200053c8 	.word	0x200053c8

0800ba0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	334c      	adds	r3, #76	; 0x4c
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f001 f98f 	bl	800cd3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d108      	bne.n	800ba3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 ff7f 	bl	800c930 <vPortFree>
				vPortFree( pxTCB );
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 ff7c 	bl	800c930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba38:	e018      	b.n	800ba6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d103      	bne.n	800ba4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 ff73 	bl	800c930 <vPortFree>
	}
 800ba4a:	e00f      	b.n	800ba6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d00a      	beq.n	800ba6c <prvDeleteTCB+0x60>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	60fb      	str	r3, [r7, #12]
}
 800ba68:	bf00      	nop
 800ba6a:	e7fe      	b.n	800ba6a <prvDeleteTCB+0x5e>
	}
 800ba6c:	bf00      	nop
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba7a:	4b0c      	ldr	r3, [pc, #48]	; (800baac <prvResetNextTaskUnblockTime+0x38>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d104      	bne.n	800ba8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba84:	4b0a      	ldr	r3, [pc, #40]	; (800bab0 <prvResetNextTaskUnblockTime+0x3c>)
 800ba86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba8c:	e008      	b.n	800baa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba8e:	4b07      	ldr	r3, [pc, #28]	; (800baac <prvResetNextTaskUnblockTime+0x38>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	4a04      	ldr	r2, [pc, #16]	; (800bab0 <prvResetNextTaskUnblockTime+0x3c>)
 800ba9e:	6013      	str	r3, [r2, #0]
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	20005398 	.word	0x20005398
 800bab0:	20005400 	.word	0x20005400

0800bab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800baba:	4b0b      	ldr	r3, [pc, #44]	; (800bae8 <xTaskGetSchedulerState+0x34>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d102      	bne.n	800bac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bac2:	2301      	movs	r3, #1
 800bac4:	607b      	str	r3, [r7, #4]
 800bac6:	e008      	b.n	800bada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bac8:	4b08      	ldr	r3, [pc, #32]	; (800baec <xTaskGetSchedulerState+0x38>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bad0:	2302      	movs	r3, #2
 800bad2:	607b      	str	r3, [r7, #4]
 800bad4:	e001      	b.n	800bada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bad6:	2300      	movs	r3, #0
 800bad8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bada:	687b      	ldr	r3, [r7, #4]
	}
 800badc:	4618      	mov	r0, r3
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	200053ec 	.word	0x200053ec
 800baec:	20005408 	.word	0x20005408

0800baf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d05e      	beq.n	800bbc4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0a:	4b31      	ldr	r3, [pc, #196]	; (800bbd0 <xTaskPriorityInherit+0xe0>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d24e      	bcs.n	800bbb2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	db06      	blt.n	800bb2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb1c:	4b2c      	ldr	r3, [pc, #176]	; (800bbd0 <xTaskPriorityInherit+0xe0>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb22:	f1c3 0207 	rsb	r2, r3, #7
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	6959      	ldr	r1, [r3, #20]
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb32:	4613      	mov	r3, r2
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	4413      	add	r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4a26      	ldr	r2, [pc, #152]	; (800bbd4 <xTaskPriorityInherit+0xe4>)
 800bb3c:	4413      	add	r3, r2
 800bb3e:	4299      	cmp	r1, r3
 800bb40:	d12f      	bne.n	800bba2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	3304      	adds	r3, #4
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fe fb44 	bl	800a1d4 <uxListRemove>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb56:	2201      	movs	r2, #1
 800bb58:	fa02 f303 	lsl.w	r3, r2, r3
 800bb5c:	43da      	mvns	r2, r3
 800bb5e:	4b1e      	ldr	r3, [pc, #120]	; (800bbd8 <xTaskPriorityInherit+0xe8>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4013      	ands	r3, r2
 800bb64:	4a1c      	ldr	r2, [pc, #112]	; (800bbd8 <xTaskPriorityInherit+0xe8>)
 800bb66:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb68:	4b19      	ldr	r3, [pc, #100]	; (800bbd0 <xTaskPriorityInherit+0xe0>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb76:	2201      	movs	r2, #1
 800bb78:	409a      	lsls	r2, r3
 800bb7a:	4b17      	ldr	r3, [pc, #92]	; (800bbd8 <xTaskPriorityInherit+0xe8>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	4a15      	ldr	r2, [pc, #84]	; (800bbd8 <xTaskPriorityInherit+0xe8>)
 800bb82:	6013      	str	r3, [r2, #0]
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb88:	4613      	mov	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4a10      	ldr	r2, [pc, #64]	; (800bbd4 <xTaskPriorityInherit+0xe4>)
 800bb92:	441a      	add	r2, r3
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	3304      	adds	r3, #4
 800bb98:	4619      	mov	r1, r3
 800bb9a:	4610      	mov	r0, r2
 800bb9c:	f7fe fabd 	bl	800a11a <vListInsertEnd>
 800bba0:	e004      	b.n	800bbac <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bba2:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <xTaskPriorityInherit+0xe0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bbac:	2301      	movs	r3, #1
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	e008      	b.n	800bbc4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbb6:	4b06      	ldr	r3, [pc, #24]	; (800bbd0 <xTaskPriorityInherit+0xe0>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d201      	bcs.n	800bbc4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
	}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	200052e0 	.word	0x200052e0
 800bbd4:	200052e4 	.word	0x200052e4
 800bbd8:	200053e8 	.word	0x200053e8

0800bbdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d06e      	beq.n	800bcd0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbf2:	4b3a      	ldr	r3, [pc, #232]	; (800bcdc <xTaskPriorityDisinherit+0x100>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d00a      	beq.n	800bc12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	60fb      	str	r3, [r7, #12]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10a      	bne.n	800bc30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1e:	f383 8811 	msr	BASEPRI, r3
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	60bb      	str	r3, [r7, #8]
}
 800bc2c:	bf00      	nop
 800bc2e:	e7fe      	b.n	800bc2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc34:	1e5a      	subs	r2, r3, #1
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d044      	beq.n	800bcd0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d140      	bne.n	800bcd0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe fabe 	bl	800a1d4 <uxListRemove>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d115      	bne.n	800bc8a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc62:	491f      	ldr	r1, [pc, #124]	; (800bce0 <xTaskPriorityDisinherit+0x104>)
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	440b      	add	r3, r1
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <xTaskPriorityDisinherit+0xae>
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc78:	2201      	movs	r2, #1
 800bc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc7e:	43da      	mvns	r2, r3
 800bc80:	4b18      	ldr	r3, [pc, #96]	; (800bce4 <xTaskPriorityDisinherit+0x108>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4013      	ands	r3, r2
 800bc86:	4a17      	ldr	r2, [pc, #92]	; (800bce4 <xTaskPriorityDisinherit+0x108>)
 800bc88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc96:	f1c3 0207 	rsb	r2, r3, #7
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca2:	2201      	movs	r2, #1
 800bca4:	409a      	lsls	r2, r3
 800bca6:	4b0f      	ldr	r3, [pc, #60]	; (800bce4 <xTaskPriorityDisinherit+0x108>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	4a0d      	ldr	r2, [pc, #52]	; (800bce4 <xTaskPriorityDisinherit+0x108>)
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4a08      	ldr	r2, [pc, #32]	; (800bce0 <xTaskPriorityDisinherit+0x104>)
 800bcbe:	441a      	add	r2, r3
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	4610      	mov	r0, r2
 800bcc8:	f7fe fa27 	bl	800a11a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bccc:	2301      	movs	r3, #1
 800bcce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcd0:	697b      	ldr	r3, [r7, #20]
	}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	200052e0 	.word	0x200052e0
 800bce0:	200052e4 	.word	0x200052e4
 800bce4:	200053e8 	.word	0x200053e8

0800bce8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d077      	beq.n	800bdf0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10a      	bne.n	800bd1e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	60fb      	str	r3, [r7, #12]
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d902      	bls.n	800bd2e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	61fb      	str	r3, [r7, #28]
 800bd2c:	e002      	b.n	800bd34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd32:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd38:	69fa      	ldr	r2, [r7, #28]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d058      	beq.n	800bdf0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d153      	bne.n	800bdf0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bd48:	4b2b      	ldr	r3, [pc, #172]	; (800bdf8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d10a      	bne.n	800bd68 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	60bb      	str	r3, [r7, #8]
}
 800bd64:	bf00      	nop
 800bd66:	e7fe      	b.n	800bd66 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	69fa      	ldr	r2, [r7, #28]
 800bd72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	699b      	ldr	r3, [r3, #24]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	db04      	blt.n	800bd86 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	f1c3 0207 	rsb	r2, r3, #7
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	6959      	ldr	r1, [r3, #20]
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4a19      	ldr	r2, [pc, #100]	; (800bdfc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bd96:	4413      	add	r3, r2
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	d129      	bne.n	800bdf0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe fa17 	bl	800a1d4 <uxListRemove>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10a      	bne.n	800bdc2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb6:	43da      	mvns	r2, r3
 800bdb8:	4b11      	ldr	r3, [pc, #68]	; (800be00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	4a10      	ldr	r2, [pc, #64]	; (800be00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bdc0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	409a      	lsls	r2, r3
 800bdca:	4b0d      	ldr	r3, [pc, #52]	; (800be00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	4a0b      	ldr	r2, [pc, #44]	; (800be00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd8:	4613      	mov	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4a06      	ldr	r2, [pc, #24]	; (800bdfc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bde2:	441a      	add	r2, r3
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	f7fe f995 	bl	800a11a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdf0:	bf00      	nop
 800bdf2:	3720      	adds	r7, #32
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	200052e0 	.word	0x200052e0
 800bdfc:	200052e4 	.word	0x200052e4
 800be00:	200053e8 	.word	0x200053e8

0800be04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800be04:	b480      	push	{r7}
 800be06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800be08:	4b07      	ldr	r3, [pc, #28]	; (800be28 <pvTaskIncrementMutexHeldCount+0x24>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d004      	beq.n	800be1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800be10:	4b05      	ldr	r3, [pc, #20]	; (800be28 <pvTaskIncrementMutexHeldCount+0x24>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be16:	3201      	adds	r2, #1
 800be18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800be1a:	4b03      	ldr	r3, [pc, #12]	; (800be28 <pvTaskIncrementMutexHeldCount+0x24>)
 800be1c:	681b      	ldr	r3, [r3, #0]
	}
 800be1e:	4618      	mov	r0, r3
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr
 800be28:	200052e0 	.word	0x200052e0

0800be2c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800be3a:	f000 fb8b 	bl	800c554 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800be3e:	4b29      	ldr	r3, [pc, #164]	; (800bee4 <xTaskNotifyWait+0xb8>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d01c      	beq.n	800be86 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800be4c:	4b25      	ldr	r3, [pc, #148]	; (800bee4 <xTaskNotifyWait+0xb8>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	43d2      	mvns	r2, r2
 800be58:	400a      	ands	r2, r1
 800be5a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800be5e:	4b21      	ldr	r3, [pc, #132]	; (800bee4 <xTaskNotifyWait+0xb8>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00b      	beq.n	800be86 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be6e:	2101      	movs	r1, #1
 800be70:	6838      	ldr	r0, [r7, #0]
 800be72:	f000 f9dd 	bl	800c230 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800be76:	4b1c      	ldr	r3, [pc, #112]	; (800bee8 <xTaskNotifyWait+0xbc>)
 800be78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be7c:	601a      	str	r2, [r3, #0]
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800be86:	f000 fb95 	bl	800c5b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800be8a:	f000 fb63 	bl	800c554 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d005      	beq.n	800bea0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800be94:	4b13      	ldr	r3, [pc, #76]	; (800bee4 <xTaskNotifyWait+0xb8>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bea0:	4b10      	ldr	r3, [pc, #64]	; (800bee4 <xTaskNotifyWait+0xb8>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d002      	beq.n	800beb4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800beae:	2300      	movs	r3, #0
 800beb0:	617b      	str	r3, [r7, #20]
 800beb2:	e00a      	b.n	800beca <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800beb4:	4b0b      	ldr	r3, [pc, #44]	; (800bee4 <xTaskNotifyWait+0xb8>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	43d2      	mvns	r2, r2
 800bec0:	400a      	ands	r2, r1
 800bec2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 800bec6:	2301      	movs	r3, #1
 800bec8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800beca:	4b06      	ldr	r3, [pc, #24]	; (800bee4 <xTaskNotifyWait+0xb8>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2200      	movs	r2, #0
 800bed0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 800bed4:	f000 fb6e 	bl	800c5b4 <vPortExitCritical>

		return xReturn;
 800bed8:	697b      	ldr	r3, [r7, #20]
	}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	200052e0 	.word	0x200052e0
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800beec:	b580      	push	{r7, lr}
 800beee:	b08a      	sub	sp, #40	; 0x28
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	603b      	str	r3, [r7, #0]
 800bef8:	4613      	mov	r3, r2
 800befa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800befc:	2301      	movs	r3, #1
 800befe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10a      	bne.n	800bf1c <xTaskGenericNotify+0x30>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	61bb      	str	r3, [r7, #24]
}
 800bf18:	bf00      	nop
 800bf1a:	e7fe      	b.n	800bf1a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bf20:	f000 fb18 	bl	800c554 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d004      	beq.n	800bf34 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bf2a:	6a3b      	ldr	r3, [r7, #32]
 800bf2c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bf34:	6a3b      	ldr	r3, [r7, #32]
 800bf36:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800bf3a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	2202      	movs	r2, #2
 800bf40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800bf44:	79fb      	ldrb	r3, [r7, #7]
 800bf46:	2b04      	cmp	r3, #4
 800bf48:	d82d      	bhi.n	800bfa6 <xTaskGenericNotify+0xba>
 800bf4a:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <xTaskGenericNotify+0x64>)
 800bf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf50:	0800bfc9 	.word	0x0800bfc9
 800bf54:	0800bf65 	.word	0x0800bf65
 800bf58:	0800bf77 	.word	0x0800bf77
 800bf5c:	0800bf87 	.word	0x0800bf87
 800bf60:	0800bf91 	.word	0x0800bf91
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	431a      	orrs	r2, r3
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800bf74:	e02b      	b.n	800bfce <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bf76:	6a3b      	ldr	r3, [r7, #32]
 800bf78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf7c:	1c5a      	adds	r2, r3, #1
 800bf7e:	6a3b      	ldr	r3, [r7, #32]
 800bf80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800bf84:	e023      	b.n	800bfce <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800bf8e:	e01e      	b.n	800bfce <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bf90:	7ffb      	ldrb	r3, [r7, #31]
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d004      	beq.n	800bfa0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bf96:	6a3b      	ldr	r3, [r7, #32]
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bf9e:	e016      	b.n	800bfce <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bfa4:	e013      	b.n	800bfce <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bfa6:	6a3b      	ldr	r3, [r7, #32]
 800bfa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bfac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfb0:	d00c      	beq.n	800bfcc <xTaskGenericNotify+0xe0>
	__asm volatile
 800bfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	617b      	str	r3, [r7, #20]
}
 800bfc4:	bf00      	nop
 800bfc6:	e7fe      	b.n	800bfc6 <xTaskGenericNotify+0xda>
					break;
 800bfc8:	bf00      	nop
 800bfca:	e000      	b.n	800bfce <xTaskGenericNotify+0xe2>

					break;
 800bfcc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bfce:	7ffb      	ldrb	r3, [r7, #31]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d139      	bne.n	800c048 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfd4:	6a3b      	ldr	r3, [r7, #32]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe f8fb 	bl	800a1d4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	409a      	lsls	r2, r3
 800bfe6:	4b1c      	ldr	r3, [pc, #112]	; (800c058 <xTaskGenericNotify+0x16c>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	4a1a      	ldr	r2, [pc, #104]	; (800c058 <xTaskGenericNotify+0x16c>)
 800bfee:	6013      	str	r3, [r2, #0]
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff4:	4613      	mov	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4413      	add	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4a17      	ldr	r2, [pc, #92]	; (800c05c <xTaskGenericNotify+0x170>)
 800bffe:	441a      	add	r2, r3
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	3304      	adds	r3, #4
 800c004:	4619      	mov	r1, r3
 800c006:	4610      	mov	r0, r2
 800c008:	f7fe f887 	bl	800a11a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00a      	beq.n	800c02a <xTaskGenericNotify+0x13e>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	613b      	str	r3, [r7, #16]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c02e:	4b0c      	ldr	r3, [pc, #48]	; (800c060 <xTaskGenericNotify+0x174>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c034:	429a      	cmp	r2, r3
 800c036:	d907      	bls.n	800c048 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c038:	4b0a      	ldr	r3, [pc, #40]	; (800c064 <xTaskGenericNotify+0x178>)
 800c03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c03e:	601a      	str	r2, [r3, #0]
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c048:	f000 fab4 	bl	800c5b4 <vPortExitCritical>

		return xReturn;
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c04e:	4618      	mov	r0, r3
 800c050:	3728      	adds	r7, #40	; 0x28
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	200053e8 	.word	0x200053e8
 800c05c:	200052e4 	.word	0x200052e4
 800c060:	200052e0 	.word	0x200052e0
 800c064:	e000ed04 	.word	0xe000ed04

0800c068 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b08e      	sub	sp, #56	; 0x38
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	603b      	str	r3, [r7, #0]
 800c074:	4613      	mov	r3, r2
 800c076:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c078:	2301      	movs	r3, #1
 800c07a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10a      	bne.n	800c098 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c094:	bf00      	nop
 800c096:	e7fe      	b.n	800c096 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c098:	f000 fb3e 	bl	800c718 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c0a0:	f3ef 8211 	mrs	r2, BASEPRI
 800c0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	623a      	str	r2, [r7, #32]
 800c0b6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c0b8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d004      	beq.n	800c0cc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ce:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c0d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	2202      	movs	r2, #2
 800c0da:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800c0de:	79fb      	ldrb	r3, [r7, #7]
 800c0e0:	2b04      	cmp	r3, #4
 800c0e2:	d82f      	bhi.n	800c144 <xTaskGenericNotifyFromISR+0xdc>
 800c0e4:	a201      	add	r2, pc, #4	; (adr r2, 800c0ec <xTaskGenericNotifyFromISR+0x84>)
 800c0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ea:	bf00      	nop
 800c0ec:	0800c167 	.word	0x0800c167
 800c0f0:	0800c101 	.word	0x0800c101
 800c0f4:	0800c113 	.word	0x0800c113
 800c0f8:	0800c123 	.word	0x0800c123
 800c0fc:	0800c12d 	.word	0x0800c12d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c102:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	431a      	orrs	r2, r3
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800c110:	e02c      	b.n	800c16c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c118:	1c5a      	adds	r2, r3, #1
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800c120:	e024      	b.n	800c16c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800c12a:	e01f      	b.n	800c16c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c12c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c130:	2b02      	cmp	r3, #2
 800c132:	d004      	beq.n	800c13e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c13c:	e016      	b.n	800c16c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800c13e:	2300      	movs	r3, #0
 800c140:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c142:	e013      	b.n	800c16c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c14a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c14e:	d00c      	beq.n	800c16a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	61bb      	str	r3, [r7, #24]
}
 800c162:	bf00      	nop
 800c164:	e7fe      	b.n	800c164 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800c166:	bf00      	nop
 800c168:	e000      	b.n	800c16c <xTaskGenericNotifyFromISR+0x104>
					break;
 800c16a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c16c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c170:	2b01      	cmp	r3, #1
 800c172:	d145      	bne.n	800c200 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00a      	beq.n	800c192 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	617b      	str	r3, [r7, #20]
}
 800c18e:	bf00      	nop
 800c190:	e7fe      	b.n	800c190 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c192:	4b21      	ldr	r3, [pc, #132]	; (800c218 <xTaskGenericNotifyFromISR+0x1b0>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d11c      	bne.n	800c1d4 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19c:	3304      	adds	r3, #4
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe f818 	bl	800a1d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	409a      	lsls	r2, r3
 800c1ac:	4b1b      	ldr	r3, [pc, #108]	; (800c21c <xTaskGenericNotifyFromISR+0x1b4>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	4a1a      	ldr	r2, [pc, #104]	; (800c21c <xTaskGenericNotifyFromISR+0x1b4>)
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4a17      	ldr	r2, [pc, #92]	; (800c220 <xTaskGenericNotifyFromISR+0x1b8>)
 800c1c4:	441a      	add	r2, r3
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	f7fd ffa4 	bl	800a11a <vListInsertEnd>
 800c1d2:	e005      	b.n	800c1e0 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	3318      	adds	r3, #24
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4812      	ldr	r0, [pc, #72]	; (800c224 <xTaskGenericNotifyFromISR+0x1bc>)
 800c1dc:	f7fd ff9d 	bl	800a11a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e4:	4b10      	ldr	r3, [pc, #64]	; (800c228 <xTaskGenericNotifyFromISR+0x1c0>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d908      	bls.n	800c200 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <xTaskGenericNotifyFromISR+0x1c4>)
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	601a      	str	r2, [r3, #0]
 800c200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c202:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	f383 8811 	msr	BASEPRI, r3
}
 800c20a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c20e:	4618      	mov	r0, r3
 800c210:	3738      	adds	r7, #56	; 0x38
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20005408 	.word	0x20005408
 800c21c:	200053e8 	.word	0x200053e8
 800c220:	200052e4 	.word	0x200052e4
 800c224:	200053a0 	.word	0x200053a0
 800c228:	200052e0 	.word	0x200052e0
 800c22c:	200053f4 	.word	0x200053f4

0800c230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c23a:	4b29      	ldr	r3, [pc, #164]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c240:	4b28      	ldr	r3, [pc, #160]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3304      	adds	r3, #4
 800c246:	4618      	mov	r0, r3
 800c248:	f7fd ffc4 	bl	800a1d4 <uxListRemove>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10b      	bne.n	800c26a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c252:	4b24      	ldr	r3, [pc, #144]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c258:	2201      	movs	r2, #1
 800c25a:	fa02 f303 	lsl.w	r3, r2, r3
 800c25e:	43da      	mvns	r2, r3
 800c260:	4b21      	ldr	r3, [pc, #132]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4013      	ands	r3, r2
 800c266:	4a20      	ldr	r2, [pc, #128]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c268:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c270:	d10a      	bne.n	800c288 <prvAddCurrentTaskToDelayedList+0x58>
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d007      	beq.n	800c288 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c278:	4b1a      	ldr	r3, [pc, #104]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3304      	adds	r3, #4
 800c27e:	4619      	mov	r1, r3
 800c280:	481a      	ldr	r0, [pc, #104]	; (800c2ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800c282:	f7fd ff4a 	bl	800a11a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c286:	e026      	b.n	800c2d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4413      	add	r3, r2
 800c28e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c290:	4b14      	ldr	r3, [pc, #80]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d209      	bcs.n	800c2b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2a0:	4b13      	ldr	r3, [pc, #76]	; (800c2f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	4b0f      	ldr	r3, [pc, #60]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	f7fd ff58 	bl	800a162 <vListInsert>
}
 800c2b2:	e010      	b.n	800c2d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2b4:	4b0f      	ldr	r3, [pc, #60]	; (800c2f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	4b0a      	ldr	r3, [pc, #40]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3304      	adds	r3, #4
 800c2be:	4619      	mov	r1, r3
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	f7fd ff4e 	bl	800a162 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2c6:	4b0c      	ldr	r3, [pc, #48]	; (800c2f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d202      	bcs.n	800c2d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c2d0:	4a09      	ldr	r2, [pc, #36]	; (800c2f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	6013      	str	r3, [r2, #0]
}
 800c2d6:	bf00      	nop
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	200053e4 	.word	0x200053e4
 800c2e4:	200052e0 	.word	0x200052e0
 800c2e8:	200053e8 	.word	0x200053e8
 800c2ec:	200053cc 	.word	0x200053cc
 800c2f0:	2000539c 	.word	0x2000539c
 800c2f4:	20005398 	.word	0x20005398
 800c2f8:	20005400 	.word	0x20005400

0800c2fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3b04      	subs	r3, #4
 800c30c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	3b04      	subs	r3, #4
 800c31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	f023 0201 	bic.w	r2, r3, #1
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3b04      	subs	r3, #4
 800c32a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c32c:	4a0c      	ldr	r2, [pc, #48]	; (800c360 <pxPortInitialiseStack+0x64>)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3b14      	subs	r3, #20
 800c336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	3b04      	subs	r3, #4
 800c342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f06f 0202 	mvn.w	r2, #2
 800c34a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	3b20      	subs	r3, #32
 800c350:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c352:	68fb      	ldr	r3, [r7, #12]
}
 800c354:	4618      	mov	r0, r3
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	0800c365 	.word	0x0800c365

0800c364 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c36e:	4b12      	ldr	r3, [pc, #72]	; (800c3b8 <prvTaskExitError+0x54>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c376:	d00a      	beq.n	800c38e <prvTaskExitError+0x2a>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	60fb      	str	r3, [r7, #12]
}
 800c38a:	bf00      	nop
 800c38c:	e7fe      	b.n	800c38c <prvTaskExitError+0x28>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	60bb      	str	r3, [r7, #8]
}
 800c3a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3a2:	bf00      	nop
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d0fc      	beq.n	800c3a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3aa:	bf00      	nop
 800c3ac:	bf00      	nop
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr
 800c3b8:	20004040 	.word	0x20004040
 800c3bc:	00000000 	.word	0x00000000

0800c3c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3c0:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <pxCurrentTCBConst2>)
 800c3c2:	6819      	ldr	r1, [r3, #0]
 800c3c4:	6808      	ldr	r0, [r1, #0]
 800c3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ca:	f380 8809 	msr	PSP, r0
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f04f 0000 	mov.w	r0, #0
 800c3d6:	f380 8811 	msr	BASEPRI, r0
 800c3da:	4770      	bx	lr
 800c3dc:	f3af 8000 	nop.w

0800c3e0 <pxCurrentTCBConst2>:
 800c3e0:	200052e0 	.word	0x200052e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop

0800c3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3e8:	4808      	ldr	r0, [pc, #32]	; (800c40c <prvPortStartFirstTask+0x24>)
 800c3ea:	6800      	ldr	r0, [r0, #0]
 800c3ec:	6800      	ldr	r0, [r0, #0]
 800c3ee:	f380 8808 	msr	MSP, r0
 800c3f2:	f04f 0000 	mov.w	r0, #0
 800c3f6:	f380 8814 	msr	CONTROL, r0
 800c3fa:	b662      	cpsie	i
 800c3fc:	b661      	cpsie	f
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	df00      	svc	0
 800c408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c40a:	bf00      	nop
 800c40c:	e000ed08 	.word	0xe000ed08

0800c410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c416:	4b46      	ldr	r3, [pc, #280]	; (800c530 <xPortStartScheduler+0x120>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a46      	ldr	r2, [pc, #280]	; (800c534 <xPortStartScheduler+0x124>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d10a      	bne.n	800c436 <xPortStartScheduler+0x26>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	613b      	str	r3, [r7, #16]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c436:	4b3e      	ldr	r3, [pc, #248]	; (800c530 <xPortStartScheduler+0x120>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a3f      	ldr	r2, [pc, #252]	; (800c538 <xPortStartScheduler+0x128>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d10a      	bne.n	800c456 <xPortStartScheduler+0x46>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	60fb      	str	r3, [r7, #12]
}
 800c452:	bf00      	nop
 800c454:	e7fe      	b.n	800c454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c456:	4b39      	ldr	r3, [pc, #228]	; (800c53c <xPortStartScheduler+0x12c>)
 800c458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	22ff      	movs	r2, #255	; 0xff
 800c466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	4b31      	ldr	r3, [pc, #196]	; (800c540 <xPortStartScheduler+0x130>)
 800c47c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c47e:	4b31      	ldr	r3, [pc, #196]	; (800c544 <xPortStartScheduler+0x134>)
 800c480:	2207      	movs	r2, #7
 800c482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c484:	e009      	b.n	800c49a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c486:	4b2f      	ldr	r3, [pc, #188]	; (800c544 <xPortStartScheduler+0x134>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3b01      	subs	r3, #1
 800c48c:	4a2d      	ldr	r2, [pc, #180]	; (800c544 <xPortStartScheduler+0x134>)
 800c48e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	b2db      	uxtb	r3, r3
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	b2db      	uxtb	r3, r3
 800c498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c49a:	78fb      	ldrb	r3, [r7, #3]
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4a2:	2b80      	cmp	r3, #128	; 0x80
 800c4a4:	d0ef      	beq.n	800c486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4a6:	4b27      	ldr	r3, [pc, #156]	; (800c544 <xPortStartScheduler+0x134>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f1c3 0307 	rsb	r3, r3, #7
 800c4ae:	2b04      	cmp	r3, #4
 800c4b0:	d00a      	beq.n	800c4c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	60bb      	str	r3, [r7, #8]
}
 800c4c4:	bf00      	nop
 800c4c6:	e7fe      	b.n	800c4c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4c8:	4b1e      	ldr	r3, [pc, #120]	; (800c544 <xPortStartScheduler+0x134>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	021b      	lsls	r3, r3, #8
 800c4ce:	4a1d      	ldr	r2, [pc, #116]	; (800c544 <xPortStartScheduler+0x134>)
 800c4d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4d2:	4b1c      	ldr	r3, [pc, #112]	; (800c544 <xPortStartScheduler+0x134>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4da:	4a1a      	ldr	r2, [pc, #104]	; (800c544 <xPortStartScheduler+0x134>)
 800c4dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4e6:	4b18      	ldr	r3, [pc, #96]	; (800c548 <xPortStartScheduler+0x138>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a17      	ldr	r2, [pc, #92]	; (800c548 <xPortStartScheduler+0x138>)
 800c4ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c4f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4f2:	4b15      	ldr	r3, [pc, #84]	; (800c548 <xPortStartScheduler+0x138>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a14      	ldr	r2, [pc, #80]	; (800c548 <xPortStartScheduler+0x138>)
 800c4f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c4fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4fe:	f000 f8dd 	bl	800c6bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c502:	4b12      	ldr	r3, [pc, #72]	; (800c54c <xPortStartScheduler+0x13c>)
 800c504:	2200      	movs	r2, #0
 800c506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c508:	f000 f8fc 	bl	800c704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c50c:	4b10      	ldr	r3, [pc, #64]	; (800c550 <xPortStartScheduler+0x140>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a0f      	ldr	r2, [pc, #60]	; (800c550 <xPortStartScheduler+0x140>)
 800c512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c518:	f7ff ff66 	bl	800c3e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c51c:	f7ff f884 	bl	800b628 <vTaskSwitchContext>
	prvTaskExitError();
 800c520:	f7ff ff20 	bl	800c364 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	e000ed00 	.word	0xe000ed00
 800c534:	410fc271 	.word	0x410fc271
 800c538:	410fc270 	.word	0x410fc270
 800c53c:	e000e400 	.word	0xe000e400
 800c540:	2000540c 	.word	0x2000540c
 800c544:	20005410 	.word	0x20005410
 800c548:	e000ed20 	.word	0xe000ed20
 800c54c:	20004040 	.word	0x20004040
 800c550:	e000ef34 	.word	0xe000ef34

0800c554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
	__asm volatile
 800c55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	607b      	str	r3, [r7, #4]
}
 800c56c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c56e:	4b0f      	ldr	r3, [pc, #60]	; (800c5ac <vPortEnterCritical+0x58>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3301      	adds	r3, #1
 800c574:	4a0d      	ldr	r2, [pc, #52]	; (800c5ac <vPortEnterCritical+0x58>)
 800c576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c578:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <vPortEnterCritical+0x58>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d10f      	bne.n	800c5a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <vPortEnterCritical+0x5c>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00a      	beq.n	800c5a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	603b      	str	r3, [r7, #0]
}
 800c59c:	bf00      	nop
 800c59e:	e7fe      	b.n	800c59e <vPortEnterCritical+0x4a>
	}
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	20004040 	.word	0x20004040
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5ba:	4b12      	ldr	r3, [pc, #72]	; (800c604 <vPortExitCritical+0x50>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10a      	bne.n	800c5d8 <vPortExitCritical+0x24>
	__asm volatile
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	607b      	str	r3, [r7, #4]
}
 800c5d4:	bf00      	nop
 800c5d6:	e7fe      	b.n	800c5d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5d8:	4b0a      	ldr	r3, [pc, #40]	; (800c604 <vPortExitCritical+0x50>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	4a09      	ldr	r2, [pc, #36]	; (800c604 <vPortExitCritical+0x50>)
 800c5e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5e2:	4b08      	ldr	r3, [pc, #32]	; (800c604 <vPortExitCritical+0x50>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d105      	bne.n	800c5f6 <vPortExitCritical+0x42>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	f383 8811 	msr	BASEPRI, r3
}
 800c5f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5f6:	bf00      	nop
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	20004040 	.word	0x20004040
	...

0800c610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c610:	f3ef 8009 	mrs	r0, PSP
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	4b15      	ldr	r3, [pc, #84]	; (800c670 <pxCurrentTCBConst>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	f01e 0f10 	tst.w	lr, #16
 800c620:	bf08      	it	eq
 800c622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62a:	6010      	str	r0, [r2, #0]
 800c62c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c630:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c634:	f380 8811 	msr	BASEPRI, r0
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f7fe fff2 	bl	800b628 <vTaskSwitchContext>
 800c644:	f04f 0000 	mov.w	r0, #0
 800c648:	f380 8811 	msr	BASEPRI, r0
 800c64c:	bc09      	pop	{r0, r3}
 800c64e:	6819      	ldr	r1, [r3, #0]
 800c650:	6808      	ldr	r0, [r1, #0]
 800c652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c656:	f01e 0f10 	tst.w	lr, #16
 800c65a:	bf08      	it	eq
 800c65c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c660:	f380 8809 	msr	PSP, r0
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	f3af 8000 	nop.w

0800c670 <pxCurrentTCBConst>:
 800c670:	200052e0 	.word	0x200052e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c674:	bf00      	nop
 800c676:	bf00      	nop

0800c678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	607b      	str	r3, [r7, #4]
}
 800c690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c692:	f7fe ff11 	bl	800b4b8 <xTaskIncrementTick>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d003      	beq.n	800c6a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c69c:	4b06      	ldr	r3, [pc, #24]	; (800c6b8 <SysTick_Handler+0x40>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	f383 8811 	msr	BASEPRI, r3
}
 800c6ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	e000ed04 	.word	0xe000ed04

0800c6bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6c0:	4b0b      	ldr	r3, [pc, #44]	; (800c6f0 <vPortSetupTimerInterrupt+0x34>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6c6:	4b0b      	ldr	r3, [pc, #44]	; (800c6f4 <vPortSetupTimerInterrupt+0x38>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6cc:	4b0a      	ldr	r3, [pc, #40]	; (800c6f8 <vPortSetupTimerInterrupt+0x3c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a0a      	ldr	r2, [pc, #40]	; (800c6fc <vPortSetupTimerInterrupt+0x40>)
 800c6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d6:	099b      	lsrs	r3, r3, #6
 800c6d8:	4a09      	ldr	r2, [pc, #36]	; (800c700 <vPortSetupTimerInterrupt+0x44>)
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6de:	4b04      	ldr	r3, [pc, #16]	; (800c6f0 <vPortSetupTimerInterrupt+0x34>)
 800c6e0:	2207      	movs	r2, #7
 800c6e2:	601a      	str	r2, [r3, #0]
}
 800c6e4:	bf00      	nop
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	e000e010 	.word	0xe000e010
 800c6f4:	e000e018 	.word	0xe000e018
 800c6f8:	20000000 	.word	0x20000000
 800c6fc:	10624dd3 	.word	0x10624dd3
 800c700:	e000e014 	.word	0xe000e014

0800c704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c714 <vPortEnableVFP+0x10>
 800c708:	6801      	ldr	r1, [r0, #0]
 800c70a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c70e:	6001      	str	r1, [r0, #0]
 800c710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c712:	bf00      	nop
 800c714:	e000ed88 	.word	0xe000ed88

0800c718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c71e:	f3ef 8305 	mrs	r3, IPSR
 800c722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b0f      	cmp	r3, #15
 800c728:	d914      	bls.n	800c754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c72a:	4a17      	ldr	r2, [pc, #92]	; (800c788 <vPortValidateInterruptPriority+0x70>)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	4413      	add	r3, r2
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c734:	4b15      	ldr	r3, [pc, #84]	; (800c78c <vPortValidateInterruptPriority+0x74>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	7afa      	ldrb	r2, [r7, #11]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d20a      	bcs.n	800c754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
 800c752:	e7fe      	b.n	800c752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c754:	4b0e      	ldr	r3, [pc, #56]	; (800c790 <vPortValidateInterruptPriority+0x78>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c75c:	4b0d      	ldr	r3, [pc, #52]	; (800c794 <vPortValidateInterruptPriority+0x7c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	429a      	cmp	r2, r3
 800c762:	d90a      	bls.n	800c77a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	603b      	str	r3, [r7, #0]
}
 800c776:	bf00      	nop
 800c778:	e7fe      	b.n	800c778 <vPortValidateInterruptPriority+0x60>
	}
 800c77a:	bf00      	nop
 800c77c:	3714      	adds	r7, #20
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	e000e3f0 	.word	0xe000e3f0
 800c78c:	2000540c 	.word	0x2000540c
 800c790:	e000ed0c 	.word	0xe000ed0c
 800c794:	20005410 	.word	0x20005410

0800c798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b08a      	sub	sp, #40	; 0x28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7a4:	f7fe fdde 	bl	800b364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7a8:	4b5b      	ldr	r3, [pc, #364]	; (800c918 <pvPortMalloc+0x180>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d101      	bne.n	800c7b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7b0:	f000 f920 	bl	800c9f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7b4:	4b59      	ldr	r3, [pc, #356]	; (800c91c <pvPortMalloc+0x184>)
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f040 8093 	bne.w	800c8e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d01d      	beq.n	800c804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c7c8:	2208      	movs	r2, #8
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d014      	beq.n	800c804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f023 0307 	bic.w	r3, r3, #7
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f003 0307 	and.w	r3, r3, #7
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00a      	beq.n	800c804 <pvPortMalloc+0x6c>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	617b      	str	r3, [r7, #20]
}
 800c800:	bf00      	nop
 800c802:	e7fe      	b.n	800c802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d06e      	beq.n	800c8e8 <pvPortMalloc+0x150>
 800c80a:	4b45      	ldr	r3, [pc, #276]	; (800c920 <pvPortMalloc+0x188>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d869      	bhi.n	800c8e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c814:	4b43      	ldr	r3, [pc, #268]	; (800c924 <pvPortMalloc+0x18c>)
 800c816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c818:	4b42      	ldr	r3, [pc, #264]	; (800c924 <pvPortMalloc+0x18c>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c81e:	e004      	b.n	800c82a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	429a      	cmp	r2, r3
 800c832:	d903      	bls.n	800c83c <pvPortMalloc+0xa4>
 800c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1f1      	bne.n	800c820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c83c:	4b36      	ldr	r3, [pc, #216]	; (800c918 <pvPortMalloc+0x180>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c842:	429a      	cmp	r2, r3
 800c844:	d050      	beq.n	800c8e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2208      	movs	r2, #8
 800c84c:	4413      	add	r3, r2
 800c84e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	1ad2      	subs	r2, r2, r3
 800c860:	2308      	movs	r3, #8
 800c862:	005b      	lsls	r3, r3, #1
 800c864:	429a      	cmp	r2, r3
 800c866:	d91f      	bls.n	800c8a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4413      	add	r3, r2
 800c86e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	f003 0307 	and.w	r3, r3, #7
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00a      	beq.n	800c890 <pvPortMalloc+0xf8>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	613b      	str	r3, [r7, #16]
}
 800c88c:	bf00      	nop
 800c88e:	e7fe      	b.n	800c88e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c892:	685a      	ldr	r2, [r3, #4]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	1ad2      	subs	r2, r2, r3
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8a2:	69b8      	ldr	r0, [r7, #24]
 800c8a4:	f000 f908 	bl	800cab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8a8:	4b1d      	ldr	r3, [pc, #116]	; (800c920 <pvPortMalloc+0x188>)
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	4a1b      	ldr	r2, [pc, #108]	; (800c920 <pvPortMalloc+0x188>)
 800c8b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8b6:	4b1a      	ldr	r3, [pc, #104]	; (800c920 <pvPortMalloc+0x188>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	4b1b      	ldr	r3, [pc, #108]	; (800c928 <pvPortMalloc+0x190>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d203      	bcs.n	800c8ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8c2:	4b17      	ldr	r3, [pc, #92]	; (800c920 <pvPortMalloc+0x188>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a18      	ldr	r2, [pc, #96]	; (800c928 <pvPortMalloc+0x190>)
 800c8c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	4b13      	ldr	r3, [pc, #76]	; (800c91c <pvPortMalloc+0x184>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	431a      	orrs	r2, r3
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	2200      	movs	r2, #0
 800c8dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8de:	4b13      	ldr	r3, [pc, #76]	; (800c92c <pvPortMalloc+0x194>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	4a11      	ldr	r2, [pc, #68]	; (800c92c <pvPortMalloc+0x194>)
 800c8e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8e8:	f7fe fd4a 	bl	800b380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	f003 0307 	and.w	r3, r3, #7
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00a      	beq.n	800c90c <pvPortMalloc+0x174>
	__asm volatile
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	60fb      	str	r3, [r7, #12]
}
 800c908:	bf00      	nop
 800c90a:	e7fe      	b.n	800c90a <pvPortMalloc+0x172>
	return pvReturn;
 800c90c:	69fb      	ldr	r3, [r7, #28]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3728      	adds	r7, #40	; 0x28
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	2000a23c 	.word	0x2000a23c
 800c91c:	2000a250 	.word	0x2000a250
 800c920:	2000a240 	.word	0x2000a240
 800c924:	2000a234 	.word	0x2000a234
 800c928:	2000a244 	.word	0x2000a244
 800c92c:	2000a248 	.word	0x2000a248

0800c930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d04d      	beq.n	800c9de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c942:	2308      	movs	r3, #8
 800c944:	425b      	negs	r3, r3
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	4413      	add	r3, r2
 800c94a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	4b24      	ldr	r3, [pc, #144]	; (800c9e8 <vPortFree+0xb8>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4013      	ands	r3, r2
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10a      	bne.n	800c974 <vPortFree+0x44>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	60fb      	str	r3, [r7, #12]
}
 800c970:	bf00      	nop
 800c972:	e7fe      	b.n	800c972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00a      	beq.n	800c992 <vPortFree+0x62>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	60bb      	str	r3, [r7, #8]
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	685a      	ldr	r2, [r3, #4]
 800c996:	4b14      	ldr	r3, [pc, #80]	; (800c9e8 <vPortFree+0xb8>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4013      	ands	r3, r2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d01e      	beq.n	800c9de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d11a      	bne.n	800c9de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	685a      	ldr	r2, [r3, #4]
 800c9ac:	4b0e      	ldr	r3, [pc, #56]	; (800c9e8 <vPortFree+0xb8>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	43db      	mvns	r3, r3
 800c9b2:	401a      	ands	r2, r3
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9b8:	f7fe fcd4 	bl	800b364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	685a      	ldr	r2, [r3, #4]
 800c9c0:	4b0a      	ldr	r3, [pc, #40]	; (800c9ec <vPortFree+0xbc>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	4a09      	ldr	r2, [pc, #36]	; (800c9ec <vPortFree+0xbc>)
 800c9c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9ca:	6938      	ldr	r0, [r7, #16]
 800c9cc:	f000 f874 	bl	800cab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9d0:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <vPortFree+0xc0>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	4a06      	ldr	r2, [pc, #24]	; (800c9f0 <vPortFree+0xc0>)
 800c9d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9da:	f7fe fcd1 	bl	800b380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9de:	bf00      	nop
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	2000a250 	.word	0x2000a250
 800c9ec:	2000a240 	.word	0x2000a240
 800c9f0:	2000a24c 	.word	0x2000a24c

0800c9f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c9fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca00:	4b27      	ldr	r3, [pc, #156]	; (800caa0 <prvHeapInit+0xac>)
 800ca02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f003 0307 	and.w	r3, r3, #7
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00c      	beq.n	800ca28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	3307      	adds	r3, #7
 800ca12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f023 0307 	bic.w	r3, r3, #7
 800ca1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	4a1f      	ldr	r2, [pc, #124]	; (800caa0 <prvHeapInit+0xac>)
 800ca24:	4413      	add	r3, r2
 800ca26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca2c:	4a1d      	ldr	r2, [pc, #116]	; (800caa4 <prvHeapInit+0xb0>)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca32:	4b1c      	ldr	r3, [pc, #112]	; (800caa4 <prvHeapInit+0xb0>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca40:	2208      	movs	r2, #8
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	1a9b      	subs	r3, r3, r2
 800ca46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f023 0307 	bic.w	r3, r3, #7
 800ca4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	4a15      	ldr	r2, [pc, #84]	; (800caa8 <prvHeapInit+0xb4>)
 800ca54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca56:	4b14      	ldr	r3, [pc, #80]	; (800caa8 <prvHeapInit+0xb4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca5e:	4b12      	ldr	r3, [pc, #72]	; (800caa8 <prvHeapInit+0xb4>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	1ad2      	subs	r2, r2, r3
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca74:	4b0c      	ldr	r3, [pc, #48]	; (800caa8 <prvHeapInit+0xb4>)
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	4a0a      	ldr	r2, [pc, #40]	; (800caac <prvHeapInit+0xb8>)
 800ca82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	4a09      	ldr	r2, [pc, #36]	; (800cab0 <prvHeapInit+0xbc>)
 800ca8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca8c:	4b09      	ldr	r3, [pc, #36]	; (800cab4 <prvHeapInit+0xc0>)
 800ca8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca92:	601a      	str	r2, [r3, #0]
}
 800ca94:	bf00      	nop
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	20005414 	.word	0x20005414
 800caa4:	2000a234 	.word	0x2000a234
 800caa8:	2000a23c 	.word	0x2000a23c
 800caac:	2000a244 	.word	0x2000a244
 800cab0:	2000a240 	.word	0x2000a240
 800cab4:	2000a250 	.word	0x2000a250

0800cab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cac0:	4b28      	ldr	r3, [pc, #160]	; (800cb64 <prvInsertBlockIntoFreeList+0xac>)
 800cac2:	60fb      	str	r3, [r7, #12]
 800cac4:	e002      	b.n	800cacc <prvInsertBlockIntoFreeList+0x14>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d8f7      	bhi.n	800cac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	68ba      	ldr	r2, [r7, #8]
 800cae0:	4413      	add	r3, r2
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d108      	bne.n	800cafa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	441a      	add	r2, r3
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	441a      	add	r2, r3
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d118      	bne.n	800cb40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	4b15      	ldr	r3, [pc, #84]	; (800cb68 <prvInsertBlockIntoFreeList+0xb0>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d00d      	beq.n	800cb36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	441a      	add	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	e008      	b.n	800cb48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb36:	4b0c      	ldr	r3, [pc, #48]	; (800cb68 <prvInsertBlockIntoFreeList+0xb0>)
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	e003      	b.n	800cb48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d002      	beq.n	800cb56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb56:	bf00      	nop
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	2000a234 	.word	0x2000a234
 800cb68:	2000a23c 	.word	0x2000a23c

0800cb6c <atoi>:
 800cb6c:	220a      	movs	r2, #10
 800cb6e:	2100      	movs	r1, #0
 800cb70:	f000 ba06 	b.w	800cf80 <strtol>

0800cb74 <__errno>:
 800cb74:	4b01      	ldr	r3, [pc, #4]	; (800cb7c <__errno+0x8>)
 800cb76:	6818      	ldr	r0, [r3, #0]
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	20004044 	.word	0x20004044

0800cb80 <__libc_init_array>:
 800cb80:	b570      	push	{r4, r5, r6, lr}
 800cb82:	4d0d      	ldr	r5, [pc, #52]	; (800cbb8 <__libc_init_array+0x38>)
 800cb84:	4c0d      	ldr	r4, [pc, #52]	; (800cbbc <__libc_init_array+0x3c>)
 800cb86:	1b64      	subs	r4, r4, r5
 800cb88:	10a4      	asrs	r4, r4, #2
 800cb8a:	2600      	movs	r6, #0
 800cb8c:	42a6      	cmp	r6, r4
 800cb8e:	d109      	bne.n	800cba4 <__libc_init_array+0x24>
 800cb90:	4d0b      	ldr	r5, [pc, #44]	; (800cbc0 <__libc_init_array+0x40>)
 800cb92:	4c0c      	ldr	r4, [pc, #48]	; (800cbc4 <__libc_init_array+0x44>)
 800cb94:	f000 fd98 	bl	800d6c8 <_init>
 800cb98:	1b64      	subs	r4, r4, r5
 800cb9a:	10a4      	asrs	r4, r4, #2
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	42a6      	cmp	r6, r4
 800cba0:	d105      	bne.n	800cbae <__libc_init_array+0x2e>
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cba8:	4798      	blx	r3
 800cbaa:	3601      	adds	r6, #1
 800cbac:	e7ee      	b.n	800cb8c <__libc_init_array+0xc>
 800cbae:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbb2:	4798      	blx	r3
 800cbb4:	3601      	adds	r6, #1
 800cbb6:	e7f2      	b.n	800cb9e <__libc_init_array+0x1e>
 800cbb8:	0803a320 	.word	0x0803a320
 800cbbc:	0803a320 	.word	0x0803a320
 800cbc0:	0803a320 	.word	0x0803a320
 800cbc4:	0803a324 	.word	0x0803a324

0800cbc8 <__retarget_lock_acquire_recursive>:
 800cbc8:	4770      	bx	lr

0800cbca <__retarget_lock_release_recursive>:
 800cbca:	4770      	bx	lr

0800cbcc <memcpy>:
 800cbcc:	440a      	add	r2, r1
 800cbce:	4291      	cmp	r1, r2
 800cbd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cbd4:	d100      	bne.n	800cbd8 <memcpy+0xc>
 800cbd6:	4770      	bx	lr
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbe2:	4291      	cmp	r1, r2
 800cbe4:	d1f9      	bne.n	800cbda <memcpy+0xe>
 800cbe6:	bd10      	pop	{r4, pc}

0800cbe8 <memset>:
 800cbe8:	4402      	add	r2, r0
 800cbea:	4603      	mov	r3, r0
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d100      	bne.n	800cbf2 <memset+0xa>
 800cbf0:	4770      	bx	lr
 800cbf2:	f803 1b01 	strb.w	r1, [r3], #1
 800cbf6:	e7f9      	b.n	800cbec <memset+0x4>

0800cbf8 <sbrk_aligned>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	4e0e      	ldr	r6, [pc, #56]	; (800cc34 <sbrk_aligned+0x3c>)
 800cbfc:	460c      	mov	r4, r1
 800cbfe:	6831      	ldr	r1, [r6, #0]
 800cc00:	4605      	mov	r5, r0
 800cc02:	b911      	cbnz	r1, 800cc0a <sbrk_aligned+0x12>
 800cc04:	f000 f8f6 	bl	800cdf4 <_sbrk_r>
 800cc08:	6030      	str	r0, [r6, #0]
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f000 f8f1 	bl	800cdf4 <_sbrk_r>
 800cc12:	1c43      	adds	r3, r0, #1
 800cc14:	d00a      	beq.n	800cc2c <sbrk_aligned+0x34>
 800cc16:	1cc4      	adds	r4, r0, #3
 800cc18:	f024 0403 	bic.w	r4, r4, #3
 800cc1c:	42a0      	cmp	r0, r4
 800cc1e:	d007      	beq.n	800cc30 <sbrk_aligned+0x38>
 800cc20:	1a21      	subs	r1, r4, r0
 800cc22:	4628      	mov	r0, r5
 800cc24:	f000 f8e6 	bl	800cdf4 <_sbrk_r>
 800cc28:	3001      	adds	r0, #1
 800cc2a:	d101      	bne.n	800cc30 <sbrk_aligned+0x38>
 800cc2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cc30:	4620      	mov	r0, r4
 800cc32:	bd70      	pop	{r4, r5, r6, pc}
 800cc34:	2000a25c 	.word	0x2000a25c

0800cc38 <_malloc_r>:
 800cc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3c:	1ccd      	adds	r5, r1, #3
 800cc3e:	f025 0503 	bic.w	r5, r5, #3
 800cc42:	3508      	adds	r5, #8
 800cc44:	2d0c      	cmp	r5, #12
 800cc46:	bf38      	it	cc
 800cc48:	250c      	movcc	r5, #12
 800cc4a:	2d00      	cmp	r5, #0
 800cc4c:	4607      	mov	r7, r0
 800cc4e:	db01      	blt.n	800cc54 <_malloc_r+0x1c>
 800cc50:	42a9      	cmp	r1, r5
 800cc52:	d905      	bls.n	800cc60 <_malloc_r+0x28>
 800cc54:	230c      	movs	r3, #12
 800cc56:	603b      	str	r3, [r7, #0]
 800cc58:	2600      	movs	r6, #0
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc60:	4e2e      	ldr	r6, [pc, #184]	; (800cd1c <_malloc_r+0xe4>)
 800cc62:	f000 f997 	bl	800cf94 <__malloc_lock>
 800cc66:	6833      	ldr	r3, [r6, #0]
 800cc68:	461c      	mov	r4, r3
 800cc6a:	bb34      	cbnz	r4, 800ccba <_malloc_r+0x82>
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	4638      	mov	r0, r7
 800cc70:	f7ff ffc2 	bl	800cbf8 <sbrk_aligned>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	4604      	mov	r4, r0
 800cc78:	d14d      	bne.n	800cd16 <_malloc_r+0xde>
 800cc7a:	6834      	ldr	r4, [r6, #0]
 800cc7c:	4626      	mov	r6, r4
 800cc7e:	2e00      	cmp	r6, #0
 800cc80:	d140      	bne.n	800cd04 <_malloc_r+0xcc>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	4631      	mov	r1, r6
 800cc86:	4638      	mov	r0, r7
 800cc88:	eb04 0803 	add.w	r8, r4, r3
 800cc8c:	f000 f8b2 	bl	800cdf4 <_sbrk_r>
 800cc90:	4580      	cmp	r8, r0
 800cc92:	d13a      	bne.n	800cd0a <_malloc_r+0xd2>
 800cc94:	6821      	ldr	r1, [r4, #0]
 800cc96:	3503      	adds	r5, #3
 800cc98:	1a6d      	subs	r5, r5, r1
 800cc9a:	f025 0503 	bic.w	r5, r5, #3
 800cc9e:	3508      	adds	r5, #8
 800cca0:	2d0c      	cmp	r5, #12
 800cca2:	bf38      	it	cc
 800cca4:	250c      	movcc	r5, #12
 800cca6:	4629      	mov	r1, r5
 800cca8:	4638      	mov	r0, r7
 800ccaa:	f7ff ffa5 	bl	800cbf8 <sbrk_aligned>
 800ccae:	3001      	adds	r0, #1
 800ccb0:	d02b      	beq.n	800cd0a <_malloc_r+0xd2>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	442b      	add	r3, r5
 800ccb6:	6023      	str	r3, [r4, #0]
 800ccb8:	e00e      	b.n	800ccd8 <_malloc_r+0xa0>
 800ccba:	6822      	ldr	r2, [r4, #0]
 800ccbc:	1b52      	subs	r2, r2, r5
 800ccbe:	d41e      	bmi.n	800ccfe <_malloc_r+0xc6>
 800ccc0:	2a0b      	cmp	r2, #11
 800ccc2:	d916      	bls.n	800ccf2 <_malloc_r+0xba>
 800ccc4:	1961      	adds	r1, r4, r5
 800ccc6:	42a3      	cmp	r3, r4
 800ccc8:	6025      	str	r5, [r4, #0]
 800ccca:	bf18      	it	ne
 800cccc:	6059      	strne	r1, [r3, #4]
 800ccce:	6863      	ldr	r3, [r4, #4]
 800ccd0:	bf08      	it	eq
 800ccd2:	6031      	streq	r1, [r6, #0]
 800ccd4:	5162      	str	r2, [r4, r5]
 800ccd6:	604b      	str	r3, [r1, #4]
 800ccd8:	4638      	mov	r0, r7
 800ccda:	f104 060b 	add.w	r6, r4, #11
 800ccde:	f000 f95f 	bl	800cfa0 <__malloc_unlock>
 800cce2:	f026 0607 	bic.w	r6, r6, #7
 800cce6:	1d23      	adds	r3, r4, #4
 800cce8:	1af2      	subs	r2, r6, r3
 800ccea:	d0b6      	beq.n	800cc5a <_malloc_r+0x22>
 800ccec:	1b9b      	subs	r3, r3, r6
 800ccee:	50a3      	str	r3, [r4, r2]
 800ccf0:	e7b3      	b.n	800cc5a <_malloc_r+0x22>
 800ccf2:	6862      	ldr	r2, [r4, #4]
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	bf0c      	ite	eq
 800ccf8:	6032      	streq	r2, [r6, #0]
 800ccfa:	605a      	strne	r2, [r3, #4]
 800ccfc:	e7ec      	b.n	800ccd8 <_malloc_r+0xa0>
 800ccfe:	4623      	mov	r3, r4
 800cd00:	6864      	ldr	r4, [r4, #4]
 800cd02:	e7b2      	b.n	800cc6a <_malloc_r+0x32>
 800cd04:	4634      	mov	r4, r6
 800cd06:	6876      	ldr	r6, [r6, #4]
 800cd08:	e7b9      	b.n	800cc7e <_malloc_r+0x46>
 800cd0a:	230c      	movs	r3, #12
 800cd0c:	603b      	str	r3, [r7, #0]
 800cd0e:	4638      	mov	r0, r7
 800cd10:	f000 f946 	bl	800cfa0 <__malloc_unlock>
 800cd14:	e7a1      	b.n	800cc5a <_malloc_r+0x22>
 800cd16:	6025      	str	r5, [r4, #0]
 800cd18:	e7de      	b.n	800ccd8 <_malloc_r+0xa0>
 800cd1a:	bf00      	nop
 800cd1c:	2000a258 	.word	0x2000a258

0800cd20 <cleanup_glue>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	460c      	mov	r4, r1
 800cd24:	6809      	ldr	r1, [r1, #0]
 800cd26:	4605      	mov	r5, r0
 800cd28:	b109      	cbz	r1, 800cd2e <cleanup_glue+0xe>
 800cd2a:	f7ff fff9 	bl	800cd20 <cleanup_glue>
 800cd2e:	4621      	mov	r1, r4
 800cd30:	4628      	mov	r0, r5
 800cd32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd36:	f000 b939 	b.w	800cfac <_free_r>
	...

0800cd3c <_reclaim_reent>:
 800cd3c:	4b2c      	ldr	r3, [pc, #176]	; (800cdf0 <_reclaim_reent+0xb4>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4283      	cmp	r3, r0
 800cd42:	b570      	push	{r4, r5, r6, lr}
 800cd44:	4604      	mov	r4, r0
 800cd46:	d051      	beq.n	800cdec <_reclaim_reent+0xb0>
 800cd48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cd4a:	b143      	cbz	r3, 800cd5e <_reclaim_reent+0x22>
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d14a      	bne.n	800cde8 <_reclaim_reent+0xac>
 800cd52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd54:	6819      	ldr	r1, [r3, #0]
 800cd56:	b111      	cbz	r1, 800cd5e <_reclaim_reent+0x22>
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 f927 	bl	800cfac <_free_r>
 800cd5e:	6961      	ldr	r1, [r4, #20]
 800cd60:	b111      	cbz	r1, 800cd68 <_reclaim_reent+0x2c>
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 f922 	bl	800cfac <_free_r>
 800cd68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cd6a:	b111      	cbz	r1, 800cd72 <_reclaim_reent+0x36>
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f000 f91d 	bl	800cfac <_free_r>
 800cd72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cd74:	b111      	cbz	r1, 800cd7c <_reclaim_reent+0x40>
 800cd76:	4620      	mov	r0, r4
 800cd78:	f000 f918 	bl	800cfac <_free_r>
 800cd7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cd7e:	b111      	cbz	r1, 800cd86 <_reclaim_reent+0x4a>
 800cd80:	4620      	mov	r0, r4
 800cd82:	f000 f913 	bl	800cfac <_free_r>
 800cd86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cd88:	b111      	cbz	r1, 800cd90 <_reclaim_reent+0x54>
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f000 f90e 	bl	800cfac <_free_r>
 800cd90:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cd92:	b111      	cbz	r1, 800cd9a <_reclaim_reent+0x5e>
 800cd94:	4620      	mov	r0, r4
 800cd96:	f000 f909 	bl	800cfac <_free_r>
 800cd9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cd9c:	b111      	cbz	r1, 800cda4 <_reclaim_reent+0x68>
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f000 f904 	bl	800cfac <_free_r>
 800cda4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cda6:	b111      	cbz	r1, 800cdae <_reclaim_reent+0x72>
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f000 f8ff 	bl	800cfac <_free_r>
 800cdae:	69a3      	ldr	r3, [r4, #24]
 800cdb0:	b1e3      	cbz	r3, 800cdec <_reclaim_reent+0xb0>
 800cdb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4798      	blx	r3
 800cdb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cdba:	b1b9      	cbz	r1, 800cdec <_reclaim_reent+0xb0>
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdc2:	f7ff bfad 	b.w	800cd20 <cleanup_glue>
 800cdc6:	5949      	ldr	r1, [r1, r5]
 800cdc8:	b941      	cbnz	r1, 800cddc <_reclaim_reent+0xa0>
 800cdca:	3504      	adds	r5, #4
 800cdcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdce:	2d80      	cmp	r5, #128	; 0x80
 800cdd0:	68d9      	ldr	r1, [r3, #12]
 800cdd2:	d1f8      	bne.n	800cdc6 <_reclaim_reent+0x8a>
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 f8e9 	bl	800cfac <_free_r>
 800cdda:	e7ba      	b.n	800cd52 <_reclaim_reent+0x16>
 800cddc:	680e      	ldr	r6, [r1, #0]
 800cdde:	4620      	mov	r0, r4
 800cde0:	f000 f8e4 	bl	800cfac <_free_r>
 800cde4:	4631      	mov	r1, r6
 800cde6:	e7ef      	b.n	800cdc8 <_reclaim_reent+0x8c>
 800cde8:	2500      	movs	r5, #0
 800cdea:	e7ef      	b.n	800cdcc <_reclaim_reent+0x90>
 800cdec:	bd70      	pop	{r4, r5, r6, pc}
 800cdee:	bf00      	nop
 800cdf0:	20004044 	.word	0x20004044

0800cdf4 <_sbrk_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4d06      	ldr	r5, [pc, #24]	; (800ce10 <_sbrk_r+0x1c>)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	4608      	mov	r0, r1
 800cdfe:	602b      	str	r3, [r5, #0]
 800ce00:	f7f4 fbe2 	bl	80015c8 <_sbrk>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d102      	bne.n	800ce0e <_sbrk_r+0x1a>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	b103      	cbz	r3, 800ce0e <_sbrk_r+0x1a>
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	2000a260 	.word	0x2000a260

0800ce14 <siprintf>:
 800ce14:	b40e      	push	{r1, r2, r3}
 800ce16:	b500      	push	{lr}
 800ce18:	b09c      	sub	sp, #112	; 0x70
 800ce1a:	ab1d      	add	r3, sp, #116	; 0x74
 800ce1c:	9002      	str	r0, [sp, #8]
 800ce1e:	9006      	str	r0, [sp, #24]
 800ce20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce24:	4809      	ldr	r0, [pc, #36]	; (800ce4c <siprintf+0x38>)
 800ce26:	9107      	str	r1, [sp, #28]
 800ce28:	9104      	str	r1, [sp, #16]
 800ce2a:	4909      	ldr	r1, [pc, #36]	; (800ce50 <siprintf+0x3c>)
 800ce2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce30:	9105      	str	r1, [sp, #20]
 800ce32:	6800      	ldr	r0, [r0, #0]
 800ce34:	9301      	str	r3, [sp, #4]
 800ce36:	a902      	add	r1, sp, #8
 800ce38:	f000 f960 	bl	800d0fc <_svfiprintf_r>
 800ce3c:	9b02      	ldr	r3, [sp, #8]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	701a      	strb	r2, [r3, #0]
 800ce42:	b01c      	add	sp, #112	; 0x70
 800ce44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce48:	b003      	add	sp, #12
 800ce4a:	4770      	bx	lr
 800ce4c:	20004044 	.word	0x20004044
 800ce50:	ffff0208 	.word	0xffff0208

0800ce54 <strncat>:
 800ce54:	b530      	push	{r4, r5, lr}
 800ce56:	4604      	mov	r4, r0
 800ce58:	7825      	ldrb	r5, [r4, #0]
 800ce5a:	4623      	mov	r3, r4
 800ce5c:	3401      	adds	r4, #1
 800ce5e:	2d00      	cmp	r5, #0
 800ce60:	d1fa      	bne.n	800ce58 <strncat+0x4>
 800ce62:	3a01      	subs	r2, #1
 800ce64:	d304      	bcc.n	800ce70 <strncat+0x1c>
 800ce66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce6a:	f803 4b01 	strb.w	r4, [r3], #1
 800ce6e:	b904      	cbnz	r4, 800ce72 <strncat+0x1e>
 800ce70:	bd30      	pop	{r4, r5, pc}
 800ce72:	2a00      	cmp	r2, #0
 800ce74:	d1f5      	bne.n	800ce62 <strncat+0xe>
 800ce76:	701a      	strb	r2, [r3, #0]
 800ce78:	e7f3      	b.n	800ce62 <strncat+0xe>
	...

0800ce7c <_strtol_l.constprop.0>:
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce82:	d001      	beq.n	800ce88 <_strtol_l.constprop.0+0xc>
 800ce84:	2b24      	cmp	r3, #36	; 0x24
 800ce86:	d906      	bls.n	800ce96 <_strtol_l.constprop.0+0x1a>
 800ce88:	f7ff fe74 	bl	800cb74 <__errno>
 800ce8c:	2316      	movs	r3, #22
 800ce8e:	6003      	str	r3, [r0, #0]
 800ce90:	2000      	movs	r0, #0
 800ce92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cf7c <_strtol_l.constprop.0+0x100>
 800ce9a:	460d      	mov	r5, r1
 800ce9c:	462e      	mov	r6, r5
 800ce9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cea2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cea6:	f017 0708 	ands.w	r7, r7, #8
 800ceaa:	d1f7      	bne.n	800ce9c <_strtol_l.constprop.0+0x20>
 800ceac:	2c2d      	cmp	r4, #45	; 0x2d
 800ceae:	d132      	bne.n	800cf16 <_strtol_l.constprop.0+0x9a>
 800ceb0:	782c      	ldrb	r4, [r5, #0]
 800ceb2:	2701      	movs	r7, #1
 800ceb4:	1cb5      	adds	r5, r6, #2
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d05b      	beq.n	800cf72 <_strtol_l.constprop.0+0xf6>
 800ceba:	2b10      	cmp	r3, #16
 800cebc:	d109      	bne.n	800ced2 <_strtol_l.constprop.0+0x56>
 800cebe:	2c30      	cmp	r4, #48	; 0x30
 800cec0:	d107      	bne.n	800ced2 <_strtol_l.constprop.0+0x56>
 800cec2:	782c      	ldrb	r4, [r5, #0]
 800cec4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cec8:	2c58      	cmp	r4, #88	; 0x58
 800ceca:	d14d      	bne.n	800cf68 <_strtol_l.constprop.0+0xec>
 800cecc:	786c      	ldrb	r4, [r5, #1]
 800cece:	2310      	movs	r3, #16
 800ced0:	3502      	adds	r5, #2
 800ced2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ced6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ceda:	f04f 0c00 	mov.w	ip, #0
 800cede:	fbb8 f9f3 	udiv	r9, r8, r3
 800cee2:	4666      	mov	r6, ip
 800cee4:	fb03 8a19 	mls	sl, r3, r9, r8
 800cee8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ceec:	f1be 0f09 	cmp.w	lr, #9
 800cef0:	d816      	bhi.n	800cf20 <_strtol_l.constprop.0+0xa4>
 800cef2:	4674      	mov	r4, lr
 800cef4:	42a3      	cmp	r3, r4
 800cef6:	dd24      	ble.n	800cf42 <_strtol_l.constprop.0+0xc6>
 800cef8:	f1bc 0f00 	cmp.w	ip, #0
 800cefc:	db1e      	blt.n	800cf3c <_strtol_l.constprop.0+0xc0>
 800cefe:	45b1      	cmp	r9, r6
 800cf00:	d31c      	bcc.n	800cf3c <_strtol_l.constprop.0+0xc0>
 800cf02:	d101      	bne.n	800cf08 <_strtol_l.constprop.0+0x8c>
 800cf04:	45a2      	cmp	sl, r4
 800cf06:	db19      	blt.n	800cf3c <_strtol_l.constprop.0+0xc0>
 800cf08:	fb06 4603 	mla	r6, r6, r3, r4
 800cf0c:	f04f 0c01 	mov.w	ip, #1
 800cf10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf14:	e7e8      	b.n	800cee8 <_strtol_l.constprop.0+0x6c>
 800cf16:	2c2b      	cmp	r4, #43	; 0x2b
 800cf18:	bf04      	itt	eq
 800cf1a:	782c      	ldrbeq	r4, [r5, #0]
 800cf1c:	1cb5      	addeq	r5, r6, #2
 800cf1e:	e7ca      	b.n	800ceb6 <_strtol_l.constprop.0+0x3a>
 800cf20:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cf24:	f1be 0f19 	cmp.w	lr, #25
 800cf28:	d801      	bhi.n	800cf2e <_strtol_l.constprop.0+0xb2>
 800cf2a:	3c37      	subs	r4, #55	; 0x37
 800cf2c:	e7e2      	b.n	800cef4 <_strtol_l.constprop.0+0x78>
 800cf2e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cf32:	f1be 0f19 	cmp.w	lr, #25
 800cf36:	d804      	bhi.n	800cf42 <_strtol_l.constprop.0+0xc6>
 800cf38:	3c57      	subs	r4, #87	; 0x57
 800cf3a:	e7db      	b.n	800cef4 <_strtol_l.constprop.0+0x78>
 800cf3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800cf40:	e7e6      	b.n	800cf10 <_strtol_l.constprop.0+0x94>
 800cf42:	f1bc 0f00 	cmp.w	ip, #0
 800cf46:	da05      	bge.n	800cf54 <_strtol_l.constprop.0+0xd8>
 800cf48:	2322      	movs	r3, #34	; 0x22
 800cf4a:	6003      	str	r3, [r0, #0]
 800cf4c:	4646      	mov	r6, r8
 800cf4e:	b942      	cbnz	r2, 800cf62 <_strtol_l.constprop.0+0xe6>
 800cf50:	4630      	mov	r0, r6
 800cf52:	e79e      	b.n	800ce92 <_strtol_l.constprop.0+0x16>
 800cf54:	b107      	cbz	r7, 800cf58 <_strtol_l.constprop.0+0xdc>
 800cf56:	4276      	negs	r6, r6
 800cf58:	2a00      	cmp	r2, #0
 800cf5a:	d0f9      	beq.n	800cf50 <_strtol_l.constprop.0+0xd4>
 800cf5c:	f1bc 0f00 	cmp.w	ip, #0
 800cf60:	d000      	beq.n	800cf64 <_strtol_l.constprop.0+0xe8>
 800cf62:	1e69      	subs	r1, r5, #1
 800cf64:	6011      	str	r1, [r2, #0]
 800cf66:	e7f3      	b.n	800cf50 <_strtol_l.constprop.0+0xd4>
 800cf68:	2430      	movs	r4, #48	; 0x30
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1b1      	bne.n	800ced2 <_strtol_l.constprop.0+0x56>
 800cf6e:	2308      	movs	r3, #8
 800cf70:	e7af      	b.n	800ced2 <_strtol_l.constprop.0+0x56>
 800cf72:	2c30      	cmp	r4, #48	; 0x30
 800cf74:	d0a5      	beq.n	800cec2 <_strtol_l.constprop.0+0x46>
 800cf76:	230a      	movs	r3, #10
 800cf78:	e7ab      	b.n	800ced2 <_strtol_l.constprop.0+0x56>
 800cf7a:	bf00      	nop
 800cf7c:	0803a1e5 	.word	0x0803a1e5

0800cf80 <strtol>:
 800cf80:	4613      	mov	r3, r2
 800cf82:	460a      	mov	r2, r1
 800cf84:	4601      	mov	r1, r0
 800cf86:	4802      	ldr	r0, [pc, #8]	; (800cf90 <strtol+0x10>)
 800cf88:	6800      	ldr	r0, [r0, #0]
 800cf8a:	f7ff bf77 	b.w	800ce7c <_strtol_l.constprop.0>
 800cf8e:	bf00      	nop
 800cf90:	20004044 	.word	0x20004044

0800cf94 <__malloc_lock>:
 800cf94:	4801      	ldr	r0, [pc, #4]	; (800cf9c <__malloc_lock+0x8>)
 800cf96:	f7ff be17 	b.w	800cbc8 <__retarget_lock_acquire_recursive>
 800cf9a:	bf00      	nop
 800cf9c:	2000a254 	.word	0x2000a254

0800cfa0 <__malloc_unlock>:
 800cfa0:	4801      	ldr	r0, [pc, #4]	; (800cfa8 <__malloc_unlock+0x8>)
 800cfa2:	f7ff be12 	b.w	800cbca <__retarget_lock_release_recursive>
 800cfa6:	bf00      	nop
 800cfa8:	2000a254 	.word	0x2000a254

0800cfac <_free_r>:
 800cfac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfae:	2900      	cmp	r1, #0
 800cfb0:	d044      	beq.n	800d03c <_free_r+0x90>
 800cfb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfb6:	9001      	str	r0, [sp, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f1a1 0404 	sub.w	r4, r1, #4
 800cfbe:	bfb8      	it	lt
 800cfc0:	18e4      	addlt	r4, r4, r3
 800cfc2:	f7ff ffe7 	bl	800cf94 <__malloc_lock>
 800cfc6:	4a1e      	ldr	r2, [pc, #120]	; (800d040 <_free_r+0x94>)
 800cfc8:	9801      	ldr	r0, [sp, #4]
 800cfca:	6813      	ldr	r3, [r2, #0]
 800cfcc:	b933      	cbnz	r3, 800cfdc <_free_r+0x30>
 800cfce:	6063      	str	r3, [r4, #4]
 800cfd0:	6014      	str	r4, [r2, #0]
 800cfd2:	b003      	add	sp, #12
 800cfd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfd8:	f7ff bfe2 	b.w	800cfa0 <__malloc_unlock>
 800cfdc:	42a3      	cmp	r3, r4
 800cfde:	d908      	bls.n	800cff2 <_free_r+0x46>
 800cfe0:	6825      	ldr	r5, [r4, #0]
 800cfe2:	1961      	adds	r1, r4, r5
 800cfe4:	428b      	cmp	r3, r1
 800cfe6:	bf01      	itttt	eq
 800cfe8:	6819      	ldreq	r1, [r3, #0]
 800cfea:	685b      	ldreq	r3, [r3, #4]
 800cfec:	1949      	addeq	r1, r1, r5
 800cfee:	6021      	streq	r1, [r4, #0]
 800cff0:	e7ed      	b.n	800cfce <_free_r+0x22>
 800cff2:	461a      	mov	r2, r3
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	b10b      	cbz	r3, 800cffc <_free_r+0x50>
 800cff8:	42a3      	cmp	r3, r4
 800cffa:	d9fa      	bls.n	800cff2 <_free_r+0x46>
 800cffc:	6811      	ldr	r1, [r2, #0]
 800cffe:	1855      	adds	r5, r2, r1
 800d000:	42a5      	cmp	r5, r4
 800d002:	d10b      	bne.n	800d01c <_free_r+0x70>
 800d004:	6824      	ldr	r4, [r4, #0]
 800d006:	4421      	add	r1, r4
 800d008:	1854      	adds	r4, r2, r1
 800d00a:	42a3      	cmp	r3, r4
 800d00c:	6011      	str	r1, [r2, #0]
 800d00e:	d1e0      	bne.n	800cfd2 <_free_r+0x26>
 800d010:	681c      	ldr	r4, [r3, #0]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	6053      	str	r3, [r2, #4]
 800d016:	4421      	add	r1, r4
 800d018:	6011      	str	r1, [r2, #0]
 800d01a:	e7da      	b.n	800cfd2 <_free_r+0x26>
 800d01c:	d902      	bls.n	800d024 <_free_r+0x78>
 800d01e:	230c      	movs	r3, #12
 800d020:	6003      	str	r3, [r0, #0]
 800d022:	e7d6      	b.n	800cfd2 <_free_r+0x26>
 800d024:	6825      	ldr	r5, [r4, #0]
 800d026:	1961      	adds	r1, r4, r5
 800d028:	428b      	cmp	r3, r1
 800d02a:	bf04      	itt	eq
 800d02c:	6819      	ldreq	r1, [r3, #0]
 800d02e:	685b      	ldreq	r3, [r3, #4]
 800d030:	6063      	str	r3, [r4, #4]
 800d032:	bf04      	itt	eq
 800d034:	1949      	addeq	r1, r1, r5
 800d036:	6021      	streq	r1, [r4, #0]
 800d038:	6054      	str	r4, [r2, #4]
 800d03a:	e7ca      	b.n	800cfd2 <_free_r+0x26>
 800d03c:	b003      	add	sp, #12
 800d03e:	bd30      	pop	{r4, r5, pc}
 800d040:	2000a258 	.word	0x2000a258

0800d044 <__ssputs_r>:
 800d044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d048:	688e      	ldr	r6, [r1, #8]
 800d04a:	429e      	cmp	r6, r3
 800d04c:	4682      	mov	sl, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	4690      	mov	r8, r2
 800d052:	461f      	mov	r7, r3
 800d054:	d838      	bhi.n	800d0c8 <__ssputs_r+0x84>
 800d056:	898a      	ldrh	r2, [r1, #12]
 800d058:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d05c:	d032      	beq.n	800d0c4 <__ssputs_r+0x80>
 800d05e:	6825      	ldr	r5, [r4, #0]
 800d060:	6909      	ldr	r1, [r1, #16]
 800d062:	eba5 0901 	sub.w	r9, r5, r1
 800d066:	6965      	ldr	r5, [r4, #20]
 800d068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d06c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d070:	3301      	adds	r3, #1
 800d072:	444b      	add	r3, r9
 800d074:	106d      	asrs	r5, r5, #1
 800d076:	429d      	cmp	r5, r3
 800d078:	bf38      	it	cc
 800d07a:	461d      	movcc	r5, r3
 800d07c:	0553      	lsls	r3, r2, #21
 800d07e:	d531      	bpl.n	800d0e4 <__ssputs_r+0xa0>
 800d080:	4629      	mov	r1, r5
 800d082:	f7ff fdd9 	bl	800cc38 <_malloc_r>
 800d086:	4606      	mov	r6, r0
 800d088:	b950      	cbnz	r0, 800d0a0 <__ssputs_r+0x5c>
 800d08a:	230c      	movs	r3, #12
 800d08c:	f8ca 3000 	str.w	r3, [sl]
 800d090:	89a3      	ldrh	r3, [r4, #12]
 800d092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d096:	81a3      	strh	r3, [r4, #12]
 800d098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a0:	6921      	ldr	r1, [r4, #16]
 800d0a2:	464a      	mov	r2, r9
 800d0a4:	f7ff fd92 	bl	800cbcc <memcpy>
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b2:	81a3      	strh	r3, [r4, #12]
 800d0b4:	6126      	str	r6, [r4, #16]
 800d0b6:	6165      	str	r5, [r4, #20]
 800d0b8:	444e      	add	r6, r9
 800d0ba:	eba5 0509 	sub.w	r5, r5, r9
 800d0be:	6026      	str	r6, [r4, #0]
 800d0c0:	60a5      	str	r5, [r4, #8]
 800d0c2:	463e      	mov	r6, r7
 800d0c4:	42be      	cmp	r6, r7
 800d0c6:	d900      	bls.n	800d0ca <__ssputs_r+0x86>
 800d0c8:	463e      	mov	r6, r7
 800d0ca:	6820      	ldr	r0, [r4, #0]
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	4641      	mov	r1, r8
 800d0d0:	f000 faa8 	bl	800d624 <memmove>
 800d0d4:	68a3      	ldr	r3, [r4, #8]
 800d0d6:	1b9b      	subs	r3, r3, r6
 800d0d8:	60a3      	str	r3, [r4, #8]
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	4433      	add	r3, r6
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	e7db      	b.n	800d09c <__ssputs_r+0x58>
 800d0e4:	462a      	mov	r2, r5
 800d0e6:	f000 fab7 	bl	800d658 <_realloc_r>
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d1e1      	bne.n	800d0b4 <__ssputs_r+0x70>
 800d0f0:	6921      	ldr	r1, [r4, #16]
 800d0f2:	4650      	mov	r0, sl
 800d0f4:	f7ff ff5a 	bl	800cfac <_free_r>
 800d0f8:	e7c7      	b.n	800d08a <__ssputs_r+0x46>
	...

0800d0fc <_svfiprintf_r>:
 800d0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d100:	4698      	mov	r8, r3
 800d102:	898b      	ldrh	r3, [r1, #12]
 800d104:	061b      	lsls	r3, r3, #24
 800d106:	b09d      	sub	sp, #116	; 0x74
 800d108:	4607      	mov	r7, r0
 800d10a:	460d      	mov	r5, r1
 800d10c:	4614      	mov	r4, r2
 800d10e:	d50e      	bpl.n	800d12e <_svfiprintf_r+0x32>
 800d110:	690b      	ldr	r3, [r1, #16]
 800d112:	b963      	cbnz	r3, 800d12e <_svfiprintf_r+0x32>
 800d114:	2140      	movs	r1, #64	; 0x40
 800d116:	f7ff fd8f 	bl	800cc38 <_malloc_r>
 800d11a:	6028      	str	r0, [r5, #0]
 800d11c:	6128      	str	r0, [r5, #16]
 800d11e:	b920      	cbnz	r0, 800d12a <_svfiprintf_r+0x2e>
 800d120:	230c      	movs	r3, #12
 800d122:	603b      	str	r3, [r7, #0]
 800d124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d128:	e0d1      	b.n	800d2ce <_svfiprintf_r+0x1d2>
 800d12a:	2340      	movs	r3, #64	; 0x40
 800d12c:	616b      	str	r3, [r5, #20]
 800d12e:	2300      	movs	r3, #0
 800d130:	9309      	str	r3, [sp, #36]	; 0x24
 800d132:	2320      	movs	r3, #32
 800d134:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d138:	f8cd 800c 	str.w	r8, [sp, #12]
 800d13c:	2330      	movs	r3, #48	; 0x30
 800d13e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d2e8 <_svfiprintf_r+0x1ec>
 800d142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d146:	f04f 0901 	mov.w	r9, #1
 800d14a:	4623      	mov	r3, r4
 800d14c:	469a      	mov	sl, r3
 800d14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d152:	b10a      	cbz	r2, 800d158 <_svfiprintf_r+0x5c>
 800d154:	2a25      	cmp	r2, #37	; 0x25
 800d156:	d1f9      	bne.n	800d14c <_svfiprintf_r+0x50>
 800d158:	ebba 0b04 	subs.w	fp, sl, r4
 800d15c:	d00b      	beq.n	800d176 <_svfiprintf_r+0x7a>
 800d15e:	465b      	mov	r3, fp
 800d160:	4622      	mov	r2, r4
 800d162:	4629      	mov	r1, r5
 800d164:	4638      	mov	r0, r7
 800d166:	f7ff ff6d 	bl	800d044 <__ssputs_r>
 800d16a:	3001      	adds	r0, #1
 800d16c:	f000 80aa 	beq.w	800d2c4 <_svfiprintf_r+0x1c8>
 800d170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d172:	445a      	add	r2, fp
 800d174:	9209      	str	r2, [sp, #36]	; 0x24
 800d176:	f89a 3000 	ldrb.w	r3, [sl]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 80a2 	beq.w	800d2c4 <_svfiprintf_r+0x1c8>
 800d180:	2300      	movs	r3, #0
 800d182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d18a:	f10a 0a01 	add.w	sl, sl, #1
 800d18e:	9304      	str	r3, [sp, #16]
 800d190:	9307      	str	r3, [sp, #28]
 800d192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d196:	931a      	str	r3, [sp, #104]	; 0x68
 800d198:	4654      	mov	r4, sl
 800d19a:	2205      	movs	r2, #5
 800d19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a0:	4851      	ldr	r0, [pc, #324]	; (800d2e8 <_svfiprintf_r+0x1ec>)
 800d1a2:	f7f3 f81d 	bl	80001e0 <memchr>
 800d1a6:	9a04      	ldr	r2, [sp, #16]
 800d1a8:	b9d8      	cbnz	r0, 800d1e2 <_svfiprintf_r+0xe6>
 800d1aa:	06d0      	lsls	r0, r2, #27
 800d1ac:	bf44      	itt	mi
 800d1ae:	2320      	movmi	r3, #32
 800d1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1b4:	0711      	lsls	r1, r2, #28
 800d1b6:	bf44      	itt	mi
 800d1b8:	232b      	movmi	r3, #43	; 0x2b
 800d1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1be:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1c4:	d015      	beq.n	800d1f2 <_svfiprintf_r+0xf6>
 800d1c6:	9a07      	ldr	r2, [sp, #28]
 800d1c8:	4654      	mov	r4, sl
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	f04f 0c0a 	mov.w	ip, #10
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1d6:	3b30      	subs	r3, #48	; 0x30
 800d1d8:	2b09      	cmp	r3, #9
 800d1da:	d94e      	bls.n	800d27a <_svfiprintf_r+0x17e>
 800d1dc:	b1b0      	cbz	r0, 800d20c <_svfiprintf_r+0x110>
 800d1de:	9207      	str	r2, [sp, #28]
 800d1e0:	e014      	b.n	800d20c <_svfiprintf_r+0x110>
 800d1e2:	eba0 0308 	sub.w	r3, r0, r8
 800d1e6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	9304      	str	r3, [sp, #16]
 800d1ee:	46a2      	mov	sl, r4
 800d1f0:	e7d2      	b.n	800d198 <_svfiprintf_r+0x9c>
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	1d19      	adds	r1, r3, #4
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	9103      	str	r1, [sp, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	bfbb      	ittet	lt
 800d1fe:	425b      	neglt	r3, r3
 800d200:	f042 0202 	orrlt.w	r2, r2, #2
 800d204:	9307      	strge	r3, [sp, #28]
 800d206:	9307      	strlt	r3, [sp, #28]
 800d208:	bfb8      	it	lt
 800d20a:	9204      	strlt	r2, [sp, #16]
 800d20c:	7823      	ldrb	r3, [r4, #0]
 800d20e:	2b2e      	cmp	r3, #46	; 0x2e
 800d210:	d10c      	bne.n	800d22c <_svfiprintf_r+0x130>
 800d212:	7863      	ldrb	r3, [r4, #1]
 800d214:	2b2a      	cmp	r3, #42	; 0x2a
 800d216:	d135      	bne.n	800d284 <_svfiprintf_r+0x188>
 800d218:	9b03      	ldr	r3, [sp, #12]
 800d21a:	1d1a      	adds	r2, r3, #4
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	9203      	str	r2, [sp, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	bfb8      	it	lt
 800d224:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d228:	3402      	adds	r4, #2
 800d22a:	9305      	str	r3, [sp, #20]
 800d22c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d2f8 <_svfiprintf_r+0x1fc>
 800d230:	7821      	ldrb	r1, [r4, #0]
 800d232:	2203      	movs	r2, #3
 800d234:	4650      	mov	r0, sl
 800d236:	f7f2 ffd3 	bl	80001e0 <memchr>
 800d23a:	b140      	cbz	r0, 800d24e <_svfiprintf_r+0x152>
 800d23c:	2340      	movs	r3, #64	; 0x40
 800d23e:	eba0 000a 	sub.w	r0, r0, sl
 800d242:	fa03 f000 	lsl.w	r0, r3, r0
 800d246:	9b04      	ldr	r3, [sp, #16]
 800d248:	4303      	orrs	r3, r0
 800d24a:	3401      	adds	r4, #1
 800d24c:	9304      	str	r3, [sp, #16]
 800d24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d252:	4826      	ldr	r0, [pc, #152]	; (800d2ec <_svfiprintf_r+0x1f0>)
 800d254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d258:	2206      	movs	r2, #6
 800d25a:	f7f2 ffc1 	bl	80001e0 <memchr>
 800d25e:	2800      	cmp	r0, #0
 800d260:	d038      	beq.n	800d2d4 <_svfiprintf_r+0x1d8>
 800d262:	4b23      	ldr	r3, [pc, #140]	; (800d2f0 <_svfiprintf_r+0x1f4>)
 800d264:	bb1b      	cbnz	r3, 800d2ae <_svfiprintf_r+0x1b2>
 800d266:	9b03      	ldr	r3, [sp, #12]
 800d268:	3307      	adds	r3, #7
 800d26a:	f023 0307 	bic.w	r3, r3, #7
 800d26e:	3308      	adds	r3, #8
 800d270:	9303      	str	r3, [sp, #12]
 800d272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d274:	4433      	add	r3, r6
 800d276:	9309      	str	r3, [sp, #36]	; 0x24
 800d278:	e767      	b.n	800d14a <_svfiprintf_r+0x4e>
 800d27a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d27e:	460c      	mov	r4, r1
 800d280:	2001      	movs	r0, #1
 800d282:	e7a5      	b.n	800d1d0 <_svfiprintf_r+0xd4>
 800d284:	2300      	movs	r3, #0
 800d286:	3401      	adds	r4, #1
 800d288:	9305      	str	r3, [sp, #20]
 800d28a:	4619      	mov	r1, r3
 800d28c:	f04f 0c0a 	mov.w	ip, #10
 800d290:	4620      	mov	r0, r4
 800d292:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d296:	3a30      	subs	r2, #48	; 0x30
 800d298:	2a09      	cmp	r2, #9
 800d29a:	d903      	bls.n	800d2a4 <_svfiprintf_r+0x1a8>
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d0c5      	beq.n	800d22c <_svfiprintf_r+0x130>
 800d2a0:	9105      	str	r1, [sp, #20]
 800d2a2:	e7c3      	b.n	800d22c <_svfiprintf_r+0x130>
 800d2a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e7f0      	b.n	800d290 <_svfiprintf_r+0x194>
 800d2ae:	ab03      	add	r3, sp, #12
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	462a      	mov	r2, r5
 800d2b4:	4b0f      	ldr	r3, [pc, #60]	; (800d2f4 <_svfiprintf_r+0x1f8>)
 800d2b6:	a904      	add	r1, sp, #16
 800d2b8:	4638      	mov	r0, r7
 800d2ba:	f3af 8000 	nop.w
 800d2be:	1c42      	adds	r2, r0, #1
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	d1d6      	bne.n	800d272 <_svfiprintf_r+0x176>
 800d2c4:	89ab      	ldrh	r3, [r5, #12]
 800d2c6:	065b      	lsls	r3, r3, #25
 800d2c8:	f53f af2c 	bmi.w	800d124 <_svfiprintf_r+0x28>
 800d2cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2ce:	b01d      	add	sp, #116	; 0x74
 800d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d4:	ab03      	add	r3, sp, #12
 800d2d6:	9300      	str	r3, [sp, #0]
 800d2d8:	462a      	mov	r2, r5
 800d2da:	4b06      	ldr	r3, [pc, #24]	; (800d2f4 <_svfiprintf_r+0x1f8>)
 800d2dc:	a904      	add	r1, sp, #16
 800d2de:	4638      	mov	r0, r7
 800d2e0:	f000 f87a 	bl	800d3d8 <_printf_i>
 800d2e4:	e7eb      	b.n	800d2be <_svfiprintf_r+0x1c2>
 800d2e6:	bf00      	nop
 800d2e8:	0803a2e5 	.word	0x0803a2e5
 800d2ec:	0803a2ef 	.word	0x0803a2ef
 800d2f0:	00000000 	.word	0x00000000
 800d2f4:	0800d045 	.word	0x0800d045
 800d2f8:	0803a2eb 	.word	0x0803a2eb

0800d2fc <_printf_common>:
 800d2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d300:	4616      	mov	r6, r2
 800d302:	4699      	mov	r9, r3
 800d304:	688a      	ldr	r2, [r1, #8]
 800d306:	690b      	ldr	r3, [r1, #16]
 800d308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d30c:	4293      	cmp	r3, r2
 800d30e:	bfb8      	it	lt
 800d310:	4613      	movlt	r3, r2
 800d312:	6033      	str	r3, [r6, #0]
 800d314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d318:	4607      	mov	r7, r0
 800d31a:	460c      	mov	r4, r1
 800d31c:	b10a      	cbz	r2, 800d322 <_printf_common+0x26>
 800d31e:	3301      	adds	r3, #1
 800d320:	6033      	str	r3, [r6, #0]
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	0699      	lsls	r1, r3, #26
 800d326:	bf42      	ittt	mi
 800d328:	6833      	ldrmi	r3, [r6, #0]
 800d32a:	3302      	addmi	r3, #2
 800d32c:	6033      	strmi	r3, [r6, #0]
 800d32e:	6825      	ldr	r5, [r4, #0]
 800d330:	f015 0506 	ands.w	r5, r5, #6
 800d334:	d106      	bne.n	800d344 <_printf_common+0x48>
 800d336:	f104 0a19 	add.w	sl, r4, #25
 800d33a:	68e3      	ldr	r3, [r4, #12]
 800d33c:	6832      	ldr	r2, [r6, #0]
 800d33e:	1a9b      	subs	r3, r3, r2
 800d340:	42ab      	cmp	r3, r5
 800d342:	dc26      	bgt.n	800d392 <_printf_common+0x96>
 800d344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d348:	1e13      	subs	r3, r2, #0
 800d34a:	6822      	ldr	r2, [r4, #0]
 800d34c:	bf18      	it	ne
 800d34e:	2301      	movne	r3, #1
 800d350:	0692      	lsls	r2, r2, #26
 800d352:	d42b      	bmi.n	800d3ac <_printf_common+0xb0>
 800d354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d358:	4649      	mov	r1, r9
 800d35a:	4638      	mov	r0, r7
 800d35c:	47c0      	blx	r8
 800d35e:	3001      	adds	r0, #1
 800d360:	d01e      	beq.n	800d3a0 <_printf_common+0xa4>
 800d362:	6823      	ldr	r3, [r4, #0]
 800d364:	68e5      	ldr	r5, [r4, #12]
 800d366:	6832      	ldr	r2, [r6, #0]
 800d368:	f003 0306 	and.w	r3, r3, #6
 800d36c:	2b04      	cmp	r3, #4
 800d36e:	bf08      	it	eq
 800d370:	1aad      	subeq	r5, r5, r2
 800d372:	68a3      	ldr	r3, [r4, #8]
 800d374:	6922      	ldr	r2, [r4, #16]
 800d376:	bf0c      	ite	eq
 800d378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d37c:	2500      	movne	r5, #0
 800d37e:	4293      	cmp	r3, r2
 800d380:	bfc4      	itt	gt
 800d382:	1a9b      	subgt	r3, r3, r2
 800d384:	18ed      	addgt	r5, r5, r3
 800d386:	2600      	movs	r6, #0
 800d388:	341a      	adds	r4, #26
 800d38a:	42b5      	cmp	r5, r6
 800d38c:	d11a      	bne.n	800d3c4 <_printf_common+0xc8>
 800d38e:	2000      	movs	r0, #0
 800d390:	e008      	b.n	800d3a4 <_printf_common+0xa8>
 800d392:	2301      	movs	r3, #1
 800d394:	4652      	mov	r2, sl
 800d396:	4649      	mov	r1, r9
 800d398:	4638      	mov	r0, r7
 800d39a:	47c0      	blx	r8
 800d39c:	3001      	adds	r0, #1
 800d39e:	d103      	bne.n	800d3a8 <_printf_common+0xac>
 800d3a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a8:	3501      	adds	r5, #1
 800d3aa:	e7c6      	b.n	800d33a <_printf_common+0x3e>
 800d3ac:	18e1      	adds	r1, r4, r3
 800d3ae:	1c5a      	adds	r2, r3, #1
 800d3b0:	2030      	movs	r0, #48	; 0x30
 800d3b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3b6:	4422      	add	r2, r4
 800d3b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3c0:	3302      	adds	r3, #2
 800d3c2:	e7c7      	b.n	800d354 <_printf_common+0x58>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	4649      	mov	r1, r9
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	47c0      	blx	r8
 800d3ce:	3001      	adds	r0, #1
 800d3d0:	d0e6      	beq.n	800d3a0 <_printf_common+0xa4>
 800d3d2:	3601      	adds	r6, #1
 800d3d4:	e7d9      	b.n	800d38a <_printf_common+0x8e>
	...

0800d3d8 <_printf_i>:
 800d3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3dc:	7e0f      	ldrb	r7, [r1, #24]
 800d3de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d3e0:	2f78      	cmp	r7, #120	; 0x78
 800d3e2:	4691      	mov	r9, r2
 800d3e4:	4680      	mov	r8, r0
 800d3e6:	460c      	mov	r4, r1
 800d3e8:	469a      	mov	sl, r3
 800d3ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d3ee:	d807      	bhi.n	800d400 <_printf_i+0x28>
 800d3f0:	2f62      	cmp	r7, #98	; 0x62
 800d3f2:	d80a      	bhi.n	800d40a <_printf_i+0x32>
 800d3f4:	2f00      	cmp	r7, #0
 800d3f6:	f000 80d8 	beq.w	800d5aa <_printf_i+0x1d2>
 800d3fa:	2f58      	cmp	r7, #88	; 0x58
 800d3fc:	f000 80a3 	beq.w	800d546 <_printf_i+0x16e>
 800d400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d408:	e03a      	b.n	800d480 <_printf_i+0xa8>
 800d40a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d40e:	2b15      	cmp	r3, #21
 800d410:	d8f6      	bhi.n	800d400 <_printf_i+0x28>
 800d412:	a101      	add	r1, pc, #4	; (adr r1, 800d418 <_printf_i+0x40>)
 800d414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d418:	0800d471 	.word	0x0800d471
 800d41c:	0800d485 	.word	0x0800d485
 800d420:	0800d401 	.word	0x0800d401
 800d424:	0800d401 	.word	0x0800d401
 800d428:	0800d401 	.word	0x0800d401
 800d42c:	0800d401 	.word	0x0800d401
 800d430:	0800d485 	.word	0x0800d485
 800d434:	0800d401 	.word	0x0800d401
 800d438:	0800d401 	.word	0x0800d401
 800d43c:	0800d401 	.word	0x0800d401
 800d440:	0800d401 	.word	0x0800d401
 800d444:	0800d591 	.word	0x0800d591
 800d448:	0800d4b5 	.word	0x0800d4b5
 800d44c:	0800d573 	.word	0x0800d573
 800d450:	0800d401 	.word	0x0800d401
 800d454:	0800d401 	.word	0x0800d401
 800d458:	0800d5b3 	.word	0x0800d5b3
 800d45c:	0800d401 	.word	0x0800d401
 800d460:	0800d4b5 	.word	0x0800d4b5
 800d464:	0800d401 	.word	0x0800d401
 800d468:	0800d401 	.word	0x0800d401
 800d46c:	0800d57b 	.word	0x0800d57b
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	1d1a      	adds	r2, r3, #4
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	602a      	str	r2, [r5, #0]
 800d478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d480:	2301      	movs	r3, #1
 800d482:	e0a3      	b.n	800d5cc <_printf_i+0x1f4>
 800d484:	6820      	ldr	r0, [r4, #0]
 800d486:	6829      	ldr	r1, [r5, #0]
 800d488:	0606      	lsls	r6, r0, #24
 800d48a:	f101 0304 	add.w	r3, r1, #4
 800d48e:	d50a      	bpl.n	800d4a6 <_printf_i+0xce>
 800d490:	680e      	ldr	r6, [r1, #0]
 800d492:	602b      	str	r3, [r5, #0]
 800d494:	2e00      	cmp	r6, #0
 800d496:	da03      	bge.n	800d4a0 <_printf_i+0xc8>
 800d498:	232d      	movs	r3, #45	; 0x2d
 800d49a:	4276      	negs	r6, r6
 800d49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4a0:	485e      	ldr	r0, [pc, #376]	; (800d61c <_printf_i+0x244>)
 800d4a2:	230a      	movs	r3, #10
 800d4a4:	e019      	b.n	800d4da <_printf_i+0x102>
 800d4a6:	680e      	ldr	r6, [r1, #0]
 800d4a8:	602b      	str	r3, [r5, #0]
 800d4aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d4ae:	bf18      	it	ne
 800d4b0:	b236      	sxthne	r6, r6
 800d4b2:	e7ef      	b.n	800d494 <_printf_i+0xbc>
 800d4b4:	682b      	ldr	r3, [r5, #0]
 800d4b6:	6820      	ldr	r0, [r4, #0]
 800d4b8:	1d19      	adds	r1, r3, #4
 800d4ba:	6029      	str	r1, [r5, #0]
 800d4bc:	0601      	lsls	r1, r0, #24
 800d4be:	d501      	bpl.n	800d4c4 <_printf_i+0xec>
 800d4c0:	681e      	ldr	r6, [r3, #0]
 800d4c2:	e002      	b.n	800d4ca <_printf_i+0xf2>
 800d4c4:	0646      	lsls	r6, r0, #25
 800d4c6:	d5fb      	bpl.n	800d4c0 <_printf_i+0xe8>
 800d4c8:	881e      	ldrh	r6, [r3, #0]
 800d4ca:	4854      	ldr	r0, [pc, #336]	; (800d61c <_printf_i+0x244>)
 800d4cc:	2f6f      	cmp	r7, #111	; 0x6f
 800d4ce:	bf0c      	ite	eq
 800d4d0:	2308      	moveq	r3, #8
 800d4d2:	230a      	movne	r3, #10
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4da:	6865      	ldr	r5, [r4, #4]
 800d4dc:	60a5      	str	r5, [r4, #8]
 800d4de:	2d00      	cmp	r5, #0
 800d4e0:	bfa2      	ittt	ge
 800d4e2:	6821      	ldrge	r1, [r4, #0]
 800d4e4:	f021 0104 	bicge.w	r1, r1, #4
 800d4e8:	6021      	strge	r1, [r4, #0]
 800d4ea:	b90e      	cbnz	r6, 800d4f0 <_printf_i+0x118>
 800d4ec:	2d00      	cmp	r5, #0
 800d4ee:	d04d      	beq.n	800d58c <_printf_i+0x1b4>
 800d4f0:	4615      	mov	r5, r2
 800d4f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d4f6:	fb03 6711 	mls	r7, r3, r1, r6
 800d4fa:	5dc7      	ldrb	r7, [r0, r7]
 800d4fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d500:	4637      	mov	r7, r6
 800d502:	42bb      	cmp	r3, r7
 800d504:	460e      	mov	r6, r1
 800d506:	d9f4      	bls.n	800d4f2 <_printf_i+0x11a>
 800d508:	2b08      	cmp	r3, #8
 800d50a:	d10b      	bne.n	800d524 <_printf_i+0x14c>
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	07de      	lsls	r6, r3, #31
 800d510:	d508      	bpl.n	800d524 <_printf_i+0x14c>
 800d512:	6923      	ldr	r3, [r4, #16]
 800d514:	6861      	ldr	r1, [r4, #4]
 800d516:	4299      	cmp	r1, r3
 800d518:	bfde      	ittt	le
 800d51a:	2330      	movle	r3, #48	; 0x30
 800d51c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d520:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d524:	1b52      	subs	r2, r2, r5
 800d526:	6122      	str	r2, [r4, #16]
 800d528:	f8cd a000 	str.w	sl, [sp]
 800d52c:	464b      	mov	r3, r9
 800d52e:	aa03      	add	r2, sp, #12
 800d530:	4621      	mov	r1, r4
 800d532:	4640      	mov	r0, r8
 800d534:	f7ff fee2 	bl	800d2fc <_printf_common>
 800d538:	3001      	adds	r0, #1
 800d53a:	d14c      	bne.n	800d5d6 <_printf_i+0x1fe>
 800d53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d540:	b004      	add	sp, #16
 800d542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d546:	4835      	ldr	r0, [pc, #212]	; (800d61c <_printf_i+0x244>)
 800d548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d54c:	6829      	ldr	r1, [r5, #0]
 800d54e:	6823      	ldr	r3, [r4, #0]
 800d550:	f851 6b04 	ldr.w	r6, [r1], #4
 800d554:	6029      	str	r1, [r5, #0]
 800d556:	061d      	lsls	r5, r3, #24
 800d558:	d514      	bpl.n	800d584 <_printf_i+0x1ac>
 800d55a:	07df      	lsls	r7, r3, #31
 800d55c:	bf44      	itt	mi
 800d55e:	f043 0320 	orrmi.w	r3, r3, #32
 800d562:	6023      	strmi	r3, [r4, #0]
 800d564:	b91e      	cbnz	r6, 800d56e <_printf_i+0x196>
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	f023 0320 	bic.w	r3, r3, #32
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	2310      	movs	r3, #16
 800d570:	e7b0      	b.n	800d4d4 <_printf_i+0xfc>
 800d572:	6823      	ldr	r3, [r4, #0]
 800d574:	f043 0320 	orr.w	r3, r3, #32
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	2378      	movs	r3, #120	; 0x78
 800d57c:	4828      	ldr	r0, [pc, #160]	; (800d620 <_printf_i+0x248>)
 800d57e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d582:	e7e3      	b.n	800d54c <_printf_i+0x174>
 800d584:	0659      	lsls	r1, r3, #25
 800d586:	bf48      	it	mi
 800d588:	b2b6      	uxthmi	r6, r6
 800d58a:	e7e6      	b.n	800d55a <_printf_i+0x182>
 800d58c:	4615      	mov	r5, r2
 800d58e:	e7bb      	b.n	800d508 <_printf_i+0x130>
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	6826      	ldr	r6, [r4, #0]
 800d594:	6961      	ldr	r1, [r4, #20]
 800d596:	1d18      	adds	r0, r3, #4
 800d598:	6028      	str	r0, [r5, #0]
 800d59a:	0635      	lsls	r5, r6, #24
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	d501      	bpl.n	800d5a4 <_printf_i+0x1cc>
 800d5a0:	6019      	str	r1, [r3, #0]
 800d5a2:	e002      	b.n	800d5aa <_printf_i+0x1d2>
 800d5a4:	0670      	lsls	r0, r6, #25
 800d5a6:	d5fb      	bpl.n	800d5a0 <_printf_i+0x1c8>
 800d5a8:	8019      	strh	r1, [r3, #0]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	6123      	str	r3, [r4, #16]
 800d5ae:	4615      	mov	r5, r2
 800d5b0:	e7ba      	b.n	800d528 <_printf_i+0x150>
 800d5b2:	682b      	ldr	r3, [r5, #0]
 800d5b4:	1d1a      	adds	r2, r3, #4
 800d5b6:	602a      	str	r2, [r5, #0]
 800d5b8:	681d      	ldr	r5, [r3, #0]
 800d5ba:	6862      	ldr	r2, [r4, #4]
 800d5bc:	2100      	movs	r1, #0
 800d5be:	4628      	mov	r0, r5
 800d5c0:	f7f2 fe0e 	bl	80001e0 <memchr>
 800d5c4:	b108      	cbz	r0, 800d5ca <_printf_i+0x1f2>
 800d5c6:	1b40      	subs	r0, r0, r5
 800d5c8:	6060      	str	r0, [r4, #4]
 800d5ca:	6863      	ldr	r3, [r4, #4]
 800d5cc:	6123      	str	r3, [r4, #16]
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5d4:	e7a8      	b.n	800d528 <_printf_i+0x150>
 800d5d6:	6923      	ldr	r3, [r4, #16]
 800d5d8:	462a      	mov	r2, r5
 800d5da:	4649      	mov	r1, r9
 800d5dc:	4640      	mov	r0, r8
 800d5de:	47d0      	blx	sl
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	d0ab      	beq.n	800d53c <_printf_i+0x164>
 800d5e4:	6823      	ldr	r3, [r4, #0]
 800d5e6:	079b      	lsls	r3, r3, #30
 800d5e8:	d413      	bmi.n	800d612 <_printf_i+0x23a>
 800d5ea:	68e0      	ldr	r0, [r4, #12]
 800d5ec:	9b03      	ldr	r3, [sp, #12]
 800d5ee:	4298      	cmp	r0, r3
 800d5f0:	bfb8      	it	lt
 800d5f2:	4618      	movlt	r0, r3
 800d5f4:	e7a4      	b.n	800d540 <_printf_i+0x168>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	4632      	mov	r2, r6
 800d5fa:	4649      	mov	r1, r9
 800d5fc:	4640      	mov	r0, r8
 800d5fe:	47d0      	blx	sl
 800d600:	3001      	adds	r0, #1
 800d602:	d09b      	beq.n	800d53c <_printf_i+0x164>
 800d604:	3501      	adds	r5, #1
 800d606:	68e3      	ldr	r3, [r4, #12]
 800d608:	9903      	ldr	r1, [sp, #12]
 800d60a:	1a5b      	subs	r3, r3, r1
 800d60c:	42ab      	cmp	r3, r5
 800d60e:	dcf2      	bgt.n	800d5f6 <_printf_i+0x21e>
 800d610:	e7eb      	b.n	800d5ea <_printf_i+0x212>
 800d612:	2500      	movs	r5, #0
 800d614:	f104 0619 	add.w	r6, r4, #25
 800d618:	e7f5      	b.n	800d606 <_printf_i+0x22e>
 800d61a:	bf00      	nop
 800d61c:	0803a2f6 	.word	0x0803a2f6
 800d620:	0803a307 	.word	0x0803a307

0800d624 <memmove>:
 800d624:	4288      	cmp	r0, r1
 800d626:	b510      	push	{r4, lr}
 800d628:	eb01 0402 	add.w	r4, r1, r2
 800d62c:	d902      	bls.n	800d634 <memmove+0x10>
 800d62e:	4284      	cmp	r4, r0
 800d630:	4623      	mov	r3, r4
 800d632:	d807      	bhi.n	800d644 <memmove+0x20>
 800d634:	1e43      	subs	r3, r0, #1
 800d636:	42a1      	cmp	r1, r4
 800d638:	d008      	beq.n	800d64c <memmove+0x28>
 800d63a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d63e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d642:	e7f8      	b.n	800d636 <memmove+0x12>
 800d644:	4402      	add	r2, r0
 800d646:	4601      	mov	r1, r0
 800d648:	428a      	cmp	r2, r1
 800d64a:	d100      	bne.n	800d64e <memmove+0x2a>
 800d64c:	bd10      	pop	{r4, pc}
 800d64e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d656:	e7f7      	b.n	800d648 <memmove+0x24>

0800d658 <_realloc_r>:
 800d658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d65c:	4680      	mov	r8, r0
 800d65e:	4614      	mov	r4, r2
 800d660:	460e      	mov	r6, r1
 800d662:	b921      	cbnz	r1, 800d66e <_realloc_r+0x16>
 800d664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d668:	4611      	mov	r1, r2
 800d66a:	f7ff bae5 	b.w	800cc38 <_malloc_r>
 800d66e:	b92a      	cbnz	r2, 800d67c <_realloc_r+0x24>
 800d670:	f7ff fc9c 	bl	800cfac <_free_r>
 800d674:	4625      	mov	r5, r4
 800d676:	4628      	mov	r0, r5
 800d678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d67c:	f000 f81b 	bl	800d6b6 <_malloc_usable_size_r>
 800d680:	4284      	cmp	r4, r0
 800d682:	4607      	mov	r7, r0
 800d684:	d802      	bhi.n	800d68c <_realloc_r+0x34>
 800d686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d68a:	d812      	bhi.n	800d6b2 <_realloc_r+0x5a>
 800d68c:	4621      	mov	r1, r4
 800d68e:	4640      	mov	r0, r8
 800d690:	f7ff fad2 	bl	800cc38 <_malloc_r>
 800d694:	4605      	mov	r5, r0
 800d696:	2800      	cmp	r0, #0
 800d698:	d0ed      	beq.n	800d676 <_realloc_r+0x1e>
 800d69a:	42bc      	cmp	r4, r7
 800d69c:	4622      	mov	r2, r4
 800d69e:	4631      	mov	r1, r6
 800d6a0:	bf28      	it	cs
 800d6a2:	463a      	movcs	r2, r7
 800d6a4:	f7ff fa92 	bl	800cbcc <memcpy>
 800d6a8:	4631      	mov	r1, r6
 800d6aa:	4640      	mov	r0, r8
 800d6ac:	f7ff fc7e 	bl	800cfac <_free_r>
 800d6b0:	e7e1      	b.n	800d676 <_realloc_r+0x1e>
 800d6b2:	4635      	mov	r5, r6
 800d6b4:	e7df      	b.n	800d676 <_realloc_r+0x1e>

0800d6b6 <_malloc_usable_size_r>:
 800d6b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ba:	1f18      	subs	r0, r3, #4
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	bfbc      	itt	lt
 800d6c0:	580b      	ldrlt	r3, [r1, r0]
 800d6c2:	18c0      	addlt	r0, r0, r3
 800d6c4:	4770      	bx	lr
	...

0800d6c8 <_init>:
 800d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ca:	bf00      	nop
 800d6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ce:	bc08      	pop	{r3}
 800d6d0:	469e      	mov	lr, r3
 800d6d2:	4770      	bx	lr

0800d6d4 <_fini>:
 800d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d6:	bf00      	nop
 800d6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6da:	bc08      	pop	{r3}
 800d6dc:	469e      	mov	lr, r3
 800d6de:	4770      	bx	lr
