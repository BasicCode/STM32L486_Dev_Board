
STM32_Dev_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a790  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002b9c4  0800a920  0800a920  0001a920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080362e4  080362e4  00054088  2**0
                  CONTENTS
  4 .ARM          00000008  080362e4  080362e4  000462e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080362ec  080362ec  00054088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080362ec  080362ec  000462ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080362f0  080362f0  000462f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004088  20000000  080362f4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fe0  20004088  0803a37c  00054088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a068  0803a37c  0005a068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00054088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263b2  00000000  00000000  000540b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a68  00000000  00000000  0007a46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  0007fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b40  00000000  00000000  00081c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e1d1  00000000  00000000  000837d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029dca  00000000  00000000  000b19a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010379a  00000000  00000000  000db773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001def0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ff4  00000000  00000000  001def60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20004088 	.word	0x20004088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a908 	.word	0x0800a908

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000408c 	.word	0x2000408c
 80001cc:	0800a908 	.word	0x0800a908

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b974 	b.w	8000a08 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468e      	mov	lr, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14d      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000746:	428a      	cmp	r2, r1
 8000748:	4694      	mov	ip, r2
 800074a:	d969      	bls.n	8000820 <__udivmoddi4+0xe8>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b152      	cbz	r2, 8000768 <__udivmoddi4+0x30>
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	f1c2 0120 	rsb	r1, r2, #32
 800075a:	fa20 f101 	lsr.w	r1, r0, r1
 800075e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000762:	ea41 0e03 	orr.w	lr, r1, r3
 8000766:	4094      	lsls	r4, r2
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	0c21      	lsrs	r1, r4, #16
 800076e:	fbbe f6f8 	udiv	r6, lr, r8
 8000772:	fa1f f78c 	uxth.w	r7, ip
 8000776:	fb08 e316 	mls	r3, r8, r6, lr
 800077a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077e:	fb06 f107 	mul.w	r1, r6, r7
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800078e:	f080 811f 	bcs.w	80009d0 <__udivmoddi4+0x298>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 811c 	bls.w	80009d0 <__udivmoddi4+0x298>
 8000798:	3e02      	subs	r6, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f707 	mul.w	r7, r0, r7
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x92>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007bc:	f080 810a 	bcs.w	80009d4 <__udivmoddi4+0x29c>
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	f240 8107 	bls.w	80009d4 <__udivmoddi4+0x29c>
 80007c6:	4464      	add	r4, ip
 80007c8:	3802      	subs	r0, #2
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	1be4      	subs	r4, r4, r7
 80007d0:	2600      	movs	r6, #0
 80007d2:	b11d      	cbz	r5, 80007dc <__udivmoddi4+0xa4>
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	2300      	movs	r3, #0
 80007d8:	e9c5 4300 	strd	r4, r3, [r5]
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d909      	bls.n	80007fa <__udivmoddi4+0xc2>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 80ef 	beq.w	80009ca <__udivmoddi4+0x292>
 80007ec:	2600      	movs	r6, #0
 80007ee:	e9c5 0100 	strd	r0, r1, [r5]
 80007f2:	4630      	mov	r0, r6
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	fab3 f683 	clz	r6, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d14a      	bne.n	8000898 <__udivmoddi4+0x160>
 8000802:	428b      	cmp	r3, r1
 8000804:	d302      	bcc.n	800080c <__udivmoddi4+0xd4>
 8000806:	4282      	cmp	r2, r0
 8000808:	f200 80f9 	bhi.w	80009fe <__udivmoddi4+0x2c6>
 800080c:	1a84      	subs	r4, r0, r2
 800080e:	eb61 0303 	sbc.w	r3, r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	469e      	mov	lr, r3
 8000816:	2d00      	cmp	r5, #0
 8000818:	d0e0      	beq.n	80007dc <__udivmoddi4+0xa4>
 800081a:	e9c5 4e00 	strd	r4, lr, [r5]
 800081e:	e7dd      	b.n	80007dc <__udivmoddi4+0xa4>
 8000820:	b902      	cbnz	r2, 8000824 <__udivmoddi4+0xec>
 8000822:	deff      	udf	#255	; 0xff
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 8092 	bne.w	8000952 <__udivmoddi4+0x21a>
 800082e:	eba1 010c 	sub.w	r1, r1, ip
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	2601      	movs	r6, #1
 800083c:	0c20      	lsrs	r0, r4, #16
 800083e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000842:	fb07 1113 	mls	r1, r7, r3, r1
 8000846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800084a:	fb0e f003 	mul.w	r0, lr, r3
 800084e:	4288      	cmp	r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x12c>
 8000852:	eb1c 0101 	adds.w	r1, ip, r1
 8000856:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x12a>
 800085c:	4288      	cmp	r0, r1
 800085e:	f200 80cb 	bhi.w	80009f8 <__udivmoddi4+0x2c0>
 8000862:	4643      	mov	r3, r8
 8000864:	1a09      	subs	r1, r1, r0
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb1 f0f7 	udiv	r0, r1, r7
 800086c:	fb07 1110 	mls	r1, r7, r0, r1
 8000870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000874:	fb0e fe00 	mul.w	lr, lr, r0
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x156>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0x154>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f200 80bb 	bhi.w	8000a02 <__udivmoddi4+0x2ca>
 800088c:	4608      	mov	r0, r1
 800088e:	eba4 040e 	sub.w	r4, r4, lr
 8000892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000896:	e79c      	b.n	80007d2 <__udivmoddi4+0x9a>
 8000898:	f1c6 0720 	rsb	r7, r6, #32
 800089c:	40b3      	lsls	r3, r6
 800089e:	fa22 fc07 	lsr.w	ip, r2, r7
 80008a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a6:	fa20 f407 	lsr.w	r4, r0, r7
 80008aa:	fa01 f306 	lsl.w	r3, r1, r6
 80008ae:	431c      	orrs	r4, r3
 80008b0:	40f9      	lsrs	r1, r7
 80008b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80008be:	0c20      	lsrs	r0, r4, #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fb09 1118 	mls	r1, r9, r8, r1
 80008c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008cc:	fb08 f00e 	mul.w	r0, r8, lr
 80008d0:	4288      	cmp	r0, r1
 80008d2:	fa02 f206 	lsl.w	r2, r2, r6
 80008d6:	d90b      	bls.n	80008f0 <__udivmoddi4+0x1b8>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008e0:	f080 8088 	bcs.w	80009f4 <__udivmoddi4+0x2bc>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f240 8085 	bls.w	80009f4 <__udivmoddi4+0x2bc>
 80008ea:	f1a8 0802 	sub.w	r8, r8, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f8:	fb09 1110 	mls	r1, r9, r0, r1
 80008fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000900:	fb00 fe0e 	mul.w	lr, r0, lr
 8000904:	458e      	cmp	lr, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x1e2>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000910:	d26c      	bcs.n	80009ec <__udivmoddi4+0x2b4>
 8000912:	458e      	cmp	lr, r1
 8000914:	d96a      	bls.n	80009ec <__udivmoddi4+0x2b4>
 8000916:	3802      	subs	r0, #2
 8000918:	4461      	add	r1, ip
 800091a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091e:	fba0 9402 	umull	r9, r4, r0, r2
 8000922:	eba1 010e 	sub.w	r1, r1, lr
 8000926:	42a1      	cmp	r1, r4
 8000928:	46c8      	mov	r8, r9
 800092a:	46a6      	mov	lr, r4
 800092c:	d356      	bcc.n	80009dc <__udivmoddi4+0x2a4>
 800092e:	d053      	beq.n	80009d8 <__udivmoddi4+0x2a0>
 8000930:	b15d      	cbz	r5, 800094a <__udivmoddi4+0x212>
 8000932:	ebb3 0208 	subs.w	r2, r3, r8
 8000936:	eb61 010e 	sbc.w	r1, r1, lr
 800093a:	fa01 f707 	lsl.w	r7, r1, r7
 800093e:	fa22 f306 	lsr.w	r3, r2, r6
 8000942:	40f1      	lsrs	r1, r6
 8000944:	431f      	orrs	r7, r3
 8000946:	e9c5 7100 	strd	r7, r1, [r5]
 800094a:	2600      	movs	r6, #0
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	f1c2 0320 	rsb	r3, r2, #32
 8000956:	40d8      	lsrs	r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	fa21 f303 	lsr.w	r3, r1, r3
 8000960:	4091      	lsls	r1, r2
 8000962:	4301      	orrs	r1, r0
 8000964:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000968:	fa1f fe8c 	uxth.w	lr, ip
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3610 	mls	r6, r7, r0, r3
 8000974:	0c0b      	lsrs	r3, r1, #16
 8000976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800097a:	fb00 f60e 	mul.w	r6, r0, lr
 800097e:	429e      	cmp	r6, r3
 8000980:	fa04 f402 	lsl.w	r4, r4, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x260>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800098e:	d22f      	bcs.n	80009f0 <__udivmoddi4+0x2b8>
 8000990:	429e      	cmp	r6, r3
 8000992:	d92d      	bls.n	80009f0 <__udivmoddi4+0x2b8>
 8000994:	3802      	subs	r0, #2
 8000996:	4463      	add	r3, ip
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	b289      	uxth	r1, r1
 800099c:	fbb3 f6f7 	udiv	r6, r3, r7
 80009a0:	fb07 3316 	mls	r3, r7, r6, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x28a>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009b8:	d216      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d914      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 80009be:	3e02      	subs	r6, #2
 80009c0:	4461      	add	r1, ip
 80009c2:	1ac9      	subs	r1, r1, r3
 80009c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c8:	e738      	b.n	800083c <__udivmoddi4+0x104>
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e705      	b.n	80007dc <__udivmoddi4+0xa4>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e3      	b.n	800079c <__udivmoddi4+0x64>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6f8      	b.n	80007ca <__udivmoddi4+0x92>
 80009d8:	454b      	cmp	r3, r9
 80009da:	d2a9      	bcs.n	8000930 <__udivmoddi4+0x1f8>
 80009dc:	ebb9 0802 	subs.w	r8, r9, r2
 80009e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7a3      	b.n	8000930 <__udivmoddi4+0x1f8>
 80009e8:	4646      	mov	r6, r8
 80009ea:	e7ea      	b.n	80009c2 <__udivmoddi4+0x28a>
 80009ec:	4620      	mov	r0, r4
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e2>
 80009f0:	4640      	mov	r0, r8
 80009f2:	e7d1      	b.n	8000998 <__udivmoddi4+0x260>
 80009f4:	46d0      	mov	r8, sl
 80009f6:	e77b      	b.n	80008f0 <__udivmoddi4+0x1b8>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	e732      	b.n	8000864 <__udivmoddi4+0x12c>
 80009fe:	4630      	mov	r0, r6
 8000a00:	e709      	b.n	8000816 <__udivmoddi4+0xde>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	e742      	b.n	800088e <__udivmoddi4+0x156>

08000a08 <__aeabi_idiv0>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <DevBoardBegin>:
char timeString[9];

/**
 * Initialises the threads which run the various peripherals on this board.
 */
void DevBoardBegin() {
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
	//The draw task handles display updates. It should be a HIGH priority for fast refresh.
	osThreadDef(drawTask, DrawTask, osPriorityHigh, 0, 1024);
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <DevBoardBegin+0xa4>)
 8000a14:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a18:	461d      	mov	r5, r3
 8000a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	drawTaskHandle = osThreadCreate(osThread(drawTask), NULL);
 8000a26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f007 fd19 	bl	8008464 <osThreadCreate>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <DevBoardBegin+0xa8>)
 8000a36:	6013      	str	r3, [r2, #0]

	//Task which handles switching screens
	osThreadDef(changeScreenTask, ChangeScreenTask, osPriorityNormal, 0, 512);
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <DevBoardBegin+0xac>)
 8000a3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a3e:	461d      	mov	r5, r3
 8000a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	changeScreenTaskHandle = osThreadCreate(osThread(changeScreenTask), NULL);
 8000a4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f007 fd06 	bl	8008464 <osThreadCreate>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <DevBoardBegin+0xb0>)
 8000a5c:	6013      	str	r3, [r2, #0]

	//This task handles touching
	osThreadDef(touchTask, TouchTask, osPriorityNormal, 0, 512);
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <DevBoardBegin+0xb4>)
 8000a60:	f107 041c 	add.w	r4, r7, #28
 8000a64:	461d      	mov	r5, r3
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	touchTaskHandle = osThreadCreate(osThread(touchTask), NULL);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f007 fcf3 	bl	8008464 <osThreadCreate>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <DevBoardBegin+0xb8>)
 8000a82:	6013      	str	r3, [r2, #0]

	//Get the current time from the RTC chip
	osThreadDef(timeTask, TimeTask, osPriorityNormal, 0, 128);
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <DevBoardBegin+0xbc>)
 8000a86:	463c      	mov	r4, r7
 8000a88:	461d      	mov	r5, r3
 8000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	timeTaskHandle = osThreadCreate(osThread(timeTask), NULL);
 8000a96:	463b      	mov	r3, r7
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 fce2 	bl	8008464 <osThreadCreate>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <DevBoardBegin+0xc0>)
 8000aa4:	6013      	str	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3770      	adds	r7, #112	; 0x70
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bdb0      	pop	{r4, r5, r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	0800a988 	.word	0x0800a988
 8000ab4:	200040a4 	.word	0x200040a4
 8000ab8:	0800a9a4 	.word	0x0800a9a4
 8000abc:	200040ac 	.word	0x200040ac
 8000ac0:	0800a9c0 	.word	0x0800a9c0
 8000ac4:	200040b0 	.word	0x200040b0
 8000ac8:	0800a9dc 	.word	0x0800a9dc
 8000acc:	200040b4 	.word	0x200040b4

08000ad0 <DrawTask>:
 * The Draw task handles display updates.
 * It just calls the DisplayManager draw function which decides
 * which elements need refreshing.
 */
void DrawTask(void const * argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//Do a display refresh
		DM_Draw();
 8000ad8:	f000 ffee 	bl	8001ab8 <DM_Draw>
		//This is a HIGH priority task so we have to hand control back to the OS.
		osDelay(100);
 8000adc:	2064      	movs	r0, #100	; 0x64
 8000ade:	f007 fd19 	bl	8008514 <osDelay>
		DM_Draw();
 8000ae2:	e7f9      	b.n	8000ad8 <DrawTask+0x8>

08000ae4 <ChangeScreenTask>:

/**
 * Function which receives signals, usually from button callbacks, and changes
 * the display to the desired screen.
 */
void ChangeScreenTask(void const * arguments) {
 8000ae4:	b5b0      	push	{r4, r5, r7, lr}
 8000ae6:	b09a      	sub	sp, #104	; 0x68
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

	//Any screens you want to display
	osThreadDef(deviceTestTask, DeviceTestTask, osPriorityNormal, 0, 1024);
 8000aec:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <ChangeScreenTask+0xd0>)
 8000aee:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000af2:	461d      	mov	r5, r3
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000afc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(mainMenuTask, MainMenuTask, osPriorityNormal, 0, 512);
 8000b00:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <ChangeScreenTask+0xd4>)
 8000b02:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000b06:	461d      	mov	r5, r3
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(splashScreenTask, SplashScreenTask, osPriorityNormal, 0, 256);
	osThreadDef(settingsTask, SettingsTask, osPriorityNormal, 0, 1028);
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <ChangeScreenTask+0xd8>)
 8000b16:	f107 0410 	add.w	r4, r7, #16
 8000b1a:	461d      	mov	r5, r3
 8000b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b24:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	//Initial entry screen
	currentScreenHandle = osThreadCreate(osThread(mainMenuTask), NULL);
 8000b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 fc98 	bl	8008464 <osThreadCreate>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <ChangeScreenTask+0xdc>)
 8000b38:	6013      	str	r3, [r2, #0]

	int signal = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
	int event;
	while(1) {
			event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000b3e:	f107 020c 	add.w	r2, r7, #12
 8000b42:	2300      	movs	r3, #0
 8000b44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f008 fb21 	bl	8009190 <xTaskNotifyWait>
 8000b4e:	6678      	str	r0, [r7, #100]	; 0x64

			if(event == pdTRUE) {
 8000b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d12a      	bne.n	8000bac <ChangeScreenTask+0xc8>

				//Clear the display elements
				DM_Clear();
 8000b56:	f001 f887 	bl	8001c68 <DM_Clear>

				//End the current screen thread
				osThreadTerminate(currentScreenHandle);
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <ChangeScreenTask+0xdc>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 fccc 	bl	80084fc <osThreadTerminate>

				//Load the desired screen
				if(signal == MAIN_MENU)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d108      	bne.n	8000b7c <ChangeScreenTask+0x98>
					currentScreenHandle = osThreadCreate(osThread(mainMenuTask), NULL);
 8000b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f007 fc77 	bl	8008464 <osThreadCreate>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a11      	ldr	r2, [pc, #68]	; (8000bc0 <ChangeScreenTask+0xdc>)
 8000b7a:	6013      	str	r3, [r2, #0]

				if(signal == DEVICE_TEST)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d108      	bne.n	8000b94 <ChangeScreenTask+0xb0>
					currentScreenHandle = osThreadCreate(osThread(deviceTestTask), NULL);
 8000b82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 fc6b 	bl	8008464 <osThreadCreate>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <ChangeScreenTask+0xdc>)
 8000b92:	6013      	str	r3, [r2, #0]

				if(signal == SETTINGS)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d108      	bne.n	8000bac <ChangeScreenTask+0xc8>
					currentScreenHandle = osThreadCreate(osThread(settingsTask), NULL);
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f007 fc5f 	bl	8008464 <osThreadCreate>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <ChangeScreenTask+0xdc>)
 8000baa:	6013      	str	r3, [r2, #0]
	    }

		//Give the OS time to do some other tasks
		osDelay(200);
 8000bac:	20c8      	movs	r0, #200	; 0xc8
 8000bae:	f007 fcb1 	bl	8008514 <osDelay>
			event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000bb2:	e7c4      	b.n	8000b3e <ChangeScreenTask+0x5a>
 8000bb4:	0800a9f8 	.word	0x0800a9f8
 8000bb8:	0800aa14 	.word	0x0800aa14
 8000bbc:	0800aa30 	.word	0x0800aa30
 8000bc0:	200040a8 	.word	0x200040a8

08000bc4 <TouchTask>:
}

/**
 * Handles touch events and reports them to the display manager.
 */
void TouchTask(void const * argument) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	int event;
	int signal;

	for(;;) {
	    // wait for a signal
	    event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000bcc:	f107 0208 	add.w	r2, r7, #8
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f008 fada 	bl	8009190 <xTaskNotifyWait>
 8000bdc:	6278      	str	r0, [r7, #36]	; 0x24

	    //Signal received, get the touch coordinates
	    if (event == pdTRUE)  {
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d1f3      	bne.n	8000bcc <TouchTask+0x8>

	    	//Get the most recent touch point
	    	touch = FT5446_getTouch();
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 fa31 	bl	8003050 <FT5446_getTouch>

	    	//Envoke the pressed element
			DM_Do_Press(touch);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bf6:	f001 f973 	bl	8001ee0 <DM_Do_Press>
	    event = xTaskNotifyWait(0x00, 0xFFFF, &signal, 0);
 8000bfa:	e7e7      	b.n	8000bcc <TouchTask+0x8>

08000bfc <TimeTask>:
}

/**
 * Gets the time from the DS3231 RTC and updates the global time
 */
void TimeTask(void const * argument) {
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	6178      	str	r0, [r7, #20]

	while(1) {
		//Get the time from the RTC once per second
		time = RTC_get_time_date();
 8000c04:	4c0e      	ldr	r4, [pc, #56]	; (8000c40 <TimeTask+0x44>)
 8000c06:	463b      	mov	r3, r7
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 f977 	bl	8002efc <RTC_get_time_date>
 8000c0e:	463b      	mov	r3, r7
 8000c10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		sprintf(timeString, "%2d%2d%2d", time.hours, time.minutes, time.seconds);
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <TimeTask+0x44>)
 8000c1a:	789b      	ldrb	r3, [r3, #2]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <TimeTask+0x44>)
 8000c20:	785b      	ldrb	r3, [r3, #1]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <TimeTask+0x44>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	4905      	ldr	r1, [pc, #20]	; (8000c44 <TimeTask+0x48>)
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <TimeTask+0x4c>)
 8000c30:	f009 fa9c 	bl	800a16c <siprintf>

		//Hand control back to the RTOS
		osDelay(1000);
 8000c34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c38:	f007 fc6c 	bl	8008514 <osDelay>
		time = RTC_get_time_date();
 8000c3c:	e7e2      	b.n	8000c04 <TimeTask+0x8>
 8000c3e:	bf00      	nop
 8000c40:	200040b8 	.word	0x200040b8
 8000c44:	0800aa4c 	.word	0x0800aa4c
 8000c48:	200040c4 	.word	0x200040c4

08000c4c <home_onPress>:
}

/**
 * Callback for any button that wants to return HOME
 */
void home_onPress(int id) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, MAIN_MENU, eSetValueWithOverwrite);
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <home_onPress+0x20>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	f008 faf7 	bl	8009250 <xTaskGenericNotify>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200040ac 	.word	0x200040ac

08000c70 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <vApplicationGetIdleTaskMemory+0x2c>)
 8000c80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <vApplicationGetIdleTaskMemory+0x30>)
 8000c86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2280      	movs	r2, #128	; 0x80
 8000c8c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	200040d0 	.word	0x200040d0
 8000ca0:	20004184 	.word	0x20004184

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b5b0      	push	{r4, r5, r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000caa:	f003 fd32 	bl	8004712 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cae:	f000 f835 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb2:	f000 f955 	bl	8000f60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cb6:	f000 f8a5 	bl	8000e04 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cba:	f000 f8e3 	bl	8000e84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cbe:	f000 f91f 	bl	8000f00 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000cc2:	f000 f87d 	bl	8000dc0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  //Turn the Power LED on
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <main+0x68>)
 8000cce:	f004 f8f3 	bl	8004eb8 <HAL_GPIO_WritePin>

  //Initialise the display using the display manager
  DM_Init();
 8000cd2:	f000 fee9 	bl	8001aa8 <DM_Init>

  //Bring the CTP out of reset
  //Dont' forget that the top half of PORTC is used by the LCD Data
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2140      	movs	r1, #64	; 0x40
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <main+0x6c>)
 8000cdc:	f004 f8ec 	bl	8004eb8 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <main+0x70>)
 8000ce2:	1d3c      	adds	r4, r7, #4
 8000ce4:	461d      	mov	r5, r3
 8000ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f007 fbb4 	bl	8008464 <osThreadCreate>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <main+0x74>)
 8000d00:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  //Initialise the threads which run the peripherals on this board
  DevBoardBegin();
 8000d02:	f7ff fe83 	bl	8000a0c <DevBoardBegin>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d06:	f007 fba6 	bl	8008456 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <main+0x66>
 8000d0c:	48000400 	.word	0x48000400
 8000d10:	48000800 	.word	0x48000800
 8000d14:	0800aa78 	.word	0x0800aa78
 8000d18:	200044e4 	.word	0x200044e4

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b096      	sub	sp, #88	; 0x58
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	2244      	movs	r2, #68	; 0x44
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f009 f908 	bl	8009f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	463b      	mov	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d42:	f004 fe9d 	bl	8005a80 <HAL_PWREx_ControlVoltageScaling>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d4c:	f000 f9c0 	bl	80010d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d50:	2302      	movs	r3, #2
 8000d52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d62:	2302      	movs	r3, #2
 8000d64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 fed4 	bl	8005b2c <HAL_RCC_OscConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d8a:	f000 f9a1 	bl	80010d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8e:	230f      	movs	r3, #15
 8000d90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d92:	2303      	movs	r3, #3
 8000d94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	2104      	movs	r1, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f005 fa9c 	bl	80062e4 <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000db2:	f000 f98d 	bl	80010d0 <Error_Handler>
  }
}
 8000db6:	bf00      	nop
 8000db8:	3758      	adds	r7, #88	; 0x58
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_CRC_Init+0x3c>)
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <MX_CRC_Init+0x40>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_CRC_Init+0x3c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_CRC_Init+0x3c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_CRC_Init+0x3c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_CRC_Init+0x3c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_CRC_Init+0x3c>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_CRC_Init+0x3c>)
 8000dea:	f003 fdd1 	bl	8004990 <HAL_CRC_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000df4:	f000 f96c 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20004384 	.word	0x20004384
 8000e00:	40023000 	.word	0x40023000

08000e04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <MX_I2C1_Init+0x78>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <MX_I2C1_Init+0x7c>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e40:	f004 f875 	bl	8004f2e <HAL_I2C_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e4a:	f000 f941 	bl	80010d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e52:	f004 fd6f 	bl	8005934 <HAL_I2CEx_ConfigAnalogFilter>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e5c:	f000 f938 	bl	80010d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_I2C1_Init+0x74>)
 8000e64:	f004 fdb1 	bl	80059ca <HAL_I2CEx_ConfigDigitalFilter>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e6e:	f000 f92f 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200043a8 	.word	0x200043a8
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	10909cec 	.word	0x10909cec

08000e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <MX_SPI1_Init+0x78>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000e9e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ea2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000ede:	2208      	movs	r2, #8
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_SPI1_Init+0x74>)
 8000ee4:	f006 f910 	bl	8007108 <HAL_SPI_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eee:	f000 f8ef 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200043fc 	.word	0x200043fc
 8000efc:	40013000 	.word	0x40013000

08000f00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <MX_USART1_UART_Init+0x5c>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_USART1_UART_Init+0x58>)
 8000f44:	f006 fc54 	bl	80077f0 <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f4e:	f000 f8bf 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20004460 	.word	0x20004460
 8000f5c:	40013800 	.word	0x40013800

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	4b47      	ldr	r3, [pc, #284]	; (8001094 <MX_GPIO_Init+0x134>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a46      	ldr	r2, [pc, #280]	; (8001094 <MX_GPIO_Init+0x134>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b44      	ldr	r3, [pc, #272]	; (8001094 <MX_GPIO_Init+0x134>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b41      	ldr	r3, [pc, #260]	; (8001094 <MX_GPIO_Init+0x134>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a40      	ldr	r2, [pc, #256]	; (8001094 <MX_GPIO_Init+0x134>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <MX_GPIO_Init+0x134>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <MX_GPIO_Init+0x134>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a3a      	ldr	r2, [pc, #232]	; (8001094 <MX_GPIO_Init+0x134>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <MX_GPIO_Init+0x134>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD13_Pin|LCD14_Pin|LCD15_Pin|W25Q128_CS_Pin
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f64f 7120 	movw	r1, #65312	; 0xff20
 8000fc4:	4834      	ldr	r0, [pc, #208]	; (8001098 <MX_GPIO_Init+0x138>)
 8000fc6:	f003 ff77 	bl	8004eb8 <HAL_GPIO_WritePin>
                          |LCD8_Pin|LCD9_Pin|LCD10_Pin|LCD11_Pin
                          |LCD12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIO3_Pin|DIO4_Pin|DIO5_Pin|DIO6_Pin
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f64f 711f 	movw	r1, #65311	; 0xff1f
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f003 ff70 	bl	8004eb8 <HAL_GPIO_WritePin>
                          |DIO7_Pin|LCD0_Pin|LCD1_Pin|LCD2_Pin
                          |LCD3_Pin|LCD4_Pin|LCD5_Pin|LCD6_Pin
                          |LCD7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO0_Pin|DIO1_Pin|DIO2_Pin|PWR_LED_Pin
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f64f 413f 	movw	r1, #64575	; 0xfc3f
 8000fde:	482f      	ldr	r0, [pc, #188]	; (800109c <MX_GPIO_Init+0x13c>)
 8000fe0:	f003 ff6a 	bl	8004eb8 <HAL_GPIO_WritePin>
                          |LCD_RD_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_D_C_Pin
                          |LCD_CS_Pin|DIO8_Pin|DIO9_Pin|DIO10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2140      	movs	r1, #64	; 0x40
 8000fe8:	482b      	ldr	r0, [pc, #172]	; (8001098 <MX_GPIO_Init+0x138>)
 8000fea:	f003 ff65 	bl	8004eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD13_Pin LCD14_Pin LCD15_Pin W25Q128_CS_Pin
                           CTP_RST_Pin LCD8_Pin LCD9_Pin LCD10_Pin
                           LCD11_Pin LCD12_Pin */
  GPIO_InitStruct.Pin = LCD13_Pin|LCD14_Pin|LCD15_Pin|W25Q128_CS_Pin
 8000fee:	f64f 7360 	movw	r3, #65376	; 0xff60
 8000ff2:	60fb      	str	r3, [r7, #12]
                          |CTP_RST_Pin|LCD8_Pin|LCD9_Pin|LCD10_Pin
                          |LCD11_Pin|LCD12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	4824      	ldr	r0, [pc, #144]	; (8001098 <MX_GPIO_Init+0x138>)
 8001008:	f003 fdac 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_UP_Pin SW_DOWN_Pin SW_LEFT_Pin SW_MIDDLE_Pin
                           SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_UP_Pin|SW_DOWN_Pin|SW_LEFT_Pin|SW_MIDDLE_Pin
 800100c:	231f      	movs	r3, #31
 800100e:	60fb      	str	r3, [r7, #12]
                          |SW_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	481e      	ldr	r0, [pc, #120]	; (8001098 <MX_GPIO_Init+0x138>)
 8001020:	f003 fda0 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO3_Pin DIO4_Pin DIO5_Pin DIO6_Pin
                           DIO7_Pin LCD0_Pin LCD1_Pin LCD2_Pin
                           LCD3_Pin LCD4_Pin LCD5_Pin LCD6_Pin
                           LCD7_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin|DIO4_Pin|DIO5_Pin|DIO6_Pin
 8001024:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8001028:	60fb      	str	r3, [r7, #12]
                          |DIO7_Pin|LCD0_Pin|LCD1_Pin|LCD2_Pin
                          |LCD3_Pin|LCD4_Pin|LCD5_Pin|LCD6_Pin
                          |LCD7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f003 fd90 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin DIO2_Pin PWR_LED_Pin
                           LCD_RD_Pin LCD_WR_Pin LCD_RST_Pin LCD_D_C_Pin
                           LCD_CS_Pin DIO8_Pin DIO9_Pin DIO10_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin|DIO2_Pin|PWR_LED_Pin
 8001044:	f64f 433f 	movw	r3, #64575	; 0xfc3f
 8001048:	60fb      	str	r3, [r7, #12]
                          |LCD_RD_Pin|LCD_WR_Pin|LCD_RST_Pin|LCD_D_C_Pin
                          |LCD_CS_Pin|DIO8_Pin|DIO9_Pin|DIO10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	480f      	ldr	r0, [pc, #60]	; (800109c <MX_GPIO_Init+0x13c>)
 800105e:	f003 fd81 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001066:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4619      	mov	r1, r3
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <MX_GPIO_Init+0x138>)
 8001078:	f003 fd74 	bl	8004b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2105      	movs	r1, #5
 8001080:	2017      	movs	r0, #23
 8001082:	f003 fc5b 	bl	800493c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001086:	2017      	movs	r0, #23
 8001088:	f003 fc74 	bl	8004974 <HAL_NVIC_EnableIRQ>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	48000800 	.word	0x48000800
 800109c:	48000400 	.word	0x48000400

080010a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80010a8:	e7fe      	b.n	80010a8 <StartDefaultTask+0x8>
	...

080010ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010be:	f003 fb41 	bl	8004744 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40012c00 	.word	0x40012c00

080010d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <Error_Handler+0x8>
	...

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_MspInit+0x4c>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_MspInit+0x4c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6613      	str	r3, [r2, #96]	; 0x60
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_MspInit+0x4c>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_MspInit+0x4c>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_MspInit+0x4c>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6593      	str	r3, [r2, #88]	; 0x58
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_MspInit+0x4c>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	210f      	movs	r1, #15
 8001116:	f06f 0001 	mvn.w	r0, #1
 800111a:	f003 fc0f 	bl	800493c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_CRC_MspInit+0x38>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d10b      	bne.n	8001156 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_CRC_MspInit+0x3c>)
 8001140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_CRC_MspInit+0x3c>)
 8001144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001148:	6493      	str	r3, [r2, #72]	; 0x48
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_CRC_MspInit+0x3c>)
 800114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023000 	.word	0x40023000
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0ac      	sub	sp, #176	; 0xb0
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2288      	movs	r2, #136	; 0x88
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f008 fed7 	bl	8009f40 <memset>
  if(hi2c->Instance==I2C1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a21      	ldr	r2, [pc, #132]	; (800121c <HAL_I2C_MspInit+0xb0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d13b      	bne.n	8001214 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800119c:	2340      	movs	r3, #64	; 0x40
 800119e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 faf1 	bl	8006790 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011b4:	f7ff ff8c 	bl	80010d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_I2C_MspInit+0xb4>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	4a18      	ldr	r2, [pc, #96]	; (8001220 <HAL_I2C_MspInit+0xb4>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_I2C_MspInit+0xb4>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d8:	2312      	movs	r3, #18
 80011da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ea:	2304      	movs	r3, #4
 80011ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f4:	4619      	mov	r1, r3
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <HAL_I2C_MspInit+0xb8>)
 80011f8:	f003 fcb4 	bl	8004b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_I2C_MspInit+0xb4>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_I2C_MspInit+0xb4>)
 8001202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001206:	6593      	str	r3, [r2, #88]	; 0x58
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_I2C_MspInit+0xb4>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	37b0      	adds	r7, #176	; 0xb0
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400
 8001220:	40021000 	.word	0x40021000
 8001224:	48000400 	.word	0x48000400

08001228 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <HAL_SPI_MspInit+0x7c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d128      	bne.n	800129c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_SPI_MspInit+0x80>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <HAL_SPI_MspInit+0x80>)
 8001250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001254:	6613      	str	r3, [r2, #96]	; 0x60
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_SPI_MspInit+0x80>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_SPI_MspInit+0x80>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_SPI_MspInit+0x80>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_SPI_MspInit+0x80>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800127a:	23e0      	movs	r3, #224	; 0xe0
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128a:	2305      	movs	r3, #5
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f003 fc64 	bl	8004b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40013000 	.word	0x40013000
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0ac      	sub	sp, #176	; 0xb0
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2288      	movs	r2, #136	; 0x88
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f008 fe37 	bl	8009f40 <memset>
  if(huart->Instance==USART1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a21      	ldr	r2, [pc, #132]	; (800135c <HAL_UART_MspInit+0xb0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d13a      	bne.n	8001352 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012e0:	2300      	movs	r3, #0
 80012e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 fa51 	bl	8006790 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012f4:	f7ff feec 	bl	80010d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_UART_MspInit+0xb4>)
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <HAL_UART_MspInit+0xb4>)
 80012fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001302:	6613      	str	r3, [r2, #96]	; 0x60
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_UART_MspInit+0xb4>)
 8001306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_UART_MspInit+0xb4>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_UART_MspInit+0xb4>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_UART_MspInit+0xb4>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001328:	23c0      	movs	r3, #192	; 0xc0
 800132a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001340:	2307      	movs	r3, #7
 8001342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_UART_MspInit+0xb8>)
 800134e:	f003 fc09 	bl	8004b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	37b0      	adds	r7, #176	; 0xb0
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013800 	.word	0x40013800
 8001360:	40021000 	.word	0x40021000
 8001364:	48000400 	.word	0x48000400

08001368 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <HAL_InitTick+0xc8>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	4a2d      	ldr	r2, [pc, #180]	; (8001430 <HAL_InitTick+0xc8>)
 800137c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001380:	6613      	str	r3, [r2, #96]	; 0x60
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_InitTick+0xc8>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800138e:	f107 020c 	add.w	r2, r7, #12
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f005 f967 	bl	800666c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800139e:	f005 f94f 	bl	8006640 <HAL_RCC_GetPCLK2Freq>
 80013a2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a6:	4a23      	ldr	r2, [pc, #140]	; (8001434 <HAL_InitTick+0xcc>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0c9b      	lsrs	r3, r3, #18
 80013ae:	3b01      	subs	r3, #1
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_InitTick+0xd0>)
 80013b4:	4a21      	ldr	r2, [pc, #132]	; (800143c <HAL_InitTick+0xd4>)
 80013b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <HAL_InitTick+0xd0>)
 80013ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013be:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_InitTick+0xd0>)
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HAL_InitTick+0xd0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_InitTick+0xd0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_InitTick+0xd0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80013d8:	4817      	ldr	r0, [pc, #92]	; (8001438 <HAL_InitTick+0xd0>)
 80013da:	f005 ff38 	bl	800724e <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d11b      	bne.n	8001424 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80013ec:	4812      	ldr	r0, [pc, #72]	; (8001438 <HAL_InitTick+0xd0>)
 80013ee:	f005 ff8f 	bl	8007310 <HAL_TIM_Base_Start_IT>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d111      	bne.n	8001424 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001400:	2019      	movs	r0, #25
 8001402:	f003 fab7 	bl	8004974 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d808      	bhi.n	800141e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	2019      	movs	r0, #25
 8001412:	f003 fa93 	bl	800493c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_InitTick+0xd8>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e002      	b.n	8001424 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001428:	4618      	mov	r0, r3
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	431bde83 	.word	0x431bde83
 8001438:	200044e8 	.word	0x200044e8
 800143c:	40012c00 	.word	0x40012c00
 8001440:	20004018 	.word	0x20004018

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	//Touch screen interrupt has occured. Notify the touch screen thread.
	xTaskNotifyFromISR( touchTaskHandle, 0, eSetValueWithOverwrite, pdFALSE);
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <EXTI9_5_IRQHandler+0x24>)
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	2300      	movs	r3, #0
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2203      	movs	r2, #3
 8001482:	2100      	movs	r1, #0
 8001484:	f007 ffa2 	bl	80093cc <xTaskGenericNotifyFromISR>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 8001488:	2080      	movs	r0, #128	; 0x80
 800148a:	f003 fd2d 	bl	8004ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200040b0 	.word	0x200040b0

08001498 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800149e:	f005 ffa7 	bl	80073f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200044e8 	.word	0x200044e8

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f008 fcf6 	bl	8009ecc <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20018000 	.word	0x20018000
 800150c:	00000400 	.word	0x00000400
 8001510:	20004534 	.word	0x20004534
 8001514:	2000a068 	.word	0x2000a068

08001518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <SystemInit+0x20>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <SystemInit+0x20>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <DM_New_Animation>:
 * Creates a new animation element.
 * bitmaps - an array of pointers to bitmaps for each frame
 * selected - the current frame being displayed
 * numChildren - the number of frames in the array
 */
struct DisplayElement DM_New_Animation(int x1, int y1, int scale, unsigned int **bitmaps, int numFrames) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b09c      	sub	sp, #112	; 0x70
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
	struct DisplayElement animation = getDefaultElement();
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fd8a 	bl	8002068 <getDefaultElement>
	animation.type = ANIMATION;
 8001554:	230a      	movs	r3, #10
 8001556:	617b      	str	r3, [r7, #20]
	animation.x1 = x1; animation.y1 = y1;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	b29b      	uxth	r3, r3
 800155c:	833b      	strh	r3, [r7, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	b29b      	uxth	r3, r3
 8001562:	837b      	strh	r3, [r7, #26]
	//Get the animation dimensions
	animation.x2 = x1 + (bitmaps[0][0] * scale);
 8001564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29a      	uxth	r2, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	fb12 f303 	smulbb	r3, r2, r3
 8001574:	b29a      	uxth	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	b29b      	uxth	r3, r3
 800157a:	4413      	add	r3, r2
 800157c:	b29b      	uxth	r3, r3
 800157e:	83bb      	strh	r3, [r7, #28]
	animation.y2 = y1 + (bitmaps[0][1] * scale);
 8001580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3304      	adds	r3, #4
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b29a      	uxth	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	fb12 f303 	smulbb	r3, r2, r3
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4413      	add	r3, r2
 800159a:	b29b      	uxth	r3, r3
 800159c:	83fb      	strh	r3, [r7, #30]
	animation.size = scale;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	623b      	str	r3, [r7, #32]
	animation.bitmaps = bitmaps;
 80015a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
	animation.selected = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
	animation.animationTicks = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	66bb      	str	r3, [r7, #104]	; 0x68
	animation.ticksPerFrame = TICKS_PER_FRAME;
 80015ae:	2302      	movs	r3, #2
 80015b0:	66fb      	str	r3, [r7, #108]	; 0x6c
	animation.refresh = ALWAYS;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	animation.draw = DM_Animation;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <DM_New_Animation+0x9c>)
 80015ba:	657b      	str	r3, [r7, #84]	; 0x54
	animation.numChildren = numFrames;
 80015bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015be:	667b      	str	r3, [r7, #100]	; 0x64

	return animation;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	225c      	movs	r2, #92	; 0x5c
 80015ca:	4619      	mov	r1, r3
 80015cc:	f008 fcaa 	bl	8009f24 <memcpy>
}
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	3770      	adds	r7, #112	; 0x70
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	080015dd 	.word	0x080015dd

080015dc <DM_Animation>:

/**
 * Draws an animation frame to the display.
 */
void DM_Animation(int id) {
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	draw_bitmap(elements[id].x1, elements[id].y1, elements[id].size, elements[id].bitmaps[elements[id].selected]);
 80015e4:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <DM_Animation+0x74>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	215c      	movs	r1, #92	; 0x5c
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	3304      	adds	r3, #4
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	461d      	mov	r5, r3
 80015f6:	4a16      	ldr	r2, [pc, #88]	; (8001650 <DM_Animation+0x74>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	215c      	movs	r1, #92	; 0x5c
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	3306      	adds	r3, #6
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	461e      	mov	r6, r3
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <DM_Animation+0x74>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	215c      	movs	r1, #92	; 0x5c
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	4413      	add	r3, r2
 8001614:	330c      	adds	r3, #12
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <DM_Animation+0x74>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	205c      	movs	r0, #92	; 0x5c
 800161e:	fb00 f303 	mul.w	r3, r0, r3
 8001622:	4413      	add	r3, r2
 8001624:	3324      	adds	r3, #36	; 0x24
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <DM_Animation+0x74>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	245c      	movs	r4, #92	; 0x5c
 800162e:	fb04 f303 	mul.w	r3, r4, r3
 8001632:	4403      	add	r3, r0
 8001634:	3310      	adds	r3, #16
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	460a      	mov	r2, r1
 8001640:	4631      	mov	r1, r6
 8001642:	4628      	mov	r0, r5
 8001644:	f002 f8f0 	bl	8003828 <draw_bitmap>
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001650:	20004538 	.word	0x20004538

08001654 <DM_New_Bitmap>:


/**
 * Create a bitmap element and add it to the queue.
 */
struct DisplayElement DM_New_Bitmap(int x, int y, int scale, const unsigned int *src){
 8001654:	b580      	push	{r7, lr}
 8001656:	b09c      	sub	sp, #112	; 0x70
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
	  struct DisplayElement bitmap = getDefaultElement();
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fcfe 	bl	8002068 <getDefaultElement>
	  bitmap.type = BITMAP;
 800166c:	2305      	movs	r3, #5
 800166e:	617b      	str	r3, [r7, #20]
	  bitmap.x1 = x; bitmap.y1 = y;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	b29b      	uxth	r3, r3
 8001674:	833b      	strh	r3, [r7, #24]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	b29b      	uxth	r3, r3
 800167a:	837b      	strh	r3, [r7, #26]
	  //Calculate the bitmap size for proper collision detection
	  bitmap.x2 = x + src[0] * scale; bitmap.y2 = y + src[1] * scale;
 800167c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b29a      	uxth	r2, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	fb12 f303 	smulbb	r3, r2, r3
 800168a:	b29a      	uxth	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	b29b      	uxth	r3, r3
 8001690:	4413      	add	r3, r2
 8001692:	b29b      	uxth	r3, r3
 8001694:	83bb      	strh	r3, [r7, #28]
 8001696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001698:	3304      	adds	r3, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b29a      	uxth	r2, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	fb12 f303 	smulbb	r3, r2, r3
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	83fb      	strh	r3, [r7, #30]
	  bitmap.size = scale;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	623b      	str	r3, [r7, #32]
	  bitmap.bitmap = src;
 80016b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
	  bitmap.draw = DM_Bitmap;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <DM_New_Bitmap+0x88>)
 80016bc:	657b      	str	r3, [r7, #84]	; 0x54
	  bitmap.refresh = ONCE;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	  return bitmap;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	225c      	movs	r2, #92	; 0x5c
 80016ce:	4619      	mov	r1, r3
 80016d0:	f008 fc28 	bl	8009f24 <memcpy>
}
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	3770      	adds	r7, #112	; 0x70
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	080016e1 	.word	0x080016e1

080016e0 <DM_Bitmap>:

/**
 * Draws a bitmap to the display
 */
void DM_Bitmap(int id) {
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	draw_bitmap(elements[id].x1, elements[id].y1, elements[id].size, elements[id].bitmap);
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <DM_Bitmap+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	215c      	movs	r1, #92	; 0x5c
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	3304      	adds	r3, #4
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	461c      	mov	r4, r3
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <DM_Bitmap+0x5c>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	215c      	movs	r1, #92	; 0x5c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	3306      	adds	r3, #6
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	461d      	mov	r5, r3
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <DM_Bitmap+0x5c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	215c      	movs	r1, #92	; 0x5c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	330c      	adds	r3, #12
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <DM_Bitmap+0x5c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	205c      	movs	r0, #92	; 0x5c
 8001722:	fb00 f303 	mul.w	r3, r0, r3
 8001726:	440b      	add	r3, r1
 8001728:	3320      	adds	r3, #32
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4629      	mov	r1, r5
 800172e:	4620      	mov	r0, r4
 8001730:	f002 f87a 	bl	8003828 <draw_bitmap>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bdb0      	pop	{r4, r5, r7, pc}
 800173c:	20004538 	.word	0x20004538

08001740 <DM_New_Button>:
void DM_Button_onPress(int id);

/**
 * Create a new button and add it to the queue
 */
struct DisplayElement DM_New_Button(int x, int y, char *text, State state){
 8001740:	b580      	push	{r7, lr}
 8001742:	b09e      	sub	sp, #120	; 0x78
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
	int width = 120;
 800174e:	2378      	movs	r3, #120	; 0x78
 8001750:	677b      	str	r3, [r7, #116]	; 0x74
	int height = 40;
 8001752:	2328      	movs	r3, #40	; 0x28
 8001754:	673b      	str	r3, [r7, #112]	; 0x70
	//If the string is long, then increase button width
	int len = DM_StrLen(text, 64);
 8001756:	2140      	movs	r1, #64	; 0x40
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	f000 fb03 	bl	8001d64 <DM_StrLen>
 800175e:	66f8      	str	r0, [r7, #108]	; 0x6c
	if(len > 8) {
 8001760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001762:	2b08      	cmp	r3, #8
 8001764:	dd0c      	ble.n	8001780 <DM_New_Button+0x40>
		width = len * 12;
 8001766:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	677b      	str	r3, [r7, #116]	; 0x74
		//if this button is on the right-hand edge, then move it back a bit
		if(x > BTN_MIDDLE_X)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2bbe      	cmp	r3, #190	; 0xbe
 8001776:	dd03      	ble.n	8001780 <DM_New_Button+0x40>
			x = WIDTH - width - 10;
 8001778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800177a:	f5c3 73eb 	rsb	r3, r3, #470	; 0x1d6
 800177e:	60bb      	str	r3, [r7, #8]
	}
	struct DisplayElement button = getDefaultElement();
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fc6f 	bl	8002068 <getDefaultElement>
	button.type = BUTTON;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
	button.x1 = x; button.y1 = y; button.x2 = x + width; button.y2 = y + height;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	b29b      	uxth	r3, r3
 8001792:	82bb      	strh	r3, [r7, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	b29b      	uxth	r3, r3
 8001798:	82fb      	strh	r3, [r7, #22]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	b29a      	uxth	r2, r3
 800179e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	833b      	strh	r3, [r7, #24]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	837b      	strh	r3, [r7, #26]
	button.text = text;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	button.state = state;
 80017ba:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80017be:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	button.oldState = state - 1; //Will only refresh when the states DONT match.
 80017c2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	button.draw = DM_Button;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <DM_New_Button+0xb4>)
 80017d0:	653b      	str	r3, [r7, #80]	; 0x50
	button.onPress = NULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	657b      	str	r3, [r7, #84]	; 0x54
	button.refresh = ALWAYS;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	return button;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4618      	mov	r0, r3
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	225c      	movs	r2, #92	; 0x5c
 80017e6:	4619      	mov	r1, r3
 80017e8:	f008 fb9c 	bl	8009f24 <memcpy>
}
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	3778      	adds	r7, #120	; 0x78
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	080017f9 	.word	0x080017f9

080017f8 <DM_Button>:

/**
 * A button looking thing
 */
void DM_Button(int id) {
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	6078      	str	r0, [r7, #4]
	int outlineColour = COLOR_GRAY;
 8001800:	f248 4310 	movw	r3, #33808	; 0x8410
 8001804:	61fb      	str	r3, [r7, #28]
	int fillColour = COLOR_LIGHTGRAY;
 8001806:	f24c 6318 	movw	r3, #50712	; 0xc618
 800180a:	61bb      	str	r3, [r7, #24]
	int textColour = COLOR_BLACK;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
	if(elements[id].state == DISABLED) {
 8001810:	4a95      	ldr	r2, [pc, #596]	; (8001a68 <DM_Button+0x270>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	215c      	movs	r1, #92	; 0x5c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3330      	adds	r3, #48	; 0x30
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d108      	bne.n	8001836 <DM_Button+0x3e>
		fillColour = COLOR_WHITE;
 8001824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001828:	61bb      	str	r3, [r7, #24]
		outlineColour = COLOR_LIGHTGRAY;
 800182a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800182e:	61fb      	str	r3, [r7, #28]
		textColour = COLOR_LIGHTGRAY;
 8001830:	f24c 6318 	movw	r3, #50712	; 0xc618
 8001834:	617b      	str	r3, [r7, #20]
	}
	if(elements[id].state == SELECTED) {
 8001836:	4a8c      	ldr	r2, [pc, #560]	; (8001a68 <DM_Button+0x270>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	215c      	movs	r1, #92	; 0x5c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	3330      	adds	r3, #48	; 0x30
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d102      	bne.n	8001850 <DM_Button+0x58>
		fillColour = COLOR_LIGHTBLUE;
 800184a:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 800184e:	61bb      	str	r3, [r7, #24]
	}
	//Draw the background
	fill_rectangle(elements[id].x1 + 1, elements[id].y1 + 1, elements[id].x2 - 1, elements[id].y2 - 1, fillColour);
 8001850:	4a85      	ldr	r2, [pc, #532]	; (8001a68 <DM_Button+0x270>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	215c      	movs	r1, #92	; 0x5c
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	3304      	adds	r3, #4
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	1c58      	adds	r0, r3, #1
 8001862:	4a81      	ldr	r2, [pc, #516]	; (8001a68 <DM_Button+0x270>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	215c      	movs	r1, #92	; 0x5c
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	3306      	adds	r3, #6
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	1c59      	adds	r1, r3, #1
 8001874:	4a7c      	ldr	r2, [pc, #496]	; (8001a68 <DM_Button+0x270>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	245c      	movs	r4, #92	; 0x5c
 800187a:	fb04 f303 	mul.w	r3, r4, r3
 800187e:	4413      	add	r3, r2
 8001880:	3308      	adds	r3, #8
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	4c78      	ldr	r4, [pc, #480]	; (8001a68 <DM_Button+0x270>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	255c      	movs	r5, #92	; 0x5c
 800188c:	fb05 f303 	mul.w	r3, r5, r3
 8001890:	4423      	add	r3, r4
 8001892:	330a      	adds	r3, #10
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	1e5c      	subs	r4, r3, #1
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	4623      	mov	r3, r4
 800189e:	f001 fe43 	bl	8003528 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(elements[id].x1 + 1, elements[id].y1, elements[id].x2, elements[id].y1 + 1, outlineColour);
 80018a2:	4a71      	ldr	r2, [pc, #452]	; (8001a68 <DM_Button+0x270>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	215c      	movs	r1, #92	; 0x5c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	3304      	adds	r3, #4
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	1c58      	adds	r0, r3, #1
 80018b4:	4a6c      	ldr	r2, [pc, #432]	; (8001a68 <DM_Button+0x270>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	215c      	movs	r1, #92	; 0x5c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3306      	adds	r3, #6
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	461c      	mov	r4, r3
 80018c6:	4a68      	ldr	r2, [pc, #416]	; (8001a68 <DM_Button+0x270>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	215c      	movs	r1, #92	; 0x5c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3308      	adds	r3, #8
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	461d      	mov	r5, r3
 80018d8:	4a63      	ldr	r2, [pc, #396]	; (8001a68 <DM_Button+0x270>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	215c      	movs	r1, #92	; 0x5c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3306      	adds	r3, #6
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	4613      	mov	r3, r2
 80018f0:	462a      	mov	r2, r5
 80018f2:	4621      	mov	r1, r4
 80018f4:	f001 fe18 	bl	8003528 <fill_rectangle>
	//Left border
	fill_rectangle(elements[id].x1, elements[id].y1 + 1, elements[id].x1 + 1, elements[id].y2, outlineColour);
 80018f8:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <DM_Button+0x270>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	215c      	movs	r1, #92	; 0x5c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3304      	adds	r3, #4
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	461d      	mov	r5, r3
 800190a:	4a57      	ldr	r2, [pc, #348]	; (8001a68 <DM_Button+0x270>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	215c      	movs	r1, #92	; 0x5c
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	3306      	adds	r3, #6
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	1c59      	adds	r1, r3, #1
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <DM_Button+0x270>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	205c      	movs	r0, #92	; 0x5c
 8001922:	fb00 f303 	mul.w	r3, r0, r3
 8001926:	4413      	add	r3, r2
 8001928:	3304      	adds	r3, #4
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	484e      	ldr	r0, [pc, #312]	; (8001a68 <DM_Button+0x270>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	245c      	movs	r4, #92	; 0x5c
 8001934:	fb04 f303 	mul.w	r3, r4, r3
 8001938:	4403      	add	r3, r0
 800193a:	330a      	adds	r3, #10
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	4603      	mov	r3, r0
 8001946:	4628      	mov	r0, r5
 8001948:	f001 fdee 	bl	8003528 <fill_rectangle>
	//Bottom border
	fill_rectangle(elements[id].x1 + 1, elements[id].y2, elements[id].x2, elements[id].y2 + 1, outlineColour);
 800194c:	4a46      	ldr	r2, [pc, #280]	; (8001a68 <DM_Button+0x270>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	215c      	movs	r1, #92	; 0x5c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3304      	adds	r3, #4
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	1c58      	adds	r0, r3, #1
 800195e:	4a42      	ldr	r2, [pc, #264]	; (8001a68 <DM_Button+0x270>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	215c      	movs	r1, #92	; 0x5c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	330a      	adds	r3, #10
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	461c      	mov	r4, r3
 8001970:	4a3d      	ldr	r2, [pc, #244]	; (8001a68 <DM_Button+0x270>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	215c      	movs	r1, #92	; 0x5c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3308      	adds	r3, #8
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	461d      	mov	r5, r3
 8001982:	4a39      	ldr	r2, [pc, #228]	; (8001a68 <DM_Button+0x270>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	215c      	movs	r1, #92	; 0x5c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	330a      	adds	r3, #10
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	462a      	mov	r2, r5
 800199c:	4621      	mov	r1, r4
 800199e:	f001 fdc3 	bl	8003528 <fill_rectangle>
	//Right border
	fill_rectangle(elements[id].x2, elements[id].y1 + 1, elements[id].x2 + 1, elements[id].y2, outlineColour);
 80019a2:	4a31      	ldr	r2, [pc, #196]	; (8001a68 <DM_Button+0x270>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	215c      	movs	r1, #92	; 0x5c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3308      	adds	r3, #8
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	461d      	mov	r5, r3
 80019b4:	4a2c      	ldr	r2, [pc, #176]	; (8001a68 <DM_Button+0x270>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	215c      	movs	r1, #92	; 0x5c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3306      	adds	r3, #6
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	1c59      	adds	r1, r3, #1
 80019c6:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <DM_Button+0x270>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	205c      	movs	r0, #92	; 0x5c
 80019cc:	fb00 f303 	mul.w	r3, r0, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3308      	adds	r3, #8
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	4823      	ldr	r0, [pc, #140]	; (8001a68 <DM_Button+0x270>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	245c      	movs	r4, #92	; 0x5c
 80019de:	fb04 f303 	mul.w	r3, r4, r3
 80019e2:	4403      	add	r3, r0
 80019e4:	330a      	adds	r3, #10
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4603      	mov	r3, r0
 80019f0:	4628      	mov	r0, r5
 80019f2:	f001 fd99 	bl	8003528 <fill_rectangle>

	//Calculate the length of the string to center the text
	int strLen = DM_StrLen(elements[id].text, 18);
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <DM_Button+0x270>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	215c      	movs	r1, #92	; 0x5c
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	332c      	adds	r3, #44	; 0x2c
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2112      	movs	r1, #18
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f9ab 	bl	8001d64 <DM_StrLen>
 8001a0e:	6138      	str	r0, [r7, #16]

	//Each char will be 8px wide
	int halfWidth = strLen * 3;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
	//Write the text
	draw_fast_string(elements[id].x1 + 50 - halfWidth, elements[id].y1 + 16, textColour, fillColour, elements[id].text);
 8001a1a:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <DM_Button+0x270>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	215c      	movs	r1, #92	; 0x5c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3304      	adds	r3, #4
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad0      	subs	r0, r2, r3
 8001a32:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <DM_Button+0x270>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	215c      	movs	r1, #92	; 0x5c
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3306      	adds	r3, #6
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	f103 0110 	add.w	r1, r3, #16
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <DM_Button+0x270>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	245c      	movs	r4, #92	; 0x5c
 8001a4c:	fb04 f303 	mul.w	r3, r4, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	332c      	adds	r3, #44	; 0x2c
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	f001 feba 	bl	80037d4 <draw_fast_string>
}
 8001a60:	bf00      	nop
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bdb0      	pop	{r4, r5, r7, pc}
 8001a68:	20004538 	.word	0x20004538

08001a6c <DM_Button_onPress>:

/**
 * Intrinsic button press function. Any global behaviours for all buttons should go here.
 */
void DM_Button_onPress(int id) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	if(elements[id].onPress)
 8001a74:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <DM_Button_onPress+0x38>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	215c      	movs	r1, #92	; 0x5c
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	3344      	adds	r3, #68	; 0x44
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <DM_Button_onPress+0x30>
		elements[id].onPress(id);
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <DM_Button_onPress+0x38>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	215c      	movs	r1, #92	; 0x5c
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	3344      	adds	r3, #68	; 0x44
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20004538 	.word	0x20004538

08001aa8 <DM_Init>:
int previously_touched_element = 0;

/**
 * Initialises the LCD device, and allocates any memory required.
 */
void DM_Init() {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	lcd_init_parallel();
 8001aac:	f001 fbc8 	bl	8003240 <lcd_init_parallel>
	DM_Clear();
 8001ab0:	f000 f8da 	bl	8001c68 <DM_Clear>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <DM_Draw>:

/**
 * Draw the whole queue.
 */
void DM_Draw() {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
	//Draw each element int he array of display elements
	for(int i = 0; i < numElements; i++) {
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	e0c2      	b.n	8001c4a <DM_Draw+0x192>
		//Only draw elements flagged for update
		if(elements[i].refresh == ONCE) {
 8001ac4:	4a66      	ldr	r2, [pc, #408]	; (8001c60 <DM_Draw+0x1a8>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	215c      	movs	r1, #92	; 0x5c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	333c      	adds	r3, #60	; 0x3c
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d112      	bne.n	8001afe <DM_Draw+0x46>
			//Draw this element once then clear the refresh flag
			elements[i].draw(i);
 8001ad8:	4a61      	ldr	r2, [pc, #388]	; (8001c60 <DM_Draw+0x1a8>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	215c      	movs	r1, #92	; 0x5c
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3340      	adds	r3, #64	; 0x40
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
			elements[i].refresh = NEVER;
 8001aec:	4a5c      	ldr	r2, [pc, #368]	; (8001c60 <DM_Draw+0x1a8>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	215c      	movs	r1, #92	; 0x5c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	333c      	adds	r3, #60	; 0x3c
 8001afa:	2202      	movs	r2, #2
 8001afc:	701a      	strb	r2, [r3, #0]
		}
		if(elements[i].refresh == ALWAYS) {
 8001afe:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <DM_Draw+0x1a8>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	215c      	movs	r1, #92	; 0x5c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	333c      	adds	r3, #60	; 0x3c
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8098 	bne.w	8001c44 <DM_Draw+0x18c>
			//For elements that ALWAYS draw, check if the state has changed.
			//Only draw if the state has changed.
			if(elements[i].oldState != elements[i].state) {
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <DM_Draw+0x1a8>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	215c      	movs	r1, #92	; 0x5c
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3331      	adds	r3, #49	; 0x31
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	494e      	ldr	r1, [pc, #312]	; (8001c60 <DM_Draw+0x1a8>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	205c      	movs	r0, #92	; 0x5c
 8001b2a:	fb00 f303 	mul.w	r3, r0, r3
 8001b2e:	440b      	add	r3, r1
 8001b30:	3330      	adds	r3, #48	; 0x30
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d01a      	beq.n	8001b6e <DM_Draw+0xb6>
				elements[i].draw(i);
 8001b38:	4a49      	ldr	r2, [pc, #292]	; (8001c60 <DM_Draw+0x1a8>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	215c      	movs	r1, #92	; 0x5c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3340      	adds	r3, #64	; 0x40
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
				//Update the oldState
				elements[i].oldState = elements[i].state;
 8001b4c:	4a44      	ldr	r2, [pc, #272]	; (8001c60 <DM_Draw+0x1a8>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	215c      	movs	r1, #92	; 0x5c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3330      	adds	r3, #48	; 0x30
 8001b5a:	7818      	ldrb	r0, [r3, #0]
 8001b5c:	4a40      	ldr	r2, [pc, #256]	; (8001c60 <DM_Draw+0x1a8>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	215c      	movs	r1, #92	; 0x5c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3331      	adds	r3, #49	; 0x31
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	701a      	strb	r2, [r3, #0]
			}

			//Advance the ticks of an animation
			//Once the tick counter is reached, the animation advances to the next frame
			if(elements[i].type == ANIMATION) {
 8001b6e:	4a3c      	ldr	r2, [pc, #240]	; (8001c60 <DM_Draw+0x1a8>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	215c      	movs	r1, #92	; 0x5c
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d161      	bne.n	8001c44 <DM_Draw+0x18c>
				elements[i].animationTicks++;
 8001b80:	4a37      	ldr	r2, [pc, #220]	; (8001c60 <DM_Draw+0x1a8>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	215c      	movs	r1, #92	; 0x5c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3354      	adds	r3, #84	; 0x54
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	4933      	ldr	r1, [pc, #204]	; (8001c60 <DM_Draw+0x1a8>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	205c      	movs	r0, #92	; 0x5c
 8001b98:	fb00 f303 	mul.w	r3, r0, r3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3354      	adds	r3, #84	; 0x54
 8001ba0:	601a      	str	r2, [r3, #0]
				//If this element is due to advance to the next frame
				if(elements[i].animationTicks >= elements[i].ticksPerFrame) {
 8001ba2:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <DM_Draw+0x1a8>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	215c      	movs	r1, #92	; 0x5c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	3354      	adds	r3, #84	; 0x54
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	492b      	ldr	r1, [pc, #172]	; (8001c60 <DM_Draw+0x1a8>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	205c      	movs	r0, #92	; 0x5c
 8001bb8:	fb00 f303 	mul.w	r3, r0, r3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3358      	adds	r3, #88	; 0x58
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	db3e      	blt.n	8001c44 <DM_Draw+0x18c>
					//Draw the frame
					elements[i].draw(i);
 8001bc6:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <DM_Draw+0x1a8>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	215c      	movs	r1, #92	; 0x5c
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3340      	adds	r3, #64	; 0x40
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	4798      	blx	r3

					//Advance the frame and reset the counters
					elements[i].animationTicks = 0;
 8001bda:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <DM_Draw+0x1a8>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	215c      	movs	r1, #92	; 0x5c
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	3354      	adds	r3, #84	; 0x54
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
					elements[i].selected++;
 8001bec:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <DM_Draw+0x1a8>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	215c      	movs	r1, #92	; 0x5c
 8001bf2:	fb01 f303 	mul.w	r3, r1, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3310      	adds	r3, #16
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	4918      	ldr	r1, [pc, #96]	; (8001c60 <DM_Draw+0x1a8>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	205c      	movs	r0, #92	; 0x5c
 8001c04:	fb00 f303 	mul.w	r3, r0, r3
 8001c08:	440b      	add	r3, r1
 8001c0a:	3310      	adds	r3, #16
 8001c0c:	601a      	str	r2, [r3, #0]
					if(elements[i].selected >= elements[i].numChildren)
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <DM_Draw+0x1a8>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	215c      	movs	r1, #92	; 0x5c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	3310      	adds	r3, #16
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4910      	ldr	r1, [pc, #64]	; (8001c60 <DM_Draw+0x1a8>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	205c      	movs	r0, #92	; 0x5c
 8001c24:	fb00 f303 	mul.w	r3, r0, r3
 8001c28:	440b      	add	r3, r1
 8001c2a:	3350      	adds	r3, #80	; 0x50
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	db08      	blt.n	8001c44 <DM_Draw+0x18c>
						elements[i].selected = 0;
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <DM_Draw+0x1a8>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	215c      	movs	r1, #92	; 0x5c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3310      	adds	r3, #16
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < numElements; i++) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3301      	adds	r3, #1
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <DM_Draw+0x1ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f6ff af37 	blt.w	8001ac4 <DM_Draw+0xc>
				}
			}
		}

	}
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20004538 	.word	0x20004538
 8001c64:	200050b8 	.word	0x200050b8

08001c68 <DM_Clear>:

/**
 * Clears the array of elements to draw, and clears the screen.
 */
void DM_Clear() {
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b09b      	sub	sp, #108	; 0x6c
 8001c6c:	af02      	add	r7, sp, #8
	//Add a blank screen element to the start of the display
	elements[0] = DM_New_Fill_Rectangle(0, 0, WIDTH, HEIGHT, BG_COLOUR);
 8001c6e:	4c0d      	ldr	r4, [pc, #52]	; (8001ca4 <DM_Clear+0x3c>)
 8001c70:	4638      	mov	r0, r7
 8001c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	f000 fa35 	bl	80020f4 <DM_New_Fill_Rectangle>
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	225c      	movs	r2, #92	; 0x5c
 8001c90:	4619      	mov	r1, r3
 8001c92:	f008 f947 	bl	8009f24 <memcpy>

	//Use a background image instead
	//elements[0] = DM_New_Bitmap(0, 0, 2, BGImage);

	//Reset the array counter
	numElements = 1;
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <DM_Clear+0x40>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	3764      	adds	r7, #100	; 0x64
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd90      	pop	{r4, r7, pc}
 8001ca4:	20004538 	.word	0x20004538
 8001ca8:	200050b8 	.word	0x200050b8

08001cac <DM_Refresh_Element>:
}

/**
 * Register an element for refresh on next cycle.
 */
void DM_Refresh_Element(int id) {
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	elements[id].refresh = ONCE;
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <DM_Refresh_Element+0x28>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	215c      	movs	r1, #92	; 0x5c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	333c      	adds	r3, #60	; 0x3c
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20004538 	.word	0x20004538

08001cd8 <DM_Add_Element>:

/**
 * Adds an element to the queue to be drawn later.
 */
int DM_Add_Element(struct DisplayElement newElement) {
 8001cd8:	b084      	sub	sp, #16
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	f107 0c08 	add.w	ip, r7, #8
 8001ce2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	elements[numElements++] = newElement;
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <DM_Add_Element+0x44>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	490b      	ldr	r1, [pc, #44]	; (8001d1c <DM_Add_Element+0x44>)
 8001cee:	600a      	str	r2, [r1, #0]
 8001cf0:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <DM_Add_Element+0x48>)
 8001cf2:	215c      	movs	r1, #92	; 0x5c
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	225c      	movs	r2, #92	; 0x5c
 8001d02:	4619      	mov	r1, r3
 8001d04:	f008 f90e 	bl	8009f24 <memcpy>

	return numElements - 1;
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <DM_Add_Element+0x44>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3b01      	subs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d16:	b004      	add	sp, #16
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200050b8 	.word	0x200050b8
 8001d20:	20004538 	.word	0x20004538

08001d24 <DM_Replace_Element>:

/**
 * Replaces a specific element in the queue with a new one
 */
void DM_Replace_Element(int id, struct DisplayElement newElement) {
 8001d24:	b084      	sub	sp, #16
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	f107 0014 	add.w	r0, r7, #20
 8001d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	elements[id] = newElement;
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <DM_Replace_Element+0x3c>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	215c      	movs	r1, #92	; 0x5c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	225c      	movs	r2, #92	; 0x5c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f008 f8ea 	bl	8009f24 <memcpy>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d5a:	b004      	add	sp, #16
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20004538 	.word	0x20004538

08001d64 <DM_StrLen>:

/**
 * Calculate the length of a string up to a maximum length.
 * Returns the maximum length if length is exceeded.
 */
int DM_StrLen(char *str, int length) {
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
	int strLen = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < length; i++) {
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	e00b      	b.n	8001d90 <DM_StrLen+0x2c>
		if(str[i] == '\0') {
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <DM_StrLen+0x26>
			strLen = i;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60fb      	str	r3, [r7, #12]
			break;
 8001d88:	e006      	b.n	8001d98 <DM_StrLen+0x34>
	for(int i = 0; i < length; i++) {
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbef      	blt.n	8001d78 <DM_StrLen+0x14>
		}
	}

	return strLen;
 8001d98:	68fb      	ldr	r3, [r7, #12]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <DM_Remove_Element>:
 * Contrary to the name, this does not actually remove the element,
 * it just tells the element not to refresh anymore, and then
 * draws a box over it.
 * The element can still be referenced.
 */
void DM_Remove_Element(int id) {
 8001da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001daa:	b0af      	sub	sp, #188	; 0xbc
 8001dac:	af14      	add	r7, sp, #80	; 0x50
 8001dae:	6078      	str	r0, [r7, #4]
	elements[id].refresh = NEVER;
 8001db0:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <DM_Remove_Element+0x98>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	215c      	movs	r1, #92	; 0x5c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	333c      	adds	r3, #60	; 0x3c
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	701a      	strb	r2, [r3, #0]
	DM_Add_Element(DM_New_Fill_Rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, BG_COLOUR));
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <DM_Remove_Element+0x98>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	215c      	movs	r1, #92	; 0x5c
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	461c      	mov	r4, r3
 8001dd4:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <DM_Remove_Element+0x98>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	215c      	movs	r1, #92	; 0x5c
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	3306      	adds	r3, #6
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	461d      	mov	r5, r3
 8001de6:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <DM_Remove_Element+0x98>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	215c      	movs	r1, #92	; 0x5c
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	3308      	adds	r3, #8
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	461e      	mov	r6, r3
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <DM_Remove_Element+0x98>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	215c      	movs	r1, #92	; 0x5c
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	330a      	adds	r3, #10
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f107 000c 	add.w	r0, r7, #12
 8001e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	9200      	str	r2, [sp, #0]
 8001e16:	4633      	mov	r3, r6
 8001e18:	462a      	mov	r2, r5
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	f000 f96a 	bl	80020f4 <DM_New_Fill_Rectangle>
 8001e20:	4668      	mov	r0, sp
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	224c      	movs	r2, #76	; 0x4c
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f008 f87b 	bl	8009f24 <memcpy>
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e34:	f7ff ff50 	bl	8001cd8 <DM_Add_Element>
}
 8001e38:	bf00      	nop
 8001e3a:	376c      	adds	r7, #108	; 0x6c
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e40:	20004538 	.word	0x20004538

08001e44 <DM_Parse_Press>:
 *
 * Remember that most of the time element 0 is the background.
 *
 * Returns -1 if nothing is detected.
 */
int DM_Parse_Press(int x, int y) {
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
	//Check each element to determine if the x,y coordinates are within it's bounds
	for(int i = numElements; i >= 0; i--) {
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <DM_Parse_Press+0x94>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e034      	b.n	8001ec0 <DM_Parse_Press+0x7c>
		if(x > elements[i].x1 && y > elements[i].y1 && x < elements[i].x2 && y < elements[i].y2) {
 8001e56:	4a21      	ldr	r2, [pc, #132]	; (8001edc <DM_Parse_Press+0x98>)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	215c      	movs	r1, #92	; 0x5c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	dd25      	ble.n	8001eba <DM_Parse_Press+0x76>
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <DM_Parse_Press+0x98>)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	215c      	movs	r1, #92	; 0x5c
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	3306      	adds	r3, #6
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4293      	cmp	r3, r2
 8001e84:	dd19      	ble.n	8001eba <DM_Parse_Press+0x76>
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <DM_Parse_Press+0x98>)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	215c      	movs	r1, #92	; 0x5c
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	3308      	adds	r3, #8
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	da0d      	bge.n	8001eba <DM_Parse_Press+0x76>
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <DM_Parse_Press+0x98>)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	215c      	movs	r1, #92	; 0x5c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	330a      	adds	r3, #10
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	da01      	bge.n	8001eba <DM_Parse_Press+0x76>
			return i;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	e007      	b.n	8001eca <DM_Parse_Press+0x86>
	for(int i = numElements; i >= 0; i--) {
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	dac7      	bge.n	8001e56 <DM_Parse_Press+0x12>
		}
	}

	return -1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200050b8 	.word	0x200050b8
 8001edc:	20004538 	.word	0x20004538

08001ee0 <DM_Do_Press>:
 * context highlighting etc., as well as an externally defined onPress() function to handle
 * specific tasks.
 *
 * Returns the ID of the element touched, or -1 if no element was touched.
 */
int DM_Do_Press(struct Touch touch) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Find the touched element, if any
	int id = DM_Parse_Press(touch.X, touch.Y);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ffa6 	bl	8001e44 <DM_Parse_Press>
 8001ef8:	6178      	str	r0, [r7, #20]

	//If no element was found then return right away
	if(id < 0)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da01      	bge.n	8001f04 <DM_Do_Press+0x24>
		return id;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	e0a5      	b.n	8002050 <DM_Do_Press+0x170>

	//Call any onPress function for this element on RELEASE.
	//Check that the element we released on was the one we pressed originally
	if(touch.state == 0x01 && id == previously_touched_element) {
 8001f04:	7bbb      	ldrb	r3, [r7, #14]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d150      	bne.n	8001fac <DM_Do_Press+0xcc>
 8001f0a:	4b53      	ldr	r3, [pc, #332]	; (8002058 <DM_Do_Press+0x178>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d14b      	bne.n	8001fac <DM_Do_Press+0xcc>
		//Revert the element's state
		elements[previously_touched_element].state = ENABLED;
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <DM_Do_Press+0x178>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a50      	ldr	r2, [pc, #320]	; (800205c <DM_Do_Press+0x17c>)
 8001f1a:	215c      	movs	r1, #92	; 0x5c
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	3330      	adds	r3, #48	; 0x30
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]

		//Call the relevant intrinsic onPress function
		switch(elements[id].type) {
 8001f28:	4a4c      	ldr	r2, [pc, #304]	; (800205c <DM_Do_Press+0x17c>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	215c      	movs	r1, #92	; 0x5c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b0d      	cmp	r3, #13
 8001f38:	d834      	bhi.n	8001fa4 <DM_Do_Press+0xc4>
 8001f3a:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <DM_Do_Press+0x60>)
 8001f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f40:	08001f79 	.word	0x08001f79
 8001f44:	08001fa5 	.word	0x08001fa5
 8001f48:	08001fa5 	.word	0x08001fa5
 8001f4c:	08001fa5 	.word	0x08001fa5
 8001f50:	08001fa5 	.word	0x08001fa5
 8001f54:	08001fa5 	.word	0x08001fa5
 8001f58:	08001fa5 	.word	0x08001fa5
 8001f5c:	08001fa5 	.word	0x08001fa5
 8001f60:	08001fa5 	.word	0x08001fa5
 8001f64:	08001f81 	.word	0x08001f81
 8001f68:	08001fa5 	.word	0x08001fa5
 8001f6c:	08001f8f 	.word	0x08001f8f
 8001f70:	08001fa5 	.word	0x08001fa5
 8001f74:	08001f9d 	.word	0x08001f9d
		case BUTTON:
			DM_Button_onPress(id);
 8001f78:	6978      	ldr	r0, [r7, #20]
 8001f7a:	f7ff fd77 	bl	8001a6c <DM_Button_onPress>
			break;
 8001f7e:	e011      	b.n	8001fa4 <DM_Do_Press+0xc4>
		case LIST:
			DM_List_onPress(id, touch.X, touch.Y);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	4619      	mov	r1, r3
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f000 f9a6 	bl	80022d8 <DM_List_onPress>
			break;
 8001f8c:	e00a      	b.n	8001fa4 <DM_Do_Press+0xc4>
		case NUMPAD:
			DM_NumPad_onPress(id, touch.X, touch.Y);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	4619      	mov	r1, r3
 8001f94:	6978      	ldr	r0, [r7, #20]
 8001f96:	f000 fb63 	bl	8002660 <DM_NumPad_onPress>
			break;
 8001f9a:	e003      	b.n	8001fa4 <DM_Do_Press+0xc4>
		case TEXTBOX:
			DM_TextBox_onPress(id);
 8001f9c:	6978      	ldr	r0, [r7, #20]
 8001f9e:	f000 fe21 	bl	8002be4 <DM_TextBox_onPress>
			break;
 8001fa2:	bf00      	nop
		}

		//The controller seems to put extra RELEASE events, so invalidate the previously_touched_element
		previously_touched_element = -1;
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <DM_Do_Press+0x178>)
 8001fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001faa:	601a      	str	r2, [r3, #0]
	}

	//A press has been recorded, or moved, but has not been released yet
	if(touch.state == 0x00 && elements[id].state != DISABLED) {
 8001fac:	7bbb      	ldrb	r3, [r7, #14]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d13b      	bne.n	800202a <DM_Do_Press+0x14a>
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	; (800205c <DM_Do_Press+0x17c>)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	215c      	movs	r1, #92	; 0x5c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3330      	adds	r3, #48	; 0x30
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d031      	beq.n	800202a <DM_Do_Press+0x14a>
		//Update the "current touched element"
		previously_touched_element = id;
 8001fc6:	4a24      	ldr	r2, [pc, #144]	; (8002058 <DM_Do_Press+0x178>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	6013      	str	r3, [r2, #0]
		//Set the state of the helement for context highlighting
		elements[id].state = SELECTED;
 8001fcc:	4a23      	ldr	r2, [pc, #140]	; (800205c <DM_Do_Press+0x17c>)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	215c      	movs	r1, #92	; 0x5c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3330      	adds	r3, #48	; 0x30
 8001fda:	2202      	movs	r2, #2
 8001fdc:	701a      	strb	r2, [r3, #0]


		//If an element can take focus, then take it
		if(elements[id].canFocus) {
 8001fde:	4a1f      	ldr	r2, [pc, #124]	; (800205c <DM_Do_Press+0x17c>)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	215c      	movs	r1, #92	; 0x5c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3334      	adds	r3, #52	; 0x34
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01b      	beq.n	800202a <DM_Do_Press+0x14a>
			oldFocusedElement = focusedElement;
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <DM_Do_Press+0x180>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <DM_Do_Press+0x184>)
 8001ff8:	6013      	str	r3, [r2, #0]
			focusedElement = id;
 8001ffa:	4a19      	ldr	r2, [pc, #100]	; (8002060 <DM_Do_Press+0x180>)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	6013      	str	r3, [r2, #0]
			//Tell the previously focused element to update
			if(elements[oldFocusedElement].canFocus)
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <DM_Do_Press+0x184>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a15      	ldr	r2, [pc, #84]	; (800205c <DM_Do_Press+0x17c>)
 8002006:	215c      	movs	r1, #92	; 0x5c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3334      	adds	r3, #52	; 0x34
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <DM_Do_Press+0x14a>
				elements[oldFocusedElement].refresh = ONCE;
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <DM_Do_Press+0x184>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <DM_Do_Press+0x17c>)
 800201c:	215c      	movs	r1, #92	; 0x5c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	333c      	adds	r3, #60	; 0x3c
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
		}
	}

	//Finally, if the touch was released, but it is no longer on the element, then revert the element state
	if(touch.state == 0x01 && id != previously_touched_element){
 800202a:	7bbb      	ldrb	r3, [r7, #14]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10e      	bne.n	800204e <DM_Do_Press+0x16e>
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <DM_Do_Press+0x178>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	429a      	cmp	r2, r3
 8002038:	d009      	beq.n	800204e <DM_Do_Press+0x16e>
		//Un-select the previously touched element
		elements[previously_touched_element].state = ENABLED;
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <DM_Do_Press+0x178>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <DM_Do_Press+0x17c>)
 8002040:	215c      	movs	r1, #92	; 0x5c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	3330      	adds	r3, #48	; 0x30
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
	}

	return id;
 800204e:	697b      	ldr	r3, [r7, #20]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200050c4 	.word	0x200050c4
 800205c:	20004538 	.word	0x20004538
 8002060:	200050bc 	.word	0x200050bc
 8002064:	200050c0 	.word	0x200050c0

08002068 <getDefaultElement>:

/**
 * Returns an empty element with everything set to either zero, or NULL.
 * Use this to build a new element safely without random memory.
 */
struct DisplayElement getDefaultElement() {
 8002068:	b580      	push	{r7, lr}
 800206a:	b09a      	sub	sp, #104	; 0x68
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	struct DisplayElement newElement;
	newElement.type;
	newElement.x1 = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	823b      	strh	r3, [r7, #16]
	newElement.y1 = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	827b      	strh	r3, [r7, #18]
	newElement.x2 = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	82bb      	strh	r3, [r7, #20]
	newElement.y2 = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	82fb      	strh	r3, [r7, #22]
	newElement.size = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
	newElement.selected = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
	newElement.colour = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
	newElement.bgColour = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
	newElement.orientation = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	newElement.bitmap = NULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
	newElement.bitmaps = NULL;
 800209a:	2300      	movs	r3, #0
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
	newElement.title = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
	newElement.text = NULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63bb      	str	r3, [r7, #56]	; 0x38
	newElement.state = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	newElement.oldState = -1;
 80020ac:	23ff      	movs	r3, #255	; 0xff
 80020ae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	newElement.canFocus = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	643b      	str	r3, [r7, #64]	; 0x40
	newElement.maxLength = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	647b      	str	r3, [r7, #68]	; 0x44
	newElement.refresh = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	newElement.draw = NULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	newElement.onPress = NULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	653b      	str	r3, [r7, #80]	; 0x50
	newElement.onDrag = NULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	657b      	str	r3, [r7, #84]	; 0x54
	newElement.children = NULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	65bb      	str	r3, [r7, #88]	; 0x58
	newElement.numChildren = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	65fb      	str	r3, [r7, #92]	; 0x5c
	newElement.animationTicks = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	663b      	str	r3, [r7, #96]	; 0x60
	newElement.ticksPerFrame = TICKS_PER_FRAME;
 80020d8:	2302      	movs	r3, #2
 80020da:	667b      	str	r3, [r7, #100]	; 0x64

	return newElement;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4618      	mov	r0, r3
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	225c      	movs	r2, #92	; 0x5c
 80020e6:	4619      	mov	r1, r3
 80020e8:	f007 ff1c 	bl	8009f24 <memcpy>
}
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	3768      	adds	r7, #104	; 0x68
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <DM_New_Fill_Rectangle>:
void DM_Fill_Gradient(int id);

/**
 * Create a rectangle display element and add it to the queue
 */
struct DisplayElement DM_New_Fill_Rectangle(int x1, int y1, int x2, int y2, int colour) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b09c      	sub	sp, #112	; 0x70
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
	struct DisplayElement box = getDefaultElement();
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffae 	bl	8002068 <getDefaultElement>
	box.type = FILLRECTANGLE;
 800210c:	2301      	movs	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
	box.x1 = x1; box.y1 = y1; box.x2 = x2; box.y2 = y2;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	b29b      	uxth	r3, r3
 8002114:	833b      	strh	r3, [r7, #24]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	b29b      	uxth	r3, r3
 800211a:	837b      	strh	r3, [r7, #26]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	83bb      	strh	r3, [r7, #28]
 8002122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002124:	b29b      	uxth	r3, r3
 8002126:	83fb      	strh	r3, [r7, #30]
	box.colour = colour;
 8002128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
	box.draw = DM_Fill_Rectangle;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <DM_New_Fill_Rectangle+0x5c>)
 800212e:	657b      	str	r3, [r7, #84]	; 0x54
	box.refresh = ONCE;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	return box;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	225c      	movs	r2, #92	; 0x5c
 8002140:	4619      	mov	r1, r3
 8002142:	f007 feef 	bl	8009f24 <memcpy>
}
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	3770      	adds	r7, #112	; 0x70
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	08002155 	.word	0x08002155

08002154 <DM_Fill_Rectangle>:

/**
 * A display element that draws a box
 */
void DM_Fill_Rectangle(int id) {
 8002154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002156:	b085      	sub	sp, #20
 8002158:	af02      	add	r7, sp, #8
 800215a:	6078      	str	r0, [r7, #4]
	fill_rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, elements[id].colour);
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <DM_Fill_Rectangle+0x74>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	215c      	movs	r1, #92	; 0x5c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3304      	adds	r3, #4
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <DM_Fill_Rectangle+0x74>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	215c      	movs	r1, #92	; 0x5c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3306      	adds	r3, #6
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	461c      	mov	r4, r3
 8002180:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <DM_Fill_Rectangle+0x74>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	215c      	movs	r1, #92	; 0x5c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3308      	adds	r3, #8
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	461d      	mov	r5, r3
 8002192:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <DM_Fill_Rectangle+0x74>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	215c      	movs	r1, #92	; 0x5c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	330a      	adds	r3, #10
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	461e      	mov	r6, r3
 80021a4:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <DM_Fill_Rectangle+0x74>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	215c      	movs	r1, #92	; 0x5c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3314      	adds	r3, #20
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4633      	mov	r3, r6
 80021b8:	462a      	mov	r2, r5
 80021ba:	4621      	mov	r1, r4
 80021bc:	f001 f9b4 	bl	8003528 <fill_rectangle>
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c8:	20004538 	.word	0x20004538

080021cc <DM_New_Fill_Gradient>:


/**
 * Creates a gradient filled rectangle element between two colours.
 */
struct DisplayElement DM_New_Fill_Gradient(int x1, int y1, int x2, int y2, unsigned int startColour, unsigned int endColour, Orientation orientation) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b09c      	sub	sp, #112	; 0x70
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
	struct DisplayElement box = getDefaultElement();
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff42 	bl	8002068 <getDefaultElement>
	box.type = FILLGRADIENT;
 80021e4:	2308      	movs	r3, #8
 80021e6:	617b      	str	r3, [r7, #20]
	box.x1 = x1; box.y1 = y1; box.x2 = x2; box.y2 = y2;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	833b      	strh	r3, [r7, #24]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	837b      	strh	r3, [r7, #26]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	83bb      	strh	r3, [r7, #28]
 80021fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	83fb      	strh	r3, [r7, #30]
	box.colour = startColour;
 8002200:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
	box.bgColour = endColour;
 8002204:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
	box.orientation = orientation;
 800220a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800220e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	box.draw = DM_Fill_Gradient;
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <DM_New_Fill_Gradient+0x68>)
 8002214:	657b      	str	r3, [r7, #84]	; 0x54
	box.refresh = ONCE;
 8002216:	2301      	movs	r3, #1
 8002218:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	return box;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4618      	mov	r0, r3
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	225c      	movs	r2, #92	; 0x5c
 8002226:	4619      	mov	r1, r3
 8002228:	f007 fe7c 	bl	8009f24 <memcpy>
}
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	3770      	adds	r7, #112	; 0x70
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	08002239 	.word	0x08002239

08002238 <DM_Fill_Gradient>:

/**
 * Draws a gradient filled rectangle to the display.
 */
void DM_Fill_Gradient(int id) {
 8002238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800223a:	b087      	sub	sp, #28
 800223c:	af04      	add	r7, sp, #16
 800223e:	6078      	str	r0, [r7, #4]
	fill_gradient(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, elements[id].colour, elements[id].bgColour, elements[id].orientation);
 8002240:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <DM_Fill_Gradient+0x9c>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	215c      	movs	r1, #92	; 0x5c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	461d      	mov	r5, r3
 8002252:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <DM_Fill_Gradient+0x9c>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	215c      	movs	r1, #92	; 0x5c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3306      	adds	r3, #6
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	461e      	mov	r6, r3
 8002264:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <DM_Fill_Gradient+0x9c>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	215c      	movs	r1, #92	; 0x5c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3308      	adds	r3, #8
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	469c      	mov	ip, r3
 8002276:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <DM_Fill_Gradient+0x9c>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	215c      	movs	r1, #92	; 0x5c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	330a      	adds	r3, #10
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	469e      	mov	lr, r3
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <DM_Fill_Gradient+0x9c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	215c      	movs	r1, #92	; 0x5c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3314      	adds	r3, #20
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	490e      	ldr	r1, [pc, #56]	; (80022d4 <DM_Fill_Gradient+0x9c>)
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	205c      	movs	r0, #92	; 0x5c
 800229e:	fb00 f202 	mul.w	r2, r0, r2
 80022a2:	440a      	add	r2, r1
 80022a4:	3218      	adds	r2, #24
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	480a      	ldr	r0, [pc, #40]	; (80022d4 <DM_Fill_Gradient+0x9c>)
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	245c      	movs	r4, #92	; 0x5c
 80022ae:	fb04 f101 	mul.w	r1, r4, r1
 80022b2:	4401      	add	r1, r0
 80022b4:	311c      	adds	r1, #28
 80022b6:	7809      	ldrb	r1, [r1, #0]
 80022b8:	9102      	str	r1, [sp, #8]
 80022ba:	9201      	str	r2, [sp, #4]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4673      	mov	r3, lr
 80022c0:	4662      	mov	r2, ip
 80022c2:	4631      	mov	r1, r6
 80022c4:	4628      	mov	r0, r5
 80022c6:	f001 fb27 	bl	8003918 <fill_gradient>
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20004538 	.word	0x20004538

080022d8 <DM_List_onPress>:

/**
 * Called by the touch handler when the list is pressed. Determines which element
 * was pressed.
 */
void DM_List_onPress(int id, int x, int y) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
	const int lineHeight = 30;
 80022e4:	231e      	movs	r3, #30
 80022e6:	617b      	str	r3, [r7, #20]

	elements[id].state = SELECTED;
 80022e8:	4a20      	ldr	r2, [pc, #128]	; (800236c <DM_List_onPress+0x94>)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	215c      	movs	r1, #92	; 0x5c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3330      	adds	r3, #48	; 0x30
 80022f6:	2202      	movs	r2, #2
 80022f8:	701a      	strb	r2, [r3, #0]
	elements[id].refresh = ONCE;
 80022fa:	4a1c      	ldr	r2, [pc, #112]	; (800236c <DM_List_onPress+0x94>)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	215c      	movs	r1, #92	; 0x5c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333c      	adds	r3, #60	; 0x3c
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
	//Report which item is selected
	int index = (int)((y - elements[id].y1) / lineHeight);
 800230c:	4a17      	ldr	r2, [pc, #92]	; (800236c <DM_List_onPress+0x94>)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	215c      	movs	r1, #92	; 0x5c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3306      	adds	r3, #6
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	1a9a      	subs	r2, r3, r2
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	fb92 f3f3 	sdiv	r3, r2, r3
 8002328:	613b      	str	r3, [r7, #16]

	elements[id].selected = index;
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <DM_List_onPress+0x94>)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	215c      	movs	r1, #92	; 0x5c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3310      	adds	r3, #16
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	601a      	str	r2, [r3, #0]

	if(elements[id].onPress)
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <DM_List_onPress+0x94>)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	215c      	movs	r1, #92	; 0x5c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3344      	adds	r3, #68	; 0x44
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d009      	beq.n	8002364 <DM_List_onPress+0x8c>
		elements[id].onPress(id);
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <DM_List_onPress+0x94>)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	215c      	movs	r1, #92	; 0x5c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3344      	adds	r3, #68	; 0x44
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	4798      	blx	r3
}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20004538 	.word	0x20004538

08002370 <DM_New_NumPad>:
 * Create a new number pad element.
 *
 * A number pad will always fill the right-hand half of the display.
 * Design your components appropriately.
 */
struct DisplayElement DM_New_NumPad() {
 8002370:	b580      	push	{r7, lr}
 8002372:	b09a      	sub	sp, #104	; 0x68
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	struct DisplayElement numPad = getDefaultElement();
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fe73 	bl	8002068 <getDefaultElement>
	numPad.type = NUMPAD;
 8002382:	230b      	movs	r3, #11
 8002384:	60fb      	str	r3, [r7, #12]
	numPad.x1 = WIDTH - (60 * 3);
 8002386:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800238a:	823b      	strh	r3, [r7, #16]
	numPad.y1 = 50;
 800238c:	2332      	movs	r3, #50	; 0x32
 800238e:	827b      	strh	r3, [r7, #18]
	numPad.x2 = WIDTH;
 8002390:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002394:	82bb      	strh	r3, [r7, #20]
	numPad.y2 = HEIGHT;
 8002396:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800239a:	82fb      	strh	r3, [r7, #22]

	numPad.state = ENABLED;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	numPad.selected = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
	numPad.onPress = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	653b      	str	r3, [r7, #80]	; 0x50
	numPad.refresh = ALWAYS;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	numPad.draw = DM_NumPad;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <DM_New_NumPad+0x5c>)
 80023b2:	64fb      	str	r3, [r7, #76]	; 0x4c

	return numPad;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	225c      	movs	r2, #92	; 0x5c
 80023be:	4619      	mov	r1, r3
 80023c0:	f007 fdb0 	bl	8009f24 <memcpy>
}
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	3768      	adds	r7, #104	; 0x68
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	080023d1 	.word	0x080023d1

080023d0 <DM_NumPad>:

/**
 * Draws a number pad to the display;
 */
void DM_NumPad(int id) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	const int buttonSpace = 60;
 80023d8:	233c      	movs	r3, #60	; 0x3c
 80023da:	613b      	str	r3, [r7, #16]
	//Draw a few buttons
	State state = ENABLED;
 80023dc:	2300      	movs	r3, #0
 80023de:	77fb      	strb	r3, [r7, #31]
	//Each vertical row
	for(int y = 0; y < 3; y++) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	e050      	b.n	8002488 <DM_NumPad+0xb8>
		//..And Each horizontal row
		for(int x = 0; x < 3; x++) {
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e047      	b.n	800247c <DM_NumPad+0xac>
			//Figure out which digit this is
			int thisDigit = x + (y * 3) + 1;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	441a      	add	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	4413      	add	r3, r2
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]

			//Is this particular digit selected
			if(elements[id].selected == thisDigit && elements[id].state == SELECTED)
 80023fc:	4a5c      	ldr	r2, [pc, #368]	; (8002570 <DM_NumPad+0x1a0>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	215c      	movs	r1, #92	; 0x5c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3310      	adds	r3, #16
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	429a      	cmp	r2, r3
 8002410:	d10c      	bne.n	800242c <DM_NumPad+0x5c>
 8002412:	4a57      	ldr	r2, [pc, #348]	; (8002570 <DM_NumPad+0x1a0>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	215c      	movs	r1, #92	; 0x5c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3330      	adds	r3, #48	; 0x30
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d102      	bne.n	800242c <DM_NumPad+0x5c>
				state = SELECTED;
 8002426:	2302      	movs	r3, #2
 8002428:	77fb      	strb	r3, [r7, #31]
 800242a:	e001      	b.n	8002430 <DM_NumPad+0x60>
			else
				state = ENABLED;
 800242c:	2300      	movs	r3, #0
 800242e:	77fb      	strb	r3, [r7, #31]

			//Put the digit with its ASCII to the display
			DM_NumPad_Button(elements[id].x1 + (x * buttonSpace), elements[id].y1 + (y * buttonSpace), thisDigit + 48, state);
 8002430:	4a4f      	ldr	r2, [pc, #316]	; (8002570 <DM_NumPad+0x1a0>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	215c      	movs	r1, #92	; 0x5c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	18c8      	adds	r0, r1, r3
 800244c:	4a48      	ldr	r2, [pc, #288]	; (8002570 <DM_NumPad+0x1a0>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	215c      	movs	r1, #92	; 0x5c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3306      	adds	r3, #6
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	4419      	add	r1, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3330      	adds	r3, #48	; 0x30
 800246e:	b2da      	uxtb	r2, r3
 8002470:	7ffb      	ldrb	r3, [r7, #31]
 8002472:	f000 f87f 	bl	8002574 <DM_NumPad_Button>
		for(int x = 0; x < 3; x++) {
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b02      	cmp	r3, #2
 8002480:	ddb4      	ble.n	80023ec <DM_NumPad+0x1c>
	for(int y = 0; y < 3; y++) {
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	3301      	adds	r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b02      	cmp	r3, #2
 800248c:	ddab      	ble.n	80023e6 <DM_NumPad+0x16>
		}
	}

	//zero at the very bottom
	if(elements[id].selected == 11 && elements[id].state == SELECTED)
 800248e:	4a38      	ldr	r2, [pc, #224]	; (8002570 <DM_NumPad+0x1a0>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	215c      	movs	r1, #92	; 0x5c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3310      	adds	r3, #16
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b0b      	cmp	r3, #11
 80024a0:	d10c      	bne.n	80024bc <DM_NumPad+0xec>
 80024a2:	4a33      	ldr	r2, [pc, #204]	; (8002570 <DM_NumPad+0x1a0>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	215c      	movs	r1, #92	; 0x5c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3330      	adds	r3, #48	; 0x30
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d102      	bne.n	80024bc <DM_NumPad+0xec>
		state = SELECTED;
 80024b6:	2302      	movs	r3, #2
 80024b8:	77fb      	strb	r3, [r7, #31]
 80024ba:	e001      	b.n	80024c0 <DM_NumPad+0xf0>
	else
		state = ENABLED;
 80024bc:	2300      	movs	r3, #0
 80024be:	77fb      	strb	r3, [r7, #31]
	DM_NumPad_Button(elements[id].x1 + (1 * buttonSpace), elements[id].y1 + (3 * buttonSpace), '0', state);
 80024c0:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <DM_NumPad+0x1a0>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	215c      	movs	r1, #92	; 0x5c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3304      	adds	r3, #4
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	18d0      	adds	r0, r2, r3
 80024d6:	4a26      	ldr	r2, [pc, #152]	; (8002570 <DM_NumPad+0x1a0>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	215c      	movs	r1, #92	; 0x5c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3306      	adds	r3, #6
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	4619      	mov	r1, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	4419      	add	r1, r3
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
 80024f4:	2230      	movs	r2, #48	; 0x30
 80024f6:	f000 f83d 	bl	8002574 <DM_NumPad_Button>
	//And a backspace button
	if(elements[id].selected == 12 && elements[id].state == SELECTED)
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <DM_NumPad+0x1a0>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	215c      	movs	r1, #92	; 0x5c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	3310      	adds	r3, #16
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d10c      	bne.n	8002528 <DM_NumPad+0x158>
 800250e:	4a18      	ldr	r2, [pc, #96]	; (8002570 <DM_NumPad+0x1a0>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	215c      	movs	r1, #92	; 0x5c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	3330      	adds	r3, #48	; 0x30
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d102      	bne.n	8002528 <DM_NumPad+0x158>
		state = SELECTED;
 8002522:	2302      	movs	r3, #2
 8002524:	77fb      	strb	r3, [r7, #31]
 8002526:	e001      	b.n	800252c <DM_NumPad+0x15c>
	else
		state = ENABLED;
 8002528:	2300      	movs	r3, #0
 800252a:	77fb      	strb	r3, [r7, #31]
	DM_NumPad_Button(elements[id].x1 + (2 * buttonSpace), elements[id].y1 + (3 * buttonSpace), '<', state);
 800252c:	4a10      	ldr	r2, [pc, #64]	; (8002570 <DM_NumPad+0x1a0>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	215c      	movs	r1, #92	; 0x5c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3304      	adds	r3, #4
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	18d0      	adds	r0, r2, r3
 8002544:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <DM_NumPad+0x1a0>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	215c      	movs	r1, #92	; 0x5c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3306      	adds	r3, #6
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	4419      	add	r1, r3
 8002560:	7ffb      	ldrb	r3, [r7, #31]
 8002562:	223c      	movs	r2, #60	; 0x3c
 8002564:	f000 f806 	bl	8002574 <DM_NumPad_Button>

}
 8002568:	bf00      	nop
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20004538 	.word	0x20004538

08002574 <DM_NumPad_Button>:

/**
 * Draws an individual number button to the numpad.
 */
void DM_NumPad_Button(int x1, int y1, char c, State state) {
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b08d      	sub	sp, #52	; 0x34
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	460b      	mov	r3, r1
 8002584:	71fb      	strb	r3, [r7, #7]
 8002586:	4613      	mov	r3, r2
 8002588:	71bb      	strb	r3, [r7, #6]
	const int buttonSize = 50;
 800258a:	2332      	movs	r3, #50	; 0x32
 800258c:	61bb      	str	r3, [r7, #24]
	int x2 = x1 + buttonSize;
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
	int y2 = y1 + buttonSize;
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4413      	add	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
	int outlineColour = COLOR_GRAY;
 800259e:	f248 4310 	movw	r3, #33808	; 0x8410
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
	int fillColour = COLOR_LIGHTGRAY;
 80025a4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80025a8:	623b      	str	r3, [r7, #32]
	int textColour = COLOR_BLACK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
	if(state == DISABLED) {
 80025ae:	79bb      	ldrb	r3, [r7, #6]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d108      	bne.n	80025c6 <DM_NumPad_Button+0x52>
		fillColour = COLOR_WHITE;
 80025b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b8:	623b      	str	r3, [r7, #32]
		outlineColour = COLOR_LIGHTGRAY;
 80025ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
		textColour = COLOR_LIGHTGRAY;
 80025c0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80025c4:	61fb      	str	r3, [r7, #28]
	}
	if(state == SELECTED) {
 80025c6:	79bb      	ldrb	r3, [r7, #6]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d102      	bne.n	80025d2 <DM_NumPad_Button+0x5e>
		fillColour = COLOR_LIGHTBLUE;
 80025cc:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 80025d0:	623b      	str	r3, [r7, #32]
	}
	//Draw the background
	fill_rectangle(x1 + 1, y1 + 1, x2 - 1, y2 - 1, fillColour);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1c58      	adds	r0, r3, #1
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1c59      	adds	r1, r3, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1e5a      	subs	r2, r3, #1
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1e5c      	subs	r4, r3, #1
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	4623      	mov	r3, r4
 80025e8:	f000 ff9e 	bl	8003528 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(x1 + 1, y1, x2, y1 + 1, outlineColour);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1c58      	adds	r0, r3, #1
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4613      	mov	r3, r2
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	f000 ff93 	bl	8003528 <fill_rectangle>
	//Left border
	fill_rectangle(x1, y1 + 1, x1 + 1, y2, outlineColour);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	1c59      	adds	r1, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 ff89 	bl	8003528 <fill_rectangle>
	//Bottom border
	fill_rectangle(x1 + 1, y2, x2, y2 + 1, outlineColour);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1c58      	adds	r0, r3, #1
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	4613      	mov	r3, r2
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	6939      	ldr	r1, [r7, #16]
 8002628:	f000 ff7e 	bl	8003528 <fill_rectangle>
	//Right border
	fill_rectangle(x2, y1 + 1, x2 + 1, y2, outlineColour);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f000 ff74 	bl	8003528 <fill_rectangle>
	//Write the text
	draw_fast_char(x1 + 12, y1 + 16, c, textColour, fillColour);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f103 000c 	add.w	r0, r3, #12
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f103 0110 	add.w	r1, r3, #16
 800264c:	79fa      	ldrb	r2, [r7, #7]
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f001 f826 	bl	80036a4 <draw_fast_char>
}
 8002658:	bf00      	nop
 800265a:	372c      	adds	r7, #44	; 0x2c
 800265c:	46bd      	mov	sp, r7
 800265e:	bd90      	pop	{r4, r7, pc}

08002660 <DM_NumPad_onPress>:

/**
 * Intrinsic onPress function for the number pad. Determines which button was pressed
 * then hands off to the user-defined onPress function.
 */
void DM_NumPad_onPress(int id, int x, int y) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
	const int buttonSize = 50;
 800266c:	2332      	movs	r3, #50	; 0x32
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
	const int buttonMargin = 10;
 8002670:	230a      	movs	r3, #10
 8002672:	623b      	str	r3, [r7, #32]

	//Figure out which number was pressed.
	//The number are arranged in a 3x4

	//Calculate the X and Y axis location in button-space
	int xIndex = (int) ((x - elements[id].x1) / (buttonSize + buttonMargin));
 8002674:	4a2d      	ldr	r2, [pc, #180]	; (800272c <DM_NumPad_onPress+0xcc>)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	215c      	movs	r1, #92	; 0x5c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	3304      	adds	r3, #4
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1a9a      	subs	r2, r3, r2
 800268a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	440b      	add	r3, r1
 8002690:	fb92 f3f3 	sdiv	r3, r2, r3
 8002694:	61fb      	str	r3, [r7, #28]
	int yIndex = (int) ((y - elements[id].y1) / (buttonSize + buttonMargin));
 8002696:	4a25      	ldr	r2, [pc, #148]	; (800272c <DM_NumPad_onPress+0xcc>)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	215c      	movs	r1, #92	; 0x5c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	3306      	adds	r3, #6
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	1a9a      	subs	r2, r3, r2
 80026ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	440b      	add	r3, r1
 80026b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80026b6:	61bb      	str	r3, [r7, #24]

	//Work out the index
	int index = xIndex + (yIndex * 3) + 1;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	441a      	add	r2, r3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]

	//Report the number that's selected
	elements[id].selected = index;
 80026c8:	4a18      	ldr	r2, [pc, #96]	; (800272c <DM_NumPad_onPress+0xcc>)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	215c      	movs	r1, #92	; 0x5c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3310      	adds	r3, #16
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]

	//If a text box is selected, then update its string
	if(elements[focusedElement].type == TEXTBOX) {
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <DM_NumPad_onPress+0xd0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <DM_NumPad_onPress+0xcc>)
 80026e0:	215c      	movs	r1, #92	; 0x5c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b0d      	cmp	r3, #13
 80026ec:	d105      	bne.n	80026fa <DM_NumPad_onPress+0x9a>
		updateTextBox(focusedElement, index);
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <DM_NumPad_onPress+0xd0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6979      	ldr	r1, [r7, #20]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f81d 	bl	8002734 <updateTextBox>
	}

	//Call any user-defind onPress function
	if(elements[id].onPress)
 80026fa:	4a0c      	ldr	r2, [pc, #48]	; (800272c <DM_NumPad_onPress+0xcc>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	215c      	movs	r1, #92	; 0x5c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3344      	adds	r3, #68	; 0x44
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <DM_NumPad_onPress+0xc2>
		elements[id].onPress(id);
 800270e:	4a07      	ldr	r2, [pc, #28]	; (800272c <DM_NumPad_onPress+0xcc>)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	215c      	movs	r1, #92	; 0x5c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3344      	adds	r3, #68	; 0x44
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	4798      	blx	r3
}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20004538 	.word	0x20004538
 8002730:	200050bc 	.word	0x200050bc

08002734 <updateTextBox>:

/**
 * Updates the currently selected text box with the button press
 */
void updateTextBox(int id, int num) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]

	int len = strlen(elements[id].text);
 800273e:	4a24      	ldr	r2, [pc, #144]	; (80027d0 <updateTextBox+0x9c>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	215c      	movs	r1, #92	; 0x5c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	332c      	adds	r3, #44	; 0x2c
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd fd3e 	bl	80001d0 <strlen>
 8002754:	4603      	mov	r3, r0
 8002756:	60fb      	str	r3, [r7, #12]

	//convert the index to a character
	//The numbers count up from 1, with 0 being reserved as NULL.
	//So the number zero is actually 11, and backspace is 12.
	if(num == 11)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b0b      	cmp	r3, #11
 800275c:	d101      	bne.n	8002762 <updateTextBox+0x2e>
		num = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	603b      	str	r3, [r7, #0]

	//If the num is 12 then it's a backspace, otherwise it's a digit
	if(num == 12) {
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b0c      	cmp	r3, #12
 8002766:	d10d      	bne.n	8002784 <updateTextBox+0x50>
		//Change the last character to null
		elements[id].text[len - 1] = '\0';
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <updateTextBox+0x9c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	215c      	movs	r1, #92	; 0x5c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	332c      	adds	r3, #44	; 0x2c
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3b01      	subs	r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e01d      	b.n	80027c0 <updateTextBox+0x8c>
	} else {
		//Check we don't overrun the maxLength of the box
		if(len < elements[id].maxLength) {
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <updateTextBox+0x9c>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	215c      	movs	r1, #92	; 0x5c
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4413      	add	r3, r2
 8002790:	3338      	adds	r3, #56	; 0x38
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	429a      	cmp	r2, r3
 8002798:	da12      	bge.n	80027c0 <updateTextBox+0x8c>
			//Calculate the new char and add it to the text string
			char c = num + 48;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	3330      	adds	r3, #48	; 0x30
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	72fb      	strb	r3, [r7, #11]
			strncat(elements[id].text, &c, 1);
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <updateTextBox+0x9c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	215c      	movs	r1, #92	; 0x5c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	332c      	adds	r3, #44	; 0x2c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f107 010b 	add.w	r1, r7, #11
 80027b8:	2201      	movs	r2, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f007 fcf6 	bl	800a1ac <strncat>
		}
	}

	//Register the element for update.
	DM_Refresh_Element(id);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff fa73 	bl	8001cac <DM_Refresh_Element>
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20004538 	.word	0x20004538

080027d4 <DM_New_Text>:
void DM_Fast_Text(int id);

/**
 * Various string drawing elements. Just puts the string on teh screen with nothing extra.
 */
struct DisplayElement DM_New_Text(int x, int y, int colour, int size, char* text){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b09c      	sub	sp, #112	; 0x70
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
	struct DisplayElement string = getDefaultElement();
 80027e2:	f107 0310 	add.w	r3, r7, #16
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fc3e 	bl	8002068 <getDefaultElement>
	string.type = TEXT;
 80027ec:	2302      	movs	r3, #2
 80027ee:	613b      	str	r3, [r7, #16]
	string.x1 = x; string.y1 = y;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	82bb      	strh	r3, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	82fb      	strh	r3, [r7, #22]
	//Have to calculate the length to make a prpoer hit box
	int strLen = DM_StrLen(text, 128);
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002800:	f7ff fab0 	bl	8001d64 <DM_StrLen>
 8002804:	66f8      	str	r0, [r7, #108]	; 0x6c
	string.x2 = x + ((strLen + 1) * 8); string.y2 = y + 14;
 8002806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002808:	3301      	adds	r3, #1
 800280a:	b29b      	uxth	r3, r3
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	b29a      	uxth	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	b29b      	uxth	r3, r3
 8002814:	4413      	add	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	833b      	strh	r3, [r7, #24]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	b29b      	uxth	r3, r3
 800281e:	330e      	adds	r3, #14
 8002820:	b29b      	uxth	r3, r3
 8002822:	837b      	strh	r3, [r7, #26]
	string.size = size;
 8002824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002826:	61fb      	str	r3, [r7, #28]
	string.colour = colour;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
	string.text = text;
 800282c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
	string.draw = DM_Text;
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <DM_New_Text+0x80>)
 8002832:	653b      	str	r3, [r7, #80]	; 0x50
	string.refresh = ONCE;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	return string;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4618      	mov	r0, r3
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	225c      	movs	r2, #92	; 0x5c
 8002844:	4619      	mov	r1, r3
 8002846:	f007 fb6d 	bl	8009f24 <memcpy>
}
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	3770      	adds	r7, #112	; 0x70
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	08002859 	.word	0x08002859

08002858 <DM_Text>:
void DM_Text(int id){
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af02      	add	r7, sp, #8
 800285e:	6078      	str	r0, [r7, #4]
	draw_string(elements[id].x1, elements[id].y1, elements[id].colour, elements[id].size, elements[id].text);
 8002860:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <DM_Text+0x70>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	215c      	movs	r1, #92	; 0x5c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	461d      	mov	r5, r3
 8002872:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <DM_Text+0x70>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	215c      	movs	r1, #92	; 0x5c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3306      	adds	r3, #6
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	461e      	mov	r6, r3
 8002884:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <DM_Text+0x70>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	215c      	movs	r1, #92	; 0x5c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	3314      	adds	r3, #20
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <DM_Text+0x70>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	205c      	movs	r0, #92	; 0x5c
 800289a:	fb00 f303 	mul.w	r3, r0, r3
 800289e:	440b      	add	r3, r1
 80028a0:	330c      	adds	r3, #12
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	4808      	ldr	r0, [pc, #32]	; (80028c8 <DM_Text+0x70>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	245c      	movs	r4, #92	; 0x5c
 80028aa:	fb04 f303 	mul.w	r3, r4, r3
 80028ae:	4403      	add	r3, r0
 80028b0:	332c      	adds	r3, #44	; 0x2c
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	460b      	mov	r3, r1
 80028b8:	4631      	mov	r1, r6
 80028ba:	4628      	mov	r0, r5
 80028bc:	f000 ff5a 	bl	8003774 <draw_string>
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028c8:	20004538 	.word	0x20004538

080028cc <DM_New_TextBox>:

/**
 * Creates a Text Box display element for use in the elements array.
 * NOTE: the "Title" property is used for Placeholder Text in this case.
 */
struct DisplayElement DM_New_TextBox(int x, int y, int length, char *placeholderText, char *text) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b09c      	sub	sp, #112	; 0x70
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
	struct DisplayElement textBox = getDefaultElement();
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fbc2 	bl	8002068 <getDefaultElement>
	textBox.type = TEXTBOX;
 80028e4:	230d      	movs	r3, #13
 80028e6:	617b      	str	r3, [r7, #20]
	textBox.x1 = x; textBox.y1 = y;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	833b      	strh	r3, [r7, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	837b      	strh	r3, [r7, #26]
	textBox.x2 = x + (length * 18) + 10;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	00d2      	lsls	r2, r2, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	b29b      	uxth	r3, r3
 8002906:	4413      	add	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	330a      	adds	r3, #10
 800290c:	b29b      	uxth	r3, r3
 800290e:	83bb      	strh	r3, [r7, #28]
	textBox.y2 = y + 30;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	b29b      	uxth	r3, r3
 8002914:	331e      	adds	r3, #30
 8002916:	b29b      	uxth	r3, r3
 8002918:	83fb      	strh	r3, [r7, #30]

	textBox.selected = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
	textBox.size = 2;
 800291e:	2302      	movs	r3, #2
 8002920:	623b      	str	r3, [r7, #32]
	textBox.text = text;
 8002922:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002924:	643b      	str	r3, [r7, #64]	; 0x40
	textBox.title = placeholderText;
 8002926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002928:	63fb      	str	r3, [r7, #60]	; 0x3c
	textBox.draw = DM_TextBox;
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <DM_New_TextBox+0x88>)
 800292c:	657b      	str	r3, [r7, #84]	; 0x54
	textBox.refresh = ALWAYS;
 800292e:	2300      	movs	r3, #0
 8002930:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	textBox.canFocus = 1;
 8002934:	2301      	movs	r3, #1
 8002936:	64bb      	str	r3, [r7, #72]	; 0x48
	textBox.maxLength = length;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	64fb      	str	r3, [r7, #76]	; 0x4c

	return textBox;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4618      	mov	r0, r3
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	225c      	movs	r2, #92	; 0x5c
 8002946:	4619      	mov	r1, r3
 8002948:	f007 faec 	bl	8009f24 <memcpy>
}
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	3770      	adds	r7, #112	; 0x70
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	08002959 	.word	0x08002959

08002958 <DM_TextBox>:

void DM_TextBox(int id) {
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]
	//Select some appropriate colours
	int fillColour = COLOR_WHITE;
 8002960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002964:	617b      	str	r3, [r7, #20]
	if(elements[id].selected != 0 && focusedElement == id)
 8002966:	4a9d      	ldr	r2, [pc, #628]	; (8002bdc <DM_TextBox+0x284>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	215c      	movs	r1, #92	; 0x5c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3310      	adds	r3, #16
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <DM_TextBox+0x32>
 800297a:	4b99      	ldr	r3, [pc, #612]	; (8002be0 <DM_TextBox+0x288>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	d102      	bne.n	800298a <DM_TextBox+0x32>
		fillColour = COLOR_LIGHTBLUE;
 8002984:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 8002988:	617b      	str	r3, [r7, #20]

	int textColour = COLOR_BLACK;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
	int placeholderTextColour = COLOR_LIGHTGRAY;
 800298e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002992:	60fb      	str	r3, [r7, #12]
	int outlineColour = COLOR_GRAY;
 8002994:	f248 4310 	movw	r3, #33808	; 0x8410
 8002998:	60bb      	str	r3, [r7, #8]

	//Draw a nice box
	//Draw the background
	fill_rectangle(elements[id].x1 + 1, elements[id].y1 + 1, elements[id].x2 - 1, elements[id].y2 - 1, fillColour);
 800299a:	4a90      	ldr	r2, [pc, #576]	; (8002bdc <DM_TextBox+0x284>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	215c      	movs	r1, #92	; 0x5c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	1c58      	adds	r0, r3, #1
 80029ac:	4a8b      	ldr	r2, [pc, #556]	; (8002bdc <DM_TextBox+0x284>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	215c      	movs	r1, #92	; 0x5c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3306      	adds	r3, #6
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	1c59      	adds	r1, r3, #1
 80029be:	4a87      	ldr	r2, [pc, #540]	; (8002bdc <DM_TextBox+0x284>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	245c      	movs	r4, #92	; 0x5c
 80029c4:	fb04 f303 	mul.w	r3, r4, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3308      	adds	r3, #8
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	1e5a      	subs	r2, r3, #1
 80029d0:	4c82      	ldr	r4, [pc, #520]	; (8002bdc <DM_TextBox+0x284>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	255c      	movs	r5, #92	; 0x5c
 80029d6:	fb05 f303 	mul.w	r3, r5, r3
 80029da:	4423      	add	r3, r4
 80029dc:	330a      	adds	r3, #10
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	1e5c      	subs	r4, r3, #1
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	4623      	mov	r3, r4
 80029e8:	f000 fd9e 	bl	8003528 <fill_rectangle>

	//Draw the outline
	//Top border
	fill_rectangle(elements[id].x1 + 1, elements[id].y1, elements[id].x2, elements[id].y1 + 1, outlineColour);
 80029ec:	4a7b      	ldr	r2, [pc, #492]	; (8002bdc <DM_TextBox+0x284>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	215c      	movs	r1, #92	; 0x5c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	1c58      	adds	r0, r3, #1
 80029fe:	4a77      	ldr	r2, [pc, #476]	; (8002bdc <DM_TextBox+0x284>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	215c      	movs	r1, #92	; 0x5c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3306      	adds	r3, #6
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	461c      	mov	r4, r3
 8002a10:	4a72      	ldr	r2, [pc, #456]	; (8002bdc <DM_TextBox+0x284>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	215c      	movs	r1, #92	; 0x5c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	461d      	mov	r5, r3
 8002a22:	4a6e      	ldr	r2, [pc, #440]	; (8002bdc <DM_TextBox+0x284>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	215c      	movs	r1, #92	; 0x5c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3306      	adds	r3, #6
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	462a      	mov	r2, r5
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	f000 fd73 	bl	8003528 <fill_rectangle>
	//Left border
	fill_rectangle(elements[id].x1, elements[id].y1 + 1, elements[id].x1 + 1, elements[id].y2, outlineColour);
 8002a42:	4a66      	ldr	r2, [pc, #408]	; (8002bdc <DM_TextBox+0x284>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	215c      	movs	r1, #92	; 0x5c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3304      	adds	r3, #4
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	461d      	mov	r5, r3
 8002a54:	4a61      	ldr	r2, [pc, #388]	; (8002bdc <DM_TextBox+0x284>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	215c      	movs	r1, #92	; 0x5c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3306      	adds	r3, #6
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	1c59      	adds	r1, r3, #1
 8002a66:	4a5d      	ldr	r2, [pc, #372]	; (8002bdc <DM_TextBox+0x284>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	205c      	movs	r0, #92	; 0x5c
 8002a6c:	fb00 f303 	mul.w	r3, r0, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3304      	adds	r3, #4
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	4858      	ldr	r0, [pc, #352]	; (8002bdc <DM_TextBox+0x284>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	245c      	movs	r4, #92	; 0x5c
 8002a7e:	fb04 f303 	mul.w	r3, r4, r3
 8002a82:	4403      	add	r3, r0
 8002a84:	330a      	adds	r3, #10
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4628      	mov	r0, r5
 8002a92:	f000 fd49 	bl	8003528 <fill_rectangle>
	//Bottom border
	fill_rectangle(elements[id].x1 + 1, elements[id].y2, elements[id].x2, elements[id].y2 + 1, outlineColour);
 8002a96:	4a51      	ldr	r2, [pc, #324]	; (8002bdc <DM_TextBox+0x284>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	215c      	movs	r1, #92	; 0x5c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	1c58      	adds	r0, r3, #1
 8002aa8:	4a4c      	ldr	r2, [pc, #304]	; (8002bdc <DM_TextBox+0x284>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	215c      	movs	r1, #92	; 0x5c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	330a      	adds	r3, #10
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	461c      	mov	r4, r3
 8002aba:	4a48      	ldr	r2, [pc, #288]	; (8002bdc <DM_TextBox+0x284>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	215c      	movs	r1, #92	; 0x5c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	461d      	mov	r5, r3
 8002acc:	4a43      	ldr	r2, [pc, #268]	; (8002bdc <DM_TextBox+0x284>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	215c      	movs	r1, #92	; 0x5c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	330a      	adds	r3, #10
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	462a      	mov	r2, r5
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	f000 fd1e 	bl	8003528 <fill_rectangle>
	//Right border
	fill_rectangle(elements[id].x2, elements[id].y1 + 1, elements[id].x2 + 1, elements[id].y2, outlineColour);
 8002aec:	4a3b      	ldr	r2, [pc, #236]	; (8002bdc <DM_TextBox+0x284>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	215c      	movs	r1, #92	; 0x5c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3308      	adds	r3, #8
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	461d      	mov	r5, r3
 8002afe:	4a37      	ldr	r2, [pc, #220]	; (8002bdc <DM_TextBox+0x284>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	215c      	movs	r1, #92	; 0x5c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3306      	adds	r3, #6
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	1c59      	adds	r1, r3, #1
 8002b10:	4a32      	ldr	r2, [pc, #200]	; (8002bdc <DM_TextBox+0x284>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	205c      	movs	r0, #92	; 0x5c
 8002b16:	fb00 f303 	mul.w	r3, r0, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	482e      	ldr	r0, [pc, #184]	; (8002bdc <DM_TextBox+0x284>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	245c      	movs	r4, #92	; 0x5c
 8002b28:	fb04 f303 	mul.w	r3, r4, r3
 8002b2c:	4403      	add	r3, r0
 8002b2e:	330a      	adds	r3, #10
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f000 fcf4 	bl	8003528 <fill_rectangle>

	//Draw the placeholder text or string
	if(elements[id].text[0] == '\0') {
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <DM_TextBox+0x284>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	215c      	movs	r1, #92	; 0x5c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	332c      	adds	r3, #44	; 0x2c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11f      	bne.n	8002b96 <DM_TextBox+0x23e>
		//If there is no main text, then draw the placeholder
		draw_string(elements[id].x1 + 5, elements[id].y1 + 4, placeholderTextColour, 2, elements[id].title);
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <DM_TextBox+0x284>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	215c      	movs	r1, #92	; 0x5c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	1d58      	adds	r0, r3, #5
 8002b68:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <DM_TextBox+0x284>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	215c      	movs	r1, #92	; 0x5c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3306      	adds	r3, #6
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	1d19      	adds	r1, r3, #4
 8002b7a:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <DM_TextBox+0x284>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	245c      	movs	r4, #92	; 0x5c
 8002b80:	fb04 f303 	mul.w	r3, r4, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3328      	adds	r3, #40	; 0x28
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	f000 fdf0 	bl	8003774 <draw_string>
	} else {
		draw_string(elements[id].x1 + 5, elements[id].y1 + 4, textColour, 2, elements[id].text);
	}
}
 8002b94:	e01e      	b.n	8002bd4 <DM_TextBox+0x27c>
		draw_string(elements[id].x1 + 5, elements[id].y1 + 4, textColour, 2, elements[id].text);
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <DM_TextBox+0x284>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	215c      	movs	r1, #92	; 0x5c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	1d58      	adds	r0, r3, #5
 8002ba8:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <DM_TextBox+0x284>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	215c      	movs	r1, #92	; 0x5c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3306      	adds	r3, #6
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	1d19      	adds	r1, r3, #4
 8002bba:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <DM_TextBox+0x284>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	245c      	movs	r4, #92	; 0x5c
 8002bc0:	fb04 f303 	mul.w	r3, r4, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	332c      	adds	r3, #44	; 0x2c
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2302      	movs	r3, #2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	f000 fdd0 	bl	8003774 <draw_string>
}
 8002bd4:	bf00      	nop
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bdb0      	pop	{r4, r5, r7, pc}
 8002bdc:	20004538 	.word	0x20004538
 8002be0:	200050bc 	.word	0x200050bc

08002be4 <DM_TextBox_onPress>:

/**
 * Handles highlighting a text box when it is selected
 */
void DM_TextBox_onPress(int id) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0ae      	sub	sp, #184	; 0xb8
 8002be8:	af14      	add	r7, sp, #80	; 0x50
 8002bea:	6078      	str	r0, [r7, #4]
	//Report that this box is selected
	elements[id].selected = 1;
 8002bec:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <DM_TextBox_onPress+0x44>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	215c      	movs	r1, #92	; 0x5c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3310      	adds	r3, #16
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

	//Add a number pad to the screen for typing
	DM_Add_Element(DM_New_NumPad());
 8002bfe:	f107 030c 	add.w	r3, r7, #12
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fbb4 	bl	8002370 <DM_New_NumPad>
 8002c08:	4668      	mov	r0, sp
 8002c0a:	f107 031c 	add.w	r3, r7, #28
 8002c0e:	224c      	movs	r2, #76	; 0x4c
 8002c10:	4619      	mov	r1, r3
 8002c12:	f007 f987 	bl	8009f24 <memcpy>
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c1c:	f7ff f85c 	bl	8001cd8 <DM_Add_Element>
}
 8002c20:	bf00      	nop
 8002c22:	3768      	adds	r7, #104	; 0x68
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20004538 	.word	0x20004538

08002c2c <DM_New_Title_Bar>:
void DM_Title_Bar(int id);

/**
 * Add a title bar to the top of the screen
 */
struct DisplayElement DM_New_Title_Bar(char *title) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b09a      	sub	sp, #104	; 0x68
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
	int height = 40;
 8002c36:	2328      	movs	r3, #40	; 0x28
 8002c38:	667b      	str	r3, [r7, #100]	; 0x64
	struct DisplayElement titleBar = getDefaultElement();
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fa12 	bl	8002068 <getDefaultElement>
	titleBar.type = TITLEBAR;
 8002c44:	2307      	movs	r3, #7
 8002c46:	60bb      	str	r3, [r7, #8]
	titleBar.x1 = 0; titleBar.y1 = 0; titleBar.x2 = WIDTH; titleBar.y2 = height;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	81bb      	strh	r3, [r7, #12]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	81fb      	strh	r3, [r7, #14]
 8002c50:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c54:	823b      	strh	r3, [r7, #16]
 8002c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	827b      	strh	r3, [r7, #18]
	titleBar.title = title;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
	titleBar.draw = DM_Title_Bar;
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <DM_New_Title_Bar+0x58>)
 8002c62:	64bb      	str	r3, [r7, #72]	; 0x48
	titleBar.refresh = ONCE;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	return titleBar;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f107 0308 	add.w	r3, r7, #8
 8002c72:	225c      	movs	r2, #92	; 0x5c
 8002c74:	4619      	mov	r1, r3
 8002c76:	f007 f955 	bl	8009f24 <memcpy>
}
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	3768      	adds	r7, #104	; 0x68
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	08002c89 	.word	0x08002c89

08002c88 <DM_Title_Bar>:

void DM_Title_Bar(int id) {
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b08a      	sub	sp, #40	; 0x28
 8002c8c:	af04      	add	r7, sp, #16
 8002c8e:	6078      	str	r0, [r7, #4]
	int backgroundColour = COLOR_LIGHTBLUE;
 8002c90:	f64a 63dc 	movw	r3, #44764	; 0xaedc
 8002c94:	617b      	str	r3, [r7, #20]
	int foregroundColour = COLOR_WHITE;
 8002c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c9a:	613b      	str	r3, [r7, #16]
	int halfWidth = (int)((elements[id].x2 - elements[id].x1) / 2);
 8002c9c:	4a3a      	ldr	r2, [pc, #232]	; (8002d88 <DM_Title_Bar+0x100>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	215c      	movs	r1, #92	; 0x5c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3308      	adds	r3, #8
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	4a36      	ldr	r2, [pc, #216]	; (8002d88 <DM_Title_Bar+0x100>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	215c      	movs	r1, #92	; 0x5c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3304      	adds	r3, #4
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	1ac3      	subs	r3, r0, r3
 8002cc0:	0fda      	lsrs	r2, r3, #31
 8002cc2:	4413      	add	r3, r2
 8002cc4:	105b      	asrs	r3, r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]

	//Draw the background
	//fill_rectangle(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, backgroundColour);
	fill_gradient(elements[id].x1, elements[id].y1, elements[id].x2, elements[id].y2, COLOR_NAVY, backgroundColour, HORIZONTAL);
 8002cc8:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <DM_Title_Bar+0x100>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	215c      	movs	r1, #92	; 0x5c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	4a2b      	ldr	r2, [pc, #172]	; (8002d88 <DM_Title_Bar+0x100>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	215c      	movs	r1, #92	; 0x5c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3306      	adds	r3, #6
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	461c      	mov	r4, r3
 8002cec:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <DM_Title_Bar+0x100>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	215c      	movs	r1, #92	; 0x5c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	461d      	mov	r5, r3
 8002cfe:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <DM_Title_Bar+0x100>)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	215c      	movs	r1, #92	; 0x5c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	330a      	adds	r3, #10
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2300      	movs	r3, #0
 8002d12:	9302      	str	r3, [sp, #8]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	230f      	movs	r3, #15
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	462a      	mov	r2, r5
 8002d20:	4621      	mov	r1, r4
 8002d22:	f000 fdf9 	bl	8003918 <fill_gradient>
	//And a line
	//fill_rectangle(elements[id].x1, elements[id].y2, elements[id].x2, elements[id].y2 + 1, COLOR_GRAY);

	//Center the text
	int titleLen = DM_StrLen(elements[id].title, 32);
 8002d26:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <DM_Title_Bar+0x100>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	215c      	movs	r1, #92	; 0x5c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3328      	adds	r3, #40	; 0x28
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2120      	movs	r1, #32
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff f813 	bl	8001d64 <DM_StrLen>
 8002d3e:	60b8      	str	r0, [r7, #8]
	draw_string(halfWidth - (titleLen * 9), elements[id].y1 + 10, foregroundColour, 2, elements[id].title);
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	075b      	lsls	r3, r3, #29
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	1a9a      	subs	r2, r3, r2
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	18d0      	adds	r0, r2, r3
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <DM_Title_Bar+0x100>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	215c      	movs	r1, #92	; 0x5c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3306      	adds	r3, #6
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	f103 010a 	add.w	r1, r3, #10
 8002d64:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <DM_Title_Bar+0x100>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	245c      	movs	r4, #92	; 0x5c
 8002d6a:	fb04 f303 	mul.w	r3, r4, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3328      	adds	r3, #40	; 0x28
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2302      	movs	r3, #2
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	f000 fcfb 	bl	8003774 <draw_string>
}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bdb0      	pop	{r4, r5, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20004538 	.word	0x20004538

08002d8c <DFPlayer_sendByte>:
#include "drivers/DFPlayer.h"

/**
 * Send a byte to the UART with flow control.
 */
void DFPlayer_sendByte(unsigned char data) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, &data, 1, 100);
 8002d96:	1df9      	adds	r1, r7, #7
 8002d98:	2364      	movs	r3, #100	; 0x64
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <DFPlayer_sendByte+0x20>)
 8002d9e:	f004 fd75 	bl	800788c <HAL_UART_Transmit>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20004460 	.word	0x20004460

08002db0 <DFPlayer_calculateChecksum>:
 * the commands look like yet)
 * 
 * Checksum = 0 - (0xFF + 0x06 + command + ACK + dataH + dataL) & 0xFFFF
 * 
 */
unsigned int DFPlayer_calculateChecksum(unsigned char command, unsigned char dataH, unsigned char dataL) {
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	71bb      	strb	r3, [r7, #6]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	717b      	strb	r3, [r7, #5]
    unsigned int checksum = 0 - (0xFF + 0x06 + command + dataH + dataL);
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	f203 1205 	addw	r2, r3, #261	; 0x105
 8002dc8:	79bb      	ldrb	r3, [r7, #6]
 8002dca:	441a      	add	r2, r3
 8002dcc:	797b      	ldrb	r3, [r7, #5]
 8002dce:	4413      	add	r3, r2
 8002dd0:	425b      	negs	r3, r3
 8002dd2:	60fb      	str	r3, [r7, #12]
    checksum = checksum & 0xFFFF;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	60fb      	str	r3, [r7, #12]
    
    return checksum;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <DFPlayer_sendCommand>:
/**
 * Send a command to the DFPlayer mini
 * Sends two data bytes.
 * Overloaded with another function to send only a single byte.
 */
void DFPlayer_sendCommand(unsigned char command, unsigned char dataH, unsigned char dataL) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
 8002df2:	460b      	mov	r3, r1
 8002df4:	71bb      	strb	r3, [r7, #6]
 8002df6:	4613      	mov	r3, r2
 8002df8:	717b      	strb	r3, [r7, #5]
    //Get the checksum
    unsigned int checksum = DFPlayer_calculateChecksum(command, dataH, dataL);
 8002dfa:	797a      	ldrb	r2, [r7, #5]
 8002dfc:	79b9      	ldrb	r1, [r7, #6]
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ffd5 	bl	8002db0 <DFPlayer_calculateChecksum>
 8002e06:	60f8      	str	r0, [r7, #12]
    
    //Normal command structure
    DFPlayer_sendByte(0x7E);
 8002e08:	207e      	movs	r0, #126	; 0x7e
 8002e0a:	f7ff ffbf 	bl	8002d8c <DFPlayer_sendByte>
    DFPlayer_sendByte(0xFF);
 8002e0e:	20ff      	movs	r0, #255	; 0xff
 8002e10:	f7ff ffbc 	bl	8002d8c <DFPlayer_sendByte>
    DFPlayer_sendByte(0x06);
 8002e14:	2006      	movs	r0, #6
 8002e16:	f7ff ffb9 	bl	8002d8c <DFPlayer_sendByte>
    DFPlayer_sendByte(command);
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ffb5 	bl	8002d8c <DFPlayer_sendByte>
    DFPlayer_sendByte(0x00); //No ACK needed
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7ff ffb2 	bl	8002d8c <DFPlayer_sendByte>
    DFPlayer_sendByte(dataH);
 8002e28:	79bb      	ldrb	r3, [r7, #6]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ffae 	bl	8002d8c <DFPlayer_sendByte>
    DFPlayer_sendByte(dataL);
 8002e30:	797b      	ldrb	r3, [r7, #5]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ffaa 	bl	8002d8c <DFPlayer_sendByte>
    DFPlayer_sendByte(checksum >> 8); //Checksum High byte
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ffa4 	bl	8002d8c <DFPlayer_sendByte>
    DFPlayer_sendByte(checksum & 0xFF); //Checksum low byte
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff9f 	bl	8002d8c <DFPlayer_sendByte>
    DFPlayer_sendByte(0xEF);
 8002e4e:	20ef      	movs	r0, #239	; 0xef
 8002e50:	f7ff ff9c 	bl	8002d8c <DFPlayer_sendByte>
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <DFPlayer_getResponse>:
/**
 * Sends a specified command to the module and then awaits a reply
 * 
 * BYO data buffer array
 */
void DFPlayer_getResponse(unsigned char command, unsigned char dataH, unsigned char dataL, unsigned char buff[]) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4603      	mov	r3, r0
 8002e66:	71fb      	strb	r3, [r7, #7]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	71bb      	strb	r3, [r7, #6]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	717b      	strb	r3, [r7, #5]
    //Send the request command
    DFPlayer_sendCommand(command, dataH, dataL);
 8002e70:	797a      	ldrb	r2, [r7, #5]
 8002e72:	79b9      	ldrb	r1, [r7, #6]
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ffb6 	bl	8002de8 <DFPlayer_sendCommand>
    /*
    for(int num_bytes = 0; num_bytes < 10; num_bytes++) 
        buff[num_bytes] = DFPlayer_getByte();
        */
    HAL_UART_Receive(&huart1, buff, 10, 250);
 8002e7c:	23fa      	movs	r3, #250	; 0xfa
 8002e7e:	220a      	movs	r2, #10
 8002e80:	6839      	ldr	r1, [r7, #0]
 8002e82:	4803      	ldr	r0, [pc, #12]	; (8002e90 <DFPlayer_getResponse+0x34>)
 8002e84:	f004 fd96 	bl	80079b4 <HAL_UART_Receive>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20004460 	.word	0x20004460

08002e94 <DFPlayer_setPause>:
}

/**
 * Just sends the PAUSE command. No other data.
 */
void DFPlayer_setPause() {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
    DFPlayer_sendCommand(PAUSE, 0x00, 0x00);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	200e      	movs	r0, #14
 8002e9e:	f7ff ffa3 	bl	8002de8 <DFPlayer_sendCommand>
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <DFPlayer_getStatus>:
}

/**
 * Get the current status of the device
 */
int DFPlayer_getStatus() {
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
    unsigned char data[10];
    //Feed the response in to the array
    DFPlayer_getResponse(QUERY_STATUS, 0x00, 0x00, data);
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	2042      	movs	r0, #66	; 0x42
 8002eb4:	f7ff ffd2 	bl	8002e5c <DFPlayer_getResponse>
    
    //Return the interesting part of the returned data
    return data[6];
 8002eb8:	7abb      	ldrb	r3, [r7, #10]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <DFPlayer_getTracksInFolder>:
}

/**
 * Queries the number of tracks in a specified folder
 */
int DFPlayer_getTracksInFolder(int folder) {
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
    unsigned char data[10];
    //Feed the response in to the array
    DFPlayer_getResponse(QUERY_TRACKS_IN_FOLDER, (folder >> 8), (folder & 0xFF), data);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	121b      	asrs	r3, r3, #8
 8002ece:	b2d9      	uxtb	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	204e      	movs	r0, #78	; 0x4e
 8002eda:	f7ff ffbf 	bl	8002e5c <DFPlayer_getResponse>
    
    //Return the interesting part of the returned data
    return data[6];
 8002ede:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <DFPlayer_resetModule>:

/**
 * Sends the soft reset command
 */
void DFPlayer_resetModule() {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
    DFPlayer_sendCommand(RESET, 0x00, 0x00);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	200c      	movs	r0, #12
 8002ef2:	f7ff ff79 	bl	8002de8 <DFPlayer_sendCommand>
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <RTC_get_time_date>:
}

/*
 * Returns a time struct of the current time and date
 */
struct Time RTC_get_time_date() {
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b08d      	sub	sp, #52	; 0x34
 8002f00:	af04      	add	r7, sp, #16
 8002f02:	6078      	str	r0, [r7, #4]
    unsigned char timeDate[7];
    struct Time newTime;
    
    //Get the whole chunk of ram as one stream
	if(HAL_I2C_IsDeviceReady (&hi2c1, DS3231_ADDR << 1, 10, 250) == HAL_OK)
 8002f04:	23fa      	movs	r3, #250	; 0xfa
 8002f06:	220a      	movs	r2, #10
 8002f08:	21d0      	movs	r1, #208	; 0xd0
 8002f0a:	4827      	ldr	r0, [pc, #156]	; (8002fa8 <RTC_get_time_date+0xac>)
 8002f0c:	f002 f9b8 	bl	8005280 <HAL_I2C_IsDeviceReady>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <RTC_get_time_date+0x34>
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR << 1, DS3231_SECONDS, I2C_MEMADD_SIZE_8BIT, timeDate, 7, 250);
 8002f16:	23fa      	movs	r3, #250	; 0xfa
 8002f18:	9302      	str	r3, [sp, #8]
 8002f1a:	2307      	movs	r3, #7
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	f107 0318 	add.w	r3, r7, #24
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2301      	movs	r3, #1
 8002f26:	2200      	movs	r2, #0
 8002f28:	21d0      	movs	r1, #208	; 0xd0
 8002f2a:	481f      	ldr	r0, [pc, #124]	; (8002fa8 <RTC_get_time_date+0xac>)
 8002f2c:	f002 f88e 	bl	800504c <HAL_I2C_Mem_Read>
    
    //Have to convert these numbers from the weird HEX format to regular
    //decimal format.
    newTime.seconds = RTC_convert_seconds_to_decimal(timeDate[0]);
 8002f30:	7e3b      	ldrb	r3, [r7, #24]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f83a 	bl	8002fac <RTC_convert_seconds_to_decimal>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	733b      	strb	r3, [r7, #12]
    newTime.minutes = RTC_convert_seconds_to_decimal(timeDate[1]);
 8002f3e:	7e7b      	ldrb	r3, [r7, #25]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f833 	bl	8002fac <RTC_convert_seconds_to_decimal>
 8002f46:	4603      	mov	r3, r0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	737b      	strb	r3, [r7, #13]
    newTime.hours = RTC_convert_hours_to_decimal(timeDate[2]);
 8002f4c:	7ebb      	ldrb	r3, [r7, #26]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f847 	bl	8002fe2 <RTC_convert_hours_to_decimal>
 8002f54:	4603      	mov	r3, r0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	73bb      	strb	r3, [r7, #14]
    newTime.weekday = timeDate[3] - 1;
 8002f5a:	7efb      	ldrb	r3, [r7, #27]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	73fb      	strb	r3, [r7, #15]
    newTime.day = RTC_convert_date_to_decimal(timeDate[4]);
 8002f62:	7f3b      	ldrb	r3, [r7, #28]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f857 	bl	8003018 <RTC_convert_date_to_decimal>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	743b      	strb	r3, [r7, #16]
    //We can re-use the hours and seconds conversion here.
    newTime.month = RTC_convert_hours_to_decimal(timeDate[5]);
 8002f70:	7f7b      	ldrb	r3, [r7, #29]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f835 	bl	8002fe2 <RTC_convert_hours_to_decimal>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	747b      	strb	r3, [r7, #17]
    newTime.year = RTC_convert_seconds_to_decimal(timeDate[6]) + 2000;
 8002f7e:	7fbb      	ldrb	r3, [r7, #30]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 f813 	bl	8002fac <RTC_convert_seconds_to_decimal>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002f8c:	617b      	str	r3, [r7, #20]
    
    return newTime;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	461c      	mov	r4, r3
 8002f92:	f107 030c 	add.w	r3, r7, #12
 8002f96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd90      	pop	{r4, r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200043a8 	.word	0x200043a8

08002fac <RTC_convert_seconds_to_decimal>:

/*
 * Converts a value from the RTC's werid memory format in to a regular
 * decimal number.
 */
int RTC_convert_seconds_to_decimal(unsigned char data) {
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0xF0) >> 4) * 10;
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
    int seconds = data & 0x0F;
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	60bb      	str	r3, [r7, #8]
    
    return tens + seconds;
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4413      	add	r3, r2
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <RTC_convert_hours_to_decimal>:
/*
 * Converts the hours register to a decimal value
 */
int RTC_convert_hours_to_decimal(unsigned char data) {
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0x30) >> 4) * 10;
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	111b      	asrs	r3, r3, #4
 8002ff0:	f003 0203 	and.w	r2, r3, #3
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
    int digits = data & 0x0F;
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	60bb      	str	r3, [r7, #8]
    
    return tens + digits;
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4413      	add	r3, r2
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <RTC_convert_date_to_decimal>:
/*
 * Converts the DATE register in to a decimal representation
 */
int RTC_convert_date_to_decimal(unsigned char data) {
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
    int tens = ((data & 0x30) >> 4) * 10;
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	111b      	asrs	r3, r3, #4
 8003026:	f003 0203 	and.w	r2, r3, #3
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
    int digits = data & 0x0F;
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	60bb      	str	r3, [r7, #8]
    
    return tens + digits;
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4413      	add	r3, r2
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <FT5446_getTouch>:
 *      Author: tommy
 */

#include "drivers/FT5446.h"

struct Touch FT5446_getTouch() {
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b08d      	sub	sp, #52	; 0x34
 8003054:	af04      	add	r7, sp, #16
 8003056:	6078      	str	r0, [r7, #4]
	struct Touch touch;
	unsigned char touchData[6];

	//Get number of touches
	//Wait for device to be ready
	if(HAL_I2C_IsDeviceReady (&hi2c1, FT5446_ADDR << 1, 10, 250) == HAL_OK) {
 8003058:	23fa      	movs	r3, #250	; 0xfa
 800305a:	220a      	movs	r2, #10
 800305c:	2170      	movs	r1, #112	; 0x70
 800305e:	481a      	ldr	r0, [pc, #104]	; (80030c8 <FT5446_getTouch+0x78>)
 8003060:	f002 f90e 	bl	8005280 <HAL_I2C_IsDeviceReady>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d122      	bne.n	80030b0 <FT5446_getTouch+0x60>
		//Get the CTP ram
		HAL_I2C_Mem_Read (&hi2c1, FT5446_ADDR << 1, FT5446_GESTURE_ADDR, I2C_MEMADD_SIZE_8BIT, touchData, 6, 250);
 800306a:	23fa      	movs	r3, #250	; 0xfa
 800306c:	9302      	str	r3, [sp, #8]
 800306e:	2306      	movs	r3, #6
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	f107 030c 	add.w	r3, r7, #12
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2301      	movs	r3, #1
 800307a:	2201      	movs	r2, #1
 800307c:	2170      	movs	r1, #112	; 0x70
 800307e:	4812      	ldr	r0, [pc, #72]	; (80030c8 <FT5446_getTouch+0x78>)
 8003080:	f001 ffe4 	bl	800504c <HAL_I2C_Mem_Read>
		//Combine in to regular human numbers
		touch.Y = ((touchData[2] & 0x0F) << 8) | touchData[3];
 8003084:	7bbb      	ldrb	r3, [r7, #14]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
		touch.X = ((touchData[4] & 0x0F) << 8) | touchData[5];
 8003092:	7c3b      	ldrb	r3, [r7, #16]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800309a:	7c7a      	ldrb	r2, [r7, #17]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

		//Get the gesture and n touches values
		touch.gesture = touchData[0];
 80030a0:	7b3b      	ldrb	r3, [r7, #12]
 80030a2:	773b      	strb	r3, [r7, #28]
		touch.nTouches = touchData[1];
 80030a4:	7b7b      	ldrb	r3, [r7, #13]
 80030a6:	777b      	strb	r3, [r7, #29]
		touch.state = touchData[2] >> 6;
 80030a8:	7bbb      	ldrb	r3, [r7, #14]
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	77bb      	strb	r3, [r7, #30]
	}

	return touch;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	461c      	mov	r4, r3
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	3724      	adds	r7, #36	; 0x24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd90      	pop	{r4, r7, pc}
 80030c8:	200043a8 	.word	0x200043a8

080030cc <parallel_write>:
#include "font.h"

/**
 * Writes data to an 16-bit parallel bus.
 */
void parallel_write(unsigned int data) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	//In this particular example I'm using PA8:15 and PC8:15
    HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_RESET);
 80030d4:	2200      	movs	r2, #0
 80030d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030da:	4810      	ldr	r0, [pc, #64]	; (800311c <parallel_write+0x50>)
 80030dc:	f001 feec 	bl	8004eb8 <HAL_GPIO_WritePin>
	GPIOC->ODR = (data & 0xFF00) | (GPIOC->ODR & 0x00FF); //Remember, we're using the lower half of these pins for other things.
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <parallel_write+0x54>)
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	490c      	ldr	r1, [pc, #48]	; (8003120 <parallel_write+0x54>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	614b      	str	r3, [r1, #20]
	GPIOA->ODR = ((data << 8) & 0xFF00) | (GPIOA->ODR & 0x00FF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8003104:	4313      	orrs	r3, r2
 8003106:	614b      	str	r3, [r1, #20]
    HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_SET);
 8003108:	2201      	movs	r2, #1
 800310a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800310e:	4803      	ldr	r0, [pc, #12]	; (800311c <parallel_write+0x50>)
 8003110:	f001 fed2 	bl	8004eb8 <HAL_GPIO_WritePin>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	48000400 	.word	0x48000400
 8003120:	48000800 	.word	0x48000800

08003124 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned int data) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800312c:	2201      	movs	r2, #1
 800312e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003132:	480b      	ldr	r0, [pc, #44]	; (8003160 <lcd_write_data+0x3c>)
 8003134:	f001 fec0 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003138:	2200      	movs	r2, #0
 800313a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800313e:	4808      	ldr	r0, [pc, #32]	; (8003160 <lcd_write_data+0x3c>)
 8003140:	f001 feba 	bl	8004eb8 <HAL_GPIO_WritePin>
	parallel_write(data);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ffc1 	bl	80030cc <parallel_write>
    //HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800314a:	2201      	movs	r2, #1
 800314c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003150:	4803      	ldr	r0, [pc, #12]	; (8003160 <lcd_write_data+0x3c>)
 8003152:	f001 feb1 	bl	8004eb8 <HAL_GPIO_WritePin>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	48000400 	.word	0x48000400

08003164 <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800316e:	2200      	movs	r2, #0
 8003170:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003174:	480b      	ldr	r0, [pc, #44]	; (80031a4 <lcd_write_command+0x40>)
 8003176:	f001 fe9f 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800317a:	2200      	movs	r2, #0
 800317c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003180:	4808      	ldr	r0, [pc, #32]	; (80031a4 <lcd_write_command+0x40>)
 8003182:	f001 fe99 	bl	8004eb8 <HAL_GPIO_WritePin>
	parallel_write(data);
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff9f 	bl	80030cc <parallel_write>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800318e:	2201      	movs	r2, #1
 8003190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003194:	4803      	ldr	r0, [pc, #12]	; (80031a4 <lcd_write_command+0x40>)
 8003196:	f001 fe8f 	bl	8004eb8 <HAL_GPIO_WritePin>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	48000400 	.word	0x48000400

080031a8 <swap_int>:
}

/*
 * Swaps two 16-bit integers
 */
void swap_int(unsigned int *num1, unsigned int *num2) {
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
    int temp = *num2;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60fb      	str	r3, [r7, #12]
    *num2 = *num1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	601a      	str	r2, [r3, #0]
    *num1 = temp;
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	601a      	str	r2, [r3, #0]
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 80031d4:	b5b0      	push	{r4, r5, r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	ed87 0b00 	vstr	d0, [r7]
    int multiplier = 4;
 80031de:	2304      	movs	r3, #4
 80031e0:	617b      	str	r3, [r7, #20]
    double counter = millis;
 80031e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 80031ea:	e01c      	b.n	8003226 <delay_ms+0x52>
        while(counter--);
 80031ec:	bf00      	nop
 80031ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <delay_ms+0x68>)
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fd f844 	bl	8000288 <__aeabi_dsub>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	4620      	mov	r0, r4
 8003212:	4629      	mov	r1, r5
 8003214:	f7fd fa46 	bl	80006a4 <__aeabi_dcmpeq>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0e7      	beq.n	80031ee <delay_ms+0x1a>
        counter = millis;
 800321e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003222:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	617a      	str	r2, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1dd      	bne.n	80031ec <delay_ms+0x18>
    }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bdb0      	pop	{r4, r5, r7, pc}
 800323a:	bf00      	nop
 800323c:	3ff00000 	.word	0x3ff00000

08003240 <lcd_init_parallel>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init_parallel() {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0

    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH (Active LOW)
 8003244:	2201      	movs	r2, #1
 8003246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800324a:	481d      	ldr	r0, [pc, #116]	; (80032c0 <lcd_init_parallel+0x80>)
 800324c:	f001 fe34 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET); //Chip Select Active LOW
 8003250:	2201      	movs	r2, #1
 8003252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003256:	481a      	ldr	r0, [pc, #104]	; (80032c0 <lcd_init_parallel+0x80>)
 8003258:	f001 fe2e 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET); //Data / Command select Active LOW
 800325c:	2201      	movs	r2, #1
 800325e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003262:	4817      	ldr	r0, [pc, #92]	; (80032c0 <lcd_init_parallel+0x80>)
 8003264:	f001 fe28 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RD_PORT, RD_PIN, GPIO_PIN_SET); //READ pin HIGH (active LOW)
 8003268:	2201      	movs	r2, #1
 800326a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800326e:	4814      	ldr	r0, [pc, #80]	; (80032c0 <lcd_init_parallel+0x80>)
 8003270:	f001 fe22 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WR_PORT, WR_PIN, GPIO_PIN_SET); //WRITE pin HIGH (active LOW)
 8003274:	2201      	movs	r2, #1
 8003276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800327a:	4811      	ldr	r0, [pc, #68]	; (80032c0 <lcd_init_parallel+0x80>)
 800327c:	f001 fe1c 	bl	8004eb8 <HAL_GPIO_WritePin>
    //Cycle reset pin
    delay_ms(100);
 8003280:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80032b8 <lcd_init_parallel+0x78>
 8003284:	f7ff ffa6 	bl	80031d4 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8003288:	2200      	movs	r2, #0
 800328a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800328e:	480c      	ldr	r0, [pc, #48]	; (80032c0 <lcd_init_parallel+0x80>)
 8003290:	f001 fe12 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8003294:	2064      	movs	r0, #100	; 0x64
 8003296:	f001 fa75 	bl	8004784 <HAL_Delay>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 800329a:	2201      	movs	r2, #1
 800329c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032a0:	4807      	ldr	r0, [pc, #28]	; (80032c0 <lcd_init_parallel+0x80>)
 80032a2:	f001 fe09 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80032a6:	2064      	movs	r0, #100	; 0x64
 80032a8:	f001 fa6c 	bl	8004784 <HAL_Delay>

    lcd_init_command_list();
 80032ac:	f000 f80a 	bl	80032c4 <lcd_init_command_list>

}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	f3af 8000 	nop.w
 80032b8:	00000000 	.word	0x00000000
 80032bc:	40590000 	.word	0x40590000
 80032c0:	48000400 	.word	0x48000400

080032c4 <lcd_init_command_list>:

/**
 * This is the magic initialisation routine.
 */
void lcd_init_command_list(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0

	//********Start Initial Sequence*******//
	lcd_write_command(0xE0); //P-Gamma
 80032c8:	20e0      	movs	r0, #224	; 0xe0
 80032ca:	f7ff ff4b 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x00);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7ff ff28 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x13);
 80032d4:	2013      	movs	r0, #19
 80032d6:	f7ff ff25 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x18);
 80032da:	2018      	movs	r0, #24
 80032dc:	f7ff ff22 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x04);
 80032e0:	2004      	movs	r0, #4
 80032e2:	f7ff ff1f 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x0F);
 80032e6:	200f      	movs	r0, #15
 80032e8:	f7ff ff1c 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x06);
 80032ec:	2006      	movs	r0, #6
 80032ee:	f7ff ff19 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x3A);
 80032f2:	203a      	movs	r0, #58	; 0x3a
 80032f4:	f7ff ff16 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x56);
 80032f8:	2056      	movs	r0, #86	; 0x56
 80032fa:	f7ff ff13 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x4D);
 80032fe:	204d      	movs	r0, #77	; 0x4d
 8003300:	f7ff ff10 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x03);
 8003304:	2003      	movs	r0, #3
 8003306:	f7ff ff0d 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x0A);
 800330a:	200a      	movs	r0, #10
 800330c:	f7ff ff0a 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x06);
 8003310:	2006      	movs	r0, #6
 8003312:	f7ff ff07 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x30);
 8003316:	2030      	movs	r0, #48	; 0x30
 8003318:	f7ff ff04 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x3E);
 800331c:	203e      	movs	r0, #62	; 0x3e
 800331e:	f7ff ff01 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x0F);
 8003322:	200f      	movs	r0, #15
 8003324:	f7ff fefe 	bl	8003124 <lcd_write_data>
	lcd_write_command(0XE1); //N-Gamma
 8003328:	20e1      	movs	r0, #225	; 0xe1
 800332a:	f7ff ff1b 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x00);
 800332e:	2000      	movs	r0, #0
 8003330:	f7ff fef8 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x13);
 8003334:	2013      	movs	r0, #19
 8003336:	f7ff fef5 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x18);
 800333a:	2018      	movs	r0, #24
 800333c:	f7ff fef2 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x01);
 8003340:	2001      	movs	r0, #1
 8003342:	f7ff feef 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x11);
 8003346:	2011      	movs	r0, #17
 8003348:	f7ff feec 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x06);
 800334c:	2006      	movs	r0, #6
 800334e:	f7ff fee9 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x38);
 8003352:	2038      	movs	r0, #56	; 0x38
 8003354:	f7ff fee6 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x34);
 8003358:	2034      	movs	r0, #52	; 0x34
 800335a:	f7ff fee3 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x4D);
 800335e:	204d      	movs	r0, #77	; 0x4d
 8003360:	f7ff fee0 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x06);
 8003364:	2006      	movs	r0, #6
 8003366:	f7ff fedd 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x0D);
 800336a:	200d      	movs	r0, #13
 800336c:	f7ff feda 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x0B);
 8003370:	200b      	movs	r0, #11
 8003372:	f7ff fed7 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x31);
 8003376:	2031      	movs	r0, #49	; 0x31
 8003378:	f7ff fed4 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x37);
 800337c:	2037      	movs	r0, #55	; 0x37
 800337e:	f7ff fed1 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x0F);
 8003382:	200f      	movs	r0, #15
 8003384:	f7ff fece 	bl	8003124 <lcd_write_data>
	lcd_write_command(0xC0);
 8003388:	20c0      	movs	r0, #192	; 0xc0
 800338a:	f7ff feeb 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x18);
 800338e:	2018      	movs	r0, #24
 8003390:	f7ff fec8 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x16);
 8003394:	2016      	movs	r0, #22
 8003396:	f7ff fec5 	bl	8003124 <lcd_write_data>
	lcd_write_command(0xC1);
 800339a:	20c1      	movs	r0, #193	; 0xc1
 800339c:	f7ff fee2 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x45);
 80033a0:	2045      	movs	r0, #69	; 0x45
 80033a2:	f7ff febf 	bl	8003124 <lcd_write_data>
	lcd_write_command(0xC5); //VCOM
 80033a6:	20c5      	movs	r0, #197	; 0xc5
 80033a8:	f7ff fedc 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x00);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7ff feb9 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x63);
 80033b2:	2063      	movs	r0, #99	; 0x63
 80033b4:	f7ff feb6 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x01);
 80033b8:	2001      	movs	r0, #1
 80033ba:	f7ff feb3 	bl	8003124 <lcd_write_data>

	lcd_write_command(0x36); //RAM address mode
 80033be:	2036      	movs	r0, #54	; 0x36
 80033c0:	f7ff fed0 	bl	8003164 <lcd_write_command>
	//0xF8 and 0x3C are landscape mode. 0x5C and 0x9C for portrait mode.
	if(LANDSCAPE)
		lcd_write_data(0xF8);
 80033c4:	20f8      	movs	r0, #248	; 0xf8
 80033c6:	f7ff fead 	bl	8003124 <lcd_write_data>
	else
		lcd_write_data(0x5C);

	lcd_write_command(0x3A); //Interface Mode Control
 80033ca:	203a      	movs	r0, #58	; 0x3a
 80033cc:	f7ff feca 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x55); //x55 for 16-bit mode OR 0x66 for 18-bit serial mode
 80033d0:	2055      	movs	r0, #85	; 0x55
 80033d2:	f7ff fea7 	bl	8003124 <lcd_write_data>
	lcd_write_command(0xB0); //Interface Mode Control
 80033d6:	20b0      	movs	r0, #176	; 0xb0
 80033d8:	f7ff fec4 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x80); //SDO not in use
 80033dc:	2080      	movs	r0, #128	; 0x80
 80033de:	f7ff fea1 	bl	8003124 <lcd_write_data>
	lcd_write_command(0xB1); //Frame rate 70HZ
 80033e2:	20b1      	movs	r0, #177	; 0xb1
 80033e4:	f7ff febe 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x00); //
 80033e8:	2000      	movs	r0, #0
 80033ea:	f7ff fe9b 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x10);
 80033ee:	2010      	movs	r0, #16
 80033f0:	f7ff fe98 	bl	8003124 <lcd_write_data>
	lcd_write_command(0xB4);
 80033f4:	20b4      	movs	r0, #180	; 0xb4
 80033f6:	f7ff feb5 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x02);
 80033fa:	2002      	movs	r0, #2
 80033fc:	f7ff fe92 	bl	8003124 <lcd_write_data>

	lcd_write_command(0xB6); //RGB/MCU Interface Control
 8003400:	20b6      	movs	r0, #182	; 0xb6
 8003402:	f7ff feaf 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x02);
 8003406:	2002      	movs	r0, #2
 8003408:	f7ff fe8c 	bl	8003124 <lcd_write_data>
	//lcd_write_data(0x22);

	lcd_write_command(0xE9);
 800340c:	20e9      	movs	r0, #233	; 0xe9
 800340e:	f7ff fea9 	bl	8003164 <lcd_write_command>
	lcd_write_data(0x00);
 8003412:	2000      	movs	r0, #0
 8003414:	f7ff fe86 	bl	8003124 <lcd_write_data>
	lcd_write_command(0xF7);
 8003418:	20f7      	movs	r0, #247	; 0xf7
 800341a:	f7ff fea3 	bl	8003164 <lcd_write_command>
	lcd_write_data(0xA9);
 800341e:	20a9      	movs	r0, #169	; 0xa9
 8003420:	f7ff fe80 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x51);
 8003424:	2051      	movs	r0, #81	; 0x51
 8003426:	f7ff fe7d 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x2C);
 800342a:	202c      	movs	r0, #44	; 0x2c
 800342c:	f7ff fe7a 	bl	8003124 <lcd_write_data>
	lcd_write_data(0x82);
 8003430:	2082      	movs	r0, #130	; 0x82
 8003432:	f7ff fe77 	bl	8003124 <lcd_write_data>
	lcd_write_command(0x11);
 8003436:	2011      	movs	r0, #17
 8003438:	f7ff fe94 	bl	8003164 <lcd_write_command>
	HAL_Delay(120);
 800343c:	2078      	movs	r0, #120	; 0x78
 800343e:	f001 f9a1 	bl	8004784 <HAL_Delay>
	lcd_write_command(0x21);
 8003442:	2021      	movs	r0, #33	; 0x21
 8003444:	f7ff fe8e 	bl	8003164 <lcd_write_command>


	HAL_Delay(120);
 8003448:	2078      	movs	r0, #120	; 0x78
 800344a:	f001 f99b 	bl	8004784 <HAL_Delay>
	lcd_write_command(0x29);
 800344e:	2029      	movs	r0, #41	; 0x29
 8003450:	f7ff fe88 	bl	8003164 <lcd_write_command>
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}

08003458 <set_draw_window>:
/*
 * Sets the X,Y position for following commands on the display.
 * Should only be called within a function that draws something
 * to the display.
 */
void set_draw_window(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]

    //Check that the values are in order
    if(x2 < x1)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	429a      	cmp	r2, r3
 800346c:	d206      	bcs.n	800347c <set_draw_window+0x24>
        swap_int(&x2, &x1);
 800346e:	f107 020c 	add.w	r2, r7, #12
 8003472:	1d3b      	adds	r3, r7, #4
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fe96 	bl	80031a8 <swap_int>
    if(y2 < y1)
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d206      	bcs.n	8003492 <set_draw_window+0x3a>
        swap_int(&y2, &y1);
 8003484:	f107 0208 	add.w	r2, r7, #8
 8003488:	463b      	mov	r3, r7
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fe8b 	bl	80031a8 <swap_int>

    lcd_write_command(ILI9488_CASET);
 8003492:	202a      	movs	r0, #42	; 0x2a
 8003494:	f7ff fe66 	bl	8003164 <lcd_write_command>
    lcd_write_data(x1 >> 8);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fe41 	bl	8003124 <lcd_write_data>
    lcd_write_data(x1 & 0xFF);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fe3c 	bl	8003124 <lcd_write_data>

    lcd_write_data(x2 >> 8);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fe37 	bl	8003124 <lcd_write_data>
    lcd_write_data(x2 & 0xFF);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fe32 	bl	8003124 <lcd_write_data>

    lcd_write_command(ILI9488_PASET);
 80034c0:	202b      	movs	r0, #43	; 0x2b
 80034c2:	f7ff fe4f 	bl	8003164 <lcd_write_command>
    lcd_write_data(y1 >> 8);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fe2a 	bl	8003124 <lcd_write_data>
    lcd_write_data(y1 & 0xFF);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fe25 	bl	8003124 <lcd_write_data>

    lcd_write_data(y2 >> 8);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fe20 	bl	8003124 <lcd_write_data>
    lcd_write_data(y2 & 0xFF);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fe1b 	bl	8003124 <lcd_write_data>

    lcd_write_command(ILI9488_RAMWR);
 80034ee:	202c      	movs	r0, #44	; 0x2c
 80034f0:	f7ff fe38 	bl	8003164 <lcd_write_command>
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with
 * Colour.
 *
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(unsigned int x, unsigned int y, unsigned int colour) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]

    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	3301      	adds	r3, #1
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff ffa0 	bl	8003458 <set_draw_window>
    lcd_write_data(colour);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fe03 	bl	8003124 <lcd_write_data>
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int colour) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]


    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7ff ff8b 	bl	8003458 <set_draw_window>

    // data sections but I don't trust it.)
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003542:	2201      	movs	r2, #1
 8003544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003548:	4817      	ldr	r0, [pc, #92]	; (80035a8 <fill_rectangle+0x80>)
 800354a:	f001 fcb5 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800354e:	2200      	movs	r2, #0
 8003550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003554:	4814      	ldr	r0, [pc, #80]	; (80035a8 <fill_rectangle+0x80>)
 8003556:	f001 fcaf 	bl	8004eb8 <HAL_GPIO_WritePin>


    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	e012      	b.n	8003586 <fill_rectangle+0x5e>
        for(int x = 0; x < x2-x1+1; x++) {
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e005      	b.n	8003572 <fill_rectangle+0x4a>
        	parallel_write(colour);
 8003566:	6a38      	ldr	r0, [r7, #32]
 8003568:	f7ff fdb0 	bl	80030cc <parallel_write>
        for(int x = 0; x < x2-x1+1; x++) {
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	3301      	adds	r3, #1
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	429a      	cmp	r2, r3
 800357e:	d8f2      	bhi.n	8003566 <fill_rectangle+0x3e>
    for(int y = 0; y < y2-y1+1 ; y++) {
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	3301      	adds	r3, #1
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	429a      	cmp	r2, r3
 8003592:	d8e5      	bhi.n	8003560 <fill_rectangle+0x38>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003594:	2201      	movs	r2, #1
 8003596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800359a:	4803      	ldr	r0, [pc, #12]	; (80035a8 <fill_rectangle+0x80>)
 800359c:	f001 fc8c 	bl	8004eb8 <HAL_GPIO_WritePin>
}
 80035a0:	bf00      	nop
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	48000400 	.word	0x48000400

080035ac <draw_char>:

/*
 * Draws a single char to the screen.
 */
void draw_char(unsigned int x, unsigned int y, char c, unsigned int colour, char size) {
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b08b      	sub	sp, #44	; 0x2c
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	71fb      	strb	r3, [r7, #7]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	3b20      	subs	r3, #32
 80035c0:	617b      	str	r3, [r7, #20]

    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e062      	b.n	800368e <draw_char+0xe2>

        line = FontLarge[font_index][12 - i];
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f1c3 010c 	rsb	r1, r3, #12
 80035ce:	4834      	ldr	r0, [pc, #208]	; (80036a0 <draw_char+0xf4>)
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	4403      	add	r3, r0
 80035de:	440b      	add	r3, r1
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	74fb      	strb	r3, [r7, #19]

        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 80035e4:	2300      	movs	r3, #0
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e04b      	b.n	8003682 <draw_char+0xd6>
            if(line & (0x01 << j)) {
 80035ea:	7cfa      	ldrb	r2, [r7, #19]
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fa42 f303 	asr.w	r3, r2, r3
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d040      	beq.n	800367c <draw_char+0xd0>
                if(size == 1) {
 80035fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10c      	bne.n	800361c <draw_char+0x70>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f103 0008 	add.w	r0, r3, #8
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4413      	add	r3, r2
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	4619      	mov	r1, r3
 8003616:	f7ff ff71 	bl	80034fc <draw_pixel>
 800361a:	e02f      	b.n	800367c <draw_char+0xd0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f1c3 0308 	rsb	r3, r3, #8
 8003622:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	18d0      	adds	r0, r2, r3
 8003630:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	461a      	mov	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	18d1      	adds	r1, r2, r3
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f1c3 0308 	rsb	r3, r3, #8
 8003646:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	461a      	mov	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	441a      	add	r2, r3
 8003654:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003658:	18d4      	adds	r4, r2, r3
 800365a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	441a      	add	r2, r3
 800366a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800366e:	441a      	add	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	4622      	mov	r2, r4
 8003678:	f7ff ff56 	bl	8003528 <fill_rectangle>
        for(j=0; j<8; j++) {
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	3301      	adds	r3, #1
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b07      	cmp	r3, #7
 8003686:	ddb0      	ble.n	80035ea <draw_char+0x3e>
    for(i=0; i<13; i++ ) {
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	3301      	adds	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b0c      	cmp	r3, #12
 8003692:	dd99      	ble.n	80035c8 <draw_char+0x1c>
                }
            }
        }
    }
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	3724      	adds	r7, #36	; 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd90      	pop	{r4, r7, pc}
 800369e:	bf00      	nop
 80036a0:	0800accc 	.word	0x0800accc

080036a4 <draw_fast_char>:
 * than drawing individual pixels.
 * This will draw over any background image though.
 *
 * NOTE: This sends 130 bytes for a regular sized char
 */
void draw_fast_char(unsigned int x, unsigned int y, char c, unsigned int colour, unsigned int bg_colour) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	71fb      	strb	r3, [r7, #7]
    char line;
    char width = 8;
 80036b4:	2308      	movs	r3, #8
 80036b6:	76fb      	strb	r3, [r7, #27]
    char height = 13;
 80036b8:	230d      	movs	r3, #13
 80036ba:	76bb      	strb	r3, [r7, #26]
    unsigned int font_index = (c - 32);
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	3b20      	subs	r3, #32
 80036c0:	617b      	str	r3, [r7, #20]
    unsigned int this_px = bg_colour;
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24

    //Set the drawing region
    set_draw_window(x, y, x + width - 1, y + height);
 80036c6:	7efa      	ldrb	r2, [r7, #27]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	1e59      	subs	r1, r3, #1
 80036ce:	7eba      	ldrb	r2, [r7, #26]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4413      	add	r3, r2
 80036d4:	460a      	mov	r2, r1
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff febd 	bl	8003458 <set_draw_window>

    //We will do the SPI write manually here for speed
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80036de:	2201      	movs	r2, #1
 80036e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036e4:	4821      	ldr	r0, [pc, #132]	; (800376c <draw_fast_char+0xc8>)
 80036e6:	f001 fbe7 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80036ea:	2200      	movs	r2, #0
 80036ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036f0:	481e      	ldr	r0, [pc, #120]	; (800376c <draw_fast_char+0xc8>)
 80036f2:	f001 fbe1 	bl	8004eb8 <HAL_GPIO_WritePin>

    //Get the line of pixels from the font file
    for(int i=0; i < height; i++ ) {
 80036f6:	2300      	movs	r3, #0
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	e029      	b.n	8003750 <draw_fast_char+0xac>
        line = FontLarge[font_index][12 - i];
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	f1c3 010c 	rsb	r1, r3, #12
 8003702:	481b      	ldr	r0, [pc, #108]	; (8003770 <draw_fast_char+0xcc>)
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	4403      	add	r3, r0
 8003712:	440b      	add	r3, r1
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	74fb      	strb	r3, [r7, #19]

        //Draw the pixels to screen
        for(int j = width-1; j >= 0; j--) {
 8003718:	7efb      	ldrb	r3, [r7, #27]
 800371a:	3b01      	subs	r3, #1
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e011      	b.n	8003744 <draw_fast_char+0xa0>
            //Default pixel colour is the background colour, unless changed below
            this_px = bg_colour;
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
			if((line >> (j)) & 0x01)
 8003724:	7cfa      	ldrb	r2, [r7, #19]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa42 f303 	asr.w	r3, r2, r3
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <draw_fast_char+0x94>
				this_px = colour;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
			parallel_write(this_px);
 8003738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800373a:	f7ff fcc7 	bl	80030cc <parallel_write>
        for(int j = width-1; j >= 0; j--) {
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3b01      	subs	r3, #1
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	daea      	bge.n	8003720 <draw_fast_char+0x7c>
    for(int i=0; i < height; i++ ) {
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	3301      	adds	r3, #1
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	7ebb      	ldrb	r3, [r7, #26]
 8003752:	6a3a      	ldr	r2, [r7, #32]
 8003754:	429a      	cmp	r2, r3
 8003756:	dbd1      	blt.n	80036fc <draw_fast_char+0x58>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003758:	2201      	movs	r2, #1
 800375a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800375e:	4803      	ldr	r0, [pc, #12]	; (800376c <draw_fast_char+0xc8>)
 8003760:	f001 fbaa 	bl	8004eb8 <HAL_GPIO_WritePin>
}
 8003764:	bf00      	nop
 8003766:	3728      	adds	r7, #40	; 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	48000400 	.word	0x48000400
 8003770:	0800accc 	.word	0x0800accc

08003774 <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with
 * a given colour and size.
 */
void draw_string(unsigned int x, unsigned int y, unsigned int colour, char size, char *str) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	70fb      	strb	r3, [r7, #3]

    //Work out the size of each character
    int char_width = size * 9;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
    //Iterate through each character in the string
    int counter = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
    while(str[counter] != '\0') {
 8003790:	e015      	b.n	80037be <draw_string+0x4a>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a8:	4413      	add	r3, r2
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	f7ff fefa 	bl	80035ac <draw_char>
        //Next character
        counter++;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3301      	adds	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
    while(str[counter] != '\0') {
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c2:	4413      	add	r3, r2
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e3      	bne.n	8003792 <draw_string+0x1e>
    }
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <draw_fast_string>:
 * Draws a string using the draw_fast_char() function.
 * This will not preserve any background image and so a custom background
 * colour should be provided.
 * NOTE: Can only be the regular sized font. No scaling.
 */
void draw_fast_string(unsigned int x, unsigned int y, unsigned int colour, unsigned int bg_colour, char *str) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
    //Iterate through each character in the string
    int counter = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80037e6:	e013      	b.n	8003810 <draw_fast_string+0x3c>
        //Write char to the display
        draw_fast_char(x + (counter * 9), y, str[counter], colour, bg_colour);
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	461a      	mov	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	18d0      	adds	r0, r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	6a3a      	ldr	r2, [r7, #32]
 80037fa:	4413      	add	r3, r2
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	f7ff ff4d 	bl	80036a4 <draw_fast_char>
        //Next character
        counter++;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3301      	adds	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	6a3a      	ldr	r2, [r7, #32]
 8003814:	4413      	add	r3, r2
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e5      	bne.n	80037e8 <draw_fast_string+0x14>
    }
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <draw_bitmap>:
 * Draws a bitmap by directly writing the byte stream to the LCD.
 *
 * So the scaling is done strangely here because writing individual pixels
 * has an overhead of 26 bytes each.
 */
void draw_bitmap(unsigned int x1, unsigned int y1, int scale, const unsigned int *bmp) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	; 0x38
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
	int width = bmp[0];
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
	int height = bmp[1];
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	3304      	adds	r3, #4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	623b      	str	r3, [r7, #32]
	unsigned int this_byte;
	int x2 = x1 + (width * scale);
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	461a      	mov	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	61fb      	str	r3, [r7, #28]
	int y2 = y1 + (height * scale);
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4413      	add	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]

	//Set the drawing region
	set_draw_window(x1, y1, x2 + scale - 2, y2);
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	3b02      	subs	r3, #2
 800386c:	461a      	mov	r2, r3
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff fdf0 	bl	8003458 <set_draw_window>

	//We will do the SPI write manually here for speed
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003878:	2201      	movs	r2, #1
 800387a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800387e:	4825      	ldr	r0, [pc, #148]	; (8003914 <draw_bitmap+0xec>)
 8003880:	f001 fb1a 	bl	8004eb8 <HAL_GPIO_WritePin>
	//CS low to begin data
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003884:	2200      	movs	r2, #0
 8003886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800388a:	4822      	ldr	r0, [pc, #136]	; (8003914 <draw_bitmap+0xec>)
 800388c:	f001 fb14 	bl	8004eb8 <HAL_GPIO_WritePin>

	//Write colour to each pixel
	for (int y = 0; y < height; y++) {
 8003890:	2300      	movs	r3, #0
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
 8003894:	e02f      	b.n	80038f6 <draw_bitmap+0xce>
		//this loop does the vertical axis scaling (two of each line))
		for (int sv = 0; sv < scale; sv++) {
 8003896:	2300      	movs	r3, #0
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
 800389a:	e025      	b.n	80038e8 <draw_bitmap+0xc0>
			for (int x = 0; x < width; x++) {
 800389c:	2300      	movs	r3, #0
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a0:	e01b      	b.n	80038da <draw_bitmap+0xb2>
				//Choose which byte to display depending on the screen orientation
				//NOTE: We add 2 bytes because of the first two bytes being dimension data in the array
				this_byte = bmp[(width * (y)) + x + 2];
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a6:	fb03 f202 	mul.w	r2, r3, r2
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	4413      	add	r3, r2
 80038ae:	3302      	adds	r3, #2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	4413      	add	r3, r2
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	617b      	str	r3, [r7, #20]

				//And this loop does the horizontal axis scale (three bytes per pixel))
				for (int sh = 0; sh < scale; sh++) {
 80038ba:	2300      	movs	r3, #0
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038be:	e005      	b.n	80038cc <draw_bitmap+0xa4>
					parallel_write(this_byte);
 80038c0:	6978      	ldr	r0, [r7, #20]
 80038c2:	f7ff fc03 	bl	80030cc <parallel_write>
				for (int sh = 0; sh < scale; sh++) {
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	3301      	adds	r3, #1
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80038cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	dbf5      	blt.n	80038c0 <draw_bitmap+0x98>
			for (int x = 0; x < width; x++) {
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	3301      	adds	r3, #1
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	429a      	cmp	r2, r3
 80038e0:	dbdf      	blt.n	80038a2 <draw_bitmap+0x7a>
		for (int sv = 0; sv < scale; sv++) {
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	3301      	adds	r3, #1
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
 80038e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	dbd5      	blt.n	800389c <draw_bitmap+0x74>
	for (int y = 0; y < height; y++) {
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	3301      	adds	r3, #1
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
 80038f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	dbcb      	blt.n	8003896 <draw_bitmap+0x6e>
			}
		}
	}

	//Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80038fe:	2201      	movs	r2, #1
 8003900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003904:	4803      	ldr	r0, [pc, #12]	; (8003914 <draw_bitmap+0xec>)
 8003906:	f001 fad7 	bl	8004eb8 <HAL_GPIO_WritePin>

}
 800390a:	bf00      	nop
 800390c:	3738      	adds	r7, #56	; 0x38
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	48000400 	.word	0x48000400

08003918 <fill_gradient>:
}

/**
 * Fills a rectangle with a gradient between two colours.
 */
void fill_gradient(int x1, int y1, int x2, int y2, unsigned int startColour, unsigned int endColour, Orientation orientation) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b090      	sub	sp, #64	; 0x40
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
	//Calculate each colour channel
	unsigned char rStart = (startColour >> 11) & 0x1F;
 8003926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003928:	0adb      	lsrs	r3, r3, #11
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    unsigned char gStart = (startColour >> 5) & 0x3F;
 8003934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800393e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    unsigned char bStart = (startColour) & 0x1F;
 8003942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	unsigned char rEnd = (endColour >> 11) & 0x1F;
 800394e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003950:	0adb      	lsrs	r3, r3, #11
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    unsigned char gEnd = (endColour >> 5) & 0x3F;
 800395c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    unsigned char bEnd = (endColour) & 0x1F;
 800396a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	//Number of incremental steps are we doing
    //Depends on orientation
    int steps = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(orientation == HORIZONTAL)
 800397a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <fill_gradient+0x72>
		steps = (x2 - x1);
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(orientation == VERTICAL)
 800398a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800398e:	2b01      	cmp	r3, #1
 8003990:	d103      	bne.n	800399a <fill_gradient+0x82>
    	steps = (y2 - y1);
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Calculate difference between each colour channel
	float dR = ((float)(rEnd - rStart) / steps);
 800399a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800399e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float dG = ((float)(gEnd - gStart) / steps);
 80039be:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80039c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	ee07 3a90 	vmov	s15, r3
 80039cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039de:	edc7 7a08 	vstr	s15, [r7, #32]
	float dB = ((float)(bEnd - bStart) / steps);
 80039e2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80039e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	ee07 3a90 	vmov	s15, r3
 80039f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a02:	edc7 7a07 	vstr	s15, [r7, #28]

	//Figure out how often to change the colour
	unsigned int thisR = rStart;
 8003a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a0a:	61bb      	str	r3, [r7, #24]
	unsigned int thisG = gStart;
 8003a0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a10:	617b      	str	r3, [r7, #20]
	unsigned int thisB = bStart;
 8003a12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a16:	613b      	str	r3, [r7, #16]

	//Doing a normal rectangle fill but we change the colour as we go
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f7ff fd1a 	bl	8003458 <set_draw_window>
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003a24:	2201      	movs	r2, #1
 8003a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a2a:	4857      	ldr	r0, [pc, #348]	; (8003b88 <fill_gradient+0x270>)
 8003a2c:	f001 fa44 	bl	8004eb8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a36:	4854      	ldr	r0, [pc, #336]	; (8003b88 <fill_gradient+0x270>)
 8003a38:	f001 fa3e 	bl	8004eb8 <HAL_GPIO_WritePin>

    //Write colour to each pixel
    unsigned int colour = startColour;
 8003a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
    for(int y = 0; y < y2-y1 ; y++) {
 8003a40:	2300      	movs	r3, #0
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
 8003a44:	e08f      	b.n	8003b66 <fill_gradient+0x24e>
        for(int x = 0; x < x2-x1; x++) {
 8003a46:	2300      	movs	r3, #0
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4a:	e044      	b.n	8003ad6 <fill_gradient+0x1be>
        	//Send them to the display
        	parallel_write(colour);
 8003a4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a4e:	f7ff fb3d 	bl	80030cc <parallel_write>

        	//For a horizontal gradient, update on each X increment
            if(orientation == HORIZONTAL) {
 8003a52:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d13a      	bne.n	8003ad0 <fill_gradient+0x1b8>
    			//Increment the colours
    			thisR = rStart + (int)(dR * x);
 8003a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a60:	ee07 2a90 	vmov	s15, r2
 8003a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a74:	ee17 2a90 	vmov	r2, s15
 8003a78:	4413      	add	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
    			thisG = gStart + (int)(dG * x);
 8003a7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a82:	ee07 2a90 	vmov	s15, r2
 8003a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a96:	ee17 2a90 	vmov	r2, s15
 8003a9a:	4413      	add	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
    			thisB = bStart + (int)(dB * x);
 8003a9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa4:	ee07 2a90 	vmov	s15, r2
 8003aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aac:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ab8:	ee17 2a90 	vmov	r2, s15
 8003abc:	4413      	add	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
    			//Combine them to RGB565
    			colour = (thisR << 11) | (thisG << 5) | (thisB);
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	02da      	lsls	r2, r3, #11
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	015b      	lsls	r3, r3, #5
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38
        for(int x = 0; x < x2-x1; x++) {
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	dbb4      	blt.n	8003a4c <fill_gradient+0x134>
            }

        }

        //For a vertical gradient, change on each Y increment
        if(orientation == VERTICAL) {
 8003ae2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d13a      	bne.n	8003b60 <fill_gradient+0x248>
			//Increment the colours
			thisR = rStart + (int)(dR * y);
 8003aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af0:	ee07 2a90 	vmov	s15, r2
 8003af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003af8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b04:	ee17 2a90 	vmov	r2, s15
 8003b08:	4413      	add	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
			thisG = gStart + (int)(dG * y);
 8003b0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b12:	ee07 2a90 	vmov	s15, r2
 8003b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b26:	ee17 2a90 	vmov	r2, s15
 8003b2a:	4413      	add	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
			thisB = bStart + (int)(dB * y);
 8003b2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b34:	ee07 2a90 	vmov	s15, r2
 8003b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b48:	ee17 2a90 	vmov	r2, s15
 8003b4c:	4413      	add	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
			//Combine them to RGB565
			colour = (thisR << 11) | (thisG << 5) | (thisB);
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	02da      	lsls	r2, r3, #11
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	015b      	lsls	r3, r3, #5
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
    for(int y = 0; y < y2-y1 ; y++) {
 8003b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b62:	3301      	adds	r3, #1
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	f6ff af69 	blt.w	8003a46 <fill_gradient+0x12e>
        }
    }

    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003b74:	2201      	movs	r2, #1
 8003b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b7a:	4803      	ldr	r0, [pc, #12]	; (8003b88 <fill_gradient+0x270>)
 8003b7c:	f001 f99c 	bl	8004eb8 <HAL_GPIO_WritePin>
}
 8003b80:	bf00      	nop
 8003b82:	3740      	adds	r7, #64	; 0x40
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	48000400 	.word	0x48000400

08003b8c <DeviceTestTask>:
void OK_Press(int id);

/**
 * The main task.
 */
void DeviceTestTask(void const * arguments) {
 8003b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8e:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
 8003b92:	af14      	add	r7, sp, #80	; 0x50
 8003b94:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003b98:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8003b9c:	6018      	str	r0, [r3, #0]

	const unsigned int textColour = COLOR_BLACK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

	//Add some dummy display elements
	DM_Add_Element(DM_New_Title_Bar("Device Test"));
 8003ba4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003ba8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8003bac:	49b9      	ldr	r1, [pc, #740]	; (8003e94 <DeviceTestTask+0x308>)
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff f83c 	bl	8002c2c <DM_New_Title_Bar>
 8003bb4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003bb8:	f5a3 7412 	sub.w	r4, r3, #584	; 0x248
 8003bbc:	4668      	mov	r0, sp
 8003bbe:	f104 0310 	add.w	r3, r4, #16
 8003bc2:	224c      	movs	r2, #76	; 0x4c
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f006 f9ad 	bl	8009f24 <memcpy>
 8003bca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003bce:	f7fe f883 	bl	8001cd8 <DM_Add_Element>

	//Show a loding animation while we test peripherals
	int loadingText = DM_Add_Element(DM_New_Text(208, 160, textColour, 1, "Loading..."));
 8003bd2:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8003bd6:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003bda:	f5a2 70f6 	sub.w	r0, r2, #492	; 0x1ec
 8003bde:	4aae      	ldr	r2, [pc, #696]	; (8003e98 <DeviceTestTask+0x30c>)
 8003be0:	9201      	str	r2, [sp, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	9200      	str	r2, [sp, #0]
 8003be6:	22a0      	movs	r2, #160	; 0xa0
 8003be8:	21d0      	movs	r1, #208	; 0xd0
 8003bea:	f7fe fdf3 	bl	80027d4 <DM_New_Text>
 8003bee:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003bf2:	f5a3 74f6 	sub.w	r4, r3, #492	; 0x1ec
 8003bf6:	4668      	mov	r0, sp
 8003bf8:	f104 0310 	add.w	r3, r4, #16
 8003bfc:	224c      	movs	r2, #76	; 0x4c
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f006 f990 	bl	8009f24 <memcpy>
 8003c04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c08:	f7fe f866 	bl	8001cd8 <DM_Add_Element>
 8003c0c:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
	int loadingAnimation = DM_Add_Element(DM_New_Animation(218, 180, 1, myAnimation, 3));
 8003c10:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003c14:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8003c18:	2303      	movs	r3, #3
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	4b9f      	ldr	r3, [pc, #636]	; (8003e9c <DeviceTestTask+0x310>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2301      	movs	r3, #1
 8003c22:	22b4      	movs	r2, #180	; 0xb4
 8003c24:	21da      	movs	r1, #218	; 0xda
 8003c26:	f7fd fc89 	bl	800153c <DM_New_Animation>
 8003c2a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003c2e:	f5a3 74c8 	sub.w	r4, r3, #400	; 0x190
 8003c32:	4668      	mov	r0, sp
 8003c34:	f104 0310 	add.w	r3, r4, #16
 8003c38:	224c      	movs	r2, #76	; 0x4c
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f006 f972 	bl	8009f24 <memcpy>
 8003c40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c44:	f7fe f848 	bl	8001cd8 <DM_Add_Element>
 8003c48:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0

	//Reset the MP3 player module
	DFPlayer_resetModule();
 8003c4c:	f7ff f94c 	bl	8002ee8 <DFPlayer_resetModule>
	//Wait for the device to reset... It's slow
	osDelay(1000);
 8003c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c54:	f004 fc5e 	bl	8008514 <osDelay>
	//Test communication with the player
    int status = DFPlayer_getStatus();
 8003c58:	f7ff f925 	bl	8002ea6 <DFPlayer_getStatus>
 8003c5c:	f8c7 03dc 	str.w	r0, [r7, #988]	; 0x3dc
    int timeout = 10;
 8003c60:	230a      	movs	r3, #10
 8003c62:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    int songs = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    while(timeout--) {
 8003c6c:	e008      	b.n	8003c80 <DeviceTestTask+0xf4>
    	songs = DFPlayer_getTracksInFolder(0);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f7ff f927 	bl	8002ec2 <DFPlayer_getTracksInFolder>
 8003c74:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
    	if(songs > 0)
 8003c78:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	dc07      	bgt.n	8003c90 <DeviceTestTask+0x104>
    while(timeout--) {
 8003c80:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8003c84:	1e5a      	subs	r2, r3, #1
 8003c86:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ef      	bne.n	8003c6e <DeviceTestTask+0xe2>
 8003c8e:	e000      	b.n	8003c92 <DeviceTestTask+0x106>
    		break;
 8003c90:	bf00      	nop
    }
    char numSongs[64];
    sprintf(numSongs, "DFPlayer Status: %d, with %d songs.", status, songs);
 8003c92:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8003c96:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8003c9a:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8003c9e:	4980      	ldr	r1, [pc, #512]	; (8003ea0 <DeviceTestTask+0x314>)
 8003ca0:	f006 fa64 	bl	800a16c <siprintf>


	//Make a list of I2C devices
	char deviceString[128] = "I2C Devices:";
 8003ca4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003ca8:	f5a3 7542 	sub.w	r5, r3, #776	; 0x308
 8003cac:	4b7d      	ldr	r3, [pc, #500]	; (8003ea4 <DeviceTestTask+0x318>)
 8003cae:	462c      	mov	r4, r5
 8003cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb2:	c407      	stmia	r4!, {r0, r1, r2}
 8003cb4:	7023      	strb	r3, [r4, #0]
 8003cb6:	f105 030d 	add.w	r3, r5, #13
 8003cba:	2273      	movs	r2, #115	; 0x73
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f006 f93e 	bl	8009f40 <memset>
	for(char i = 0; i < 128; i++) {
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
 8003cca:	e01a      	b.n	8003d02 <DeviceTestTask+0x176>
		if(HAL_I2C_IsDeviceReady (&hi2c1, i << 1, 10, 250) == HAL_OK) {
 8003ccc:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	b299      	uxth	r1, r3
 8003cd6:	23fa      	movs	r3, #250	; 0xfa
 8003cd8:	220a      	movs	r2, #10
 8003cda:	4873      	ldr	r0, [pc, #460]	; (8003ea8 <DeviceTestTask+0x31c>)
 8003cdc:	f001 fad0 	bl	8005280 <HAL_I2C_IsDeviceReady>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d108      	bne.n	8003cf8 <DeviceTestTask+0x16c>
			sprintf(deviceString, "%s %d", deviceString, i);
 8003ce6:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 8003cea:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8003cee:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8003cf2:	496e      	ldr	r1, [pc, #440]	; (8003eac <DeviceTestTask+0x320>)
 8003cf4:	f006 fa3a 	bl	800a16c <siprintf>
	for(char i = 0; i < 128; i++) {
 8003cf8:	f897 33ef 	ldrb.w	r3, [r7, #1007]	; 0x3ef
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	f887 33ef 	strb.w	r3, [r7, #1007]	; 0x3ef
 8003d02:	f997 33ef 	ldrsb.w	r3, [r7, #1007]	; 0x3ef
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	dae0      	bge.n	8003ccc <DeviceTestTask+0x140>
		}
	}

	//Confirm communication with the RTC
	struct Time thisTime = RTC_get_time_date();
 8003d0a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003d0e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff f8f2 	bl	8002efc <RTC_get_time_date>
	char timeDateString[128];
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8003d18:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003d1c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8003d20:	78db      	ldrb	r3, [r3, #3]
 8003d22:	461a      	mov	r2, r3
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4a60      	ldr	r2, [pc, #384]	; (8003eb0 <DeviceTestTask+0x324>)
 8003d2e:	1899      	adds	r1, r3, r2
 8003d30:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003d34:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8003d38:	791b      	ldrb	r3, [r3, #4]
 8003d3a:	469c      	mov	ip, r3
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 8003d3c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003d40:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8003d44:	795b      	ldrb	r3, [r3, #5]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8003d46:	461c      	mov	r4, r3
 8003d48:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003d4c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8003d50:	689b      	ldr	r3, [r3, #8]
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 8003d52:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003d56:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8003d5a:	7892      	ldrb	r2, [r2, #2]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8003d5c:	4615      	mov	r5, r2
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 8003d5e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003d62:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8003d66:	7852      	ldrb	r2, [r2, #1]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8003d68:	4616      	mov	r6, r2
			thisTime.month, thisTime.year, thisTime.hours, thisTime.minutes, thisTime.seconds);
 8003d6a:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003d6e:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8003d72:	7812      	ldrb	r2, [r2, #0]
	sprintf(timeDateString, "%s %d / %d / %d %d:%d:%d", dayName[thisTime.weekday], thisTime.day,
 8003d74:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8003d78:	9204      	str	r2, [sp, #16]
 8003d7a:	9603      	str	r6, [sp, #12]
 8003d7c:	9502      	str	r5, [sp, #8]
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	9400      	str	r4, [sp, #0]
 8003d82:	4663      	mov	r3, ip
 8003d84:	460a      	mov	r2, r1
 8003d86:	494b      	ldr	r1, [pc, #300]	; (8003eb4 <DeviceTestTask+0x328>)
 8003d88:	f006 f9f0 	bl	800a16c <siprintf>


	//List of I2C devices found
	DM_Add_Element(DM_New_Text(10, 45, textColour, 1, deviceString));
 8003d8c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003d90:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003d94:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8003d98:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	2301      	movs	r3, #1
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	4613      	mov	r3, r2
 8003da4:	222d      	movs	r2, #45	; 0x2d
 8003da6:	210a      	movs	r1, #10
 8003da8:	f7fe fd14 	bl	80027d4 <DM_New_Text>
 8003dac:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003db0:	f5a3 749a 	sub.w	r4, r3, #308	; 0x134
 8003db4:	4668      	mov	r0, sp
 8003db6:	f104 0310 	add.w	r3, r4, #16
 8003dba:	224c      	movs	r2, #76	; 0x4c
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f006 f8b1 	bl	8009f24 <memcpy>
 8003dc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003dc6:	f7fd ff87 	bl	8001cd8 <DM_Add_Element>
	//List tracks on MP3
	DM_Add_Element(DM_New_Text(10, 60, textColour, 1, numSongs));
 8003dca:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003dce:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003dd2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	223c      	movs	r2, #60	; 0x3c
 8003de0:	210a      	movs	r1, #10
 8003de2:	f7fe fcf7 	bl	80027d4 <DM_New_Text>
 8003de6:	4668      	mov	r0, sp
 8003de8:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8003dec:	224c      	movs	r2, #76	; 0x4c
 8003dee:	4619      	mov	r1, r3
 8003df0:	f006 f898 	bl	8009f24 <memcpy>
 8003df4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003df8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dfa:	f7fd ff6d 	bl	8001cd8 <DM_Add_Element>
	//List current time on the clock
	DM_Add_Element(DM_New_Text(10, 75, textColour, 1, timeDateString));
 8003dfe:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8003e02:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 8003e06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	224b      	movs	r2, #75	; 0x4b
 8003e14:	210a      	movs	r1, #10
 8003e16:	f7fe fcdd 	bl	80027d4 <DM_New_Text>
 8003e1a:	4668      	mov	r0, sp
 8003e1c:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8003e20:	224c      	movs	r2, #76	; 0x4c
 8003e22:	4619      	mov	r1, r3
 8003e24:	f006 f87e 	bl	8009f24 <memcpy>
 8003e28:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8003e2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e2e:	f7fd ff53 	bl	8001cd8 <DM_Add_Element>

	//Remove the loading animations
	DM_Remove_Element(loadingText);
 8003e32:	f8d7 03e4 	ldr.w	r0, [r7, #996]	; 0x3e4
 8003e36:	f7fd ffb7 	bl	8001da8 <DM_Remove_Element>
	DM_Remove_Element(loadingAnimation);
 8003e3a:	f8d7 03e0 	ldr.w	r0, [r7, #992]	; 0x3e0
 8003e3e:	f7fd ffb3 	bl	8001da8 <DM_Remove_Element>

	//OK button
	struct DisplayElement okBtn = DM_New_Button(BTN_RIGHT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 8003e42:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003e46:	f5a3 707c 	sub.w	r0, r3, #1008	; 0x3f0
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <DeviceTestTask+0x32c>)
 8003e50:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003e54:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8003e58:	f7fd fc72 	bl	8001740 <DM_New_Button>
	okBtn.onPress = OK_Press;
 8003e5c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003e60:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8003e64:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <DeviceTestTask+0x330>)
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
	int okBtnId = DM_Add_Element(okBtn);
 8003e68:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003e6c:	f5a3 747c 	sub.w	r4, r3, #1008	; 0x3f0
 8003e70:	4668      	mov	r0, sp
 8003e72:	f104 0310 	add.w	r3, r4, #16
 8003e76:	224c      	movs	r2, #76	; 0x4c
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f006 f853 	bl	8009f24 <memcpy>
 8003e7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e82:	f7fd ff29 	bl	8001cd8 <DM_Add_Element>
 8003e86:	f8c7 03d8 	str.w	r0, [r7, #984]	; 0x3d8

	while(1) {
		osDelay(1000);
 8003e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e8e:	f004 fb41 	bl	8008514 <osDelay>
 8003e92:	e7fa      	b.n	8003e8a <DeviceTestTask+0x2fe>
 8003e94:	0800aa94 	.word	0x0800aa94
 8003e98:	0800aaa0 	.word	0x0800aaa0
 8003e9c:	20000004 	.word	0x20000004
 8003ea0:	0800aaac 	.word	0x0800aaac
 8003ea4:	0800aafc 	.word	0x0800aafc
 8003ea8:	200043a8 	.word	0x200043a8
 8003eac:	0800aad0 	.word	0x0800aad0
 8003eb0:	0800b1a0 	.word	0x0800b1a0
 8003eb4:	0800aad8 	.word	0x0800aad8
 8003eb8:	0800aaf4 	.word	0x0800aaf4
 8003ebc:	08003ec1 	.word	0x08003ec1

08003ec0 <OK_Press>:
	}
}

void OK_Press(int id) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	//Stop the music playing
	DFPlayer_setPause();
 8003ec8:	f7fe ffe4 	bl	8002e94 <DFPlayer_setPause>

	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, MAIN_MENU, eSetValueWithOverwrite);
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <OK_Press+0x24>)
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	f005 f9bb 	bl	8009250 <xTaskGenericNotify>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200040ac 	.word	0x200040ac

08003ee8 <MainMenuTask>:

/**
 * The main display which is currently a clock. Called Main Menu
 * for historical reasons. Is not actually a menu.
 */
void MainMenuTask(void const * arguments) {
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 8003eee:	af14      	add	r7, sp, #80	; 0x50
 8003ef0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8003ef4:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8003ef8:	6018      	str	r0, [r3, #0]

	const unsigned int textColour = COLOR_BLACK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0

	//Double gradient effect
	DM_Add_Element(DM_New_Fill_Gradient(0, 90, WIDTH, 120, COLOR_WHITE, COLOR_BLACK, VERTICAL));
 8003f00:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8003f04:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8003f08:	2301      	movs	r3, #1
 8003f0a:	9303      	str	r3, [sp, #12]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9302      	str	r3, [sp, #8]
 8003f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	2378      	movs	r3, #120	; 0x78
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f1e:	225a      	movs	r2, #90	; 0x5a
 8003f20:	2100      	movs	r1, #0
 8003f22:	f7fe f953 	bl	80021cc <DM_New_Fill_Gradient>
 8003f26:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8003f2a:	f5a3 74a4 	sub.w	r4, r3, #328	; 0x148
 8003f2e:	4668      	mov	r0, sp
 8003f30:	f104 0310 	add.w	r3, r4, #16
 8003f34:	224c      	movs	r2, #76	; 0x4c
 8003f36:	4619      	mov	r1, r3
 8003f38:	f005 fff4 	bl	8009f24 <memcpy>
 8003f3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f40:	f7fd feca 	bl	8001cd8 <DM_Add_Element>
	DM_Add_Element(DM_New_Fill_Rectangle(0, 120, WIDTH, 184, COLOR_BLACK));
 8003f44:	f507 707f 	add.w	r0, r7, #1020	; 0x3fc
 8003f48:	2300      	movs	r3, #0
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	23b8      	movs	r3, #184	; 0xb8
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f54:	2278      	movs	r2, #120	; 0x78
 8003f56:	2100      	movs	r1, #0
 8003f58:	f7fe f8cc 	bl	80020f4 <DM_New_Fill_Rectangle>
 8003f5c:	4668      	mov	r0, sp
 8003f5e:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8003f62:	224c      	movs	r2, #76	; 0x4c
 8003f64:	4619      	mov	r1, r3
 8003f66:	f005 ffdd 	bl	8009f24 <memcpy>
 8003f6a:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8003f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f70:	f7fd feb2 	bl	8001cd8 <DM_Add_Element>
	DM_Add_Element(DM_New_Fill_Gradient(0, 184, WIDTH, 214, COLOR_BLACK, COLOR_WHITE, VERTICAL));
 8003f74:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 8003f78:	2301      	movs	r3, #1
 8003f7a:	9303      	str	r3, [sp, #12]
 8003f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f80:	9302      	str	r3, [sp, #8]
 8003f82:	2300      	movs	r3, #0
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	23d6      	movs	r3, #214	; 0xd6
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003f8e:	22b8      	movs	r2, #184	; 0xb8
 8003f90:	2100      	movs	r1, #0
 8003f92:	f7fe f91b 	bl	80021cc <DM_New_Fill_Gradient>
 8003f96:	4668      	mov	r0, sp
 8003f98:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8003f9c:	224c      	movs	r2, #76	; 0x4c
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f005 ffc0 	bl	8009f24 <memcpy>
 8003fa4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8003fa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003faa:	f7fd fe95 	bl	8001cd8 <DM_Add_Element>

	//Draw some digits
	const int xMargin = 16;
 8003fae:	2310      	movs	r3, #16
 8003fb0:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
	const int digitWidth = 64;
 8003fb4:	2340      	movs	r3, #64	; 0x40
 8003fb6:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
	const int colonWidth = 16;
 8003fba:	2310      	movs	r3, #16
 8003fbc:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4

	struct DisplayElement digit1 = DM_New_Bitmap(xMargin, 120, 1, num_1);
 8003fc0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8003fc4:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8003fc8:	4bea      	ldr	r3, [pc, #936]	; (8004374 <MainMenuTask+0x48c>)
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2301      	movs	r3, #1
 8003fce:	2278      	movs	r2, #120	; 0x78
 8003fd0:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 8003fd4:	f7fd fb3e 	bl	8001654 <DM_New_Bitmap>
	struct DisplayElement digit2 = DM_New_Bitmap(xMargin + digitWidth, 120, 1, num_5);
 8003fd8:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 8003fdc:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8003fe0:	18d1      	adds	r1, r2, r3
 8003fe2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8003fe6:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 8003fea:	4be3      	ldr	r3, [pc, #908]	; (8004378 <MainMenuTask+0x490>)
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2301      	movs	r3, #1
 8003ff0:	2278      	movs	r2, #120	; 0x78
 8003ff2:	f7fd fb2f 	bl	8001654 <DM_New_Bitmap>
	struct DisplayElement colon1 = DM_New_Bitmap(xMargin + (digitWidth * 2) - colonWidth, 120, 1, colon);
 8003ff6:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8003ffa:	005a      	lsls	r2, r3, #1
 8003ffc:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8004000:	441a      	add	r2, r3
 8004002:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8004006:	1ad1      	subs	r1, r2, r3
 8004008:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800400c:	f5a3 7017 	sub.w	r0, r3, #604	; 0x25c
 8004010:	4bda      	ldr	r3, [pc, #872]	; (800437c <MainMenuTask+0x494>)
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	2301      	movs	r3, #1
 8004016:	2278      	movs	r2, #120	; 0x78
 8004018:	f7fd fb1c 	bl	8001654 <DM_New_Bitmap>
	struct DisplayElement digit3 = DM_New_Bitmap(xMargin + (2 * digitWidth) + (2 * colonWidth), 120, 1, num_2);
 800401c:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8004020:	005a      	lsls	r2, r3, #1
 8004022:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8004026:	441a      	add	r2, r3
 8004028:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	18d1      	adds	r1, r2, r3
 8004030:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004034:	f5a3 702e 	sub.w	r0, r3, #696	; 0x2b8
 8004038:	4bd1      	ldr	r3, [pc, #836]	; (8004380 <MainMenuTask+0x498>)
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2301      	movs	r3, #1
 800403e:	2278      	movs	r2, #120	; 0x78
 8004040:	f7fd fb08 	bl	8001654 <DM_New_Bitmap>
	struct DisplayElement digit4 = DM_New_Bitmap(xMargin + (3 * digitWidth) + (2 * colonWidth), 120, 1, num_4);
 8004044:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8004048:	4613      	mov	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	441a      	add	r2, r3
 800404e:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8004052:	441a      	add	r2, r3
 8004054:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	18d1      	adds	r1, r2, r3
 800405c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004060:	f5a3 7045 	sub.w	r0, r3, #788	; 0x314
 8004064:	4bc7      	ldr	r3, [pc, #796]	; (8004384 <MainMenuTask+0x49c>)
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	2301      	movs	r3, #1
 800406a:	2278      	movs	r2, #120	; 0x78
 800406c:	f7fd faf2 	bl	8001654 <DM_New_Bitmap>
	struct DisplayElement colon2 = DM_New_Bitmap(xMargin + (digitWidth * 4) + colonWidth, 120, 1, colon);
 8004070:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8004074:	009a      	lsls	r2, r3, #2
 8004076:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 800407a:	441a      	add	r2, r3
 800407c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8004080:	18d1      	adds	r1, r2, r3
 8004082:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004086:	f5a3 705c 	sub.w	r0, r3, #880	; 0x370
 800408a:	4bbc      	ldr	r3, [pc, #752]	; (800437c <MainMenuTask+0x494>)
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2301      	movs	r3, #1
 8004090:	2278      	movs	r2, #120	; 0x78
 8004092:	f7fd fadf 	bl	8001654 <DM_New_Bitmap>
	struct DisplayElement digit5 = DM_New_Bitmap(xMargin + (5 * digitWidth), 120, 1, num_5);
 8004096:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	441a      	add	r2, r3
 80040a0:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80040a4:	18d1      	adds	r1, r2, r3
 80040a6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80040aa:	f5a3 7073 	sub.w	r0, r3, #972	; 0x3cc
 80040ae:	4bb2      	ldr	r3, [pc, #712]	; (8004378 <MainMenuTask+0x490>)
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	2301      	movs	r3, #1
 80040b4:	2278      	movs	r2, #120	; 0x78
 80040b6:	f7fd facd 	bl	8001654 <DM_New_Bitmap>
	struct DisplayElement digit6 = DM_New_Bitmap(xMargin + (6 * digitWidth), 120, 1, num_7);
 80040ba:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	461a      	mov	r2, r3
 80040c8:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80040cc:	18d1      	adds	r1, r2, r3
 80040ce:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80040d2:	f5a3 6085 	sub.w	r0, r3, #1064	; 0x428
 80040d6:	4bac      	ldr	r3, [pc, #688]	; (8004388 <MainMenuTask+0x4a0>)
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2301      	movs	r3, #1
 80040dc:	2278      	movs	r2, #120	; 0x78
 80040de:	f7fd fab9 	bl	8001654 <DM_New_Bitmap>


	int digit1Id = DM_Add_Element(digit1);
 80040e2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80040e6:	f5a3 74d2 	sub.w	r4, r3, #420	; 0x1a4
 80040ea:	4668      	mov	r0, sp
 80040ec:	f104 0310 	add.w	r3, r4, #16
 80040f0:	224c      	movs	r2, #76	; 0x4c
 80040f2:	4619      	mov	r1, r3
 80040f4:	f005 ff16 	bl	8009f24 <memcpy>
 80040f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80040fc:	f7fd fdec 	bl	8001cd8 <DM_Add_Element>
 8004100:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
	int colon1Id = DM_Add_Element(colon1); //colon
 8004104:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004108:	f5a3 7417 	sub.w	r4, r3, #604	; 0x25c
 800410c:	4668      	mov	r0, sp
 800410e:	f104 0310 	add.w	r3, r4, #16
 8004112:	224c      	movs	r2, #76	; 0x4c
 8004114:	4619      	mov	r1, r3
 8004116:	f005 ff05 	bl	8009f24 <memcpy>
 800411a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800411e:	f7fd fddb 	bl	8001cd8 <DM_Add_Element>
 8004122:	f8c7 04cc 	str.w	r0, [r7, #1228]	; 0x4cc
	int digit2Id = DM_Add_Element(digit2);
 8004126:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800412a:	f5a3 7400 	sub.w	r4, r3, #512	; 0x200
 800412e:	4668      	mov	r0, sp
 8004130:	f104 0310 	add.w	r3, r4, #16
 8004134:	224c      	movs	r2, #76	; 0x4c
 8004136:	4619      	mov	r1, r3
 8004138:	f005 fef4 	bl	8009f24 <memcpy>
 800413c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004140:	f7fd fdca 	bl	8001cd8 <DM_Add_Element>
 8004144:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8

	int digit3Id = DM_Add_Element(digit3);
 8004148:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800414c:	f5a3 742e 	sub.w	r4, r3, #696	; 0x2b8
 8004150:	4668      	mov	r0, sp
 8004152:	f104 0310 	add.w	r3, r4, #16
 8004156:	224c      	movs	r2, #76	; 0x4c
 8004158:	4619      	mov	r1, r3
 800415a:	f005 fee3 	bl	8009f24 <memcpy>
 800415e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004162:	f7fd fdb9 	bl	8001cd8 <DM_Add_Element>
 8004166:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4
	int colon2Id = DM_Add_Element(colon2); //colon
 800416a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800416e:	f5a3 745c 	sub.w	r4, r3, #880	; 0x370
 8004172:	4668      	mov	r0, sp
 8004174:	f104 0310 	add.w	r3, r4, #16
 8004178:	224c      	movs	r2, #76	; 0x4c
 800417a:	4619      	mov	r1, r3
 800417c:	f005 fed2 	bl	8009f24 <memcpy>
 8004180:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004184:	f7fd fda8 	bl	8001cd8 <DM_Add_Element>
 8004188:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
	int digit4Id = DM_Add_Element(digit4);
 800418c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004190:	f5a3 7445 	sub.w	r4, r3, #788	; 0x314
 8004194:	4668      	mov	r0, sp
 8004196:	f104 0310 	add.w	r3, r4, #16
 800419a:	224c      	movs	r2, #76	; 0x4c
 800419c:	4619      	mov	r1, r3
 800419e:	f005 fec1 	bl	8009f24 <memcpy>
 80041a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041a6:	f7fd fd97 	bl	8001cd8 <DM_Add_Element>
 80041aa:	f8c7 04bc 	str.w	r0, [r7, #1212]	; 0x4bc

	int digit5Id = DM_Add_Element(digit5);
 80041ae:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80041b2:	f5a3 7473 	sub.w	r4, r3, #972	; 0x3cc
 80041b6:	4668      	mov	r0, sp
 80041b8:	f104 0310 	add.w	r3, r4, #16
 80041bc:	224c      	movs	r2, #76	; 0x4c
 80041be:	4619      	mov	r1, r3
 80041c0:	f005 feb0 	bl	8009f24 <memcpy>
 80041c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041c8:	f7fd fd86 	bl	8001cd8 <DM_Add_Element>
 80041cc:	f8c7 04b8 	str.w	r0, [r7, #1208]	; 0x4b8
	int digit6Id = DM_Add_Element(digit6);
 80041d0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80041d4:	f5a3 6485 	sub.w	r4, r3, #1064	; 0x428
 80041d8:	4668      	mov	r0, sp
 80041da:	f104 0310 	add.w	r3, r4, #16
 80041de:	224c      	movs	r2, #76	; 0x4c
 80041e0:	4619      	mov	r1, r3
 80041e2:	f005 fe9f 	bl	8009f24 <memcpy>
 80041e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041ea:	f7fd fd75 	bl	8001cd8 <DM_Add_Element>
 80041ee:	f8c7 04b4 	str.w	r0, [r7, #1204]	; 0x4b4

	//Button for the device test
	struct DisplayElement button1 = DM_New_Button(BTN_RIGHT_X, BTN_BOTTOM_Y, "Test Device", ENABLED);
 80041f2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80041f6:	f2a3 4084 	subw	r0, r3, #1156	; 0x484
 80041fa:	2300      	movs	r3, #0
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4b63      	ldr	r3, [pc, #396]	; (800438c <MainMenuTask+0x4a4>)
 8004200:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004204:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8004208:	f7fd fa9a 	bl	8001740 <DM_New_Button>
	button1.onPress = deviceTest_onPress;
 800420c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004210:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8004214:	4a5e      	ldr	r2, [pc, #376]	; (8004390 <MainMenuTask+0x4a8>)
 8004216:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(button1);
 8004218:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800421c:	f2a3 4484 	subw	r4, r3, #1156	; 0x484
 8004220:	4668      	mov	r0, sp
 8004222:	f104 0310 	add.w	r3, r4, #16
 8004226:	224c      	movs	r2, #76	; 0x4c
 8004228:	4619      	mov	r1, r3
 800422a:	f005 fe7b 	bl	8009f24 <memcpy>
 800422e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004232:	f7fd fd51 	bl	8001cd8 <DM_Add_Element>

	//Button for settings
	struct DisplayElement button2 = DM_New_Button(BTN_LEFT_X, BTN_BOTTOM_Y, "Settings", ENABLED);
 8004236:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800423a:	f5a3 609c 	sub.w	r0, r3, #1248	; 0x4e0
 800423e:	2300      	movs	r3, #0
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	4b54      	ldr	r3, [pc, #336]	; (8004394 <MainMenuTask+0x4ac>)
 8004244:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004248:	210a      	movs	r1, #10
 800424a:	f7fd fa79 	bl	8001740 <DM_New_Button>
	button2.onPress = settingsScreen_onPress;
 800424e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004252:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8004256:	4a50      	ldr	r2, [pc, #320]	; (8004398 <MainMenuTask+0x4b0>)
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
	DM_Add_Element(button2);
 800425a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800425e:	f5a3 649c 	sub.w	r4, r3, #1248	; 0x4e0
 8004262:	4668      	mov	r0, sp
 8004264:	f104 0310 	add.w	r3, r4, #16
 8004268:	224c      	movs	r2, #76	; 0x4c
 800426a:	4619      	mov	r1, r3
 800426c:	f005 fe5a 	bl	8009f24 <memcpy>
 8004270:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004274:	f7fd fd30 	bl	8001cd8 <DM_Add_Element>

	//Previous time to compare to new time and decide to update
	char oldMin = '0';
 8004278:	2330      	movs	r3, #48	; 0x30
 800427a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7

	//The main loop
	while(1) {
		//Update the bitmaps with the new time
		//check if we need to update the whole lot, or just seconds
		if(oldMin != timeString[3]) {
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <MainMenuTask+0x4b4>)
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	f897 24e7 	ldrb.w	r2, [r7, #1255]	; 0x4e7
 8004286:	429a      	cmp	r2, r3
 8004288:	f000 80aa 	beq.w	80043e0 <MainMenuTask+0x4f8>
			digit1.bitmap = Char_To_Bmp(timeString[0]);
 800428c:	4b43      	ldr	r3, [pc, #268]	; (800439c <MainMenuTask+0x4b4>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f000 f90d 	bl	80044b0 <Char_To_Bmp>
 8004296:	4602      	mov	r2, r0
 8004298:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800429c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80042a0:	621a      	str	r2, [r3, #32]
			digit2.bitmap = Char_To_Bmp(timeString[1]);
 80042a2:	4b3e      	ldr	r3, [pc, #248]	; (800439c <MainMenuTask+0x4b4>)
 80042a4:	785b      	ldrb	r3, [r3, #1]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f902 	bl	80044b0 <Char_To_Bmp>
 80042ac:	4602      	mov	r2, r0
 80042ae:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80042b2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80042b6:	621a      	str	r2, [r3, #32]
			DM_Replace_Element(digit1Id, digit1);
 80042b8:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80042bc:	f5a3 74d2 	sub.w	r4, r3, #420	; 0x1a4
 80042c0:	4668      	mov	r0, sp
 80042c2:	f104 030c 	add.w	r3, r4, #12
 80042c6:	2250      	movs	r2, #80	; 0x50
 80042c8:	4619      	mov	r1, r3
 80042ca:	f005 fe2b 	bl	8009f24 <memcpy>
 80042ce:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80042d2:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 80042d6:	f7fd fd25 	bl	8001d24 <DM_Replace_Element>
			DM_Replace_Element(colon1Id, colon1);
 80042da:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80042de:	f5a3 7417 	sub.w	r4, r3, #604	; 0x25c
 80042e2:	4668      	mov	r0, sp
 80042e4:	f104 030c 	add.w	r3, r4, #12
 80042e8:	2250      	movs	r2, #80	; 0x50
 80042ea:	4619      	mov	r1, r3
 80042ec:	f005 fe1a 	bl	8009f24 <memcpy>
 80042f0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80042f4:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 80042f8:	f7fd fd14 	bl	8001d24 <DM_Replace_Element>
			DM_Replace_Element(digit2Id, digit2);
 80042fc:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004300:	f5a3 7400 	sub.w	r4, r3, #512	; 0x200
 8004304:	4668      	mov	r0, sp
 8004306:	f104 030c 	add.w	r3, r4, #12
 800430a:	2250      	movs	r2, #80	; 0x50
 800430c:	4619      	mov	r1, r3
 800430e:	f005 fe09 	bl	8009f24 <memcpy>
 8004312:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004316:	f8d7 04c8 	ldr.w	r0, [r7, #1224]	; 0x4c8
 800431a:	f7fd fd03 	bl	8001d24 <DM_Replace_Element>

			digit3.bitmap = Char_To_Bmp(timeString[2]);
 800431e:	4b1f      	ldr	r3, [pc, #124]	; (800439c <MainMenuTask+0x4b4>)
 8004320:	789b      	ldrb	r3, [r3, #2]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f8c4 	bl	80044b0 <Char_To_Bmp>
 8004328:	4602      	mov	r2, r0
 800432a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800432e:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8004332:	621a      	str	r2, [r3, #32]
			digit4.bitmap = Char_To_Bmp(timeString[3]);
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <MainMenuTask+0x4b4>)
 8004336:	78db      	ldrb	r3, [r3, #3]
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f8b9 	bl	80044b0 <Char_To_Bmp>
 800433e:	4602      	mov	r2, r0
 8004340:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004344:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004348:	621a      	str	r2, [r3, #32]
			DM_Replace_Element(digit3Id, digit3);
 800434a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800434e:	f5a3 742e 	sub.w	r4, r3, #696	; 0x2b8
 8004352:	4668      	mov	r0, sp
 8004354:	f104 030c 	add.w	r3, r4, #12
 8004358:	2250      	movs	r2, #80	; 0x50
 800435a:	4619      	mov	r1, r3
 800435c:	f005 fde2 	bl	8009f24 <memcpy>
 8004360:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004364:	f8d7 04c4 	ldr.w	r0, [r7, #1220]	; 0x4c4
 8004368:	f7fd fcdc 	bl	8001d24 <DM_Replace_Element>
			DM_Replace_Element(colon2Id, colon2);
 800436c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004370:	e016      	b.n	80043a0 <MainMenuTask+0x4b8>
 8004372:	bf00      	nop
 8004374:	08012208 	.word	0x08012208
 8004378:	08022228 	.word	0x08022228
 800437c:	20000010 	.word	0x20000010
 8004380:	08016210 	.word	0x08016210
 8004384:	0801e220 	.word	0x0801e220
 8004388:	0802a238 	.word	0x0802a238
 800438c:	0800ab7c 	.word	0x0800ab7c
 8004390:	08004469 	.word	0x08004469
 8004394:	0800ab88 	.word	0x0800ab88
 8004398:	0800448d 	.word	0x0800448d
 800439c:	200040c4 	.word	0x200040c4
 80043a0:	f5a3 745c 	sub.w	r4, r3, #880	; 0x370
 80043a4:	4668      	mov	r0, sp
 80043a6:	f104 030c 	add.w	r3, r4, #12
 80043aa:	2250      	movs	r2, #80	; 0x50
 80043ac:	4619      	mov	r1, r3
 80043ae:	f005 fdb9 	bl	8009f24 <memcpy>
 80043b2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80043b6:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	; 0x4c0
 80043ba:	f7fd fcb3 	bl	8001d24 <DM_Replace_Element>
			DM_Replace_Element(digit4Id, digit4);
 80043be:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80043c2:	f5a3 7445 	sub.w	r4, r3, #788	; 0x314
 80043c6:	4668      	mov	r0, sp
 80043c8:	f104 030c 	add.w	r3, r4, #12
 80043cc:	2250      	movs	r2, #80	; 0x50
 80043ce:	4619      	mov	r1, r3
 80043d0:	f005 fda8 	bl	8009f24 <memcpy>
 80043d4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80043d8:	f8d7 04bc 	ldr.w	r0, [r7, #1212]	; 0x4bc
 80043dc:	f7fd fca2 	bl	8001d24 <DM_Replace_Element>
		}
		//Update the seconds componetnts
		digit5.bitmap = Char_To_Bmp(timeString[4]);
 80043e0:	4b20      	ldr	r3, [pc, #128]	; (8004464 <MainMenuTask+0x57c>)
 80043e2:	791b      	ldrb	r3, [r3, #4]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f863 	bl	80044b0 <Char_To_Bmp>
 80043ea:	4602      	mov	r2, r0
 80043ec:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80043f0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80043f4:	621a      	str	r2, [r3, #32]
		digit6.bitmap = Char_To_Bmp(timeString[5]);
 80043f6:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <MainMenuTask+0x57c>)
 80043f8:	795b      	ldrb	r3, [r3, #5]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f858 	bl	80044b0 <Char_To_Bmp>
 8004400:	4602      	mov	r2, r0
 8004402:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004406:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800440a:	621a      	str	r2, [r3, #32]
		DM_Replace_Element(digit5Id, digit5);
 800440c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004410:	f5a3 7473 	sub.w	r4, r3, #972	; 0x3cc
 8004414:	4668      	mov	r0, sp
 8004416:	f104 030c 	add.w	r3, r4, #12
 800441a:	2250      	movs	r2, #80	; 0x50
 800441c:	4619      	mov	r1, r3
 800441e:	f005 fd81 	bl	8009f24 <memcpy>
 8004422:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004426:	f8d7 04b8 	ldr.w	r0, [r7, #1208]	; 0x4b8
 800442a:	f7fd fc7b 	bl	8001d24 <DM_Replace_Element>
		DM_Replace_Element(digit6Id, digit6);
 800442e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004432:	f5a3 6485 	sub.w	r4, r3, #1064	; 0x428
 8004436:	4668      	mov	r0, sp
 8004438:	f104 030c 	add.w	r3, r4, #12
 800443c:	2250      	movs	r2, #80	; 0x50
 800443e:	4619      	mov	r1, r3
 8004440:	f005 fd70 	bl	8009f24 <memcpy>
 8004444:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004448:	f8d7 04b4 	ldr.w	r0, [r7, #1204]	; 0x4b4
 800444c:	f7fd fc6a 	bl	8001d24 <DM_Replace_Element>

		//Update the old minutes flag for the next update
		oldMin = timeString[3];
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <MainMenuTask+0x57c>)
 8004452:	78db      	ldrb	r3, [r3, #3]
 8004454:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7

		osDelay(1000);
 8004458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800445c:	f004 f85a 	bl	8008514 <osDelay>
		if(oldMin != timeString[3]) {
 8004460:	e70d      	b.n	800427e <MainMenuTask+0x396>
 8004462:	bf00      	nop
 8004464:	200040c4 	.word	0x200040c4

08004468 <deviceTest_onPress>:
}

/**
 * Callback for the Test Device button
 */
void deviceTest_onPress(int id) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

	//let the OS know to change screens
	xTaskNotify(changeScreenTaskHandle, DEVICE_TEST, eSetValueWithOverwrite);
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <deviceTest_onPress+0x20>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	2300      	movs	r3, #0
 8004476:	2203      	movs	r2, #3
 8004478:	2100      	movs	r1, #0
 800447a:	f004 fee9 	bl	8009250 <xTaskGenericNotify>
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200040ac 	.word	0x200040ac

0800448c <settingsScreen_onPress>:

/**
 * onPress callback for the settings screen button
 */
void settingsScreen_onPress(int id) {
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	xTaskNotify(changeScreenTaskHandle, SETTINGS, eSetValueWithOverwrite);
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <settingsScreen_onPress+0x20>)
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	2300      	movs	r3, #0
 800449a:	2203      	movs	r2, #3
 800449c:	2103      	movs	r1, #3
 800449e:	f004 fed7 	bl	8009250 <xTaskGenericNotify>
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	200040ac 	.word	0x200040ac

080044b0 <Char_To_Bmp>:
}

/**
 * Converts a char to a bitmap represnting that number.
 */
unsigned int* Char_To_Bmp(char c) {
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
	switch(c) {
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	3b30      	subs	r3, #48	; 0x30
 80044be:	2b09      	cmp	r3, #9
 80044c0:	d82a      	bhi.n	8004518 <Char_To_Bmp+0x68>
 80044c2:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <Char_To_Bmp+0x18>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044f5 	.word	0x080044f5
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	08004501 	.word	0x08004501
 80044dc:	08004505 	.word	0x08004505
 80044e0:	08004509 	.word	0x08004509
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004511 	.word	0x08004511
 80044ec:	08004515 	.word	0x08004515
	case '0':
		return num_0;
 80044f0:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <Char_To_Bmp+0x78>)
 80044f2:	e012      	b.n	800451a <Char_To_Bmp+0x6a>
	case '1':
		return num_1;
 80044f4:	4b0d      	ldr	r3, [pc, #52]	; (800452c <Char_To_Bmp+0x7c>)
 80044f6:	e010      	b.n	800451a <Char_To_Bmp+0x6a>
	case '2':
		return num_2;
 80044f8:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <Char_To_Bmp+0x80>)
 80044fa:	e00e      	b.n	800451a <Char_To_Bmp+0x6a>
	case '3':
		return num_3;
 80044fc:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <Char_To_Bmp+0x84>)
 80044fe:	e00c      	b.n	800451a <Char_To_Bmp+0x6a>
	case '4':
		return num_4;
 8004500:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <Char_To_Bmp+0x88>)
 8004502:	e00a      	b.n	800451a <Char_To_Bmp+0x6a>
	case '5':
		return num_5;
 8004504:	4b0d      	ldr	r3, [pc, #52]	; (800453c <Char_To_Bmp+0x8c>)
 8004506:	e008      	b.n	800451a <Char_To_Bmp+0x6a>
	case '6':
		return num_6;
 8004508:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <Char_To_Bmp+0x90>)
 800450a:	e006      	b.n	800451a <Char_To_Bmp+0x6a>
	case '7':
		return num_7;
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <Char_To_Bmp+0x94>)
 800450e:	e004      	b.n	800451a <Char_To_Bmp+0x6a>
	case '8':
		return num_8;
 8004510:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <Char_To_Bmp+0x98>)
 8004512:	e002      	b.n	800451a <Char_To_Bmp+0x6a>
	case '9':
		return num_9;
 8004514:	4b0d      	ldr	r3, [pc, #52]	; (800454c <Char_To_Bmp+0x9c>)
 8004516:	e000      	b.n	800451a <Char_To_Bmp+0x6a>
	}

	return num_0;
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <Char_To_Bmp+0x78>)
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	0800e200 	.word	0x0800e200
 800452c:	08012208 	.word	0x08012208
 8004530:	08016210 	.word	0x08016210
 8004534:	0801a218 	.word	0x0801a218
 8004538:	0801e220 	.word	0x0801e220
 800453c:	08022228 	.word	0x08022228
 8004540:	08026230 	.word	0x08026230
 8004544:	0802a238 	.word	0x0802a238
 8004548:	0802e240 	.word	0x0802e240
 800454c:	08032248 	.word	0x08032248

08004550 <SettingsTask>:


/**
 * Main task to display the settings screen.
 */
void SettingsTask(void const * args) {
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8004556:	af14      	add	r7, sp, #80	; 0x50
 8004558:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800455c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004560:	6018      	str	r0, [r3, #0]
	//Clear the text from previous sessions
	hours[0] = '\0';
 8004562:	4b4b      	ldr	r3, [pc, #300]	; (8004690 <SettingsTask+0x140>)
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
	mins[0] = '\0';
 8004568:	4b4a      	ldr	r3, [pc, #296]	; (8004694 <SettingsTask+0x144>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
	secs[0] = '\0';
 800456e:	4b4a      	ldr	r3, [pc, #296]	; (8004698 <SettingsTask+0x148>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]

	//Add some dummy display elements
	DM_Add_Element(DM_New_Title_Bar("Settings"));
 8004574:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004578:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800457c:	4947      	ldr	r1, [pc, #284]	; (800469c <SettingsTask+0x14c>)
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fb54 	bl	8002c2c <DM_New_Title_Bar>
 8004584:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004588:	f5a3 74ba 	sub.w	r4, r3, #372	; 0x174
 800458c:	4668      	mov	r0, sp
 800458e:	f104 0310 	add.w	r3, r4, #16
 8004592:	224c      	movs	r2, #76	; 0x4c
 8004594:	4619      	mov	r1, r3
 8004596:	f005 fcc5 	bl	8009f24 <memcpy>
 800459a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800459e:	f7fd fb9b 	bl	8001cd8 <DM_Add_Element>

	//HOME
	struct DisplayElement okBtn = DM_New_Button(BTN_LEFT_X, BTN_BOTTOM_Y, "BACK", ENABLED);
 80045a2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80045a6:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 80045aa:	2300      	movs	r3, #0
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	4b3c      	ldr	r3, [pc, #240]	; (80046a0 <SettingsTask+0x150>)
 80045b0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80045b4:	210a      	movs	r1, #10
 80045b6:	f7fd f8c3 	bl	8001740 <DM_New_Button>
	okBtn.onPress = home_onPress;
 80045ba:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80045be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80045c2:	4a38      	ldr	r2, [pc, #224]	; (80046a4 <SettingsTask+0x154>)
 80045c4:	645a      	str	r2, [r3, #68]	; 0x44
	int okBtnId = DM_Add_Element(okBtn);
 80045c6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80045ca:	f5a3 74e8 	sub.w	r4, r3, #464	; 0x1d0
 80045ce:	4668      	mov	r0, sp
 80045d0:	f104 0310 	add.w	r3, r4, #16
 80045d4:	224c      	movs	r2, #76	; 0x4c
 80045d6:	4619      	mov	r1, r3
 80045d8:	f005 fca4 	bl	8009f24 <memcpy>
 80045dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045e0:	f7fd fb7a 	bl	8001cd8 <DM_Add_Element>
 80045e4:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
	//struct DisplayElement numPad = DM_New_NumPad();
	//numPad.onPress = numPad_onPress;
	//DM_Add_Element(numPad);

	//A text box to put the numbers in
	hoursBoxId = DM_Add_Element(DM_New_TextBox(10, 45, 2, "HH", hours));
 80045e8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80045ec:	f5a3 708c 	sub.w	r0, r3, #280	; 0x118
 80045f0:	4b27      	ldr	r3, [pc, #156]	; (8004690 <SettingsTask+0x140>)
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	4b2c      	ldr	r3, [pc, #176]	; (80046a8 <SettingsTask+0x158>)
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2302      	movs	r3, #2
 80045fa:	222d      	movs	r2, #45	; 0x2d
 80045fc:	210a      	movs	r1, #10
 80045fe:	f7fe f965 	bl	80028cc <DM_New_TextBox>
 8004602:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004606:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 800460a:	4668      	mov	r0, sp
 800460c:	f104 0310 	add.w	r3, r4, #16
 8004610:	224c      	movs	r2, #76	; 0x4c
 8004612:	4619      	mov	r1, r3
 8004614:	f005 fc86 	bl	8009f24 <memcpy>
 8004618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800461c:	f7fd fb5c 	bl	8001cd8 <DM_Add_Element>
 8004620:	4603      	mov	r3, r0
 8004622:	4a22      	ldr	r2, [pc, #136]	; (80046ac <SettingsTask+0x15c>)
 8004624:	6013      	str	r3, [r2, #0]
	minsBoxId = DM_Add_Element(DM_New_TextBox(60, 45, 2, "MM", mins));
 8004626:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 800462a:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <SettingsTask+0x144>)
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <SettingsTask+0x160>)
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2302      	movs	r3, #2
 8004634:	222d      	movs	r2, #45	; 0x2d
 8004636:	213c      	movs	r1, #60	; 0x3c
 8004638:	f7fe f948 	bl	80028cc <DM_New_TextBox>
 800463c:	4668      	mov	r0, sp
 800463e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004642:	224c      	movs	r2, #76	; 0x4c
 8004644:	4619      	mov	r1, r3
 8004646:	f005 fc6d 	bl	8009f24 <memcpy>
 800464a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800464e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004650:	f7fd fb42 	bl	8001cd8 <DM_Add_Element>
 8004654:	4603      	mov	r3, r0
 8004656:	4a17      	ldr	r2, [pc, #92]	; (80046b4 <SettingsTask+0x164>)
 8004658:	6013      	str	r3, [r2, #0]
	secsBoxId = DM_Add_Element(DM_New_TextBox(110, 45, 2, "SS", secs));
 800465a:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 800465e:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <SettingsTask+0x148>)
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <SettingsTask+0x168>)
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	2302      	movs	r3, #2
 8004668:	222d      	movs	r2, #45	; 0x2d
 800466a:	216e      	movs	r1, #110	; 0x6e
 800466c:	f7fe f92e 	bl	80028cc <DM_New_TextBox>
 8004670:	4668      	mov	r0, sp
 8004672:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004676:	224c      	movs	r2, #76	; 0x4c
 8004678:	4619      	mov	r1, r3
 800467a:	f005 fc53 	bl	8009f24 <memcpy>
 800467e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004684:	f7fd fb28 	bl	8001cd8 <DM_Add_Element>
 8004688:	4603      	mov	r3, r0
 800468a:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <SettingsTask+0x16c>)
 800468c:	6013      	str	r3, [r2, #0]

	while(1);
 800468e:	e7fe      	b.n	800468e <SettingsTask+0x13e>
 8004690:	200050c8 	.word	0x200050c8
 8004694:	200050cc 	.word	0x200050cc
 8004698:	200050d0 	.word	0x200050d0
 800469c:	0800ac5c 	.word	0x0800ac5c
 80046a0:	0800ac68 	.word	0x0800ac68
 80046a4:	08000c4d 	.word	0x08000c4d
 80046a8:	0800ac70 	.word	0x0800ac70
 80046ac:	200050d4 	.word	0x200050d4
 80046b0:	0800ac74 	.word	0x0800ac74
 80046b4:	200050d8 	.word	0x200050d8
 80046b8:	0800ac78 	.word	0x0800ac78
 80046bc:	200050dc 	.word	0x200050dc

080046c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80046c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80046c4:	f7fc ff28 	bl	8001518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046c8:	480c      	ldr	r0, [pc, #48]	; (80046fc <LoopForever+0x6>)
  ldr r1, =_edata
 80046ca:	490d      	ldr	r1, [pc, #52]	; (8004700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80046cc:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <LoopForever+0xe>)
  movs r3, #0
 80046ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046d0:	e002      	b.n	80046d8 <LoopCopyDataInit>

080046d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046d6:	3304      	adds	r3, #4

080046d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046dc:	d3f9      	bcc.n	80046d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046e0:	4c0a      	ldr	r4, [pc, #40]	; (800470c <LoopForever+0x16>)
  movs r3, #0
 80046e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046e4:	e001      	b.n	80046ea <LoopFillZerobss>

080046e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046e8:	3204      	adds	r2, #4

080046ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046ec:	d3fb      	bcc.n	80046e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046ee:	f005 fbf3 	bl	8009ed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046f2:	f7fc fad7 	bl	8000ca4 <main>

080046f6 <LoopForever>:

LoopForever:
    b LoopForever
 80046f6:	e7fe      	b.n	80046f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80046f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80046fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004700:	20004088 	.word	0x20004088
  ldr r2, =_sidata
 8004704:	080362f4 	.word	0x080362f4
  ldr r2, =_sbss
 8004708:	20004088 	.word	0x20004088
  ldr r4, =_ebss
 800470c:	2000a068 	.word	0x2000a068

08004710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004710:	e7fe      	b.n	8004710 <ADC1_2_IRQHandler>

08004712 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800471c:	2003      	movs	r0, #3
 800471e:	f000 f902 	bl	8004926 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004722:	200f      	movs	r0, #15
 8004724:	f7fc fe20 	bl	8001368 <HAL_InitTick>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	71fb      	strb	r3, [r7, #7]
 8004732:	e001      	b.n	8004738 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004734:	f7fc fcd2 	bl	80010dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004738:	79fb      	ldrb	r3, [r7, #7]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_IncTick+0x20>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_IncTick+0x24>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4413      	add	r3, r2
 8004754:	4a04      	ldr	r2, [pc, #16]	; (8004768 <HAL_IncTick+0x24>)
 8004756:	6013      	str	r3, [r2, #0]
}
 8004758:	bf00      	nop
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	2000401c 	.word	0x2000401c
 8004768:	200050e0 	.word	0x200050e0

0800476c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return uwTick;
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_GetTick+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	200050e0 	.word	0x200050e0

08004784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800478c:	f7ff ffee 	bl	800476c <HAL_GetTick>
 8004790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800479c:	d005      	beq.n	80047aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_Delay+0x44>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047aa:	bf00      	nop
 80047ac:	f7ff ffde 	bl	800476c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d8f7      	bhi.n	80047ac <HAL_Delay+0x28>
  {
  }
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	2000401c 	.word	0x2000401c

080047cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <__NVIC_SetPriorityGrouping+0x44>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047e8:	4013      	ands	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047fe:	4a04      	ldr	r2, [pc, #16]	; (8004810 <__NVIC_SetPriorityGrouping+0x44>)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	60d3      	str	r3, [r2, #12]
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <__NVIC_GetPriorityGrouping+0x18>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	f003 0307 	and.w	r3, r3, #7
}
 8004822:	4618      	mov	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	2b00      	cmp	r3, #0
 8004840:	db0b      	blt.n	800485a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	f003 021f 	and.w	r2, r3, #31
 8004848:	4907      	ldr	r1, [pc, #28]	; (8004868 <__NVIC_EnableIRQ+0x38>)
 800484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2001      	movs	r0, #1
 8004852:	fa00 f202 	lsl.w	r2, r0, r2
 8004856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	e000e100 	.word	0xe000e100

0800486c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	6039      	str	r1, [r7, #0]
 8004876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487c:	2b00      	cmp	r3, #0
 800487e:	db0a      	blt.n	8004896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	b2da      	uxtb	r2, r3
 8004884:	490c      	ldr	r1, [pc, #48]	; (80048b8 <__NVIC_SetPriority+0x4c>)
 8004886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488a:	0112      	lsls	r2, r2, #4
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	440b      	add	r3, r1
 8004890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004894:	e00a      	b.n	80048ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	4908      	ldr	r1, [pc, #32]	; (80048bc <__NVIC_SetPriority+0x50>)
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	3b04      	subs	r3, #4
 80048a4:	0112      	lsls	r2, r2, #4
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	440b      	add	r3, r1
 80048aa:	761a      	strb	r2, [r3, #24]
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	e000e100 	.word	0xe000e100
 80048bc:	e000ed00 	.word	0xe000ed00

080048c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f1c3 0307 	rsb	r3, r3, #7
 80048da:	2b04      	cmp	r3, #4
 80048dc:	bf28      	it	cs
 80048de:	2304      	movcs	r3, #4
 80048e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3304      	adds	r3, #4
 80048e6:	2b06      	cmp	r3, #6
 80048e8:	d902      	bls.n	80048f0 <NVIC_EncodePriority+0x30>
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	3b03      	subs	r3, #3
 80048ee:	e000      	b.n	80048f2 <NVIC_EncodePriority+0x32>
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43da      	mvns	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	401a      	ands	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	43d9      	mvns	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004918:	4313      	orrs	r3, r2
         );
}
 800491a:	4618      	mov	r0, r3
 800491c:	3724      	adds	r7, #36	; 0x24
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff ff4c 	bl	80047cc <__NVIC_SetPriorityGrouping>
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800494e:	f7ff ff61 	bl	8004814 <__NVIC_GetPriorityGrouping>
 8004952:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	6978      	ldr	r0, [r7, #20]
 800495a:	f7ff ffb1 	bl	80048c0 <NVIC_EncodePriority>
 800495e:	4602      	mov	r2, r0
 8004960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004964:	4611      	mov	r1, r2
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ff80 	bl	800486c <__NVIC_SetPriority>
}
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800497e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff ff54 	bl	8004830 <__NVIC_EnableIRQ>
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e054      	b.n	8004a4c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	7f5b      	ldrb	r3, [r3, #29]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fc fbba 	bl	800112c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	791b      	ldrb	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a22      	ldr	r2, [pc, #136]	; (8004a54 <HAL_CRC_Init+0xc4>)
 80049cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0218 	bic.w	r2, r2, #24
 80049dc:	609a      	str	r2, [r3, #8]
 80049de:	e00c      	b.n	80049fa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6899      	ldr	r1, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	461a      	mov	r2, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f834 	bl	8004a58 <HAL_CRCEx_Polynomial_Set>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e028      	b.n	8004a4c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	795b      	ldrb	r3, [r3, #5]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d105      	bne.n	8004a0e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a0a:	611a      	str	r2, [r3, #16]
 8004a0c:	e004      	b.n	8004a18 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6912      	ldr	r2, [r2, #16]
 8004a16:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	04c11db7 	.word	0x04c11db7

08004a58 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004a68:	231f      	movs	r3, #31
 8004a6a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004a6c:	bf00      	nop
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1e5a      	subs	r2, r3, #1
 8004a72:	613a      	str	r2, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d009      	beq.n	8004a8c <HAL_CRCEx_Polynomial_Set+0x34>
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b18      	cmp	r3, #24
 8004a90:	d846      	bhi.n	8004b20 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004b27 	.word	0x08004b27
 8004a9c:	08004b21 	.word	0x08004b21
 8004aa0:	08004b21 	.word	0x08004b21
 8004aa4:	08004b21 	.word	0x08004b21
 8004aa8:	08004b21 	.word	0x08004b21
 8004aac:	08004b21 	.word	0x08004b21
 8004ab0:	08004b21 	.word	0x08004b21
 8004ab4:	08004b21 	.word	0x08004b21
 8004ab8:	08004b15 	.word	0x08004b15
 8004abc:	08004b21 	.word	0x08004b21
 8004ac0:	08004b21 	.word	0x08004b21
 8004ac4:	08004b21 	.word	0x08004b21
 8004ac8:	08004b21 	.word	0x08004b21
 8004acc:	08004b21 	.word	0x08004b21
 8004ad0:	08004b21 	.word	0x08004b21
 8004ad4:	08004b21 	.word	0x08004b21
 8004ad8:	08004b09 	.word	0x08004b09
 8004adc:	08004b21 	.word	0x08004b21
 8004ae0:	08004b21 	.word	0x08004b21
 8004ae4:	08004b21 	.word	0x08004b21
 8004ae8:	08004b21 	.word	0x08004b21
 8004aec:	08004b21 	.word	0x08004b21
 8004af0:	08004b21 	.word	0x08004b21
 8004af4:	08004b21 	.word	0x08004b21
 8004af8:	08004afd 	.word	0x08004afd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	d913      	bls.n	8004b2a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b06:	e010      	b.n	8004b2a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b07      	cmp	r3, #7
 8004b0c:	d90f      	bls.n	8004b2e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b12:	e00c      	b.n	8004b2e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b0f      	cmp	r3, #15
 8004b18:	d90b      	bls.n	8004b32 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b1e:	e008      	b.n	8004b32 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	75fb      	strb	r3, [r7, #23]
      break;
 8004b24:	e006      	b.n	8004b34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b26:	bf00      	nop
 8004b28:	e004      	b.n	8004b34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b32:	bf00      	nop
  }
  if (status == HAL_OK)
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f023 0118 	bic.w	r1, r3, #24
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b72:	e17f      	b.n	8004e74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8171 	beq.w	8004e6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d005      	beq.n	8004ba4 <HAL_GPIO_Init+0x40>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d130      	bne.n	8004c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	2203      	movs	r2, #3
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bda:	2201      	movs	r2, #1
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	091b      	lsrs	r3, r3, #4
 8004bf0:	f003 0201 	and.w	r2, r3, #1
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d118      	bne.n	8004c44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004c18:	2201      	movs	r2, #1
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4013      	ands	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	08db      	lsrs	r3, r3, #3
 8004c2e:	f003 0201 	and.w	r2, r3, #1
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d017      	beq.n	8004c80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4013      	ands	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d123      	bne.n	8004cd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	08da      	lsrs	r2, r3, #3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3208      	adds	r2, #8
 8004c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	220f      	movs	r2, #15
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4013      	ands	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	08da      	lsrs	r2, r3, #3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3208      	adds	r2, #8
 8004cce:	6939      	ldr	r1, [r7, #16]
 8004cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	2203      	movs	r2, #3
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 0203 	and.w	r2, r3, #3
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80ac 	beq.w	8004e6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d16:	4b5f      	ldr	r3, [pc, #380]	; (8004e94 <HAL_GPIO_Init+0x330>)
 8004d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1a:	4a5e      	ldr	r2, [pc, #376]	; (8004e94 <HAL_GPIO_Init+0x330>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6613      	str	r3, [r2, #96]	; 0x60
 8004d22:	4b5c      	ldr	r3, [pc, #368]	; (8004e94 <HAL_GPIO_Init+0x330>)
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d2e:	4a5a      	ldr	r2, [pc, #360]	; (8004e98 <HAL_GPIO_Init+0x334>)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	3302      	adds	r3, #2
 8004d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	220f      	movs	r2, #15
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d58:	d025      	beq.n	8004da6 <HAL_GPIO_Init+0x242>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a4f      	ldr	r2, [pc, #316]	; (8004e9c <HAL_GPIO_Init+0x338>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01f      	beq.n	8004da2 <HAL_GPIO_Init+0x23e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a4e      	ldr	r2, [pc, #312]	; (8004ea0 <HAL_GPIO_Init+0x33c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d019      	beq.n	8004d9e <HAL_GPIO_Init+0x23a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a4d      	ldr	r2, [pc, #308]	; (8004ea4 <HAL_GPIO_Init+0x340>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <HAL_GPIO_Init+0x236>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a4c      	ldr	r2, [pc, #304]	; (8004ea8 <HAL_GPIO_Init+0x344>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00d      	beq.n	8004d96 <HAL_GPIO_Init+0x232>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a4b      	ldr	r2, [pc, #300]	; (8004eac <HAL_GPIO_Init+0x348>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d007      	beq.n	8004d92 <HAL_GPIO_Init+0x22e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a4a      	ldr	r2, [pc, #296]	; (8004eb0 <HAL_GPIO_Init+0x34c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d101      	bne.n	8004d8e <HAL_GPIO_Init+0x22a>
 8004d8a:	2306      	movs	r3, #6
 8004d8c:	e00c      	b.n	8004da8 <HAL_GPIO_Init+0x244>
 8004d8e:	2307      	movs	r3, #7
 8004d90:	e00a      	b.n	8004da8 <HAL_GPIO_Init+0x244>
 8004d92:	2305      	movs	r3, #5
 8004d94:	e008      	b.n	8004da8 <HAL_GPIO_Init+0x244>
 8004d96:	2304      	movs	r3, #4
 8004d98:	e006      	b.n	8004da8 <HAL_GPIO_Init+0x244>
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e004      	b.n	8004da8 <HAL_GPIO_Init+0x244>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e002      	b.n	8004da8 <HAL_GPIO_Init+0x244>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <HAL_GPIO_Init+0x244>
 8004da6:	2300      	movs	r3, #0
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	f002 0203 	and.w	r2, r2, #3
 8004dae:	0092      	lsls	r2, r2, #2
 8004db0:	4093      	lsls	r3, r2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004db8:	4937      	ldr	r1, [pc, #220]	; (8004e98 <HAL_GPIO_Init+0x334>)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	089b      	lsrs	r3, r3, #2
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <HAL_GPIO_Init+0x350>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dea:	4a32      	ldr	r2, [pc, #200]	; (8004eb4 <HAL_GPIO_Init+0x350>)
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004df0:	4b30      	ldr	r3, [pc, #192]	; (8004eb4 <HAL_GPIO_Init+0x350>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e14:	4a27      	ldr	r2, [pc, #156]	; (8004eb4 <HAL_GPIO_Init+0x350>)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e1a:	4b26      	ldr	r3, [pc, #152]	; (8004eb4 <HAL_GPIO_Init+0x350>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e3e:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <HAL_GPIO_Init+0x350>)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004e44:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <HAL_GPIO_Init+0x350>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4013      	ands	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e68:	4a12      	ldr	r2, [pc, #72]	; (8004eb4 <HAL_GPIO_Init+0x350>)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	3301      	adds	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f47f ae78 	bne.w	8004b74 <HAL_GPIO_Init+0x10>
  }
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	48000400 	.word	0x48000400
 8004ea0:	48000800 	.word	0x48000800
 8004ea4:	48000c00 	.word	0x48000c00
 8004ea8:	48001000 	.word	0x48001000
 8004eac:	48001400 	.word	0x48001400
 8004eb0:	48001800 	.word	0x48001800
 8004eb4:	40010400 	.word	0x40010400

08004eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ec8:	787b      	ldrb	r3, [r7, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ece:	887a      	ldrh	r2, [r7, #2]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ed4:	e002      	b.n	8004edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d006      	beq.n	8004f0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004efe:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 f806 	bl	8004f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40010400 	.word	0x40010400

08004f18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e081      	b.n	8005044 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7fc f909 	bl	800116c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2224      	movs	r2, #36	; 0x24
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d107      	bne.n	8004fa8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fa4:	609a      	str	r2, [r3, #8]
 8004fa6:	e006      	b.n	8004fb6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fb4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d104      	bne.n	8004fc8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fda:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69d9      	ldr	r1, [r3, #28]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1a      	ldr	r2, [r3, #32]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	4608      	mov	r0, r1
 8005056:	4611      	mov	r1, r2
 8005058:	461a      	mov	r2, r3
 800505a:	4603      	mov	r3, r0
 800505c:	817b      	strh	r3, [r7, #10]
 800505e:	460b      	mov	r3, r1
 8005060:	813b      	strh	r3, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b20      	cmp	r3, #32
 8005070:	f040 80fd 	bne.w	800526e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_I2C_Mem_Read+0x34>
 800507a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005086:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0f1      	b.n	8005270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_I2C_Mem_Read+0x4e>
 8005096:	2302      	movs	r3, #2
 8005098:	e0ea      	b.n	8005270 <HAL_I2C_Mem_Read+0x224>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050a2:	f7ff fb63 	bl	800476c <HAL_GetTick>
 80050a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	2319      	movs	r3, #25
 80050ae:	2201      	movs	r2, #1
 80050b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fa63 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0d5      	b.n	8005270 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2222      	movs	r2, #34	; 0x22
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2240      	movs	r2, #64	; 0x40
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a3a      	ldr	r2, [r7, #32]
 80050de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050ec:	88f8      	ldrh	r0, [r7, #6]
 80050ee:	893a      	ldrh	r2, [r7, #8]
 80050f0:	8979      	ldrh	r1, [r7, #10]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	4603      	mov	r3, r0
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f9c7 	bl	8005490 <I2C_RequestMemoryRead>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e0ad      	b.n	8005270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2bff      	cmp	r3, #255	; 0xff
 800511c:	d90e      	bls.n	800513c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	22ff      	movs	r2, #255	; 0xff
 8005122:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005128:	b2da      	uxtb	r2, r3
 800512a:	8979      	ldrh	r1, [r7, #10]
 800512c:	4b52      	ldr	r3, [pc, #328]	; (8005278 <HAL_I2C_Mem_Read+0x22c>)
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fbcb 	bl	80058d0 <I2C_TransferConfig>
 800513a:	e00f      	b.n	800515c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514a:	b2da      	uxtb	r2, r3
 800514c:	8979      	ldrh	r1, [r7, #10]
 800514e:	4b4a      	ldr	r3, [pc, #296]	; (8005278 <HAL_I2C_Mem_Read+0x22c>)
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fbba 	bl	80058d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	2200      	movs	r2, #0
 8005164:	2104      	movs	r1, #4
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fa0a 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e07c      	b.n	8005270 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d034      	beq.n	800521c <HAL_I2C_Mem_Read+0x1d0>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d130      	bne.n	800521c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	2200      	movs	r2, #0
 80051c2:	2180      	movs	r1, #128	; 0x80
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f9db 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e04d      	b.n	8005270 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2bff      	cmp	r3, #255	; 0xff
 80051dc:	d90e      	bls.n	80051fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	22ff      	movs	r2, #255	; 0xff
 80051e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	8979      	ldrh	r1, [r7, #10]
 80051ec:	2300      	movs	r3, #0
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fb6b 	bl	80058d0 <I2C_TransferConfig>
 80051fa:	e00f      	b.n	800521c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	b2da      	uxtb	r2, r3
 800520c:	8979      	ldrh	r1, [r7, #10]
 800520e:	2300      	movs	r3, #0
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fb5a 	bl	80058d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d19a      	bne.n	800515c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fa28 	bl	8005680 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e01a      	b.n	8005270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2220      	movs	r2, #32
 8005240:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6859      	ldr	r1, [r3, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_I2C_Mem_Read+0x230>)
 800524e:	400b      	ands	r3, r1
 8005250:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e000      	b.n	8005270 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800526e:	2302      	movs	r3, #2
  }
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	80002400 	.word	0x80002400
 800527c:	fe00e800 	.word	0xfe00e800

08005280 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	; 0x28
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	460b      	mov	r3, r1
 800528e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b20      	cmp	r3, #32
 800529e:	f040 80f1 	bne.w	8005484 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b0:	d101      	bne.n	80052b6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
 80052b4:	e0e7      	b.n	8005486 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_I2C_IsDeviceReady+0x44>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e0e0      	b.n	8005486 <HAL_I2C_IsDeviceReady+0x206>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2224      	movs	r2, #36	; 0x24
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d107      	bne.n	80052f2 <HAL_I2C_IsDeviceReady+0x72>
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052f0:	e004      	b.n	80052fc <HAL_I2C_IsDeviceReady+0x7c>
 80052f2:	897b      	ldrh	r3, [r7, #10]
 80052f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005302:	f7ff fa33 	bl	800476c <HAL_GetTick>
 8005306:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b20      	cmp	r3, #32
 8005314:	bf0c      	ite	eq
 8005316:	2301      	moveq	r3, #1
 8005318:	2300      	movne	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b10      	cmp	r3, #16
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005334:	e034      	b.n	80053a0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800533c:	d01a      	beq.n	8005374 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800533e:	f7ff fa15 	bl	800476c <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <HAL_I2C_IsDeviceReady+0xd4>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10f      	bne.n	8005374 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e088      	b.n	8005486 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b20      	cmp	r3, #32
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b10      	cmp	r3, #16
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80053a0:	7ffb      	ldrb	r3, [r7, #31]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d102      	bne.n	80053ac <HAL_I2C_IsDeviceReady+0x12c>
 80053a6:	7fbb      	ldrb	r3, [r7, #30]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0c4      	beq.n	8005336 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d01a      	beq.n	80053f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2200      	movs	r2, #0
 80053c2:	2120      	movs	r1, #32
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f8db 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e058      	b.n	8005486 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2220      	movs	r2, #32
 80053da:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e04a      	b.n	8005486 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	2120      	movs	r1, #32
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f8c0 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e03d      	b.n	8005486 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2210      	movs	r2, #16
 8005410:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2220      	movs	r2, #32
 8005418:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d118      	bne.n	8005454 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005430:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2200      	movs	r2, #0
 800543a:	2120      	movs	r1, #32
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f89f 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e01c      	b.n	8005486 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2220      	movs	r2, #32
 8005452:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	3301      	adds	r3, #1
 8005458:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	429a      	cmp	r2, r3
 8005460:	f63f af3b 	bhi.w	80052da <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005484:	2302      	movs	r3, #2
  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	3720      	adds	r7, #32
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	4608      	mov	r0, r1
 800549a:	4611      	mov	r1, r2
 800549c:	461a      	mov	r2, r3
 800549e:	4603      	mov	r3, r0
 80054a0:	817b      	strh	r3, [r7, #10]
 80054a2:	460b      	mov	r3, r1
 80054a4:	813b      	strh	r3, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	8979      	ldrh	r1, [r7, #10]
 80054b0:	4b20      	ldr	r3, [pc, #128]	; (8005534 <I2C_RequestMemoryRead+0xa4>)
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	2300      	movs	r3, #0
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fa0a 	bl	80058d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	69b9      	ldr	r1, [r7, #24]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f89d 	bl	8005600 <I2C_WaitOnTXISFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e02c      	b.n	800552a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d105      	bne.n	80054e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054d6:	893b      	ldrh	r3, [r7, #8]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	629a      	str	r2, [r3, #40]	; 0x28
 80054e0:	e015      	b.n	800550e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054e2:	893b      	ldrh	r3, [r7, #8]
 80054e4:	0a1b      	lsrs	r3, r3, #8
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f883 	bl	8005600 <I2C_WaitOnTXISFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e012      	b.n	800552a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005504:	893b      	ldrh	r3, [r7, #8]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2200      	movs	r2, #0
 8005516:	2140      	movs	r1, #64	; 0x40
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f831 	bl	8005580 <I2C_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	80002000 	.word	0x80002000

08005538 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b02      	cmp	r3, #2
 800554c:	d103      	bne.n	8005556 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d007      	beq.n	8005574 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	619a      	str	r2, [r3, #24]
  }
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005590:	e022      	b.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005598:	d01e      	beq.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7ff f8e7 	bl	800476c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d113      	bne.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e00f      	b.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d0cd      	beq.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800560c:	e02c      	b.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f870 	bl	80056f8 <I2C_IsErrorOccurred>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e02a      	b.n	8005678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005628:	d01e      	beq.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7ff f89f 	bl	800476c <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d113      	bne.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005644:	f043 0220 	orr.w	r2, r3, #32
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e007      	b.n	8005678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b02      	cmp	r3, #2
 8005674:	d1cb      	bne.n	800560e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800568c:	e028      	b.n	80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f830 	bl	80056f8 <I2C_IsErrorOccurred>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e026      	b.n	80056f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7ff f863 	bl	800476c <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d113      	bne.n	80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056bc:	f043 0220 	orr.w	r2, r3, #32
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e007      	b.n	80056f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d1cf      	bne.n	800568e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	; 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b00      	cmp	r3, #0
 8005722:	d075      	beq.n	8005810 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2210      	movs	r2, #16
 800572a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800572c:	e056      	b.n	80057dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005734:	d052      	beq.n	80057dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005736:	f7ff f819 	bl	800476c <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <I2C_IsErrorOccurred+0x54>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d147      	bne.n	80057dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005756:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800575e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800576a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576e:	d12e      	bne.n	80057ce <I2C_IsErrorOccurred+0xd6>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005776:	d02a      	beq.n	80057ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	2b20      	cmp	r3, #32
 800577c:	d027      	beq.n	80057ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800578c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800578e:	f7fe ffed 	bl	800476c <HAL_GetTick>
 8005792:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005794:	e01b      	b.n	80057ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005796:	f7fe ffe9 	bl	800476c <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b19      	cmp	r3, #25
 80057a2:	d914      	bls.n	80057ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a8:	f043 0220 	orr.w	r2, r3, #32
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d1dc      	bne.n	8005796 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d003      	beq.n	80057f2 <I2C_IsErrorOccurred+0xfa>
 80057ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d09d      	beq.n	800572e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80057f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d103      	bne.n	8005802 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2220      	movs	r2, #32
 8005800:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	f043 0304 	orr.w	r3, r3, #4
 8005808:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005832:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	f043 0308 	orr.w	r3, r3, #8
 800584a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005854:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	f043 0302 	orr.w	r3, r3, #2
 800586c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005876:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800587e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01c      	beq.n	80058c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7ff fe56 	bl	8005538 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6859      	ldr	r1, [r3, #4]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <I2C_IsErrorOccurred+0x1d4>)
 8005898:	400b      	ands	r3, r1
 800589a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80058c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3728      	adds	r7, #40	; 0x28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	fe00e800 	.word	0xfe00e800

080058d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	607b      	str	r3, [r7, #4]
 80058da:	460b      	mov	r3, r1
 80058dc:	817b      	strh	r3, [r7, #10]
 80058de:	4613      	mov	r3, r2
 80058e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058e2:	897b      	ldrh	r3, [r7, #10]
 80058e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058e8:	7a7b      	ldrb	r3, [r7, #9]
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	0d5b      	lsrs	r3, r3, #21
 800590a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800590e:	4b08      	ldr	r3, [pc, #32]	; (8005930 <I2C_TransferConfig+0x60>)
 8005910:	430b      	orrs	r3, r1
 8005912:	43db      	mvns	r3, r3
 8005914:	ea02 0103 	and.w	r1, r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	03ff63ff 	.word	0x03ff63ff

08005934 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b20      	cmp	r3, #32
 8005948:	d138      	bne.n	80059bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005954:	2302      	movs	r3, #2
 8005956:	e032      	b.n	80059be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2224      	movs	r2, #36	; 0x24
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005986:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6819      	ldr	r1, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	e000      	b.n	80059be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059bc:	2302      	movs	r3, #2
  }
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d139      	bne.n	8005a54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e033      	b.n	8005a56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2224      	movs	r2, #36	; 0x24
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	e000      	b.n	8005a56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a54:	2302      	movs	r3, #2
  }
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a68:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <HAL_PWREx_GetVoltageRange+0x18>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40007000 	.word	0x40007000

08005a80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a8e:	d130      	bne.n	8005af2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a90:	4b23      	ldr	r3, [pc, #140]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9c:	d038      	beq.n	8005b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a9e:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005aa6:	4a1e      	ldr	r2, [pc, #120]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2232      	movs	r2, #50	; 0x32
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	4a1b      	ldr	r2, [pc, #108]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	0c9b      	lsrs	r3, r3, #18
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ac4:	e002      	b.n	8005acc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005acc:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad8:	d102      	bne.n	8005ae0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f2      	bne.n	8005ac6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aec:	d110      	bne.n	8005b10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e00f      	b.n	8005b12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005afe:	d007      	beq.n	8005b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b00:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b08:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40007000 	.word	0x40007000
 8005b24:	20000000 	.word	0x20000000
 8005b28:	431bde83 	.word	0x431bde83

08005b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e3ca      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b3e:	4b97      	ldr	r3, [pc, #604]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b48:	4b94      	ldr	r3, [pc, #592]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 80e4 	beq.w	8005d28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <HAL_RCC_OscConfig+0x4a>
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b0c      	cmp	r3, #12
 8005b6a:	f040 808b 	bne.w	8005c84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	f040 8087 	bne.w	8005c84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b76:	4b89      	ldr	r3, [pc, #548]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_RCC_OscConfig+0x62>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e3a2      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	4b82      	ldr	r3, [pc, #520]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x7c>
 8005b9e:	4b7f      	ldr	r3, [pc, #508]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba6:	e005      	b.n	8005bb4 <HAL_RCC_OscConfig+0x88>
 8005ba8:	4b7c      	ldr	r3, [pc, #496]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d223      	bcs.n	8005c00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fd87 	bl	80066d0 <RCC_SetFlashLatencyFromMSIRange>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e383      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bcc:	4b73      	ldr	r3, [pc, #460]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a72      	ldr	r2, [pc, #456]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005bd2:	f043 0308 	orr.w	r3, r3, #8
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	4b70      	ldr	r3, [pc, #448]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	496d      	ldr	r1, [pc, #436]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bea:	4b6c      	ldr	r3, [pc, #432]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	4968      	ldr	r1, [pc, #416]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	604b      	str	r3, [r1, #4]
 8005bfe:	e025      	b.n	8005c4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c00:	4b66      	ldr	r3, [pc, #408]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a65      	ldr	r2, [pc, #404]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005c06:	f043 0308 	orr.w	r3, r3, #8
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	4b63      	ldr	r3, [pc, #396]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	4960      	ldr	r1, [pc, #384]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c1e:	4b5f      	ldr	r3, [pc, #380]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	495b      	ldr	r1, [pc, #364]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d109      	bne.n	8005c4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fd47 	bl	80066d0 <RCC_SetFlashLatencyFromMSIRange>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e343      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c4c:	f000 fc4a 	bl	80064e4 <HAL_RCC_GetSysClockFreq>
 8005c50:	4602      	mov	r2, r0
 8005c52:	4b52      	ldr	r3, [pc, #328]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	091b      	lsrs	r3, r3, #4
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	4950      	ldr	r1, [pc, #320]	; (8005da0 <HAL_RCC_OscConfig+0x274>)
 8005c5e:	5ccb      	ldrb	r3, [r1, r3]
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	fa22 f303 	lsr.w	r3, r2, r3
 8005c68:	4a4e      	ldr	r2, [pc, #312]	; (8005da4 <HAL_RCC_OscConfig+0x278>)
 8005c6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c6c:	4b4e      	ldr	r3, [pc, #312]	; (8005da8 <HAL_RCC_OscConfig+0x27c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fb fb79 	bl	8001368 <HAL_InitTick>
 8005c76:	4603      	mov	r3, r0
 8005c78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d052      	beq.n	8005d26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	e327      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d032      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c8c:	4b43      	ldr	r3, [pc, #268]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a42      	ldr	r2, [pc, #264]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c98:	f7fe fd68 	bl	800476c <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ca0:	f7fe fd64 	bl	800476c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e310      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cb2:	4b3a      	ldr	r3, [pc, #232]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cbe:	4b37      	ldr	r3, [pc, #220]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a36      	ldr	r2, [pc, #216]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005cc4:	f043 0308 	orr.w	r3, r3, #8
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	4b34      	ldr	r3, [pc, #208]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	4931      	ldr	r1, [pc, #196]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cdc:	4b2f      	ldr	r3, [pc, #188]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	492c      	ldr	r1, [pc, #176]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	604b      	str	r3, [r1, #4]
 8005cf0:	e01a      	b.n	8005d28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005cf2:	4b2a      	ldr	r3, [pc, #168]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a29      	ldr	r2, [pc, #164]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cfe:	f7fe fd35 	bl	800476c <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d06:	f7fe fd31 	bl	800476c <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e2dd      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d18:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1f0      	bne.n	8005d06 <HAL_RCC_OscConfig+0x1da>
 8005d24:	e000      	b.n	8005d28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d074      	beq.n	8005e1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d005      	beq.n	8005d46 <HAL_RCC_OscConfig+0x21a>
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b0c      	cmp	r3, #12
 8005d3e:	d10e      	bne.n	8005d5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d10b      	bne.n	8005d5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d46:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d064      	beq.n	8005e1c <HAL_RCC_OscConfig+0x2f0>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d160      	bne.n	8005e1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e2ba      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d66:	d106      	bne.n	8005d76 <HAL_RCC_OscConfig+0x24a>
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a0b      	ldr	r2, [pc, #44]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	e026      	b.n	8005dc4 <HAL_RCC_OscConfig+0x298>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d7e:	d115      	bne.n	8005dac <HAL_RCC_OscConfig+0x280>
 8005d80:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a05      	ldr	r2, [pc, #20]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a02      	ldr	r2, [pc, #8]	; (8005d9c <HAL_RCC_OscConfig+0x270>)
 8005d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	e014      	b.n	8005dc4 <HAL_RCC_OscConfig+0x298>
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	0800ac84 	.word	0x0800ac84
 8005da4:	20000000 	.word	0x20000000
 8005da8:	20004018 	.word	0x20004018
 8005dac:	4ba0      	ldr	r3, [pc, #640]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a9f      	ldr	r2, [pc, #636]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	4b9d      	ldr	r3, [pc, #628]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a9c      	ldr	r2, [pc, #624]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d013      	beq.n	8005df4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fe fcce 	bl	800476c <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dd4:	f7fe fcca 	bl	800476c <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b64      	cmp	r3, #100	; 0x64
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e276      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005de6:	4b92      	ldr	r3, [pc, #584]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0f0      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x2a8>
 8005df2:	e014      	b.n	8005e1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fe fcba 	bl	800476c <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dfc:	f7fe fcb6 	bl	800476c <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b64      	cmp	r3, #100	; 0x64
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e262      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e0e:	4b88      	ldr	r3, [pc, #544]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f0      	bne.n	8005dfc <HAL_RCC_OscConfig+0x2d0>
 8005e1a:	e000      	b.n	8005e1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d060      	beq.n	8005eec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_OscConfig+0x310>
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b0c      	cmp	r3, #12
 8005e34:	d119      	bne.n	8005e6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d116      	bne.n	8005e6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e3c:	4b7c      	ldr	r3, [pc, #496]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_RCC_OscConfig+0x328>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e23f      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e54:	4b76      	ldr	r3, [pc, #472]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	061b      	lsls	r3, r3, #24
 8005e62:	4973      	ldr	r1, [pc, #460]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e68:	e040      	b.n	8005eec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d023      	beq.n	8005eba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e72:	4b6f      	ldr	r3, [pc, #444]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6e      	ldr	r2, [pc, #440]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7fe fc75 	bl	800476c <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e84:	e008      	b.n	8005e98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e86:	f7fe fc71 	bl	800476c <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e21d      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e98:	4b65      	ldr	r3, [pc, #404]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea4:	4b62      	ldr	r3, [pc, #392]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	495f      	ldr	r1, [pc, #380]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	604b      	str	r3, [r1, #4]
 8005eb8:	e018      	b.n	8005eec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eba:	4b5d      	ldr	r3, [pc, #372]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a5c      	ldr	r2, [pc, #368]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec6:	f7fe fc51 	bl	800476c <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ece:	f7fe fc4d 	bl	800476c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e1f9      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ee0:	4b53      	ldr	r3, [pc, #332]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1f0      	bne.n	8005ece <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d03c      	beq.n	8005f72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01c      	beq.n	8005f3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f00:	4b4b      	ldr	r3, [pc, #300]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f06:	4a4a      	ldr	r2, [pc, #296]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f10:	f7fe fc2c 	bl	800476c <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f18:	f7fe fc28 	bl	800476c <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e1d4      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f2a:	4b41      	ldr	r3, [pc, #260]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0ef      	beq.n	8005f18 <HAL_RCC_OscConfig+0x3ec>
 8005f38:	e01b      	b.n	8005f72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f3a:	4b3d      	ldr	r3, [pc, #244]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f40:	4a3b      	ldr	r2, [pc, #236]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4a:	f7fe fc0f 	bl	800476c <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f52:	f7fe fc0b 	bl	800476c <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e1b7      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f64:	4b32      	ldr	r3, [pc, #200]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1ef      	bne.n	8005f52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80a6 	beq.w	80060cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f80:	2300      	movs	r3, #0
 8005f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f84:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10d      	bne.n	8005fac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f90:	4b27      	ldr	r3, [pc, #156]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	4a26      	ldr	r2, [pc, #152]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f9c:	4b24      	ldr	r3, [pc, #144]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fac:	4b21      	ldr	r3, [pc, #132]	; (8006034 <HAL_RCC_OscConfig+0x508>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d118      	bne.n	8005fea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fb8:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <HAL_RCC_OscConfig+0x508>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <HAL_RCC_OscConfig+0x508>)
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fc4:	f7fe fbd2 	bl	800476c <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fcc:	f7fe fbce 	bl	800476c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e17a      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fde:	4b15      	ldr	r3, [pc, #84]	; (8006034 <HAL_RCC_OscConfig+0x508>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d108      	bne.n	8006004 <HAL_RCC_OscConfig+0x4d8>
 8005ff2:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff8:	4a0d      	ldr	r2, [pc, #52]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006002:	e029      	b.n	8006058 <HAL_RCC_OscConfig+0x52c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2b05      	cmp	r3, #5
 800600a:	d115      	bne.n	8006038 <HAL_RCC_OscConfig+0x50c>
 800600c:	4b08      	ldr	r3, [pc, #32]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006012:	4a07      	ldr	r2, [pc, #28]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8006014:	f043 0304 	orr.w	r3, r3, #4
 8006018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800601c:	4b04      	ldr	r3, [pc, #16]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	4a03      	ldr	r2, [pc, #12]	; (8006030 <HAL_RCC_OscConfig+0x504>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800602c:	e014      	b.n	8006058 <HAL_RCC_OscConfig+0x52c>
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000
 8006034:	40007000 	.word	0x40007000
 8006038:	4b9c      	ldr	r3, [pc, #624]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603e:	4a9b      	ldr	r2, [pc, #620]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006048:	4b98      	ldr	r3, [pc, #608]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 800604a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604e:	4a97      	ldr	r2, [pc, #604]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006050:	f023 0304 	bic.w	r3, r3, #4
 8006054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d016      	beq.n	800608e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006060:	f7fe fb84 	bl	800476c <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006066:	e00a      	b.n	800607e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006068:	f7fe fb80 	bl	800476c <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f241 3288 	movw	r2, #5000	; 0x1388
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e12a      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800607e:	4b8b      	ldr	r3, [pc, #556]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0ed      	beq.n	8006068 <HAL_RCC_OscConfig+0x53c>
 800608c:	e015      	b.n	80060ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608e:	f7fe fb6d 	bl	800476c <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006094:	e00a      	b.n	80060ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006096:	f7fe fb69 	bl	800476c <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e113      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060ac:	4b7f      	ldr	r3, [pc, #508]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1ed      	bne.n	8006096 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060ba:	7ffb      	ldrb	r3, [r7, #31]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d105      	bne.n	80060cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c0:	4b7a      	ldr	r3, [pc, #488]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 80060c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c4:	4a79      	ldr	r2, [pc, #484]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 80060c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80fe 	beq.w	80062d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	2b02      	cmp	r3, #2
 80060dc:	f040 80d0 	bne.w	8006280 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80060e0:	4b72      	ldr	r3, [pc, #456]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0203 	and.w	r2, r3, #3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d130      	bne.n	8006156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	3b01      	subs	r3, #1
 8006100:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006102:	429a      	cmp	r2, r3
 8006104:	d127      	bne.n	8006156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006110:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d11f      	bne.n	8006156 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006120:	2a07      	cmp	r2, #7
 8006122:	bf14      	ite	ne
 8006124:	2201      	movne	r2, #1
 8006126:	2200      	moveq	r2, #0
 8006128:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800612a:	4293      	cmp	r3, r2
 800612c:	d113      	bne.n	8006156 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006138:	085b      	lsrs	r3, r3, #1
 800613a:	3b01      	subs	r3, #1
 800613c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800613e:	429a      	cmp	r2, r3
 8006140:	d109      	bne.n	8006156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	3b01      	subs	r3, #1
 8006150:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006152:	429a      	cmp	r2, r3
 8006154:	d06e      	beq.n	8006234 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b0c      	cmp	r3, #12
 800615a:	d069      	beq.n	8006230 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800615c:	4b53      	ldr	r3, [pc, #332]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d105      	bne.n	8006174 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006168:	4b50      	ldr	r3, [pc, #320]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0ad      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006178:	4b4c      	ldr	r3, [pc, #304]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a4b      	ldr	r2, [pc, #300]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 800617e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006182:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006184:	f7fe faf2 	bl	800476c <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618c:	f7fe faee 	bl	800476c <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e09a      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800619e:	4b43      	ldr	r3, [pc, #268]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f0      	bne.n	800618c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061aa:	4b40      	ldr	r3, [pc, #256]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	4b40      	ldr	r3, [pc, #256]	; (80062b0 <HAL_RCC_OscConfig+0x784>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061ba:	3a01      	subs	r2, #1
 80061bc:	0112      	lsls	r2, r2, #4
 80061be:	4311      	orrs	r1, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061c4:	0212      	lsls	r2, r2, #8
 80061c6:	4311      	orrs	r1, r2
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061cc:	0852      	lsrs	r2, r2, #1
 80061ce:	3a01      	subs	r2, #1
 80061d0:	0552      	lsls	r2, r2, #21
 80061d2:	4311      	orrs	r1, r2
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061d8:	0852      	lsrs	r2, r2, #1
 80061da:	3a01      	subs	r2, #1
 80061dc:	0652      	lsls	r2, r2, #25
 80061de:	4311      	orrs	r1, r2
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061e4:	0912      	lsrs	r2, r2, #4
 80061e6:	0452      	lsls	r2, r2, #17
 80061e8:	430a      	orrs	r2, r1
 80061ea:	4930      	ldr	r1, [pc, #192]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80061f0:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a2d      	ldr	r2, [pc, #180]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 80061f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061fc:	4b2b      	ldr	r3, [pc, #172]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	4a2a      	ldr	r2, [pc, #168]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006206:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006208:	f7fe fab0 	bl	800476c <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006210:	f7fe faac 	bl	800476c <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e058      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006222:	4b22      	ldr	r3, [pc, #136]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0f0      	beq.n	8006210 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800622e:	e050      	b.n	80062d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e04f      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d148      	bne.n	80062d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006240:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a19      	ldr	r2, [pc, #100]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800624a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800624c:	4b17      	ldr	r3, [pc, #92]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	4a16      	ldr	r2, [pc, #88]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006256:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006258:	f7fe fa88 	bl	800476c <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006260:	f7fe fa84 	bl	800476c <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e030      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006272:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0f0      	beq.n	8006260 <HAL_RCC_OscConfig+0x734>
 800627e:	e028      	b.n	80062d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b0c      	cmp	r3, #12
 8006284:	d023      	beq.n	80062ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006286:	4b09      	ldr	r3, [pc, #36]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a08      	ldr	r2, [pc, #32]	; (80062ac <HAL_RCC_OscConfig+0x780>)
 800628c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006292:	f7fe fa6b 	bl	800476c <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006298:	e00c      	b.n	80062b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800629a:	f7fe fa67 	bl	800476c <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d905      	bls.n	80062b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e013      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
 80062ac:	40021000 	.word	0x40021000
 80062b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <HAL_RCC_OscConfig+0x7b0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1ec      	bne.n	800629a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <HAL_RCC_OscConfig+0x7b0>)
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	4905      	ldr	r1, [pc, #20]	; (80062dc <HAL_RCC_OscConfig+0x7b0>)
 80062c6:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <HAL_RCC_OscConfig+0x7b4>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	60cb      	str	r3, [r1, #12]
 80062cc:	e001      	b.n	80062d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40021000 	.word	0x40021000
 80062e0:	feeefffc 	.word	0xfeeefffc

080062e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0e7      	b.n	80064c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062f8:	4b75      	ldr	r3, [pc, #468]	; (80064d0 <HAL_RCC_ClockConfig+0x1ec>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d910      	bls.n	8006328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006306:	4b72      	ldr	r3, [pc, #456]	; (80064d0 <HAL_RCC_ClockConfig+0x1ec>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 0207 	bic.w	r2, r3, #7
 800630e:	4970      	ldr	r1, [pc, #448]	; (80064d0 <HAL_RCC_ClockConfig+0x1ec>)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b6e      	ldr	r3, [pc, #440]	; (80064d0 <HAL_RCC_ClockConfig+0x1ec>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0cf      	b.n	80064c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d010      	beq.n	8006356 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	4b66      	ldr	r3, [pc, #408]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006340:	429a      	cmp	r2, r3
 8006342:	d908      	bls.n	8006356 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006344:	4b63      	ldr	r3, [pc, #396]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	4960      	ldr	r1, [pc, #384]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006352:	4313      	orrs	r3, r2
 8006354:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d04c      	beq.n	80063fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b03      	cmp	r3, #3
 8006368:	d107      	bne.n	800637a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800636a:	4b5a      	ldr	r3, [pc, #360]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d121      	bne.n	80063ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e0a6      	b.n	80064c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d107      	bne.n	8006392 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006382:	4b54      	ldr	r3, [pc, #336]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d115      	bne.n	80063ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e09a      	b.n	80064c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d107      	bne.n	80063aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800639a:	4b4e      	ldr	r3, [pc, #312]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e08e      	b.n	80064c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063aa:	4b4a      	ldr	r3, [pc, #296]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e086      	b.n	80064c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063ba:	4b46      	ldr	r3, [pc, #280]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f023 0203 	bic.w	r2, r3, #3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	4943      	ldr	r1, [pc, #268]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063cc:	f7fe f9ce 	bl	800476c <HAL_GetTick>
 80063d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d2:	e00a      	b.n	80063ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063d4:	f7fe f9ca 	bl	800476c <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e06e      	b.n	80064c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ea:	4b3a      	ldr	r3, [pc, #232]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 020c 	and.w	r2, r3, #12
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d1eb      	bne.n	80063d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d010      	beq.n	800642a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	4b31      	ldr	r3, [pc, #196]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006414:	429a      	cmp	r2, r3
 8006416:	d208      	bcs.n	800642a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006418:	4b2e      	ldr	r3, [pc, #184]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	492b      	ldr	r1, [pc, #172]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006426:	4313      	orrs	r3, r2
 8006428:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800642a:	4b29      	ldr	r3, [pc, #164]	; (80064d0 <HAL_RCC_ClockConfig+0x1ec>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d210      	bcs.n	800645a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006438:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <HAL_RCC_ClockConfig+0x1ec>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f023 0207 	bic.w	r2, r3, #7
 8006440:	4923      	ldr	r1, [pc, #140]	; (80064d0 <HAL_RCC_ClockConfig+0x1ec>)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	4313      	orrs	r3, r2
 8006446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006448:	4b21      	ldr	r3, [pc, #132]	; (80064d0 <HAL_RCC_ClockConfig+0x1ec>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d001      	beq.n	800645a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e036      	b.n	80064c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006466:	4b1b      	ldr	r3, [pc, #108]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	4918      	ldr	r1, [pc, #96]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006474:	4313      	orrs	r3, r2
 8006476:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d009      	beq.n	8006498 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006484:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	4910      	ldr	r1, [pc, #64]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006494:	4313      	orrs	r3, r2
 8006496:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006498:	f000 f824 	bl	80064e4 <HAL_RCC_GetSysClockFreq>
 800649c:	4602      	mov	r2, r0
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <HAL_RCC_ClockConfig+0x1f0>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	091b      	lsrs	r3, r3, #4
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	490b      	ldr	r1, [pc, #44]	; (80064d8 <HAL_RCC_ClockConfig+0x1f4>)
 80064aa:	5ccb      	ldrb	r3, [r1, r3]
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
 80064b4:	4a09      	ldr	r2, [pc, #36]	; (80064dc <HAL_RCC_ClockConfig+0x1f8>)
 80064b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80064b8:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <HAL_RCC_ClockConfig+0x1fc>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fa ff53 	bl	8001368 <HAL_InitTick>
 80064c2:	4603      	mov	r3, r0
 80064c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80064c6:	7afb      	ldrb	r3, [r7, #11]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40022000 	.word	0x40022000
 80064d4:	40021000 	.word	0x40021000
 80064d8:	0800ac84 	.word	0x0800ac84
 80064dc:	20000000 	.word	0x20000000
 80064e0:	20004018 	.word	0x20004018

080064e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b089      	sub	sp, #36	; 0x24
 80064e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	2300      	movs	r3, #0
 80064f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064f2:	4b3e      	ldr	r3, [pc, #248]	; (80065ec <HAL_RCC_GetSysClockFreq+0x108>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064fc:	4b3b      	ldr	r3, [pc, #236]	; (80065ec <HAL_RCC_GetSysClockFreq+0x108>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <HAL_RCC_GetSysClockFreq+0x34>
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b0c      	cmp	r3, #12
 8006510:	d121      	bne.n	8006556 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d11e      	bne.n	8006556 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006518:	4b34      	ldr	r3, [pc, #208]	; (80065ec <HAL_RCC_GetSysClockFreq+0x108>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006524:	4b31      	ldr	r3, [pc, #196]	; (80065ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800652a:	0a1b      	lsrs	r3, r3, #8
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	e005      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006534:	4b2d      	ldr	r3, [pc, #180]	; (80065ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	091b      	lsrs	r3, r3, #4
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006540:	4a2b      	ldr	r2, [pc, #172]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006548:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006554:	e00a      	b.n	800656c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b04      	cmp	r3, #4
 800655a:	d102      	bne.n	8006562 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800655c:	4b25      	ldr	r3, [pc, #148]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800655e:	61bb      	str	r3, [r7, #24]
 8006560:	e004      	b.n	800656c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b08      	cmp	r3, #8
 8006566:	d101      	bne.n	800656c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006568:	4b23      	ldr	r3, [pc, #140]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800656a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b0c      	cmp	r3, #12
 8006570:	d134      	bne.n	80065dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006572:	4b1e      	ldr	r3, [pc, #120]	; (80065ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d003      	beq.n	800658a <HAL_RCC_GetSysClockFreq+0xa6>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b03      	cmp	r3, #3
 8006586:	d003      	beq.n	8006590 <HAL_RCC_GetSysClockFreq+0xac>
 8006588:	e005      	b.n	8006596 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800658a:	4b1a      	ldr	r3, [pc, #104]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800658c:	617b      	str	r3, [r7, #20]
      break;
 800658e:	e005      	b.n	800659c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006590:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006592:	617b      	str	r3, [r7, #20]
      break;
 8006594:	e002      	b.n	800659c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	617b      	str	r3, [r7, #20]
      break;
 800659a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800659c:	4b13      	ldr	r3, [pc, #76]	; (80065ec <HAL_RCC_GetSysClockFreq+0x108>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	3301      	adds	r3, #1
 80065a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <HAL_RCC_GetSysClockFreq+0x108>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	0a1b      	lsrs	r3, r3, #8
 80065b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	fb03 f202 	mul.w	r2, r3, r2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065c2:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <HAL_RCC_GetSysClockFreq+0x108>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	0e5b      	lsrs	r3, r3, #25
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	3301      	adds	r3, #1
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80065dc:	69bb      	ldr	r3, [r7, #24]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3724      	adds	r7, #36	; 0x24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40021000 	.word	0x40021000
 80065f0:	0800ac9c 	.word	0x0800ac9c
 80065f4:	00f42400 	.word	0x00f42400
 80065f8:	007a1200 	.word	0x007a1200

080065fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006600:	4b03      	ldr	r3, [pc, #12]	; (8006610 <HAL_RCC_GetHCLKFreq+0x14>)
 8006602:	681b      	ldr	r3, [r3, #0]
}
 8006604:	4618      	mov	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20000000 	.word	0x20000000

08006614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006618:	f7ff fff0 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 800661c:	4602      	mov	r2, r0
 800661e:	4b06      	ldr	r3, [pc, #24]	; (8006638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	0a1b      	lsrs	r3, r3, #8
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	4904      	ldr	r1, [pc, #16]	; (800663c <HAL_RCC_GetPCLK1Freq+0x28>)
 800662a:	5ccb      	ldrb	r3, [r1, r3]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40021000 	.word	0x40021000
 800663c:	0800ac94 	.word	0x0800ac94

08006640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006644:	f7ff ffda 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 8006648:	4602      	mov	r2, r0
 800664a:	4b06      	ldr	r3, [pc, #24]	; (8006664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	0adb      	lsrs	r3, r3, #11
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	4904      	ldr	r1, [pc, #16]	; (8006668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006656:	5ccb      	ldrb	r3, [r1, r3]
 8006658:	f003 031f 	and.w	r3, r3, #31
 800665c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006660:	4618      	mov	r0, r3
 8006662:	bd80      	pop	{r7, pc}
 8006664:	40021000 	.word	0x40021000
 8006668:	0800ac94 	.word	0x0800ac94

0800666c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	220f      	movs	r2, #15
 800667a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800667c:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <HAL_RCC_GetClockConfig+0x5c>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 0203 	and.w	r2, r3, #3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006688:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <HAL_RCC_GetClockConfig+0x5c>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006694:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <HAL_RCC_GetClockConfig+0x5c>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80066a0:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <HAL_RCC_GetClockConfig+0x5c>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	08db      	lsrs	r3, r3, #3
 80066a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80066ae:	4b07      	ldr	r3, [pc, #28]	; (80066cc <HAL_RCC_GetClockConfig+0x60>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0207 	and.w	r2, r3, #7
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	601a      	str	r2, [r3, #0]
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40021000 	.word	0x40021000
 80066cc:	40022000 	.word	0x40022000

080066d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80066dc:	4b2a      	ldr	r3, [pc, #168]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80066e8:	f7ff f9bc 	bl	8005a64 <HAL_PWREx_GetVoltageRange>
 80066ec:	6178      	str	r0, [r7, #20]
 80066ee:	e014      	b.n	800671a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80066f0:	4b25      	ldr	r3, [pc, #148]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f4:	4a24      	ldr	r2, [pc, #144]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fa:	6593      	str	r3, [r2, #88]	; 0x58
 80066fc:	4b22      	ldr	r3, [pc, #136]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006708:	f7ff f9ac 	bl	8005a64 <HAL_PWREx_GetVoltageRange>
 800670c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800670e:	4b1e      	ldr	r3, [pc, #120]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006712:	4a1d      	ldr	r2, [pc, #116]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006718:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006720:	d10b      	bne.n	800673a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b80      	cmp	r3, #128	; 0x80
 8006726:	d919      	bls.n	800675c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2ba0      	cmp	r3, #160	; 0xa0
 800672c:	d902      	bls.n	8006734 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800672e:	2302      	movs	r3, #2
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	e013      	b.n	800675c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006734:	2301      	movs	r3, #1
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	e010      	b.n	800675c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b80      	cmp	r3, #128	; 0x80
 800673e:	d902      	bls.n	8006746 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006740:	2303      	movs	r3, #3
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	e00a      	b.n	800675c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b80      	cmp	r3, #128	; 0x80
 800674a:	d102      	bne.n	8006752 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800674c:	2302      	movs	r3, #2
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	e004      	b.n	800675c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b70      	cmp	r3, #112	; 0x70
 8006756:	d101      	bne.n	800675c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006758:	2301      	movs	r3, #1
 800675a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800675c:	4b0b      	ldr	r3, [pc, #44]	; (800678c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f023 0207 	bic.w	r2, r3, #7
 8006764:	4909      	ldr	r1, [pc, #36]	; (800678c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800676c:	4b07      	ldr	r3, [pc, #28]	; (800678c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	429a      	cmp	r2, r3
 8006778:	d001      	beq.n	800677e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40021000 	.word	0x40021000
 800678c:	40022000 	.word	0x40022000

08006790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006798:	2300      	movs	r3, #0
 800679a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800679c:	2300      	movs	r3, #0
 800679e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d041      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067b4:	d02a      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80067b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067ba:	d824      	bhi.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80067bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067c0:	d008      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80067c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067c6:	d81e      	bhi.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80067cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067d0:	d010      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80067d2:	e018      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067d4:	4b86      	ldr	r3, [pc, #536]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4a85      	ldr	r2, [pc, #532]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067e0:	e015      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3304      	adds	r3, #4
 80067e6:	2100      	movs	r1, #0
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fabb 	bl	8006d64 <RCCEx_PLLSAI1_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067f2:	e00c      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3320      	adds	r3, #32
 80067f8:	2100      	movs	r1, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fba6 	bl	8006f4c <RCCEx_PLLSAI2_Config>
 8006800:	4603      	mov	r3, r0
 8006802:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006804:	e003      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	74fb      	strb	r3, [r7, #19]
      break;
 800680a:	e000      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800680c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800680e:	7cfb      	ldrb	r3, [r7, #19]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10b      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006814:	4b76      	ldr	r3, [pc, #472]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006822:	4973      	ldr	r1, [pc, #460]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800682a:	e001      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682c:	7cfb      	ldrb	r3, [r7, #19]
 800682e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d041      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006840:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006844:	d02a      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800684a:	d824      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800684c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006850:	d008      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006856:	d81e      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800685c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006860:	d010      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006862:	e018      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006864:	4b62      	ldr	r3, [pc, #392]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4a61      	ldr	r2, [pc, #388]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800686a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800686e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006870:	e015      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3304      	adds	r3, #4
 8006876:	2100      	movs	r1, #0
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fa73 	bl	8006d64 <RCCEx_PLLSAI1_Config>
 800687e:	4603      	mov	r3, r0
 8006880:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006882:	e00c      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3320      	adds	r3, #32
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fb5e 	bl	8006f4c <RCCEx_PLLSAI2_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006894:	e003      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	74fb      	strb	r3, [r7, #19]
      break;
 800689a:	e000      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800689c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800689e:	7cfb      	ldrb	r3, [r7, #19]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10b      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068a4:	4b52      	ldr	r3, [pc, #328]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b2:	494f      	ldr	r1, [pc, #316]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80068ba:	e001      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068bc:	7cfb      	ldrb	r3, [r7, #19]
 80068be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80a0 	beq.w	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ce:	2300      	movs	r3, #0
 80068d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068d2:	4b47      	ldr	r3, [pc, #284]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80068e2:	2300      	movs	r3, #0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00d      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e8:	4b41      	ldr	r3, [pc, #260]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	4a40      	ldr	r2, [pc, #256]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f2:	6593      	str	r3, [r2, #88]	; 0x58
 80068f4:	4b3e      	ldr	r3, [pc, #248]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006900:	2301      	movs	r3, #1
 8006902:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006904:	4b3b      	ldr	r3, [pc, #236]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a3a      	ldr	r2, [pc, #232]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800690a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006910:	f7fd ff2c 	bl	800476c <HAL_GetTick>
 8006914:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006916:	e009      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006918:	f7fd ff28 	bl	800476c <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d902      	bls.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	74fb      	strb	r3, [r7, #19]
        break;
 800692a:	e005      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800692c:	4b31      	ldr	r3, [pc, #196]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0ef      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006938:	7cfb      	ldrb	r3, [r7, #19]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d15c      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800693e:	4b2c      	ldr	r3, [pc, #176]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006948:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01f      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	429a      	cmp	r2, r3
 800695a:	d019      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800695c:	4b24      	ldr	r3, [pc, #144]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006968:	4b21      	ldr	r3, [pc, #132]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696e:	4a20      	ldr	r2, [pc, #128]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006978:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800697a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697e:	4a1c      	ldr	r2, [pc, #112]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006988:	4a19      	ldr	r2, [pc, #100]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d016      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699a:	f7fd fee7 	bl	800476c <HAL_GetTick>
 800699e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069a0:	e00b      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a2:	f7fd fee3 	bl	800476c <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d902      	bls.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	74fb      	strb	r3, [r7, #19]
            break;
 80069b8:	e006      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ba:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0ec      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80069c8:	7cfb      	ldrb	r3, [r7, #19]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069ce:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069de:	4904      	ldr	r1, [pc, #16]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80069e6:	e009      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069e8:	7cfb      	ldrb	r3, [r7, #19]
 80069ea:	74bb      	strb	r3, [r7, #18]
 80069ec:	e006      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80069ee:	bf00      	nop
 80069f0:	40021000 	.word	0x40021000
 80069f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	7cfb      	ldrb	r3, [r7, #19]
 80069fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069fc:	7c7b      	ldrb	r3, [r7, #17]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d105      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a02:	4b9e      	ldr	r3, [pc, #632]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a06:	4a9d      	ldr	r2, [pc, #628]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a1a:	4b98      	ldr	r3, [pc, #608]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a20:	f023 0203 	bic.w	r2, r3, #3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	4994      	ldr	r1, [pc, #592]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a3c:	4b8f      	ldr	r3, [pc, #572]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	f023 020c 	bic.w	r2, r3, #12
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	498c      	ldr	r1, [pc, #560]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a5e:	4b87      	ldr	r3, [pc, #540]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	4983      	ldr	r1, [pc, #524]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a80:	4b7e      	ldr	r3, [pc, #504]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	497b      	ldr	r1, [pc, #492]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006aa2:	4b76      	ldr	r3, [pc, #472]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab0:	4972      	ldr	r1, [pc, #456]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ac4:	4b6d      	ldr	r3, [pc, #436]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad2:	496a      	ldr	r1, [pc, #424]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ae6:	4b65      	ldr	r3, [pc, #404]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af4:	4961      	ldr	r1, [pc, #388]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b08:	4b5c      	ldr	r3, [pc, #368]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b16:	4959      	ldr	r1, [pc, #356]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b2a:	4b54      	ldr	r3, [pc, #336]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	4950      	ldr	r1, [pc, #320]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b4c:	4b4b      	ldr	r3, [pc, #300]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	4948      	ldr	r1, [pc, #288]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b6e:	4b43      	ldr	r3, [pc, #268]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7c:	493f      	ldr	r1, [pc, #252]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d028      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b90:	4b3a      	ldr	r3, [pc, #232]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b9e:	4937      	ldr	r1, [pc, #220]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bae:	d106      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bb0:	4b32      	ldr	r3, [pc, #200]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4a31      	ldr	r2, [pc, #196]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bba:	60d3      	str	r3, [r2, #12]
 8006bbc:	e011      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bc6:	d10c      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	2101      	movs	r1, #1
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f8c8 	bl	8006d64 <RCCEx_PLLSAI1_Config>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006bd8:	7cfb      	ldrb	r3, [r7, #19]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006bde:	7cfb      	ldrb	r3, [r7, #19]
 8006be0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d028      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006bee:	4b23      	ldr	r3, [pc, #140]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	491f      	ldr	r1, [pc, #124]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c0c:	d106      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c0e:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	4a1a      	ldr	r2, [pc, #104]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c18:	60d3      	str	r3, [r2, #12]
 8006c1a:	e011      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c24:	d10c      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 f899 	bl	8006d64 <RCCEx_PLLSAI1_Config>
 8006c32:	4603      	mov	r3, r0
 8006c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c36:	7cfb      	ldrb	r3, [r7, #19]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006c3c:	7cfb      	ldrb	r3, [r7, #19]
 8006c3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d02b      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c5a:	4908      	ldr	r1, [pc, #32]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c6a:	d109      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c6c:	4b03      	ldr	r3, [pc, #12]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4a02      	ldr	r2, [pc, #8]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c76:	60d3      	str	r3, [r2, #12]
 8006c78:	e014      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006c7a:	bf00      	nop
 8006c7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c88:	d10c      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 f867 	bl	8006d64 <RCCEx_PLLSAI1_Config>
 8006c96:	4603      	mov	r3, r0
 8006c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c9a:	7cfb      	ldrb	r3, [r7, #19]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006ca0:	7cfb      	ldrb	r3, [r7, #19]
 8006ca2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d02f      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cb0:	4b2b      	ldr	r3, [pc, #172]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cbe:	4928      	ldr	r1, [pc, #160]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cce:	d10d      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 f844 	bl	8006d64 <RCCEx_PLLSAI1_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ce0:	7cfb      	ldrb	r3, [r7, #19]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d014      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006ce6:	7cfb      	ldrb	r3, [r7, #19]
 8006ce8:	74bb      	strb	r3, [r7, #18]
 8006cea:	e011      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf4:	d10c      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3320      	adds	r3, #32
 8006cfa:	2102      	movs	r1, #2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f925 	bl	8006f4c <RCCEx_PLLSAI2_Config>
 8006d02:	4603      	mov	r3, r0
 8006d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d06:	7cfb      	ldrb	r3, [r7, #19]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006d0c:	7cfb      	ldrb	r3, [r7, #19]
 8006d0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d1c:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d2a:	490d      	ldr	r1, [pc, #52]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d3e:	4b08      	ldr	r3, [pc, #32]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d4e:	4904      	ldr	r1, [pc, #16]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d56:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40021000 	.word	0x40021000

08006d64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d72:	4b75      	ldr	r3, [pc, #468]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d018      	beq.n	8006db0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d7e:	4b72      	ldr	r3, [pc, #456]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f003 0203 	and.w	r2, r3, #3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d10d      	bne.n	8006daa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
       ||
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006d96:	4b6c      	ldr	r3, [pc, #432]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	091b      	lsrs	r3, r3, #4
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
       ||
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d047      	beq.n	8006e3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	73fb      	strb	r3, [r7, #15]
 8006dae:	e044      	b.n	8006e3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d018      	beq.n	8006dea <RCCEx_PLLSAI1_Config+0x86>
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d825      	bhi.n	8006e08 <RCCEx_PLLSAI1_Config+0xa4>
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d002      	beq.n	8006dc6 <RCCEx_PLLSAI1_Config+0x62>
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d009      	beq.n	8006dd8 <RCCEx_PLLSAI1_Config+0x74>
 8006dc4:	e020      	b.n	8006e08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006dc6:	4b60      	ldr	r3, [pc, #384]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11d      	bne.n	8006e0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dd6:	e01a      	b.n	8006e0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006dd8:	4b5b      	ldr	r3, [pc, #364]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d116      	bne.n	8006e12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006de8:	e013      	b.n	8006e12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006dea:	4b57      	ldr	r3, [pc, #348]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10f      	bne.n	8006e16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006df6:	4b54      	ldr	r3, [pc, #336]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e06:	e006      	b.n	8006e16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0c:	e004      	b.n	8006e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10d      	bne.n	8006e3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e1e:	4b4a      	ldr	r3, [pc, #296]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6819      	ldr	r1, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	430b      	orrs	r3, r1
 8006e34:	4944      	ldr	r1, [pc, #272]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d17d      	bne.n	8006f3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e40:	4b41      	ldr	r3, [pc, #260]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a40      	ldr	r2, [pc, #256]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e4c:	f7fd fc8e 	bl	800476c <HAL_GetTick>
 8006e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e52:	e009      	b.n	8006e68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e54:	f7fd fc8a 	bl	800476c <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d902      	bls.n	8006e68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	73fb      	strb	r3, [r7, #15]
        break;
 8006e66:	e005      	b.n	8006e74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e68:	4b37      	ldr	r3, [pc, #220]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1ef      	bne.n	8006e54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d160      	bne.n	8006f3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d111      	bne.n	8006ea4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e80:	4b31      	ldr	r3, [pc, #196]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6892      	ldr	r2, [r2, #8]
 8006e90:	0211      	lsls	r1, r2, #8
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	68d2      	ldr	r2, [r2, #12]
 8006e96:	0912      	lsrs	r2, r2, #4
 8006e98:	0452      	lsls	r2, r2, #17
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	492a      	ldr	r1, [pc, #168]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	610b      	str	r3, [r1, #16]
 8006ea2:	e027      	b.n	8006ef4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d112      	bne.n	8006ed0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006eaa:	4b27      	ldr	r3, [pc, #156]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006eb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6892      	ldr	r2, [r2, #8]
 8006eba:	0211      	lsls	r1, r2, #8
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6912      	ldr	r2, [r2, #16]
 8006ec0:	0852      	lsrs	r2, r2, #1
 8006ec2:	3a01      	subs	r2, #1
 8006ec4:	0552      	lsls	r2, r2, #21
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	491f      	ldr	r1, [pc, #124]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	610b      	str	r3, [r1, #16]
 8006ece:	e011      	b.n	8006ef4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ed0:	4b1d      	ldr	r3, [pc, #116]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ed8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6892      	ldr	r2, [r2, #8]
 8006ee0:	0211      	lsls	r1, r2, #8
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6952      	ldr	r2, [r2, #20]
 8006ee6:	0852      	lsrs	r2, r2, #1
 8006ee8:	3a01      	subs	r2, #1
 8006eea:	0652      	lsls	r2, r2, #25
 8006eec:	430a      	orrs	r2, r1
 8006eee:	4916      	ldr	r1, [pc, #88]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006ef4:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a13      	ldr	r2, [pc, #76]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006efe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f00:	f7fd fc34 	bl	800476c <HAL_GetTick>
 8006f04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f06:	e009      	b.n	8006f1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f08:	f7fd fc30 	bl	800476c <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d902      	bls.n	8006f1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	73fb      	strb	r3, [r7, #15]
          break;
 8006f1a:	e005      	b.n	8006f28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0ef      	beq.n	8006f08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f30:	691a      	ldr	r2, [r3, #16]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	4904      	ldr	r1, [pc, #16]	; (8006f48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40021000 	.word	0x40021000

08006f4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f5a:	4b6a      	ldr	r3, [pc, #424]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d018      	beq.n	8006f98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006f66:	4b67      	ldr	r3, [pc, #412]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f003 0203 	and.w	r2, r3, #3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d10d      	bne.n	8006f92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
       ||
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006f7e:	4b61      	ldr	r3, [pc, #388]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	091b      	lsrs	r3, r3, #4
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
       ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d047      	beq.n	8007022 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	73fb      	strb	r3, [r7, #15]
 8006f96:	e044      	b.n	8007022 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d018      	beq.n	8006fd2 <RCCEx_PLLSAI2_Config+0x86>
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d825      	bhi.n	8006ff0 <RCCEx_PLLSAI2_Config+0xa4>
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d002      	beq.n	8006fae <RCCEx_PLLSAI2_Config+0x62>
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d009      	beq.n	8006fc0 <RCCEx_PLLSAI2_Config+0x74>
 8006fac:	e020      	b.n	8006ff0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006fae:	4b55      	ldr	r3, [pc, #340]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d11d      	bne.n	8006ff6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fbe:	e01a      	b.n	8006ff6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fc0:	4b50      	ldr	r3, [pc, #320]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d116      	bne.n	8006ffa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fd0:	e013      	b.n	8006ffa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006fd2:	4b4c      	ldr	r3, [pc, #304]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10f      	bne.n	8006ffe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006fde:	4b49      	ldr	r3, [pc, #292]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fee:	e006      	b.n	8006ffe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff4:	e004      	b.n	8007000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ff6:	bf00      	nop
 8006ff8:	e002      	b.n	8007000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ffa:	bf00      	nop
 8006ffc:	e000      	b.n	8007000 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10d      	bne.n	8007022 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007006:	4b3f      	ldr	r3, [pc, #252]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6819      	ldr	r1, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	3b01      	subs	r3, #1
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	430b      	orrs	r3, r1
 800701c:	4939      	ldr	r1, [pc, #228]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800701e:	4313      	orrs	r3, r2
 8007020:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d167      	bne.n	80070f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007028:	4b36      	ldr	r3, [pc, #216]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a35      	ldr	r2, [pc, #212]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800702e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007034:	f7fd fb9a 	bl	800476c <HAL_GetTick>
 8007038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800703a:	e009      	b.n	8007050 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800703c:	f7fd fb96 	bl	800476c <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d902      	bls.n	8007050 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	73fb      	strb	r3, [r7, #15]
        break;
 800704e:	e005      	b.n	800705c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007050:	4b2c      	ldr	r3, [pc, #176]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1ef      	bne.n	800703c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d14a      	bne.n	80070f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d111      	bne.n	800708c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007068:	4b26      	ldr	r3, [pc, #152]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6892      	ldr	r2, [r2, #8]
 8007078:	0211      	lsls	r1, r2, #8
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	68d2      	ldr	r2, [r2, #12]
 800707e:	0912      	lsrs	r2, r2, #4
 8007080:	0452      	lsls	r2, r2, #17
 8007082:	430a      	orrs	r2, r1
 8007084:	491f      	ldr	r1, [pc, #124]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007086:	4313      	orrs	r3, r2
 8007088:	614b      	str	r3, [r1, #20]
 800708a:	e011      	b.n	80070b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800708c:	4b1d      	ldr	r3, [pc, #116]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007094:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	6892      	ldr	r2, [r2, #8]
 800709c:	0211      	lsls	r1, r2, #8
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6912      	ldr	r2, [r2, #16]
 80070a2:	0852      	lsrs	r2, r2, #1
 80070a4:	3a01      	subs	r2, #1
 80070a6:	0652      	lsls	r2, r2, #25
 80070a8:	430a      	orrs	r2, r1
 80070aa:	4916      	ldr	r1, [pc, #88]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80070b0:	4b14      	ldr	r3, [pc, #80]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a13      	ldr	r2, [pc, #76]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070bc:	f7fd fb56 	bl	800476c <HAL_GetTick>
 80070c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80070c2:	e009      	b.n	80070d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80070c4:	f7fd fb52 	bl	800476c <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d902      	bls.n	80070d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	73fb      	strb	r3, [r7, #15]
          break;
 80070d6:	e005      	b.n	80070e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0ef      	beq.n	80070c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80070ea:	4b06      	ldr	r3, [pc, #24]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	4904      	ldr	r1, [pc, #16]	; (8007104 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	40021000 	.word	0x40021000

08007108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e095      	b.n	8007246 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d108      	bne.n	8007134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800712a:	d009      	beq.n	8007140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	61da      	str	r2, [r3, #28]
 8007132:	e005      	b.n	8007140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fa f864 	bl	8001228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007176:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007180:	d902      	bls.n	8007188 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	e002      	b.n	800718e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800718c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007196:	d007      	beq.n	80071a8 <HAL_SPI_Init+0xa0>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071a0:	d002      	beq.n	80071a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071b8:	431a      	orrs	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	431a      	orrs	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071e0:	431a      	orrs	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ea:	ea42 0103 	orr.w	r1, r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	0c1b      	lsrs	r3, r3, #16
 8007204:	f003 0204 	and.w	r2, r3, #4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007224:	ea42 0103 	orr.w	r1, r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e049      	b.n	80072f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d106      	bne.n	800727a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f841 	bl	80072fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2202      	movs	r2, #2
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3304      	adds	r3, #4
 800728a:	4619      	mov	r1, r3
 800728c:	4610      	mov	r0, r2
 800728e:	f000 f9f7 	bl	8007680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b01      	cmp	r3, #1
 8007322:	d001      	beq.n	8007328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e04f      	b.n	80073c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0201 	orr.w	r2, r2, #1
 800733e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a23      	ldr	r2, [pc, #140]	; (80073d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d01d      	beq.n	8007386 <HAL_TIM_Base_Start_IT+0x76>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007352:	d018      	beq.n	8007386 <HAL_TIM_Base_Start_IT+0x76>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d013      	beq.n	8007386 <HAL_TIM_Base_Start_IT+0x76>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1e      	ldr	r2, [pc, #120]	; (80073dc <HAL_TIM_Base_Start_IT+0xcc>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00e      	beq.n	8007386 <HAL_TIM_Base_Start_IT+0x76>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a1c      	ldr	r2, [pc, #112]	; (80073e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d009      	beq.n	8007386 <HAL_TIM_Base_Start_IT+0x76>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a1b      	ldr	r2, [pc, #108]	; (80073e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <HAL_TIM_Base_Start_IT+0x76>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a19      	ldr	r2, [pc, #100]	; (80073e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d115      	bne.n	80073b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	4b17      	ldr	r3, [pc, #92]	; (80073ec <HAL_TIM_Base_Start_IT+0xdc>)
 800738e:	4013      	ands	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b06      	cmp	r3, #6
 8007396:	d015      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0xb4>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800739e:	d011      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b0:	e008      	b.n	80073c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0201 	orr.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	e000      	b.n	80073c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	40012c00 	.word	0x40012c00
 80073d8:	40000400 	.word	0x40000400
 80073dc:	40000800 	.word	0x40000800
 80073e0:	40000c00 	.word	0x40000c00
 80073e4:	40013400 	.word	0x40013400
 80073e8:	40014000 	.word	0x40014000
 80073ec:	00010007 	.word	0x00010007

080073f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b02      	cmp	r3, #2
 8007404:	d122      	bne.n	800744c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b02      	cmp	r3, #2
 8007412:	d11b      	bne.n	800744c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0202 	mvn.w	r2, #2
 800741c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f905 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 8007438:	e005      	b.n	8007446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8f7 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f908 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	2b04      	cmp	r3, #4
 8007458:	d122      	bne.n	80074a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b04      	cmp	r3, #4
 8007466:	d11b      	bne.n	80074a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f06f 0204 	mvn.w	r2, #4
 8007470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2202      	movs	r2, #2
 8007476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f8db 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 800748c:	e005      	b.n	800749a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f8cd 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f8de 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b08      	cmp	r3, #8
 80074ac:	d122      	bne.n	80074f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d11b      	bne.n	80074f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0208 	mvn.w	r2, #8
 80074c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2204      	movs	r2, #4
 80074ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f8b1 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 80074e0:	e005      	b.n	80074ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f8a3 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f8b4 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0310 	and.w	r3, r3, #16
 80074fe:	2b10      	cmp	r3, #16
 8007500:	d122      	bne.n	8007548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f003 0310 	and.w	r3, r3, #16
 800750c:	2b10      	cmp	r3, #16
 800750e:	d11b      	bne.n	8007548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f06f 0210 	mvn.w	r2, #16
 8007518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2208      	movs	r2, #8
 800751e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f887 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 8007534:	e005      	b.n	8007542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f879 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f88a 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b01      	cmp	r3, #1
 8007554:	d10e      	bne.n	8007574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b01      	cmp	r3, #1
 8007562:	d107      	bne.n	8007574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f06f 0201 	mvn.w	r2, #1
 800756c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7f9 fd9c 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757e:	2b80      	cmp	r3, #128	; 0x80
 8007580:	d10e      	bne.n	80075a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758c:	2b80      	cmp	r3, #128	; 0x80
 800758e:	d107      	bne.n	80075a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f914 	bl	80077c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ae:	d10e      	bne.n	80075ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ba:	2b80      	cmp	r3, #128	; 0x80
 80075bc:	d107      	bne.n	80075ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f907 	bl	80077dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b40      	cmp	r3, #64	; 0x40
 80075da:	d10e      	bne.n	80075fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e6:	2b40      	cmp	r3, #64	; 0x40
 80075e8:	d107      	bne.n	80075fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f838 	bl	800766a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b20      	cmp	r3, #32
 8007606:	d10e      	bne.n	8007626 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b20      	cmp	r3, #32
 8007614:	d107      	bne.n	8007626 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f06f 0220 	mvn.w	r2, #32
 800761e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f8c7 	bl	80077b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a40      	ldr	r2, [pc, #256]	; (8007794 <TIM_Base_SetConfig+0x114>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d013      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769e:	d00f      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a3d      	ldr	r2, [pc, #244]	; (8007798 <TIM_Base_SetConfig+0x118>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d00b      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a3c      	ldr	r2, [pc, #240]	; (800779c <TIM_Base_SetConfig+0x11c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d007      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a3b      	ldr	r2, [pc, #236]	; (80077a0 <TIM_Base_SetConfig+0x120>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d003      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a3a      	ldr	r2, [pc, #232]	; (80077a4 <TIM_Base_SetConfig+0x124>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d108      	bne.n	80076d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a2f      	ldr	r2, [pc, #188]	; (8007794 <TIM_Base_SetConfig+0x114>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d01f      	beq.n	800771a <TIM_Base_SetConfig+0x9a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e0:	d01b      	beq.n	800771a <TIM_Base_SetConfig+0x9a>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a2c      	ldr	r2, [pc, #176]	; (8007798 <TIM_Base_SetConfig+0x118>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d017      	beq.n	800771a <TIM_Base_SetConfig+0x9a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a2b      	ldr	r2, [pc, #172]	; (800779c <TIM_Base_SetConfig+0x11c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d013      	beq.n	800771a <TIM_Base_SetConfig+0x9a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a2a      	ldr	r2, [pc, #168]	; (80077a0 <TIM_Base_SetConfig+0x120>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00f      	beq.n	800771a <TIM_Base_SetConfig+0x9a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a29      	ldr	r2, [pc, #164]	; (80077a4 <TIM_Base_SetConfig+0x124>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00b      	beq.n	800771a <TIM_Base_SetConfig+0x9a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a28      	ldr	r2, [pc, #160]	; (80077a8 <TIM_Base_SetConfig+0x128>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d007      	beq.n	800771a <TIM_Base_SetConfig+0x9a>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a27      	ldr	r2, [pc, #156]	; (80077ac <TIM_Base_SetConfig+0x12c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d003      	beq.n	800771a <TIM_Base_SetConfig+0x9a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a26      	ldr	r2, [pc, #152]	; (80077b0 <TIM_Base_SetConfig+0x130>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d108      	bne.n	800772c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a10      	ldr	r2, [pc, #64]	; (8007794 <TIM_Base_SetConfig+0x114>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d00f      	beq.n	8007778 <TIM_Base_SetConfig+0xf8>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a12      	ldr	r2, [pc, #72]	; (80077a4 <TIM_Base_SetConfig+0x124>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00b      	beq.n	8007778 <TIM_Base_SetConfig+0xf8>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a11      	ldr	r2, [pc, #68]	; (80077a8 <TIM_Base_SetConfig+0x128>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d007      	beq.n	8007778 <TIM_Base_SetConfig+0xf8>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a10      	ldr	r2, [pc, #64]	; (80077ac <TIM_Base_SetConfig+0x12c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d003      	beq.n	8007778 <TIM_Base_SetConfig+0xf8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a0f      	ldr	r2, [pc, #60]	; (80077b0 <TIM_Base_SetConfig+0x130>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d103      	bne.n	8007780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	615a      	str	r2, [r3, #20]
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	40012c00 	.word	0x40012c00
 8007798:	40000400 	.word	0x40000400
 800779c:	40000800 	.word	0x40000800
 80077a0:	40000c00 	.word	0x40000c00
 80077a4:	40013400 	.word	0x40013400
 80077a8:	40014000 	.word	0x40014000
 80077ac:	40014400 	.word	0x40014400
 80077b0:	40014800 	.word	0x40014800

080077b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e040      	b.n	8007884 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7f9 fd4a 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2224      	movs	r2, #36	; 0x24
 800781c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0201 	bic.w	r2, r2, #1
 800782c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f992 	bl	8007b58 <UART_SetConfig>
 8007834:	4603      	mov	r3, r0
 8007836:	2b01      	cmp	r3, #1
 8007838:	d101      	bne.n	800783e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e022      	b.n	8007884 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fc3e 	bl	80080c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800785a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800786a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0201 	orr.w	r2, r2, #1
 800787a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fcc5 	bl	800820c <UART_CheckIdleState>
 8007882:	4603      	mov	r3, r0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08a      	sub	sp, #40	; 0x28
 8007890:	af02      	add	r7, sp, #8
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	603b      	str	r3, [r7, #0]
 8007898:	4613      	mov	r3, r2
 800789a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	f040 8082 	bne.w	80079aa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <HAL_UART_Transmit+0x26>
 80078ac:	88fb      	ldrh	r3, [r7, #6]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e07a      	b.n	80079ac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_UART_Transmit+0x38>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e073      	b.n	80079ac <HAL_UART_Transmit+0x120>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2221      	movs	r2, #33	; 0x21
 80078d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078da:	f7fc ff47 	bl	800476c <HAL_GetTick>
 80078de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	88fa      	ldrh	r2, [r7, #6]
 80078e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	88fa      	ldrh	r2, [r7, #6]
 80078ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f8:	d108      	bne.n	800790c <HAL_UART_Transmit+0x80>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	e003      	b.n	8007914 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800791c:	e02d      	b.n	800797a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2200      	movs	r2, #0
 8007926:	2180      	movs	r1, #128	; 0x80
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 fcb8 	bl	800829e <UART_WaitOnFlagUntilTimeout>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e039      	b.n	80079ac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10b      	bne.n	8007956 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	881a      	ldrh	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800794a:	b292      	uxth	r2, r2
 800794c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	3302      	adds	r3, #2
 8007952:	61bb      	str	r3, [r7, #24]
 8007954:	e008      	b.n	8007968 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	781a      	ldrb	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	b292      	uxth	r2, r2
 8007960:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	3301      	adds	r3, #1
 8007966:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800796e:	b29b      	uxth	r3, r3
 8007970:	3b01      	subs	r3, #1
 8007972:	b29a      	uxth	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1cb      	bne.n	800791e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2200      	movs	r2, #0
 800798e:	2140      	movs	r1, #64	; 0x40
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fc84 	bl	800829e <UART_WaitOnFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e005      	b.n	80079ac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2220      	movs	r2, #32
 80079a4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e000      	b.n	80079ac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80079aa:	2302      	movs	r3, #2
  }
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3720      	adds	r7, #32
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08a      	sub	sp, #40	; 0x28
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	4613      	mov	r3, r2
 80079c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	f040 80bf 	bne.w	8007b4c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <HAL_UART_Receive+0x26>
 80079d4:	88fb      	ldrh	r3, [r7, #6]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e0b7      	b.n	8007b4e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_UART_Receive+0x38>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e0b0      	b.n	8007b4e <HAL_UART_Receive+0x19a>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2222      	movs	r2, #34	; 0x22
 8007a00:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a08:	f7fc feb0 	bl	800476c <HAL_GetTick>
 8007a0c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	88fa      	ldrh	r2, [r7, #6]
 8007a12:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	88fa      	ldrh	r2, [r7, #6]
 8007a1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a26:	d10e      	bne.n	8007a46 <HAL_UART_Receive+0x92>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <HAL_UART_Receive+0x88>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a3a:	e02d      	b.n	8007a98 <HAL_UART_Receive+0xe4>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	22ff      	movs	r2, #255	; 0xff
 8007a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a44:	e028      	b.n	8007a98 <HAL_UART_Receive+0xe4>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10d      	bne.n	8007a6a <HAL_UART_Receive+0xb6>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <HAL_UART_Receive+0xac>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	22ff      	movs	r2, #255	; 0xff
 8007a5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a5e:	e01b      	b.n	8007a98 <HAL_UART_Receive+0xe4>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	227f      	movs	r2, #127	; 0x7f
 8007a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a68:	e016      	b.n	8007a98 <HAL_UART_Receive+0xe4>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a72:	d10d      	bne.n	8007a90 <HAL_UART_Receive+0xdc>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <HAL_UART_Receive+0xd2>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	227f      	movs	r2, #127	; 0x7f
 8007a80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a84:	e008      	b.n	8007a98 <HAL_UART_Receive+0xe4>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	223f      	movs	r2, #63	; 0x3f
 8007a8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a8e:	e003      	b.n	8007a98 <HAL_UART_Receive+0xe4>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a9e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa8:	d108      	bne.n	8007abc <HAL_UART_Receive+0x108>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d104      	bne.n	8007abc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	e003      	b.n	8007ac4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007acc:	e033      	b.n	8007b36 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2120      	movs	r1, #32
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fbe0 	bl	800829e <UART_WaitOnFlagUntilTimeout>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e032      	b.n	8007b4e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10c      	bne.n	8007b08 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	8a7b      	ldrh	r3, [r7, #18]
 8007af8:	4013      	ands	r3, r2
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	3302      	adds	r3, #2
 8007b04:	61bb      	str	r3, [r7, #24]
 8007b06:	e00d      	b.n	8007b24 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	8a7b      	ldrh	r3, [r7, #18]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	4013      	ands	r3, r2
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	3301      	adds	r3, #1
 8007b22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1c5      	bne.n	8007ace <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	e000      	b.n	8007b4e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007b4c:	2302      	movs	r3, #2
  }
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b5c:	b08a      	sub	sp, #40	; 0x28
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	431a      	orrs	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	431a      	orrs	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	4ba4      	ldr	r3, [pc, #656]	; (8007e18 <UART_SetConfig+0x2c0>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b90:	430b      	orrs	r3, r1
 8007b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a99      	ldr	r2, [pc, #612]	; (8007e1c <UART_SetConfig+0x2c4>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a90      	ldr	r2, [pc, #576]	; (8007e20 <UART_SetConfig+0x2c8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d126      	bne.n	8007c30 <UART_SetConfig+0xd8>
 8007be2:	4b90      	ldr	r3, [pc, #576]	; (8007e24 <UART_SetConfig+0x2cc>)
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d81b      	bhi.n	8007c28 <UART_SetConfig+0xd0>
 8007bf0:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <UART_SetConfig+0xa0>)
 8007bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf6:	bf00      	nop
 8007bf8:	08007c09 	.word	0x08007c09
 8007bfc:	08007c19 	.word	0x08007c19
 8007c00:	08007c11 	.word	0x08007c11
 8007c04:	08007c21 	.word	0x08007c21
 8007c08:	2301      	movs	r3, #1
 8007c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c0e:	e116      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007c10:	2302      	movs	r3, #2
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c16:	e112      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007c18:	2304      	movs	r3, #4
 8007c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c1e:	e10e      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007c20:	2308      	movs	r3, #8
 8007c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c26:	e10a      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007c28:	2310      	movs	r3, #16
 8007c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c2e:	e106      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a7c      	ldr	r2, [pc, #496]	; (8007e28 <UART_SetConfig+0x2d0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d138      	bne.n	8007cac <UART_SetConfig+0x154>
 8007c3a:	4b7a      	ldr	r3, [pc, #488]	; (8007e24 <UART_SetConfig+0x2cc>)
 8007c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c40:	f003 030c 	and.w	r3, r3, #12
 8007c44:	2b0c      	cmp	r3, #12
 8007c46:	d82d      	bhi.n	8007ca4 <UART_SetConfig+0x14c>
 8007c48:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0xf8>)
 8007c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4e:	bf00      	nop
 8007c50:	08007c85 	.word	0x08007c85
 8007c54:	08007ca5 	.word	0x08007ca5
 8007c58:	08007ca5 	.word	0x08007ca5
 8007c5c:	08007ca5 	.word	0x08007ca5
 8007c60:	08007c95 	.word	0x08007c95
 8007c64:	08007ca5 	.word	0x08007ca5
 8007c68:	08007ca5 	.word	0x08007ca5
 8007c6c:	08007ca5 	.word	0x08007ca5
 8007c70:	08007c8d 	.word	0x08007c8d
 8007c74:	08007ca5 	.word	0x08007ca5
 8007c78:	08007ca5 	.word	0x08007ca5
 8007c7c:	08007ca5 	.word	0x08007ca5
 8007c80:	08007c9d 	.word	0x08007c9d
 8007c84:	2300      	movs	r3, #0
 8007c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c8a:	e0d8      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c92:	e0d4      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007c94:	2304      	movs	r3, #4
 8007c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c9a:	e0d0      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007c9c:	2308      	movs	r3, #8
 8007c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca2:	e0cc      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007caa:	e0c8      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a5e      	ldr	r2, [pc, #376]	; (8007e2c <UART_SetConfig+0x2d4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d125      	bne.n	8007d02 <UART_SetConfig+0x1aa>
 8007cb6:	4b5b      	ldr	r3, [pc, #364]	; (8007e24 <UART_SetConfig+0x2cc>)
 8007cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cc0:	2b30      	cmp	r3, #48	; 0x30
 8007cc2:	d016      	beq.n	8007cf2 <UART_SetConfig+0x19a>
 8007cc4:	2b30      	cmp	r3, #48	; 0x30
 8007cc6:	d818      	bhi.n	8007cfa <UART_SetConfig+0x1a2>
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d00a      	beq.n	8007ce2 <UART_SetConfig+0x18a>
 8007ccc:	2b20      	cmp	r3, #32
 8007cce:	d814      	bhi.n	8007cfa <UART_SetConfig+0x1a2>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <UART_SetConfig+0x182>
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	d008      	beq.n	8007cea <UART_SetConfig+0x192>
 8007cd8:	e00f      	b.n	8007cfa <UART_SetConfig+0x1a2>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ce0:	e0ad      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ce8:	e0a9      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007cea:	2304      	movs	r3, #4
 8007cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf0:	e0a5      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007cf2:	2308      	movs	r3, #8
 8007cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf8:	e0a1      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007cfa:	2310      	movs	r3, #16
 8007cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d00:	e09d      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a4a      	ldr	r2, [pc, #296]	; (8007e30 <UART_SetConfig+0x2d8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d125      	bne.n	8007d58 <UART_SetConfig+0x200>
 8007d0c:	4b45      	ldr	r3, [pc, #276]	; (8007e24 <UART_SetConfig+0x2cc>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d16:	2bc0      	cmp	r3, #192	; 0xc0
 8007d18:	d016      	beq.n	8007d48 <UART_SetConfig+0x1f0>
 8007d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d1c:	d818      	bhi.n	8007d50 <UART_SetConfig+0x1f8>
 8007d1e:	2b80      	cmp	r3, #128	; 0x80
 8007d20:	d00a      	beq.n	8007d38 <UART_SetConfig+0x1e0>
 8007d22:	2b80      	cmp	r3, #128	; 0x80
 8007d24:	d814      	bhi.n	8007d50 <UART_SetConfig+0x1f8>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <UART_SetConfig+0x1d8>
 8007d2a:	2b40      	cmp	r3, #64	; 0x40
 8007d2c:	d008      	beq.n	8007d40 <UART_SetConfig+0x1e8>
 8007d2e:	e00f      	b.n	8007d50 <UART_SetConfig+0x1f8>
 8007d30:	2300      	movs	r3, #0
 8007d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d36:	e082      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d3e:	e07e      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007d40:	2304      	movs	r3, #4
 8007d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d46:	e07a      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007d48:	2308      	movs	r3, #8
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d4e:	e076      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007d50:	2310      	movs	r3, #16
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d56:	e072      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a35      	ldr	r2, [pc, #212]	; (8007e34 <UART_SetConfig+0x2dc>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d12a      	bne.n	8007db8 <UART_SetConfig+0x260>
 8007d62:	4b30      	ldr	r3, [pc, #192]	; (8007e24 <UART_SetConfig+0x2cc>)
 8007d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d70:	d01a      	beq.n	8007da8 <UART_SetConfig+0x250>
 8007d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d76:	d81b      	bhi.n	8007db0 <UART_SetConfig+0x258>
 8007d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d7c:	d00c      	beq.n	8007d98 <UART_SetConfig+0x240>
 8007d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d82:	d815      	bhi.n	8007db0 <UART_SetConfig+0x258>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d003      	beq.n	8007d90 <UART_SetConfig+0x238>
 8007d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d8c:	d008      	beq.n	8007da0 <UART_SetConfig+0x248>
 8007d8e:	e00f      	b.n	8007db0 <UART_SetConfig+0x258>
 8007d90:	2300      	movs	r3, #0
 8007d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d96:	e052      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d9e:	e04e      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007da0:	2304      	movs	r3, #4
 8007da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007da6:	e04a      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007da8:	2308      	movs	r3, #8
 8007daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dae:	e046      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007db0:	2310      	movs	r3, #16
 8007db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db6:	e042      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <UART_SetConfig+0x2c4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d13a      	bne.n	8007e38 <UART_SetConfig+0x2e0>
 8007dc2:	4b18      	ldr	r3, [pc, #96]	; (8007e24 <UART_SetConfig+0x2cc>)
 8007dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd0:	d01a      	beq.n	8007e08 <UART_SetConfig+0x2b0>
 8007dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd6:	d81b      	bhi.n	8007e10 <UART_SetConfig+0x2b8>
 8007dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ddc:	d00c      	beq.n	8007df8 <UART_SetConfig+0x2a0>
 8007dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de2:	d815      	bhi.n	8007e10 <UART_SetConfig+0x2b8>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <UART_SetConfig+0x298>
 8007de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dec:	d008      	beq.n	8007e00 <UART_SetConfig+0x2a8>
 8007dee:	e00f      	b.n	8007e10 <UART_SetConfig+0x2b8>
 8007df0:	2300      	movs	r3, #0
 8007df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007df6:	e022      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007df8:	2302      	movs	r3, #2
 8007dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dfe:	e01e      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007e00:	2304      	movs	r3, #4
 8007e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e06:	e01a      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007e08:	2308      	movs	r3, #8
 8007e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e0e:	e016      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007e10:	2310      	movs	r3, #16
 8007e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e16:	e012      	b.n	8007e3e <UART_SetConfig+0x2e6>
 8007e18:	efff69f3 	.word	0xefff69f3
 8007e1c:	40008000 	.word	0x40008000
 8007e20:	40013800 	.word	0x40013800
 8007e24:	40021000 	.word	0x40021000
 8007e28:	40004400 	.word	0x40004400
 8007e2c:	40004800 	.word	0x40004800
 8007e30:	40004c00 	.word	0x40004c00
 8007e34:	40005000 	.word	0x40005000
 8007e38:	2310      	movs	r3, #16
 8007e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a9f      	ldr	r2, [pc, #636]	; (80080c0 <UART_SetConfig+0x568>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d17a      	bne.n	8007f3e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d824      	bhi.n	8007e9a <UART_SetConfig+0x342>
 8007e50:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <UART_SetConfig+0x300>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e9b 	.word	0x08007e9b
 8007e60:	08007e85 	.word	0x08007e85
 8007e64:	08007e9b 	.word	0x08007e9b
 8007e68:	08007e8b 	.word	0x08007e8b
 8007e6c:	08007e9b 	.word	0x08007e9b
 8007e70:	08007e9b 	.word	0x08007e9b
 8007e74:	08007e9b 	.word	0x08007e9b
 8007e78:	08007e93 	.word	0x08007e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e7c:	f7fe fbca 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 8007e80:	61f8      	str	r0, [r7, #28]
        break;
 8007e82:	e010      	b.n	8007ea6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e84:	4b8f      	ldr	r3, [pc, #572]	; (80080c4 <UART_SetConfig+0x56c>)
 8007e86:	61fb      	str	r3, [r7, #28]
        break;
 8007e88:	e00d      	b.n	8007ea6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e8a:	f7fe fb2b 	bl	80064e4 <HAL_RCC_GetSysClockFreq>
 8007e8e:	61f8      	str	r0, [r7, #28]
        break;
 8007e90:	e009      	b.n	8007ea6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e96:	61fb      	str	r3, [r7, #28]
        break;
 8007e98:	e005      	b.n	8007ea6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ea4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80fb 	beq.w	80080a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	4413      	add	r3, r2
 8007eb8:	69fa      	ldr	r2, [r7, #28]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d305      	bcc.n	8007eca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ec4:	69fa      	ldr	r2, [r7, #28]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d903      	bls.n	8007ed2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ed0:	e0e8      	b.n	80080a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	461c      	mov	r4, r3
 8007ed8:	4615      	mov	r5, r2
 8007eda:	f04f 0200 	mov.w	r2, #0
 8007ede:	f04f 0300 	mov.w	r3, #0
 8007ee2:	022b      	lsls	r3, r5, #8
 8007ee4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ee8:	0222      	lsls	r2, r4, #8
 8007eea:	68f9      	ldr	r1, [r7, #12]
 8007eec:	6849      	ldr	r1, [r1, #4]
 8007eee:	0849      	lsrs	r1, r1, #1
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	4688      	mov	r8, r1
 8007ef4:	4681      	mov	r9, r0
 8007ef6:	eb12 0a08 	adds.w	sl, r2, r8
 8007efa:	eb43 0b09 	adc.w	fp, r3, r9
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	4659      	mov	r1, fp
 8007f10:	f7f8 fbfa 	bl	8000708 <__aeabi_uldivmod>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4613      	mov	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f22:	d308      	bcc.n	8007f36 <UART_SetConfig+0x3de>
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f2a:	d204      	bcs.n	8007f36 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	60da      	str	r2, [r3, #12]
 8007f34:	e0b6      	b.n	80080a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f3c:	e0b2      	b.n	80080a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f46:	d15e      	bne.n	8008006 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d828      	bhi.n	8007fa2 <UART_SetConfig+0x44a>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0x400>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f8d 	.word	0x08007f8d
 8007f64:	08007fa3 	.word	0x08007fa3
 8007f68:	08007f93 	.word	0x08007f93
 8007f6c:	08007fa3 	.word	0x08007fa3
 8007f70:	08007fa3 	.word	0x08007fa3
 8007f74:	08007fa3 	.word	0x08007fa3
 8007f78:	08007f9b 	.word	0x08007f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f7c:	f7fe fb4a 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 8007f80:	61f8      	str	r0, [r7, #28]
        break;
 8007f82:	e014      	b.n	8007fae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f84:	f7fe fb5c 	bl	8006640 <HAL_RCC_GetPCLK2Freq>
 8007f88:	61f8      	str	r0, [r7, #28]
        break;
 8007f8a:	e010      	b.n	8007fae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f8c:	4b4d      	ldr	r3, [pc, #308]	; (80080c4 <UART_SetConfig+0x56c>)
 8007f8e:	61fb      	str	r3, [r7, #28]
        break;
 8007f90:	e00d      	b.n	8007fae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f92:	f7fe faa7 	bl	80064e4 <HAL_RCC_GetSysClockFreq>
 8007f96:	61f8      	str	r0, [r7, #28]
        break;
 8007f98:	e009      	b.n	8007fae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9e:	61fb      	str	r3, [r7, #28]
        break;
 8007fa0:	e005      	b.n	8007fae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007fac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d077      	beq.n	80080a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	005a      	lsls	r2, r3, #1
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	085b      	lsrs	r3, r3, #1
 8007fbe:	441a      	add	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2b0f      	cmp	r3, #15
 8007fce:	d916      	bls.n	8007ffe <UART_SetConfig+0x4a6>
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd6:	d212      	bcs.n	8007ffe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f023 030f 	bic.w	r3, r3, #15
 8007fe0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	085b      	lsrs	r3, r3, #1
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	8afb      	ldrh	r3, [r7, #22]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	8afa      	ldrh	r2, [r7, #22]
 8007ffa:	60da      	str	r2, [r3, #12]
 8007ffc:	e052      	b.n	80080a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008004:	e04e      	b.n	80080a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800800a:	2b08      	cmp	r3, #8
 800800c:	d827      	bhi.n	800805e <UART_SetConfig+0x506>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <UART_SetConfig+0x4bc>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008039 	.word	0x08008039
 8008018:	08008041 	.word	0x08008041
 800801c:	08008049 	.word	0x08008049
 8008020:	0800805f 	.word	0x0800805f
 8008024:	0800804f 	.word	0x0800804f
 8008028:	0800805f 	.word	0x0800805f
 800802c:	0800805f 	.word	0x0800805f
 8008030:	0800805f 	.word	0x0800805f
 8008034:	08008057 	.word	0x08008057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008038:	f7fe faec 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 800803c:	61f8      	str	r0, [r7, #28]
        break;
 800803e:	e014      	b.n	800806a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008040:	f7fe fafe 	bl	8006640 <HAL_RCC_GetPCLK2Freq>
 8008044:	61f8      	str	r0, [r7, #28]
        break;
 8008046:	e010      	b.n	800806a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008048:	4b1e      	ldr	r3, [pc, #120]	; (80080c4 <UART_SetConfig+0x56c>)
 800804a:	61fb      	str	r3, [r7, #28]
        break;
 800804c:	e00d      	b.n	800806a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800804e:	f7fe fa49 	bl	80064e4 <HAL_RCC_GetSysClockFreq>
 8008052:	61f8      	str	r0, [r7, #28]
        break;
 8008054:	e009      	b.n	800806a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800805a:	61fb      	str	r3, [r7, #28]
        break;
 800805c:	e005      	b.n	800806a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008068:	bf00      	nop
    }

    if (pclk != 0U)
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d019      	beq.n	80080a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	085a      	lsrs	r2, r3, #1
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	441a      	add	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008082:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	2b0f      	cmp	r3, #15
 8008088:	d909      	bls.n	800809e <UART_SetConfig+0x546>
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008090:	d205      	bcs.n	800809e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60da      	str	r2, [r3, #12]
 800809c:	e002      	b.n	80080a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80080b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3728      	adds	r7, #40	; 0x28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080be:	bf00      	nop
 80080c0:	40008000 	.word	0x40008000
 80080c4:	00f42400 	.word	0x00f42400

080080c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	f003 0308 	and.w	r3, r3, #8
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	430a      	orrs	r2, r1
 8008156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	f003 0310 	and.w	r3, r3, #16
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d01a      	beq.n	80081de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081c6:	d10a      	bne.n	80081de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	605a      	str	r2, [r3, #4]
  }
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af02      	add	r7, sp, #8
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800821c:	f7fc faa6 	bl	800476c <HAL_GetTick>
 8008220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b08      	cmp	r3, #8
 800822e:	d10e      	bne.n	800824e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f82d 	bl	800829e <UART_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e023      	b.n	8008296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b04      	cmp	r3, #4
 800825a:	d10e      	bne.n	800827a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800825c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f817 	bl	800829e <UART_WaitOnFlagUntilTimeout>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e00d      	b.n	8008296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b09c      	sub	sp, #112	; 0x70
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	603b      	str	r3, [r7, #0]
 80082aa:	4613      	mov	r3, r2
 80082ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ae:	e0a5      	b.n	80083fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b6:	f000 80a1 	beq.w	80083fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ba:	f7fc fa57 	bl	800476c <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d302      	bcc.n	80082d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80082ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d13e      	bne.n	800834e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082e4:	667b      	str	r3, [r7, #100]	; 0x64
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e6      	bne.n	80082d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3308      	adds	r3, #8
 8008308:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	f023 0301 	bic.w	r3, r3, #1
 8008318:	663b      	str	r3, [r7, #96]	; 0x60
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3308      	adds	r3, #8
 8008320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008322:	64ba      	str	r2, [r7, #72]	; 0x48
 8008324:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e5      	bne.n	8008302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2220      	movs	r2, #32
 800833a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2220      	movs	r2, #32
 8008340:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e067      	b.n	800841e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d04f      	beq.n	80083fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800836a:	d147      	bne.n	80083fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008374:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800838a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008394:	637b      	str	r3, [r7, #52]	; 0x34
 8008396:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800839a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e6      	bne.n	8008376 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	613b      	str	r3, [r7, #16]
   return(result);
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f023 0301 	bic.w	r3, r3, #1
 80083be:	66bb      	str	r3, [r7, #104]	; 0x68
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3308      	adds	r3, #8
 80083c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083c8:	623a      	str	r2, [r7, #32]
 80083ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	69f9      	ldr	r1, [r7, #28]
 80083ce:	6a3a      	ldr	r2, [r7, #32]
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e5      	bne.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2220      	movs	r2, #32
 80083e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2220      	movs	r2, #32
 80083e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e010      	b.n	800841e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	69da      	ldr	r2, [r3, #28]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	4013      	ands	r3, r2
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	429a      	cmp	r2, r3
 800840a:	bf0c      	ite	eq
 800840c:	2301      	moveq	r3, #1
 800840e:	2300      	movne	r3, #0
 8008410:	b2db      	uxtb	r3, r3
 8008412:	461a      	mov	r2, r3
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	429a      	cmp	r2, r3
 8008418:	f43f af4a 	beq.w	80082b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3770      	adds	r7, #112	; 0x70
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008426:	b480      	push	{r7}
 8008428:	b085      	sub	sp, #20
 800842a:	af00      	add	r7, sp, #0
 800842c:	4603      	mov	r3, r0
 800842e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008438:	2b84      	cmp	r3, #132	; 0x84
 800843a:	d005      	beq.n	8008448 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800843c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	3303      	adds	r3, #3
 8008446:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008448:	68fb      	ldr	r3, [r7, #12]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800845a:	f000 fb91 	bl	8008b80 <vTaskStartScheduler>
  
  return osOK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	bd80      	pop	{r7, pc}

08008464 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008466:	b089      	sub	sp, #36	; 0x24
 8008468:	af04      	add	r7, sp, #16
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d020      	beq.n	80084b8 <osThreadCreate+0x54>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d01c      	beq.n	80084b8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685c      	ldr	r4, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681d      	ldr	r5, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691e      	ldr	r6, [r3, #16]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff ffc8 	bl	8008426 <makeFreeRtosPriority>
 8008496:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084a0:	9202      	str	r2, [sp, #8]
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	9100      	str	r1, [sp, #0]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	4632      	mov	r2, r6
 80084aa:	4629      	mov	r1, r5
 80084ac:	4620      	mov	r0, r4
 80084ae:	f000 f8f9 	bl	80086a4 <xTaskCreateStatic>
 80084b2:	4603      	mov	r3, r0
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	e01c      	b.n	80084f2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685c      	ldr	r4, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084c4:	b29e      	uxth	r6, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff ffaa 	bl	8008426 <makeFreeRtosPriority>
 80084d2:	4602      	mov	r2, r0
 80084d4:	f107 030c 	add.w	r3, r7, #12
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	9200      	str	r2, [sp, #0]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	4632      	mov	r2, r6
 80084e0:	4629      	mov	r1, r5
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 f93b 	bl	800875e <xTaskCreate>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d001      	beq.n	80084f2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e000      	b.n	80084f4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80084f2:	68fb      	ldr	r3, [r7, #12]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084fc <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fa77 	bl	80089f8 <vTaskDelete>
  return osOK;
 800850a:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <osDelay+0x16>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	e000      	b.n	800852c <osDelay+0x18>
 800852a:	2301      	movs	r3, #1
 800852c:	4618      	mov	r0, r3
 800852e:	f000 faf3 	bl	8008b18 <vTaskDelay>
  
  return osOK;
 8008532:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f103 0208 	add.w	r2, r3, #8
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008554:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f103 0208 	add.w	r2, r3, #8
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f103 0208 	add.w	r2, r3, #8
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]
}
 80085d2:	bf00      	nop
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085de:	b480      	push	{r7}
 80085e0:	b085      	sub	sp, #20
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f4:	d103      	bne.n	80085fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e00c      	b.n	8008618 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	3308      	adds	r3, #8
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	e002      	b.n	800860c <vListInsert+0x2e>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	429a      	cmp	r2, r3
 8008616:	d2f6      	bcs.n	8008606 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6892      	ldr	r2, [r2, #8]
 8008666:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6852      	ldr	r2, [r2, #4]
 8008670:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	429a      	cmp	r2, r3
 800867a:	d103      	bne.n	8008684 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	1e5a      	subs	r2, r3, #1
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08e      	sub	sp, #56	; 0x38
 80086a8:	af04      	add	r7, sp, #16
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086ca:	bf00      	nop
 80086cc:	e7fe      	b.n	80086cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10a      	bne.n	80086ea <xTaskCreateStatic+0x46>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	61fb      	str	r3, [r7, #28]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086ea:	23b4      	movs	r3, #180	; 0xb4
 80086ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2bb4      	cmp	r3, #180	; 0xb4
 80086f2:	d00a      	beq.n	800870a <xTaskCreateStatic+0x66>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	61bb      	str	r3, [r7, #24]
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800870a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	2b00      	cmp	r3, #0
 8008710:	d01e      	beq.n	8008750 <xTaskCreateStatic+0xac>
 8008712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01b      	beq.n	8008750 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008720:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	2202      	movs	r2, #2
 8008726:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800872a:	2300      	movs	r3, #0
 800872c:	9303      	str	r3, [sp, #12]
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	9302      	str	r3, [sp, #8]
 8008732:	f107 0314 	add.w	r3, r7, #20
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 f850 	bl	80087e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800874a:	f000 f8eb 	bl	8008924 <prvAddNewTaskToReadyList>
 800874e:	e001      	b.n	8008754 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008754:	697b      	ldr	r3, [r7, #20]
	}
 8008756:	4618      	mov	r0, r3
 8008758:	3728      	adds	r7, #40	; 0x28
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800875e:	b580      	push	{r7, lr}
 8008760:	b08c      	sub	sp, #48	; 0x30
 8008762:	af04      	add	r7, sp, #16
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	603b      	str	r3, [r7, #0]
 800876a:	4613      	mov	r3, r2
 800876c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800876e:	88fb      	ldrh	r3, [r7, #6]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4618      	mov	r0, r3
 8008774:	f001 f9c0 	bl	8009af8 <pvPortMalloc>
 8008778:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00e      	beq.n	800879e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008780:	20b4      	movs	r0, #180	; 0xb4
 8008782:	f001 f9b9 	bl	8009af8 <pvPortMalloc>
 8008786:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	631a      	str	r2, [r3, #48]	; 0x30
 8008794:	e005      	b.n	80087a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008796:	6978      	ldr	r0, [r7, #20]
 8008798:	f001 fa7a 	bl	8009c90 <vPortFree>
 800879c:	e001      	b.n	80087a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d017      	beq.n	80087d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087b0:	88fa      	ldrh	r2, [r7, #6]
 80087b2:	2300      	movs	r3, #0
 80087b4:	9303      	str	r3, [sp, #12]
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	9302      	str	r3, [sp, #8]
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	68b9      	ldr	r1, [r7, #8]
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f80e 	bl	80087e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087cc:	69f8      	ldr	r0, [r7, #28]
 80087ce:	f000 f8a9 	bl	8008924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087d2:	2301      	movs	r3, #1
 80087d4:	61bb      	str	r3, [r7, #24]
 80087d6:	e002      	b.n	80087de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087de:	69bb      	ldr	r3, [r7, #24]
	}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3720      	adds	r7, #32
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008800:	3b01      	subs	r3, #1
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	f023 0307 	bic.w	r3, r3, #7
 800880e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <prvInitialiseNewTask+0x48>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	617b      	str	r3, [r7, #20]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01f      	beq.n	8008876 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008836:	2300      	movs	r3, #0
 8008838:	61fb      	str	r3, [r7, #28]
 800883a:	e012      	b.n	8008862 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4413      	add	r3, r2
 8008842:	7819      	ldrb	r1, [r3, #0]
 8008844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	4413      	add	r3, r2
 800884a:	3334      	adds	r3, #52	; 0x34
 800884c:	460a      	mov	r2, r1
 800884e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4413      	add	r3, r2
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d006      	beq.n	800886a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	3301      	adds	r3, #1
 8008860:	61fb      	str	r3, [r7, #28]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	2b0f      	cmp	r3, #15
 8008866:	d9e9      	bls.n	800883c <prvInitialiseNewTask+0x54>
 8008868:	e000      	b.n	800886c <prvInitialiseNewTask+0x84>
			{
				break;
 800886a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008874:	e003      	b.n	800887e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	2b06      	cmp	r3, #6
 8008882:	d901      	bls.n	8008888 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008884:	2306      	movs	r3, #6
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800888c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008892:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	2200      	movs	r2, #0
 8008898:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	3304      	adds	r3, #4
 800889e:	4618      	mov	r0, r3
 80088a0:	f7ff fe6c 	bl	800857c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	3318      	adds	r3, #24
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff fe67 	bl	800857c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	f1c3 0207 	rsb	r2, r3, #7
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	334c      	adds	r3, #76	; 0x4c
 80088d8:	2260      	movs	r2, #96	; 0x60
 80088da:	2100      	movs	r1, #0
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 fb2f 	bl	8009f40 <memset>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	4a0c      	ldr	r2, [pc, #48]	; (8008918 <prvInitialiseNewTask+0x130>)
 80088e6:	651a      	str	r2, [r3, #80]	; 0x50
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	4a0c      	ldr	r2, [pc, #48]	; (800891c <prvInitialiseNewTask+0x134>)
 80088ec:	655a      	str	r2, [r3, #84]	; 0x54
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	4a0b      	ldr	r2, [pc, #44]	; (8008920 <prvInitialiseNewTask+0x138>)
 80088f2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	68f9      	ldr	r1, [r7, #12]
 80088f8:	69b8      	ldr	r0, [r7, #24]
 80088fa:	f000 feb1 	bl	8009660 <pxPortInitialiseStack>
 80088fe:	4602      	mov	r2, r0
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800890a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008910:	bf00      	nop
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	08036270 	.word	0x08036270
 800891c:	08036290 	.word	0x08036290
 8008920:	08036250 	.word	0x08036250

08008924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800892c:	f000 ffc2 	bl	80098b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008930:	4b2a      	ldr	r3, [pc, #168]	; (80089dc <prvAddNewTaskToReadyList+0xb8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	4a29      	ldr	r2, [pc, #164]	; (80089dc <prvAddNewTaskToReadyList+0xb8>)
 8008938:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800893a:	4b29      	ldr	r3, [pc, #164]	; (80089e0 <prvAddNewTaskToReadyList+0xbc>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d109      	bne.n	8008956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008942:	4a27      	ldr	r2, [pc, #156]	; (80089e0 <prvAddNewTaskToReadyList+0xbc>)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008948:	4b24      	ldr	r3, [pc, #144]	; (80089dc <prvAddNewTaskToReadyList+0xb8>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d110      	bne.n	8008972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008950:	f000 fb5c 	bl	800900c <prvInitialiseTaskLists>
 8008954:	e00d      	b.n	8008972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008956:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <prvAddNewTaskToReadyList+0xc0>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d109      	bne.n	8008972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800895e:	4b20      	ldr	r3, [pc, #128]	; (80089e0 <prvAddNewTaskToReadyList+0xbc>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	429a      	cmp	r2, r3
 800896a:	d802      	bhi.n	8008972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800896c:	4a1c      	ldr	r2, [pc, #112]	; (80089e0 <prvAddNewTaskToReadyList+0xbc>)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008972:	4b1d      	ldr	r3, [pc, #116]	; (80089e8 <prvAddNewTaskToReadyList+0xc4>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3301      	adds	r3, #1
 8008978:	4a1b      	ldr	r2, [pc, #108]	; (80089e8 <prvAddNewTaskToReadyList+0xc4>)
 800897a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	2201      	movs	r2, #1
 8008982:	409a      	lsls	r2, r3
 8008984:	4b19      	ldr	r3, [pc, #100]	; (80089ec <prvAddNewTaskToReadyList+0xc8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4313      	orrs	r3, r2
 800898a:	4a18      	ldr	r2, [pc, #96]	; (80089ec <prvAddNewTaskToReadyList+0xc8>)
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4a15      	ldr	r2, [pc, #84]	; (80089f0 <prvAddNewTaskToReadyList+0xcc>)
 800899c:	441a      	add	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3304      	adds	r3, #4
 80089a2:	4619      	mov	r1, r3
 80089a4:	4610      	mov	r0, r2
 80089a6:	f7ff fdf6 	bl	8008596 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089aa:	f000 ffb3 	bl	8009914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089ae:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <prvAddNewTaskToReadyList+0xc0>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089b6:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <prvAddNewTaskToReadyList+0xbc>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d207      	bcs.n	80089d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089c4:	4b0b      	ldr	r3, [pc, #44]	; (80089f4 <prvAddNewTaskToReadyList+0xd0>)
 80089c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	200051e4 	.word	0x200051e4
 80089e0:	200050e4 	.word	0x200050e4
 80089e4:	200051f0 	.word	0x200051f0
 80089e8:	20005200 	.word	0x20005200
 80089ec:	200051ec 	.word	0x200051ec
 80089f0:	200050e8 	.word	0x200050e8
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008a00:	f000 ff58 	bl	80098b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <vTaskDelete+0x18>
 8008a0a:	4b39      	ldr	r3, [pc, #228]	; (8008af0 <vTaskDelete+0xf8>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	e000      	b.n	8008a12 <vTaskDelete+0x1a>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff fe19 	bl	8008650 <uxListRemove>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d115      	bne.n	8008a50 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a28:	4932      	ldr	r1, [pc, #200]	; (8008af4 <vTaskDelete+0xfc>)
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	440b      	add	r3, r1
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10a      	bne.n	8008a50 <vTaskDelete+0x58>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	2201      	movs	r2, #1
 8008a40:	fa02 f303 	lsl.w	r3, r2, r3
 8008a44:	43da      	mvns	r2, r3
 8008a46:	4b2c      	ldr	r3, [pc, #176]	; (8008af8 <vTaskDelete+0x100>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	4a2a      	ldr	r2, [pc, #168]	; (8008af8 <vTaskDelete+0x100>)
 8008a4e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3318      	adds	r3, #24
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff fdf7 	bl	8008650 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008a62:	4b26      	ldr	r3, [pc, #152]	; (8008afc <vTaskDelete+0x104>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	4a24      	ldr	r2, [pc, #144]	; (8008afc <vTaskDelete+0x104>)
 8008a6a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008a6c:	4b20      	ldr	r3, [pc, #128]	; (8008af0 <vTaskDelete+0xf8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d10b      	bne.n	8008a8e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4820      	ldr	r0, [pc, #128]	; (8008b00 <vTaskDelete+0x108>)
 8008a7e:	f7ff fd8a 	bl	8008596 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008a82:	4b20      	ldr	r3, [pc, #128]	; (8008b04 <vTaskDelete+0x10c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3301      	adds	r3, #1
 8008a88:	4a1e      	ldr	r2, [pc, #120]	; (8008b04 <vTaskDelete+0x10c>)
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	e009      	b.n	8008aa2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008a8e:	4b1e      	ldr	r3, [pc, #120]	; (8008b08 <vTaskDelete+0x110>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	4a1c      	ldr	r2, [pc, #112]	; (8008b08 <vTaskDelete+0x110>)
 8008a96:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 fb25 	bl	80090e8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008a9e:	f000 fb57 	bl	8009150 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008aa2:	f000 ff37 	bl	8009914 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008aa6:	4b19      	ldr	r3, [pc, #100]	; (8008b0c <vTaskDelete+0x114>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d01b      	beq.n	8008ae6 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8008aae:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <vTaskDelete+0xf8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d116      	bne.n	8008ae6 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008ab8:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <vTaskDelete+0x118>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00a      	beq.n	8008ad6 <vTaskDelete+0xde>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	60bb      	str	r3, [r7, #8]
}
 8008ad2:	bf00      	nop
 8008ad4:	e7fe      	b.n	8008ad4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8008ad6:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <vTaskDelete+0x11c>)
 8008ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	200050e4 	.word	0x200050e4
 8008af4:	200050e8 	.word	0x200050e8
 8008af8:	200051ec 	.word	0x200051ec
 8008afc:	20005200 	.word	0x20005200
 8008b00:	200051b8 	.word	0x200051b8
 8008b04:	200051cc 	.word	0x200051cc
 8008b08:	200051e4 	.word	0x200051e4
 8008b0c:	200051f0 	.word	0x200051f0
 8008b10:	2000520c 	.word	0x2000520c
 8008b14:	e000ed04 	.word	0xe000ed04

08008b18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d017      	beq.n	8008b5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b2a:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <vTaskDelay+0x60>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <vTaskDelay+0x30>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	60bb      	str	r3, [r7, #8]
}
 8008b44:	bf00      	nop
 8008b46:	e7fe      	b.n	8008b46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b48:	f000 f884 	bl	8008c54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fd20 	bl	8009594 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b54:	f000 f88c 	bl	8008c70 <xTaskResumeAll>
 8008b58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d107      	bne.n	8008b70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b60:	4b06      	ldr	r3, [pc, #24]	; (8008b7c <vTaskDelay+0x64>)
 8008b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b70:	bf00      	nop
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	2000520c 	.word	0x2000520c
 8008b7c:	e000ed04 	.word	0xe000ed04

08008b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08a      	sub	sp, #40	; 0x28
 8008b84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b8e:	463a      	mov	r2, r7
 8008b90:	1d39      	adds	r1, r7, #4
 8008b92:	f107 0308 	add.w	r3, r7, #8
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7f8 f86a 	bl	8000c70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	9202      	str	r2, [sp, #8]
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	2300      	movs	r3, #0
 8008bac:	460a      	mov	r2, r1
 8008bae:	4921      	ldr	r1, [pc, #132]	; (8008c34 <vTaskStartScheduler+0xb4>)
 8008bb0:	4821      	ldr	r0, [pc, #132]	; (8008c38 <vTaskStartScheduler+0xb8>)
 8008bb2:	f7ff fd77 	bl	80086a4 <xTaskCreateStatic>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4a20      	ldr	r2, [pc, #128]	; (8008c3c <vTaskStartScheduler+0xbc>)
 8008bba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008bbc:	4b1f      	ldr	r3, [pc, #124]	; (8008c3c <vTaskStartScheduler+0xbc>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e001      	b.n	8008bce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d11b      	bne.n	8008c0c <vTaskStartScheduler+0x8c>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	613b      	str	r3, [r7, #16]
}
 8008be6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008be8:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <vTaskStartScheduler+0xc0>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	334c      	adds	r3, #76	; 0x4c
 8008bee:	4a15      	ldr	r2, [pc, #84]	; (8008c44 <vTaskStartScheduler+0xc4>)
 8008bf0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bf2:	4b15      	ldr	r3, [pc, #84]	; (8008c48 <vTaskStartScheduler+0xc8>)
 8008bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bfa:	4b14      	ldr	r3, [pc, #80]	; (8008c4c <vTaskStartScheduler+0xcc>)
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c00:	4b13      	ldr	r3, [pc, #76]	; (8008c50 <vTaskStartScheduler+0xd0>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c06:	f000 fdb3 	bl	8009770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c0a:	e00e      	b.n	8008c2a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c12:	d10a      	bne.n	8008c2a <vTaskStartScheduler+0xaa>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	60fb      	str	r3, [r7, #12]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <vTaskStartScheduler+0xa8>
}
 8008c2a:	bf00      	nop
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	0800ac7c 	.word	0x0800ac7c
 8008c38:	08008fdd 	.word	0x08008fdd
 8008c3c:	20005208 	.word	0x20005208
 8008c40:	200050e4 	.word	0x200050e4
 8008c44:	20004024 	.word	0x20004024
 8008c48:	20005204 	.word	0x20005204
 8008c4c:	200051f0 	.word	0x200051f0
 8008c50:	200051e8 	.word	0x200051e8

08008c54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c58:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <vTaskSuspendAll+0x18>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	4a03      	ldr	r2, [pc, #12]	; (8008c6c <vTaskSuspendAll+0x18>)
 8008c60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c62:	bf00      	nop
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	2000520c 	.word	0x2000520c

08008c70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c7e:	4b41      	ldr	r3, [pc, #260]	; (8008d84 <xTaskResumeAll+0x114>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <xTaskResumeAll+0x2c>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	603b      	str	r3, [r7, #0]
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c9c:	f000 fe0a 	bl	80098b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ca0:	4b38      	ldr	r3, [pc, #224]	; (8008d84 <xTaskResumeAll+0x114>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	4a37      	ldr	r2, [pc, #220]	; (8008d84 <xTaskResumeAll+0x114>)
 8008ca8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008caa:	4b36      	ldr	r3, [pc, #216]	; (8008d84 <xTaskResumeAll+0x114>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d161      	bne.n	8008d76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cb2:	4b35      	ldr	r3, [pc, #212]	; (8008d88 <xTaskResumeAll+0x118>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d05d      	beq.n	8008d76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cba:	e02e      	b.n	8008d1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cbc:	4b33      	ldr	r3, [pc, #204]	; (8008d8c <xTaskResumeAll+0x11c>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3318      	adds	r3, #24
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7ff fcc1 	bl	8008650 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff fcbc 	bl	8008650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	2201      	movs	r2, #1
 8008cde:	409a      	lsls	r2, r3
 8008ce0:	4b2b      	ldr	r3, [pc, #172]	; (8008d90 <xTaskResumeAll+0x120>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	4a2a      	ldr	r2, [pc, #168]	; (8008d90 <xTaskResumeAll+0x120>)
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cee:	4613      	mov	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4a27      	ldr	r2, [pc, #156]	; (8008d94 <xTaskResumeAll+0x124>)
 8008cf8:	441a      	add	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	4619      	mov	r1, r3
 8008d00:	4610      	mov	r0, r2
 8008d02:	f7ff fc48 	bl	8008596 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0a:	4b23      	ldr	r3, [pc, #140]	; (8008d98 <xTaskResumeAll+0x128>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d302      	bcc.n	8008d1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008d14:	4b21      	ldr	r3, [pc, #132]	; (8008d9c <xTaskResumeAll+0x12c>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d1a:	4b1c      	ldr	r3, [pc, #112]	; (8008d8c <xTaskResumeAll+0x11c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1cc      	bne.n	8008cbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d28:	f000 fa12 	bl	8009150 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d2c:	4b1c      	ldr	r3, [pc, #112]	; (8008da0 <xTaskResumeAll+0x130>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d010      	beq.n	8008d5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d38:	f000 f836 	bl	8008da8 <xTaskIncrementTick>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008d42:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <xTaskResumeAll+0x12c>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1f1      	bne.n	8008d38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008d54:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <xTaskResumeAll+0x130>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d5a:	4b10      	ldr	r3, [pc, #64]	; (8008d9c <xTaskResumeAll+0x12c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d009      	beq.n	8008d76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d62:	2301      	movs	r3, #1
 8008d64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d66:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <xTaskResumeAll+0x134>)
 8008d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d76:	f000 fdcd 	bl	8009914 <vPortExitCritical>

	return xAlreadyYielded;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	2000520c 	.word	0x2000520c
 8008d88:	200051e4 	.word	0x200051e4
 8008d8c:	200051a4 	.word	0x200051a4
 8008d90:	200051ec 	.word	0x200051ec
 8008d94:	200050e8 	.word	0x200050e8
 8008d98:	200050e4 	.word	0x200050e4
 8008d9c:	200051f8 	.word	0x200051f8
 8008da0:	200051f4 	.word	0x200051f4
 8008da4:	e000ed04 	.word	0xe000ed04

08008da8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008db2:	4b4e      	ldr	r3, [pc, #312]	; (8008eec <xTaskIncrementTick+0x144>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f040 808e 	bne.w	8008ed8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008dbc:	4b4c      	ldr	r3, [pc, #304]	; (8008ef0 <xTaskIncrementTick+0x148>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dc4:	4a4a      	ldr	r2, [pc, #296]	; (8008ef0 <xTaskIncrementTick+0x148>)
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d120      	bne.n	8008e12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008dd0:	4b48      	ldr	r3, [pc, #288]	; (8008ef4 <xTaskIncrementTick+0x14c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	603b      	str	r3, [r7, #0]
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <xTaskIncrementTick+0x46>
 8008df0:	4b40      	ldr	r3, [pc, #256]	; (8008ef4 <xTaskIncrementTick+0x14c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	60fb      	str	r3, [r7, #12]
 8008df6:	4b40      	ldr	r3, [pc, #256]	; (8008ef8 <xTaskIncrementTick+0x150>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a3e      	ldr	r2, [pc, #248]	; (8008ef4 <xTaskIncrementTick+0x14c>)
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	4a3e      	ldr	r2, [pc, #248]	; (8008ef8 <xTaskIncrementTick+0x150>)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	4b3d      	ldr	r3, [pc, #244]	; (8008efc <xTaskIncrementTick+0x154>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	4a3c      	ldr	r2, [pc, #240]	; (8008efc <xTaskIncrementTick+0x154>)
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	f000 f99f 	bl	8009150 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e12:	4b3b      	ldr	r3, [pc, #236]	; (8008f00 <xTaskIncrementTick+0x158>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d348      	bcc.n	8008eae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e1c:	4b35      	ldr	r3, [pc, #212]	; (8008ef4 <xTaskIncrementTick+0x14c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d104      	bne.n	8008e30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e26:	4b36      	ldr	r3, [pc, #216]	; (8008f00 <xTaskIncrementTick+0x158>)
 8008e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e2c:	601a      	str	r2, [r3, #0]
					break;
 8008e2e:	e03e      	b.n	8008eae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e30:	4b30      	ldr	r3, [pc, #192]	; (8008ef4 <xTaskIncrementTick+0x14c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d203      	bcs.n	8008e50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e48:	4a2d      	ldr	r2, [pc, #180]	; (8008f00 <xTaskIncrementTick+0x158>)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e4e:	e02e      	b.n	8008eae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fbfb 	bl	8008650 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d004      	beq.n	8008e6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	3318      	adds	r3, #24
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff fbf2 	bl	8008650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	2201      	movs	r2, #1
 8008e72:	409a      	lsls	r2, r3
 8008e74:	4b23      	ldr	r3, [pc, #140]	; (8008f04 <xTaskIncrementTick+0x15c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	4a22      	ldr	r2, [pc, #136]	; (8008f04 <xTaskIncrementTick+0x15c>)
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e82:	4613      	mov	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4a1f      	ldr	r2, [pc, #124]	; (8008f08 <xTaskIncrementTick+0x160>)
 8008e8c:	441a      	add	r2, r3
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4619      	mov	r1, r3
 8008e94:	4610      	mov	r0, r2
 8008e96:	f7ff fb7e 	bl	8008596 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9e:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <xTaskIncrementTick+0x164>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d3b9      	bcc.n	8008e1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eac:	e7b6      	b.n	8008e1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008eae:	4b17      	ldr	r3, [pc, #92]	; (8008f0c <xTaskIncrementTick+0x164>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb4:	4914      	ldr	r1, [pc, #80]	; (8008f08 <xTaskIncrementTick+0x160>)
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	440b      	add	r3, r1
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d901      	bls.n	8008eca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008eca:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <xTaskIncrementTick+0x168>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d007      	beq.n	8008ee2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	617b      	str	r3, [r7, #20]
 8008ed6:	e004      	b.n	8008ee2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ed8:	4b0e      	ldr	r3, [pc, #56]	; (8008f14 <xTaskIncrementTick+0x16c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3301      	adds	r3, #1
 8008ede:	4a0d      	ldr	r2, [pc, #52]	; (8008f14 <xTaskIncrementTick+0x16c>)
 8008ee0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ee2:	697b      	ldr	r3, [r7, #20]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	2000520c 	.word	0x2000520c
 8008ef0:	200051e8 	.word	0x200051e8
 8008ef4:	2000519c 	.word	0x2000519c
 8008ef8:	200051a0 	.word	0x200051a0
 8008efc:	200051fc 	.word	0x200051fc
 8008f00:	20005204 	.word	0x20005204
 8008f04:	200051ec 	.word	0x200051ec
 8008f08:	200050e8 	.word	0x200050e8
 8008f0c:	200050e4 	.word	0x200050e4
 8008f10:	200051f8 	.word	0x200051f8
 8008f14:	200051f4 	.word	0x200051f4

08008f18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f1e:	4b29      	ldr	r3, [pc, #164]	; (8008fc4 <vTaskSwitchContext+0xac>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f26:	4b28      	ldr	r3, [pc, #160]	; (8008fc8 <vTaskSwitchContext+0xb0>)
 8008f28:	2201      	movs	r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f2c:	e044      	b.n	8008fb8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008f2e:	4b26      	ldr	r3, [pc, #152]	; (8008fc8 <vTaskSwitchContext+0xb0>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f34:	4b25      	ldr	r3, [pc, #148]	; (8008fcc <vTaskSwitchContext+0xb4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	fab3 f383 	clz	r3, r3
 8008f40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008f42:	7afb      	ldrb	r3, [r7, #11]
 8008f44:	f1c3 031f 	rsb	r3, r3, #31
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	4921      	ldr	r1, [pc, #132]	; (8008fd0 <vTaskSwitchContext+0xb8>)
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10a      	bne.n	8008f74 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	607b      	str	r3, [r7, #4]
}
 8008f70:	bf00      	nop
 8008f72:	e7fe      	b.n	8008f72 <vTaskSwitchContext+0x5a>
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	4613      	mov	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4a14      	ldr	r2, [pc, #80]	; (8008fd0 <vTaskSwitchContext+0xb8>)
 8008f80:	4413      	add	r3, r2
 8008f82:	613b      	str	r3, [r7, #16]
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	605a      	str	r2, [r3, #4]
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	3308      	adds	r3, #8
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d104      	bne.n	8008fa4 <vTaskSwitchContext+0x8c>
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	605a      	str	r2, [r3, #4]
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	4a0a      	ldr	r2, [pc, #40]	; (8008fd4 <vTaskSwitchContext+0xbc>)
 8008fac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fae:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <vTaskSwitchContext+0xbc>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	334c      	adds	r3, #76	; 0x4c
 8008fb4:	4a08      	ldr	r2, [pc, #32]	; (8008fd8 <vTaskSwitchContext+0xc0>)
 8008fb6:	6013      	str	r3, [r2, #0]
}
 8008fb8:	bf00      	nop
 8008fba:	371c      	adds	r7, #28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	2000520c 	.word	0x2000520c
 8008fc8:	200051f8 	.word	0x200051f8
 8008fcc:	200051ec 	.word	0x200051ec
 8008fd0:	200050e8 	.word	0x200050e8
 8008fd4:	200050e4 	.word	0x200050e4
 8008fd8:	20004024 	.word	0x20004024

08008fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fe4:	f000 f852 	bl	800908c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <prvIdleTask+0x28>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d9f9      	bls.n	8008fe4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ff0:	4b05      	ldr	r3, [pc, #20]	; (8009008 <prvIdleTask+0x2c>)
 8008ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009000:	e7f0      	b.n	8008fe4 <prvIdleTask+0x8>
 8009002:	bf00      	nop
 8009004:	200050e8 	.word	0x200050e8
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009012:	2300      	movs	r3, #0
 8009014:	607b      	str	r3, [r7, #4]
 8009016:	e00c      	b.n	8009032 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4a12      	ldr	r2, [pc, #72]	; (800906c <prvInitialiseTaskLists+0x60>)
 8009024:	4413      	add	r3, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff fa88 	bl	800853c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3301      	adds	r3, #1
 8009030:	607b      	str	r3, [r7, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b06      	cmp	r3, #6
 8009036:	d9ef      	bls.n	8009018 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009038:	480d      	ldr	r0, [pc, #52]	; (8009070 <prvInitialiseTaskLists+0x64>)
 800903a:	f7ff fa7f 	bl	800853c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800903e:	480d      	ldr	r0, [pc, #52]	; (8009074 <prvInitialiseTaskLists+0x68>)
 8009040:	f7ff fa7c 	bl	800853c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009044:	480c      	ldr	r0, [pc, #48]	; (8009078 <prvInitialiseTaskLists+0x6c>)
 8009046:	f7ff fa79 	bl	800853c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800904a:	480c      	ldr	r0, [pc, #48]	; (800907c <prvInitialiseTaskLists+0x70>)
 800904c:	f7ff fa76 	bl	800853c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009050:	480b      	ldr	r0, [pc, #44]	; (8009080 <prvInitialiseTaskLists+0x74>)
 8009052:	f7ff fa73 	bl	800853c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009056:	4b0b      	ldr	r3, [pc, #44]	; (8009084 <prvInitialiseTaskLists+0x78>)
 8009058:	4a05      	ldr	r2, [pc, #20]	; (8009070 <prvInitialiseTaskLists+0x64>)
 800905a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800905c:	4b0a      	ldr	r3, [pc, #40]	; (8009088 <prvInitialiseTaskLists+0x7c>)
 800905e:	4a05      	ldr	r2, [pc, #20]	; (8009074 <prvInitialiseTaskLists+0x68>)
 8009060:	601a      	str	r2, [r3, #0]
}
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	200050e8 	.word	0x200050e8
 8009070:	20005174 	.word	0x20005174
 8009074:	20005188 	.word	0x20005188
 8009078:	200051a4 	.word	0x200051a4
 800907c:	200051b8 	.word	0x200051b8
 8009080:	200051d0 	.word	0x200051d0
 8009084:	2000519c 	.word	0x2000519c
 8009088:	200051a0 	.word	0x200051a0

0800908c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009092:	e019      	b.n	80090c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009094:	f000 fc0e 	bl	80098b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009098:	4b10      	ldr	r3, [pc, #64]	; (80090dc <prvCheckTasksWaitingTermination+0x50>)
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7ff fad3 	bl	8008650 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090aa:	4b0d      	ldr	r3, [pc, #52]	; (80090e0 <prvCheckTasksWaitingTermination+0x54>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	4a0b      	ldr	r2, [pc, #44]	; (80090e0 <prvCheckTasksWaitingTermination+0x54>)
 80090b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090b4:	4b0b      	ldr	r3, [pc, #44]	; (80090e4 <prvCheckTasksWaitingTermination+0x58>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	4a0a      	ldr	r2, [pc, #40]	; (80090e4 <prvCheckTasksWaitingTermination+0x58>)
 80090bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80090be:	f000 fc29 	bl	8009914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f810 	bl	80090e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090c8:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <prvCheckTasksWaitingTermination+0x58>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e1      	bne.n	8009094 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090d0:	bf00      	nop
 80090d2:	bf00      	nop
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	200051b8 	.word	0x200051b8
 80090e0:	200051e4 	.word	0x200051e4
 80090e4:	200051cc 	.word	0x200051cc

080090e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	334c      	adds	r3, #76	; 0x4c
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 ffcd 	bl	800a094 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d108      	bne.n	8009116 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fdc1 	bl	8009c90 <vPortFree>
				vPortFree( pxTCB );
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fdbe 	bl	8009c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009114:	e018      	b.n	8009148 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800911c:	2b01      	cmp	r3, #1
 800911e:	d103      	bne.n	8009128 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fdb5 	bl	8009c90 <vPortFree>
	}
 8009126:	e00f      	b.n	8009148 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800912e:	2b02      	cmp	r3, #2
 8009130:	d00a      	beq.n	8009148 <prvDeleteTCB+0x60>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60fb      	str	r3, [r7, #12]
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <prvDeleteTCB+0x5e>
	}
 8009148:	bf00      	nop
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <prvResetNextTaskUnblockTime+0x38>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <prvResetNextTaskUnblockTime+0x3c>)
 8009162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009166:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009168:	e008      	b.n	800917c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800916a:	4b07      	ldr	r3, [pc, #28]	; (8009188 <prvResetNextTaskUnblockTime+0x38>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	4a04      	ldr	r2, [pc, #16]	; (800918c <prvResetNextTaskUnblockTime+0x3c>)
 800917a:	6013      	str	r3, [r2, #0]
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	2000519c 	.word	0x2000519c
 800918c:	20005204 	.word	0x20005204

08009190 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800919e:	f000 fb89 	bl	80098b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80091a2:	4b29      	ldr	r3, [pc, #164]	; (8009248 <xTaskNotifyWait+0xb8>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d01c      	beq.n	80091ea <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80091b0:	4b25      	ldr	r3, [pc, #148]	; (8009248 <xTaskNotifyWait+0xb8>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	43d2      	mvns	r2, r2
 80091bc:	400a      	ands	r2, r1
 80091be:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80091c2:	4b21      	ldr	r3, [pc, #132]	; (8009248 <xTaskNotifyWait+0xb8>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00b      	beq.n	80091ea <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091d2:	2101      	movs	r1, #1
 80091d4:	6838      	ldr	r0, [r7, #0]
 80091d6:	f000 f9dd 	bl	8009594 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80091da:	4b1c      	ldr	r3, [pc, #112]	; (800924c <xTaskNotifyWait+0xbc>)
 80091dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80091ea:	f000 fb93 	bl	8009914 <vPortExitCritical>

		taskENTER_CRITICAL();
 80091ee:	f000 fb61 	bl	80098b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d005      	beq.n	8009204 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80091f8:	4b13      	ldr	r3, [pc, #76]	; (8009248 <xTaskNotifyWait+0xb8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009204:	4b10      	ldr	r3, [pc, #64]	; (8009248 <xTaskNotifyWait+0xb8>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d002      	beq.n	8009218 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009212:	2300      	movs	r3, #0
 8009214:	617b      	str	r3, [r7, #20]
 8009216:	e00a      	b.n	800922e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009218:	4b0b      	ldr	r3, [pc, #44]	; (8009248 <xTaskNotifyWait+0xb8>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	43d2      	mvns	r2, r2
 8009224:	400a      	ands	r2, r1
 8009226:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 800922a:	2301      	movs	r3, #1
 800922c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800922e:	4b06      	ldr	r3, [pc, #24]	; (8009248 <xTaskNotifyWait+0xb8>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8009238:	f000 fb6c 	bl	8009914 <vPortExitCritical>

		return xReturn;
 800923c:	697b      	ldr	r3, [r7, #20]
	}
 800923e:	4618      	mov	r0, r3
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	200050e4 	.word	0x200050e4
 800924c:	e000ed04 	.word	0xe000ed04

08009250 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08a      	sub	sp, #40	; 0x28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	4613      	mov	r3, r2
 800925e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009260:	2301      	movs	r3, #1
 8009262:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <xTaskGenericNotify+0x30>
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	61bb      	str	r3, [r7, #24]
}
 800927c:	bf00      	nop
 800927e:	e7fe      	b.n	800927e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009284:	f000 fb16 	bl	80098b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800929e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 80092a8:	79fb      	ldrb	r3, [r7, #7]
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d82d      	bhi.n	800930a <xTaskGenericNotify+0xba>
 80092ae:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <xTaskGenericNotify+0x64>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	0800932d 	.word	0x0800932d
 80092b8:	080092c9 	.word	0x080092c9
 80092bc:	080092db 	.word	0x080092db
 80092c0:	080092eb 	.word	0x080092eb
 80092c4:	080092f5 	.word	0x080092f5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	431a      	orrs	r2, r3
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80092d8:	e02b      	b.n	8009332 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80092e8:	e023      	b.n	8009332 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80092f2:	e01e      	b.n	8009332 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80092f4:	7ffb      	ldrb	r3, [r7, #31]
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d004      	beq.n	8009304 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009302:	e016      	b.n	8009332 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009304:	2300      	movs	r3, #0
 8009306:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009308:	e013      	b.n	8009332 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009314:	d00c      	beq.n	8009330 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	617b      	str	r3, [r7, #20]
}
 8009328:	bf00      	nop
 800932a:	e7fe      	b.n	800932a <xTaskGenericNotify+0xda>
					break;
 800932c:	bf00      	nop
 800932e:	e000      	b.n	8009332 <xTaskGenericNotify+0xe2>

					break;
 8009330:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009332:	7ffb      	ldrb	r3, [r7, #31]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d139      	bne.n	80093ac <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	3304      	adds	r3, #4
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff f987 	bl	8008650 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009346:	2201      	movs	r2, #1
 8009348:	409a      	lsls	r2, r3
 800934a:	4b1c      	ldr	r3, [pc, #112]	; (80093bc <xTaskGenericNotify+0x16c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4313      	orrs	r3, r2
 8009350:	4a1a      	ldr	r2, [pc, #104]	; (80093bc <xTaskGenericNotify+0x16c>)
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009358:	4613      	mov	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4a17      	ldr	r2, [pc, #92]	; (80093c0 <xTaskGenericNotify+0x170>)
 8009362:	441a      	add	r2, r3
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	3304      	adds	r3, #4
 8009368:	4619      	mov	r1, r3
 800936a:	4610      	mov	r0, r2
 800936c:	f7ff f913 	bl	8008596 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <xTaskGenericNotify+0x13e>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	613b      	str	r3, [r7, #16]
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009392:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <xTaskGenericNotify+0x174>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	429a      	cmp	r2, r3
 800939a:	d907      	bls.n	80093ac <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800939c:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <xTaskGenericNotify+0x178>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80093ac:	f000 fab2 	bl	8009914 <vPortExitCritical>

		return xReturn;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3728      	adds	r7, #40	; 0x28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	200051ec 	.word	0x200051ec
 80093c0:	200050e8 	.word	0x200050e8
 80093c4:	200050e4 	.word	0x200050e4
 80093c8:	e000ed04 	.word	0xe000ed04

080093cc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08e      	sub	sp, #56	; 0x38
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	4613      	mov	r3, r2
 80093da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80093dc:	2301      	movs	r3, #1
 80093de:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093fc:	f000 fb3c 	bl	8009a78 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009404:	f3ef 8211 	mrs	r2, BASEPRI
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	623a      	str	r2, [r7, #32]
 800941a:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800941c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800941e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d004      	beq.n	8009430 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	2202      	movs	r2, #2
 800943e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8009442:	79fb      	ldrb	r3, [r7, #7]
 8009444:	2b04      	cmp	r3, #4
 8009446:	d82f      	bhi.n	80094a8 <xTaskGenericNotifyFromISR+0xdc>
 8009448:	a201      	add	r2, pc, #4	; (adr r2, 8009450 <xTaskGenericNotifyFromISR+0x84>)
 800944a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944e:	bf00      	nop
 8009450:	080094cb 	.word	0x080094cb
 8009454:	08009465 	.word	0x08009465
 8009458:	08009477 	.word	0x08009477
 800945c:	08009487 	.word	0x08009487
 8009460:	08009491 	.word	0x08009491
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	431a      	orrs	r2, r3
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009474:	e02c      	b.n	80094d0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009478:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800947c:	1c5a      	adds	r2, r3, #1
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009484:	e024      	b.n	80094d0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800948e:	e01f      	b.n	80094d0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009490:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009494:	2b02      	cmp	r3, #2
 8009496:	d004      	beq.n	80094a2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80094a0:	e016      	b.n	80094d0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80094a6:	e013      	b.n	80094d0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80094ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094b2:	d00c      	beq.n	80094ce <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	61bb      	str	r3, [r7, #24]
}
 80094c6:	bf00      	nop
 80094c8:	e7fe      	b.n	80094c8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80094ca:	bf00      	nop
 80094cc:	e000      	b.n	80094d0 <xTaskGenericNotifyFromISR+0x104>
					break;
 80094ce:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80094d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d145      	bne.n	8009564 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00a      	beq.n	80094f6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	617b      	str	r3, [r7, #20]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f6:	4b21      	ldr	r3, [pc, #132]	; (800957c <xTaskGenericNotifyFromISR+0x1b0>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d11c      	bne.n	8009538 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	3304      	adds	r3, #4
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff f8a4 	bl	8008650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	2201      	movs	r2, #1
 800950e:	409a      	lsls	r2, r3
 8009510:	4b1b      	ldr	r3, [pc, #108]	; (8009580 <xTaskGenericNotifyFromISR+0x1b4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4313      	orrs	r3, r2
 8009516:	4a1a      	ldr	r2, [pc, #104]	; (8009580 <xTaskGenericNotifyFromISR+0x1b4>)
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4a17      	ldr	r2, [pc, #92]	; (8009584 <xTaskGenericNotifyFromISR+0x1b8>)
 8009528:	441a      	add	r2, r3
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	3304      	adds	r3, #4
 800952e:	4619      	mov	r1, r3
 8009530:	4610      	mov	r0, r2
 8009532:	f7ff f830 	bl	8008596 <vListInsertEnd>
 8009536:	e005      	b.n	8009544 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	3318      	adds	r3, #24
 800953c:	4619      	mov	r1, r3
 800953e:	4812      	ldr	r0, [pc, #72]	; (8009588 <xTaskGenericNotifyFromISR+0x1bc>)
 8009540:	f7ff f829 	bl	8008596 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009548:	4b10      	ldr	r3, [pc, #64]	; (800958c <xTaskGenericNotifyFromISR+0x1c0>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954e:	429a      	cmp	r2, r3
 8009550:	d908      	bls.n	8009564 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800955a:	2201      	movs	r2, #1
 800955c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800955e:	4b0c      	ldr	r3, [pc, #48]	; (8009590 <xTaskGenericNotifyFromISR+0x1c4>)
 8009560:	2201      	movs	r2, #1
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800956e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009572:	4618      	mov	r0, r3
 8009574:	3738      	adds	r7, #56	; 0x38
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	2000520c 	.word	0x2000520c
 8009580:	200051ec 	.word	0x200051ec
 8009584:	200050e8 	.word	0x200050e8
 8009588:	200051a4 	.word	0x200051a4
 800958c:	200050e4 	.word	0x200050e4
 8009590:	200051f8 	.word	0x200051f8

08009594 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800959e:	4b29      	ldr	r3, [pc, #164]	; (8009644 <prvAddCurrentTaskToDelayedList+0xb0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095a4:	4b28      	ldr	r3, [pc, #160]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3304      	adds	r3, #4
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff f850 	bl	8008650 <uxListRemove>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10b      	bne.n	80095ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095b6:	4b24      	ldr	r3, [pc, #144]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	2201      	movs	r2, #1
 80095be:	fa02 f303 	lsl.w	r3, r2, r3
 80095c2:	43da      	mvns	r2, r3
 80095c4:	4b21      	ldr	r3, [pc, #132]	; (800964c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4013      	ands	r3, r2
 80095ca:	4a20      	ldr	r2, [pc, #128]	; (800964c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095d4:	d10a      	bne.n	80095ec <prvAddCurrentTaskToDelayedList+0x58>
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d007      	beq.n	80095ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095dc:	4b1a      	ldr	r3, [pc, #104]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3304      	adds	r3, #4
 80095e2:	4619      	mov	r1, r3
 80095e4:	481a      	ldr	r0, [pc, #104]	; (8009650 <prvAddCurrentTaskToDelayedList+0xbc>)
 80095e6:	f7fe ffd6 	bl	8008596 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095ea:	e026      	b.n	800963a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095f4:	4b14      	ldr	r3, [pc, #80]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	429a      	cmp	r2, r3
 8009602:	d209      	bcs.n	8009618 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009604:	4b13      	ldr	r3, [pc, #76]	; (8009654 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	4b0f      	ldr	r3, [pc, #60]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3304      	adds	r3, #4
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7fe ffe4 	bl	80085de <vListInsert>
}
 8009616:	e010      	b.n	800963a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009618:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <prvAddCurrentTaskToDelayedList+0xc4>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3304      	adds	r3, #4
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f7fe ffda 	bl	80085de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800962a:	4b0c      	ldr	r3, [pc, #48]	; (800965c <prvAddCurrentTaskToDelayedList+0xc8>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	429a      	cmp	r2, r3
 8009632:	d202      	bcs.n	800963a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009634:	4a09      	ldr	r2, [pc, #36]	; (800965c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	6013      	str	r3, [r2, #0]
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	200051e8 	.word	0x200051e8
 8009648:	200050e4 	.word	0x200050e4
 800964c:	200051ec 	.word	0x200051ec
 8009650:	200051d0 	.word	0x200051d0
 8009654:	200051a0 	.word	0x200051a0
 8009658:	2000519c 	.word	0x2000519c
 800965c:	20005204 	.word	0x20005204

08009660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	3b04      	subs	r3, #4
 8009670:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3b04      	subs	r3, #4
 800967e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f023 0201 	bic.w	r2, r3, #1
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3b04      	subs	r3, #4
 800968e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009690:	4a0c      	ldr	r2, [pc, #48]	; (80096c4 <pxPortInitialiseStack+0x64>)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3b14      	subs	r3, #20
 800969a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3b04      	subs	r3, #4
 80096a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f06f 0202 	mvn.w	r2, #2
 80096ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3b20      	subs	r3, #32
 80096b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096b6:	68fb      	ldr	r3, [r7, #12]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	080096c9 	.word	0x080096c9

080096c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096d2:	4b12      	ldr	r3, [pc, #72]	; (800971c <prvTaskExitError+0x54>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096da:	d00a      	beq.n	80096f2 <prvTaskExitError+0x2a>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	60fb      	str	r3, [r7, #12]
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <prvTaskExitError+0x28>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	60bb      	str	r3, [r7, #8]
}
 8009704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009706:	bf00      	nop
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0fc      	beq.n	8009708 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800970e:	bf00      	nop
 8009710:	bf00      	nop
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	20004020 	.word	0x20004020

08009720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <pxCurrentTCBConst2>)
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	6808      	ldr	r0, [r1, #0]
 8009726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	f380 8809 	msr	PSP, r0
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8811 	msr	BASEPRI, r0
 800973a:	4770      	bx	lr
 800973c:	f3af 8000 	nop.w

08009740 <pxCurrentTCBConst2>:
 8009740:	200050e4 	.word	0x200050e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop

08009748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009748:	4808      	ldr	r0, [pc, #32]	; (800976c <prvPortStartFirstTask+0x24>)
 800974a:	6800      	ldr	r0, [r0, #0]
 800974c:	6800      	ldr	r0, [r0, #0]
 800974e:	f380 8808 	msr	MSP, r0
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8814 	msr	CONTROL, r0
 800975a:	b662      	cpsie	i
 800975c:	b661      	cpsie	f
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	df00      	svc	0
 8009768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800976a:	bf00      	nop
 800976c:	e000ed08 	.word	0xe000ed08

08009770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009776:	4b46      	ldr	r3, [pc, #280]	; (8009890 <xPortStartScheduler+0x120>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a46      	ldr	r2, [pc, #280]	; (8009894 <xPortStartScheduler+0x124>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d10a      	bne.n	8009796 <xPortStartScheduler+0x26>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	613b      	str	r3, [r7, #16]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009796:	4b3e      	ldr	r3, [pc, #248]	; (8009890 <xPortStartScheduler+0x120>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a3f      	ldr	r2, [pc, #252]	; (8009898 <xPortStartScheduler+0x128>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d10a      	bne.n	80097b6 <xPortStartScheduler+0x46>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	60fb      	str	r3, [r7, #12]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097b6:	4b39      	ldr	r3, [pc, #228]	; (800989c <xPortStartScheduler+0x12c>)
 80097b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	22ff      	movs	r2, #255	; 0xff
 80097c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	4b31      	ldr	r3, [pc, #196]	; (80098a0 <xPortStartScheduler+0x130>)
 80097dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097de:	4b31      	ldr	r3, [pc, #196]	; (80098a4 <xPortStartScheduler+0x134>)
 80097e0:	2207      	movs	r2, #7
 80097e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097e4:	e009      	b.n	80097fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80097e6:	4b2f      	ldr	r3, [pc, #188]	; (80098a4 <xPortStartScheduler+0x134>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	4a2d      	ldr	r2, [pc, #180]	; (80098a4 <xPortStartScheduler+0x134>)
 80097ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009802:	2b80      	cmp	r3, #128	; 0x80
 8009804:	d0ef      	beq.n	80097e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009806:	4b27      	ldr	r3, [pc, #156]	; (80098a4 <xPortStartScheduler+0x134>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f1c3 0307 	rsb	r3, r3, #7
 800980e:	2b04      	cmp	r3, #4
 8009810:	d00a      	beq.n	8009828 <xPortStartScheduler+0xb8>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	60bb      	str	r3, [r7, #8]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009828:	4b1e      	ldr	r3, [pc, #120]	; (80098a4 <xPortStartScheduler+0x134>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	021b      	lsls	r3, r3, #8
 800982e:	4a1d      	ldr	r2, [pc, #116]	; (80098a4 <xPortStartScheduler+0x134>)
 8009830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009832:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <xPortStartScheduler+0x134>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800983a:	4a1a      	ldr	r2, [pc, #104]	; (80098a4 <xPortStartScheduler+0x134>)
 800983c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009846:	4b18      	ldr	r3, [pc, #96]	; (80098a8 <xPortStartScheduler+0x138>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <xPortStartScheduler+0x138>)
 800984c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009852:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <xPortStartScheduler+0x138>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a14      	ldr	r2, [pc, #80]	; (80098a8 <xPortStartScheduler+0x138>)
 8009858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800985c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800985e:	f000 f8dd 	bl	8009a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009862:	4b12      	ldr	r3, [pc, #72]	; (80098ac <xPortStartScheduler+0x13c>)
 8009864:	2200      	movs	r2, #0
 8009866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009868:	f000 f8fc 	bl	8009a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800986c:	4b10      	ldr	r3, [pc, #64]	; (80098b0 <xPortStartScheduler+0x140>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a0f      	ldr	r2, [pc, #60]	; (80098b0 <xPortStartScheduler+0x140>)
 8009872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009878:	f7ff ff66 	bl	8009748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800987c:	f7ff fb4c 	bl	8008f18 <vTaskSwitchContext>
	prvTaskExitError();
 8009880:	f7ff ff22 	bl	80096c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	e000ed00 	.word	0xe000ed00
 8009894:	410fc271 	.word	0x410fc271
 8009898:	410fc270 	.word	0x410fc270
 800989c:	e000e400 	.word	0xe000e400
 80098a0:	20005210 	.word	0x20005210
 80098a4:	20005214 	.word	0x20005214
 80098a8:	e000ed20 	.word	0xe000ed20
 80098ac:	20004020 	.word	0x20004020
 80098b0:	e000ef34 	.word	0xe000ef34

080098b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	607b      	str	r3, [r7, #4]
}
 80098cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098ce:	4b0f      	ldr	r3, [pc, #60]	; (800990c <vPortEnterCritical+0x58>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	4a0d      	ldr	r2, [pc, #52]	; (800990c <vPortEnterCritical+0x58>)
 80098d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098d8:	4b0c      	ldr	r3, [pc, #48]	; (800990c <vPortEnterCritical+0x58>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d10f      	bne.n	8009900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098e0:	4b0b      	ldr	r3, [pc, #44]	; (8009910 <vPortEnterCritical+0x5c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <vPortEnterCritical+0x4c>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	603b      	str	r3, [r7, #0]
}
 80098fc:	bf00      	nop
 80098fe:	e7fe      	b.n	80098fe <vPortEnterCritical+0x4a>
	}
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	20004020 	.word	0x20004020
 8009910:	e000ed04 	.word	0xe000ed04

08009914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800991a:	4b12      	ldr	r3, [pc, #72]	; (8009964 <vPortExitCritical+0x50>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <vPortExitCritical+0x24>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	607b      	str	r3, [r7, #4]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009938:	4b0a      	ldr	r3, [pc, #40]	; (8009964 <vPortExitCritical+0x50>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3b01      	subs	r3, #1
 800993e:	4a09      	ldr	r2, [pc, #36]	; (8009964 <vPortExitCritical+0x50>)
 8009940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009942:	4b08      	ldr	r3, [pc, #32]	; (8009964 <vPortExitCritical+0x50>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d105      	bne.n	8009956 <vPortExitCritical+0x42>
 800994a:	2300      	movs	r3, #0
 800994c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	f383 8811 	msr	BASEPRI, r3
}
 8009954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009956:	bf00      	nop
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20004020 	.word	0x20004020
	...

08009970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009970:	f3ef 8009 	mrs	r0, PSP
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <pxCurrentTCBConst>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	f01e 0f10 	tst.w	lr, #16
 8009980:	bf08      	it	eq
 8009982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998a:	6010      	str	r0, [r2, #0]
 800998c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009994:	f380 8811 	msr	BASEPRI, r0
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f7ff faba 	bl	8008f18 <vTaskSwitchContext>
 80099a4:	f04f 0000 	mov.w	r0, #0
 80099a8:	f380 8811 	msr	BASEPRI, r0
 80099ac:	bc09      	pop	{r0, r3}
 80099ae:	6819      	ldr	r1, [r3, #0]
 80099b0:	6808      	ldr	r0, [r1, #0]
 80099b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b6:	f01e 0f10 	tst.w	lr, #16
 80099ba:	bf08      	it	eq
 80099bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099c0:	f380 8809 	msr	PSP, r0
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	f3af 8000 	nop.w

080099d0 <pxCurrentTCBConst>:
 80099d0:	200050e4 	.word	0x200050e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop

080099d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	607b      	str	r3, [r7, #4]
}
 80099f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099f2:	f7ff f9d9 	bl	8008da8 <xTaskIncrementTick>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <SysTick_Handler+0x40>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	2300      	movs	r3, #0
 8009a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	f383 8811 	msr	BASEPRI, r3
}
 8009a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	e000ed04 	.word	0xe000ed04

08009a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a20:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <vPortSetupTimerInterrupt+0x34>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a26:	4b0b      	ldr	r3, [pc, #44]	; (8009a54 <vPortSetupTimerInterrupt+0x38>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <vPortSetupTimerInterrupt+0x3c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <vPortSetupTimerInterrupt+0x40>)
 8009a32:	fba2 2303 	umull	r2, r3, r2, r3
 8009a36:	099b      	lsrs	r3, r3, #6
 8009a38:	4a09      	ldr	r2, [pc, #36]	; (8009a60 <vPortSetupTimerInterrupt+0x44>)
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a3e:	4b04      	ldr	r3, [pc, #16]	; (8009a50 <vPortSetupTimerInterrupt+0x34>)
 8009a40:	2207      	movs	r2, #7
 8009a42:	601a      	str	r2, [r3, #0]
}
 8009a44:	bf00      	nop
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	e000e010 	.word	0xe000e010
 8009a54:	e000e018 	.word	0xe000e018
 8009a58:	20000000 	.word	0x20000000
 8009a5c:	10624dd3 	.word	0x10624dd3
 8009a60:	e000e014 	.word	0xe000e014

08009a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a74 <vPortEnableVFP+0x10>
 8009a68:	6801      	ldr	r1, [r0, #0]
 8009a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a6e:	6001      	str	r1, [r0, #0]
 8009a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a72:	bf00      	nop
 8009a74:	e000ed88 	.word	0xe000ed88

08009a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a7e:	f3ef 8305 	mrs	r3, IPSR
 8009a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b0f      	cmp	r3, #15
 8009a88:	d914      	bls.n	8009ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a8a:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <vPortValidateInterruptPriority+0x70>)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4413      	add	r3, r2
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a94:	4b15      	ldr	r3, [pc, #84]	; (8009aec <vPortValidateInterruptPriority+0x74>)
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	7afa      	ldrb	r2, [r7, #11]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d20a      	bcs.n	8009ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	607b      	str	r3, [r7, #4]
}
 8009ab0:	bf00      	nop
 8009ab2:	e7fe      	b.n	8009ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ab4:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <vPortValidateInterruptPriority+0x78>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009abc:	4b0d      	ldr	r3, [pc, #52]	; (8009af4 <vPortValidateInterruptPriority+0x7c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d90a      	bls.n	8009ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	603b      	str	r3, [r7, #0]
}
 8009ad6:	bf00      	nop
 8009ad8:	e7fe      	b.n	8009ad8 <vPortValidateInterruptPriority+0x60>
	}
 8009ada:	bf00      	nop
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	e000e3f0 	.word	0xe000e3f0
 8009aec:	20005210 	.word	0x20005210
 8009af0:	e000ed0c 	.word	0xe000ed0c
 8009af4:	20005214 	.word	0x20005214

08009af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b04:	f7ff f8a6 	bl	8008c54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b08:	4b5b      	ldr	r3, [pc, #364]	; (8009c78 <pvPortMalloc+0x180>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b10:	f000 f920 	bl	8009d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b14:	4b59      	ldr	r3, [pc, #356]	; (8009c7c <pvPortMalloc+0x184>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f040 8093 	bne.w	8009c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01d      	beq.n	8009b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b28:	2208      	movs	r2, #8
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d014      	beq.n	8009b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f023 0307 	bic.w	r3, r3, #7
 8009b40:	3308      	adds	r3, #8
 8009b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <pvPortMalloc+0x6c>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	617b      	str	r3, [r7, #20]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d06e      	beq.n	8009c48 <pvPortMalloc+0x150>
 8009b6a:	4b45      	ldr	r3, [pc, #276]	; (8009c80 <pvPortMalloc+0x188>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d869      	bhi.n	8009c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b74:	4b43      	ldr	r3, [pc, #268]	; (8009c84 <pvPortMalloc+0x18c>)
 8009b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b78:	4b42      	ldr	r3, [pc, #264]	; (8009c84 <pvPortMalloc+0x18c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b7e:	e004      	b.n	8009b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d903      	bls.n	8009b9c <pvPortMalloc+0xa4>
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1f1      	bne.n	8009b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b9c:	4b36      	ldr	r3, [pc, #216]	; (8009c78 <pvPortMalloc+0x180>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d050      	beq.n	8009c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2208      	movs	r2, #8
 8009bac:	4413      	add	r3, r2
 8009bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	1ad2      	subs	r2, r2, r3
 8009bc0:	2308      	movs	r3, #8
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d91f      	bls.n	8009c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4413      	add	r3, r2
 8009bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	613b      	str	r3, [r7, #16]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	1ad2      	subs	r2, r2, r3
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c02:	69b8      	ldr	r0, [r7, #24]
 8009c04:	f000 f908 	bl	8009e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c08:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <pvPortMalloc+0x188>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	4a1b      	ldr	r2, [pc, #108]	; (8009c80 <pvPortMalloc+0x188>)
 8009c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c16:	4b1a      	ldr	r3, [pc, #104]	; (8009c80 <pvPortMalloc+0x188>)
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <pvPortMalloc+0x190>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d203      	bcs.n	8009c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c22:	4b17      	ldr	r3, [pc, #92]	; (8009c80 <pvPortMalloc+0x188>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a18      	ldr	r2, [pc, #96]	; (8009c88 <pvPortMalloc+0x190>)
 8009c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <pvPortMalloc+0x184>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	431a      	orrs	r2, r3
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c3e:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <pvPortMalloc+0x194>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3301      	adds	r3, #1
 8009c44:	4a11      	ldr	r2, [pc, #68]	; (8009c8c <pvPortMalloc+0x194>)
 8009c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c48:	f7ff f812 	bl	8008c70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f003 0307 	and.w	r3, r3, #7
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <pvPortMalloc+0x174>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	60fb      	str	r3, [r7, #12]
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <pvPortMalloc+0x172>
	return pvReturn;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3728      	adds	r7, #40	; 0x28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	2000a040 	.word	0x2000a040
 8009c7c:	2000a054 	.word	0x2000a054
 8009c80:	2000a044 	.word	0x2000a044
 8009c84:	2000a038 	.word	0x2000a038
 8009c88:	2000a048 	.word	0x2000a048
 8009c8c:	2000a04c 	.word	0x2000a04c

08009c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d04d      	beq.n	8009d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ca2:	2308      	movs	r3, #8
 8009ca4:	425b      	negs	r3, r3
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	4413      	add	r3, r2
 8009caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <vPortFree+0xb8>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4013      	ands	r3, r2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10a      	bne.n	8009cd4 <vPortFree+0x44>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	60fb      	str	r3, [r7, #12]
}
 8009cd0:	bf00      	nop
 8009cd2:	e7fe      	b.n	8009cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00a      	beq.n	8009cf2 <vPortFree+0x62>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	60bb      	str	r3, [r7, #8]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <vPortFree+0xb8>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01e      	beq.n	8009d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d11a      	bne.n	8009d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	4b0e      	ldr	r3, [pc, #56]	; (8009d48 <vPortFree+0xb8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	43db      	mvns	r3, r3
 8009d12:	401a      	ands	r2, r3
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d18:	f7fe ff9c 	bl	8008c54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <vPortFree+0xbc>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4413      	add	r3, r2
 8009d26:	4a09      	ldr	r2, [pc, #36]	; (8009d4c <vPortFree+0xbc>)
 8009d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d2a:	6938      	ldr	r0, [r7, #16]
 8009d2c:	f000 f874 	bl	8009e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <vPortFree+0xc0>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3301      	adds	r3, #1
 8009d36:	4a06      	ldr	r2, [pc, #24]	; (8009d50 <vPortFree+0xc0>)
 8009d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d3a:	f7fe ff99 	bl	8008c70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d3e:	bf00      	nop
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	2000a054 	.word	0x2000a054
 8009d4c:	2000a044 	.word	0x2000a044
 8009d50:	2000a050 	.word	0x2000a050

08009d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d5a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d60:	4b27      	ldr	r3, [pc, #156]	; (8009e00 <prvHeapInit+0xac>)
 8009d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f003 0307 	and.w	r3, r3, #7
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00c      	beq.n	8009d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3307      	adds	r3, #7
 8009d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0307 	bic.w	r3, r3, #7
 8009d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	4a1f      	ldr	r2, [pc, #124]	; (8009e00 <prvHeapInit+0xac>)
 8009d84:	4413      	add	r3, r2
 8009d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d8c:	4a1d      	ldr	r2, [pc, #116]	; (8009e04 <prvHeapInit+0xb0>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d92:	4b1c      	ldr	r3, [pc, #112]	; (8009e04 <prvHeapInit+0xb0>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009da0:	2208      	movs	r2, #8
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1a9b      	subs	r3, r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0307 	bic.w	r3, r3, #7
 8009dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4a15      	ldr	r2, [pc, #84]	; (8009e08 <prvHeapInit+0xb4>)
 8009db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009db6:	4b14      	ldr	r3, [pc, #80]	; (8009e08 <prvHeapInit+0xb4>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dbe:	4b12      	ldr	r3, [pc, #72]	; (8009e08 <prvHeapInit+0xb4>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	1ad2      	subs	r2, r2, r3
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <prvHeapInit+0xb4>)
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	4a0a      	ldr	r2, [pc, #40]	; (8009e0c <prvHeapInit+0xb8>)
 8009de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4a09      	ldr	r2, [pc, #36]	; (8009e10 <prvHeapInit+0xbc>)
 8009dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dec:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <prvHeapInit+0xc0>)
 8009dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009df2:	601a      	str	r2, [r3, #0]
}
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	20005218 	.word	0x20005218
 8009e04:	2000a038 	.word	0x2000a038
 8009e08:	2000a040 	.word	0x2000a040
 8009e0c:	2000a048 	.word	0x2000a048
 8009e10:	2000a044 	.word	0x2000a044
 8009e14:	2000a054 	.word	0x2000a054

08009e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e20:	4b28      	ldr	r3, [pc, #160]	; (8009ec4 <prvInsertBlockIntoFreeList+0xac>)
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	e002      	b.n	8009e2c <prvInsertBlockIntoFreeList+0x14>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d8f7      	bhi.n	8009e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	4413      	add	r3, r2
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d108      	bne.n	8009e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	441a      	add	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	441a      	add	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d118      	bne.n	8009ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d00d      	beq.n	8009e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	441a      	add	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	e008      	b.n	8009ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e96:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	601a      	str	r2, [r3, #0]
 8009e9e:	e003      	b.n	8009ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d002      	beq.n	8009eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	2000a038 	.word	0x2000a038
 8009ec8:	2000a040 	.word	0x2000a040

08009ecc <__errno>:
 8009ecc:	4b01      	ldr	r3, [pc, #4]	; (8009ed4 <__errno+0x8>)
 8009ece:	6818      	ldr	r0, [r3, #0]
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20004024 	.word	0x20004024

08009ed8 <__libc_init_array>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	4d0d      	ldr	r5, [pc, #52]	; (8009f10 <__libc_init_array+0x38>)
 8009edc:	4c0d      	ldr	r4, [pc, #52]	; (8009f14 <__libc_init_array+0x3c>)
 8009ede:	1b64      	subs	r4, r4, r5
 8009ee0:	10a4      	asrs	r4, r4, #2
 8009ee2:	2600      	movs	r6, #0
 8009ee4:	42a6      	cmp	r6, r4
 8009ee6:	d109      	bne.n	8009efc <__libc_init_array+0x24>
 8009ee8:	4d0b      	ldr	r5, [pc, #44]	; (8009f18 <__libc_init_array+0x40>)
 8009eea:	4c0c      	ldr	r4, [pc, #48]	; (8009f1c <__libc_init_array+0x44>)
 8009eec:	f000 fd0c 	bl	800a908 <_init>
 8009ef0:	1b64      	subs	r4, r4, r5
 8009ef2:	10a4      	asrs	r4, r4, #2
 8009ef4:	2600      	movs	r6, #0
 8009ef6:	42a6      	cmp	r6, r4
 8009ef8:	d105      	bne.n	8009f06 <__libc_init_array+0x2e>
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f00:	4798      	blx	r3
 8009f02:	3601      	adds	r6, #1
 8009f04:	e7ee      	b.n	8009ee4 <__libc_init_array+0xc>
 8009f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0a:	4798      	blx	r3
 8009f0c:	3601      	adds	r6, #1
 8009f0e:	e7f2      	b.n	8009ef6 <__libc_init_array+0x1e>
 8009f10:	080362ec 	.word	0x080362ec
 8009f14:	080362ec 	.word	0x080362ec
 8009f18:	080362ec 	.word	0x080362ec
 8009f1c:	080362f0 	.word	0x080362f0

08009f20 <__retarget_lock_acquire_recursive>:
 8009f20:	4770      	bx	lr

08009f22 <__retarget_lock_release_recursive>:
 8009f22:	4770      	bx	lr

08009f24 <memcpy>:
 8009f24:	440a      	add	r2, r1
 8009f26:	4291      	cmp	r1, r2
 8009f28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f2c:	d100      	bne.n	8009f30 <memcpy+0xc>
 8009f2e:	4770      	bx	lr
 8009f30:	b510      	push	{r4, lr}
 8009f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f3a:	4291      	cmp	r1, r2
 8009f3c:	d1f9      	bne.n	8009f32 <memcpy+0xe>
 8009f3e:	bd10      	pop	{r4, pc}

08009f40 <memset>:
 8009f40:	4402      	add	r2, r0
 8009f42:	4603      	mov	r3, r0
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d100      	bne.n	8009f4a <memset+0xa>
 8009f48:	4770      	bx	lr
 8009f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f4e:	e7f9      	b.n	8009f44 <memset+0x4>

08009f50 <sbrk_aligned>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	4e0e      	ldr	r6, [pc, #56]	; (8009f8c <sbrk_aligned+0x3c>)
 8009f54:	460c      	mov	r4, r1
 8009f56:	6831      	ldr	r1, [r6, #0]
 8009f58:	4605      	mov	r5, r0
 8009f5a:	b911      	cbnz	r1, 8009f62 <sbrk_aligned+0x12>
 8009f5c:	f000 f8f6 	bl	800a14c <_sbrk_r>
 8009f60:	6030      	str	r0, [r6, #0]
 8009f62:	4621      	mov	r1, r4
 8009f64:	4628      	mov	r0, r5
 8009f66:	f000 f8f1 	bl	800a14c <_sbrk_r>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d00a      	beq.n	8009f84 <sbrk_aligned+0x34>
 8009f6e:	1cc4      	adds	r4, r0, #3
 8009f70:	f024 0403 	bic.w	r4, r4, #3
 8009f74:	42a0      	cmp	r0, r4
 8009f76:	d007      	beq.n	8009f88 <sbrk_aligned+0x38>
 8009f78:	1a21      	subs	r1, r4, r0
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f000 f8e6 	bl	800a14c <_sbrk_r>
 8009f80:	3001      	adds	r0, #1
 8009f82:	d101      	bne.n	8009f88 <sbrk_aligned+0x38>
 8009f84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f88:	4620      	mov	r0, r4
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	2000a060 	.word	0x2000a060

08009f90 <_malloc_r>:
 8009f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f94:	1ccd      	adds	r5, r1, #3
 8009f96:	f025 0503 	bic.w	r5, r5, #3
 8009f9a:	3508      	adds	r5, #8
 8009f9c:	2d0c      	cmp	r5, #12
 8009f9e:	bf38      	it	cc
 8009fa0:	250c      	movcc	r5, #12
 8009fa2:	2d00      	cmp	r5, #0
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	db01      	blt.n	8009fac <_malloc_r+0x1c>
 8009fa8:	42a9      	cmp	r1, r5
 8009faa:	d905      	bls.n	8009fb8 <_malloc_r+0x28>
 8009fac:	230c      	movs	r3, #12
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	2600      	movs	r6, #0
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb8:	4e2e      	ldr	r6, [pc, #184]	; (800a074 <_malloc_r+0xe4>)
 8009fba:	f000 f90b 	bl	800a1d4 <__malloc_lock>
 8009fbe:	6833      	ldr	r3, [r6, #0]
 8009fc0:	461c      	mov	r4, r3
 8009fc2:	bb34      	cbnz	r4, 800a012 <_malloc_r+0x82>
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	f7ff ffc2 	bl	8009f50 <sbrk_aligned>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	4604      	mov	r4, r0
 8009fd0:	d14d      	bne.n	800a06e <_malloc_r+0xde>
 8009fd2:	6834      	ldr	r4, [r6, #0]
 8009fd4:	4626      	mov	r6, r4
 8009fd6:	2e00      	cmp	r6, #0
 8009fd8:	d140      	bne.n	800a05c <_malloc_r+0xcc>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	4631      	mov	r1, r6
 8009fde:	4638      	mov	r0, r7
 8009fe0:	eb04 0803 	add.w	r8, r4, r3
 8009fe4:	f000 f8b2 	bl	800a14c <_sbrk_r>
 8009fe8:	4580      	cmp	r8, r0
 8009fea:	d13a      	bne.n	800a062 <_malloc_r+0xd2>
 8009fec:	6821      	ldr	r1, [r4, #0]
 8009fee:	3503      	adds	r5, #3
 8009ff0:	1a6d      	subs	r5, r5, r1
 8009ff2:	f025 0503 	bic.w	r5, r5, #3
 8009ff6:	3508      	adds	r5, #8
 8009ff8:	2d0c      	cmp	r5, #12
 8009ffa:	bf38      	it	cc
 8009ffc:	250c      	movcc	r5, #12
 8009ffe:	4629      	mov	r1, r5
 800a000:	4638      	mov	r0, r7
 800a002:	f7ff ffa5 	bl	8009f50 <sbrk_aligned>
 800a006:	3001      	adds	r0, #1
 800a008:	d02b      	beq.n	800a062 <_malloc_r+0xd2>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	442b      	add	r3, r5
 800a00e:	6023      	str	r3, [r4, #0]
 800a010:	e00e      	b.n	800a030 <_malloc_r+0xa0>
 800a012:	6822      	ldr	r2, [r4, #0]
 800a014:	1b52      	subs	r2, r2, r5
 800a016:	d41e      	bmi.n	800a056 <_malloc_r+0xc6>
 800a018:	2a0b      	cmp	r2, #11
 800a01a:	d916      	bls.n	800a04a <_malloc_r+0xba>
 800a01c:	1961      	adds	r1, r4, r5
 800a01e:	42a3      	cmp	r3, r4
 800a020:	6025      	str	r5, [r4, #0]
 800a022:	bf18      	it	ne
 800a024:	6059      	strne	r1, [r3, #4]
 800a026:	6863      	ldr	r3, [r4, #4]
 800a028:	bf08      	it	eq
 800a02a:	6031      	streq	r1, [r6, #0]
 800a02c:	5162      	str	r2, [r4, r5]
 800a02e:	604b      	str	r3, [r1, #4]
 800a030:	4638      	mov	r0, r7
 800a032:	f104 060b 	add.w	r6, r4, #11
 800a036:	f000 f8d3 	bl	800a1e0 <__malloc_unlock>
 800a03a:	f026 0607 	bic.w	r6, r6, #7
 800a03e:	1d23      	adds	r3, r4, #4
 800a040:	1af2      	subs	r2, r6, r3
 800a042:	d0b6      	beq.n	8009fb2 <_malloc_r+0x22>
 800a044:	1b9b      	subs	r3, r3, r6
 800a046:	50a3      	str	r3, [r4, r2]
 800a048:	e7b3      	b.n	8009fb2 <_malloc_r+0x22>
 800a04a:	6862      	ldr	r2, [r4, #4]
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	bf0c      	ite	eq
 800a050:	6032      	streq	r2, [r6, #0]
 800a052:	605a      	strne	r2, [r3, #4]
 800a054:	e7ec      	b.n	800a030 <_malloc_r+0xa0>
 800a056:	4623      	mov	r3, r4
 800a058:	6864      	ldr	r4, [r4, #4]
 800a05a:	e7b2      	b.n	8009fc2 <_malloc_r+0x32>
 800a05c:	4634      	mov	r4, r6
 800a05e:	6876      	ldr	r6, [r6, #4]
 800a060:	e7b9      	b.n	8009fd6 <_malloc_r+0x46>
 800a062:	230c      	movs	r3, #12
 800a064:	603b      	str	r3, [r7, #0]
 800a066:	4638      	mov	r0, r7
 800a068:	f000 f8ba 	bl	800a1e0 <__malloc_unlock>
 800a06c:	e7a1      	b.n	8009fb2 <_malloc_r+0x22>
 800a06e:	6025      	str	r5, [r4, #0]
 800a070:	e7de      	b.n	800a030 <_malloc_r+0xa0>
 800a072:	bf00      	nop
 800a074:	2000a05c 	.word	0x2000a05c

0800a078 <cleanup_glue>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	460c      	mov	r4, r1
 800a07c:	6809      	ldr	r1, [r1, #0]
 800a07e:	4605      	mov	r5, r0
 800a080:	b109      	cbz	r1, 800a086 <cleanup_glue+0xe>
 800a082:	f7ff fff9 	bl	800a078 <cleanup_glue>
 800a086:	4621      	mov	r1, r4
 800a088:	4628      	mov	r0, r5
 800a08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a08e:	f000 b8ad 	b.w	800a1ec <_free_r>
	...

0800a094 <_reclaim_reent>:
 800a094:	4b2c      	ldr	r3, [pc, #176]	; (800a148 <_reclaim_reent+0xb4>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4283      	cmp	r3, r0
 800a09a:	b570      	push	{r4, r5, r6, lr}
 800a09c:	4604      	mov	r4, r0
 800a09e:	d051      	beq.n	800a144 <_reclaim_reent+0xb0>
 800a0a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a0a2:	b143      	cbz	r3, 800a0b6 <_reclaim_reent+0x22>
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d14a      	bne.n	800a140 <_reclaim_reent+0xac>
 800a0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ac:	6819      	ldr	r1, [r3, #0]
 800a0ae:	b111      	cbz	r1, 800a0b6 <_reclaim_reent+0x22>
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 f89b 	bl	800a1ec <_free_r>
 800a0b6:	6961      	ldr	r1, [r4, #20]
 800a0b8:	b111      	cbz	r1, 800a0c0 <_reclaim_reent+0x2c>
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 f896 	bl	800a1ec <_free_r>
 800a0c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a0c2:	b111      	cbz	r1, 800a0ca <_reclaim_reent+0x36>
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f000 f891 	bl	800a1ec <_free_r>
 800a0ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a0cc:	b111      	cbz	r1, 800a0d4 <_reclaim_reent+0x40>
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 f88c 	bl	800a1ec <_free_r>
 800a0d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a0d6:	b111      	cbz	r1, 800a0de <_reclaim_reent+0x4a>
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f000 f887 	bl	800a1ec <_free_r>
 800a0de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a0e0:	b111      	cbz	r1, 800a0e8 <_reclaim_reent+0x54>
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f000 f882 	bl	800a1ec <_free_r>
 800a0e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a0ea:	b111      	cbz	r1, 800a0f2 <_reclaim_reent+0x5e>
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f000 f87d 	bl	800a1ec <_free_r>
 800a0f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a0f4:	b111      	cbz	r1, 800a0fc <_reclaim_reent+0x68>
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 f878 	bl	800a1ec <_free_r>
 800a0fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0fe:	b111      	cbz	r1, 800a106 <_reclaim_reent+0x72>
 800a100:	4620      	mov	r0, r4
 800a102:	f000 f873 	bl	800a1ec <_free_r>
 800a106:	69a3      	ldr	r3, [r4, #24]
 800a108:	b1e3      	cbz	r3, 800a144 <_reclaim_reent+0xb0>
 800a10a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a10c:	4620      	mov	r0, r4
 800a10e:	4798      	blx	r3
 800a110:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a112:	b1b9      	cbz	r1, 800a144 <_reclaim_reent+0xb0>
 800a114:	4620      	mov	r0, r4
 800a116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a11a:	f7ff bfad 	b.w	800a078 <cleanup_glue>
 800a11e:	5949      	ldr	r1, [r1, r5]
 800a120:	b941      	cbnz	r1, 800a134 <_reclaim_reent+0xa0>
 800a122:	3504      	adds	r5, #4
 800a124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a126:	2d80      	cmp	r5, #128	; 0x80
 800a128:	68d9      	ldr	r1, [r3, #12]
 800a12a:	d1f8      	bne.n	800a11e <_reclaim_reent+0x8a>
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 f85d 	bl	800a1ec <_free_r>
 800a132:	e7ba      	b.n	800a0aa <_reclaim_reent+0x16>
 800a134:	680e      	ldr	r6, [r1, #0]
 800a136:	4620      	mov	r0, r4
 800a138:	f000 f858 	bl	800a1ec <_free_r>
 800a13c:	4631      	mov	r1, r6
 800a13e:	e7ef      	b.n	800a120 <_reclaim_reent+0x8c>
 800a140:	2500      	movs	r5, #0
 800a142:	e7ef      	b.n	800a124 <_reclaim_reent+0x90>
 800a144:	bd70      	pop	{r4, r5, r6, pc}
 800a146:	bf00      	nop
 800a148:	20004024 	.word	0x20004024

0800a14c <_sbrk_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d06      	ldr	r5, [pc, #24]	; (800a168 <_sbrk_r+0x1c>)
 800a150:	2300      	movs	r3, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	f7f7 f9a8 	bl	80014ac <_sbrk>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d102      	bne.n	800a166 <_sbrk_r+0x1a>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	b103      	cbz	r3, 800a166 <_sbrk_r+0x1a>
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	2000a064 	.word	0x2000a064

0800a16c <siprintf>:
 800a16c:	b40e      	push	{r1, r2, r3}
 800a16e:	b500      	push	{lr}
 800a170:	b09c      	sub	sp, #112	; 0x70
 800a172:	ab1d      	add	r3, sp, #116	; 0x74
 800a174:	9002      	str	r0, [sp, #8]
 800a176:	9006      	str	r0, [sp, #24]
 800a178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a17c:	4809      	ldr	r0, [pc, #36]	; (800a1a4 <siprintf+0x38>)
 800a17e:	9107      	str	r1, [sp, #28]
 800a180:	9104      	str	r1, [sp, #16]
 800a182:	4909      	ldr	r1, [pc, #36]	; (800a1a8 <siprintf+0x3c>)
 800a184:	f853 2b04 	ldr.w	r2, [r3], #4
 800a188:	9105      	str	r1, [sp, #20]
 800a18a:	6800      	ldr	r0, [r0, #0]
 800a18c:	9301      	str	r3, [sp, #4]
 800a18e:	a902      	add	r1, sp, #8
 800a190:	f000 f8d4 	bl	800a33c <_svfiprintf_r>
 800a194:	9b02      	ldr	r3, [sp, #8]
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]
 800a19a:	b01c      	add	sp, #112	; 0x70
 800a19c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1a0:	b003      	add	sp, #12
 800a1a2:	4770      	bx	lr
 800a1a4:	20004024 	.word	0x20004024
 800a1a8:	ffff0208 	.word	0xffff0208

0800a1ac <strncat>:
 800a1ac:	b530      	push	{r4, r5, lr}
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	7825      	ldrb	r5, [r4, #0]
 800a1b2:	4623      	mov	r3, r4
 800a1b4:	3401      	adds	r4, #1
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	d1fa      	bne.n	800a1b0 <strncat+0x4>
 800a1ba:	3a01      	subs	r2, #1
 800a1bc:	d304      	bcc.n	800a1c8 <strncat+0x1c>
 800a1be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c2:	f803 4b01 	strb.w	r4, [r3], #1
 800a1c6:	b904      	cbnz	r4, 800a1ca <strncat+0x1e>
 800a1c8:	bd30      	pop	{r4, r5, pc}
 800a1ca:	2a00      	cmp	r2, #0
 800a1cc:	d1f5      	bne.n	800a1ba <strncat+0xe>
 800a1ce:	701a      	strb	r2, [r3, #0]
 800a1d0:	e7f3      	b.n	800a1ba <strncat+0xe>
	...

0800a1d4 <__malloc_lock>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	; (800a1dc <__malloc_lock+0x8>)
 800a1d6:	f7ff bea3 	b.w	8009f20 <__retarget_lock_acquire_recursive>
 800a1da:	bf00      	nop
 800a1dc:	2000a058 	.word	0x2000a058

0800a1e0 <__malloc_unlock>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <__malloc_unlock+0x8>)
 800a1e2:	f7ff be9e 	b.w	8009f22 <__retarget_lock_release_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	2000a058 	.word	0x2000a058

0800a1ec <_free_r>:
 800a1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1ee:	2900      	cmp	r1, #0
 800a1f0:	d044      	beq.n	800a27c <_free_r+0x90>
 800a1f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1f6:	9001      	str	r0, [sp, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a1fe:	bfb8      	it	lt
 800a200:	18e4      	addlt	r4, r4, r3
 800a202:	f7ff ffe7 	bl	800a1d4 <__malloc_lock>
 800a206:	4a1e      	ldr	r2, [pc, #120]	; (800a280 <_free_r+0x94>)
 800a208:	9801      	ldr	r0, [sp, #4]
 800a20a:	6813      	ldr	r3, [r2, #0]
 800a20c:	b933      	cbnz	r3, 800a21c <_free_r+0x30>
 800a20e:	6063      	str	r3, [r4, #4]
 800a210:	6014      	str	r4, [r2, #0]
 800a212:	b003      	add	sp, #12
 800a214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a218:	f7ff bfe2 	b.w	800a1e0 <__malloc_unlock>
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	d908      	bls.n	800a232 <_free_r+0x46>
 800a220:	6825      	ldr	r5, [r4, #0]
 800a222:	1961      	adds	r1, r4, r5
 800a224:	428b      	cmp	r3, r1
 800a226:	bf01      	itttt	eq
 800a228:	6819      	ldreq	r1, [r3, #0]
 800a22a:	685b      	ldreq	r3, [r3, #4]
 800a22c:	1949      	addeq	r1, r1, r5
 800a22e:	6021      	streq	r1, [r4, #0]
 800a230:	e7ed      	b.n	800a20e <_free_r+0x22>
 800a232:	461a      	mov	r2, r3
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	b10b      	cbz	r3, 800a23c <_free_r+0x50>
 800a238:	42a3      	cmp	r3, r4
 800a23a:	d9fa      	bls.n	800a232 <_free_r+0x46>
 800a23c:	6811      	ldr	r1, [r2, #0]
 800a23e:	1855      	adds	r5, r2, r1
 800a240:	42a5      	cmp	r5, r4
 800a242:	d10b      	bne.n	800a25c <_free_r+0x70>
 800a244:	6824      	ldr	r4, [r4, #0]
 800a246:	4421      	add	r1, r4
 800a248:	1854      	adds	r4, r2, r1
 800a24a:	42a3      	cmp	r3, r4
 800a24c:	6011      	str	r1, [r2, #0]
 800a24e:	d1e0      	bne.n	800a212 <_free_r+0x26>
 800a250:	681c      	ldr	r4, [r3, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	6053      	str	r3, [r2, #4]
 800a256:	4421      	add	r1, r4
 800a258:	6011      	str	r1, [r2, #0]
 800a25a:	e7da      	b.n	800a212 <_free_r+0x26>
 800a25c:	d902      	bls.n	800a264 <_free_r+0x78>
 800a25e:	230c      	movs	r3, #12
 800a260:	6003      	str	r3, [r0, #0]
 800a262:	e7d6      	b.n	800a212 <_free_r+0x26>
 800a264:	6825      	ldr	r5, [r4, #0]
 800a266:	1961      	adds	r1, r4, r5
 800a268:	428b      	cmp	r3, r1
 800a26a:	bf04      	itt	eq
 800a26c:	6819      	ldreq	r1, [r3, #0]
 800a26e:	685b      	ldreq	r3, [r3, #4]
 800a270:	6063      	str	r3, [r4, #4]
 800a272:	bf04      	itt	eq
 800a274:	1949      	addeq	r1, r1, r5
 800a276:	6021      	streq	r1, [r4, #0]
 800a278:	6054      	str	r4, [r2, #4]
 800a27a:	e7ca      	b.n	800a212 <_free_r+0x26>
 800a27c:	b003      	add	sp, #12
 800a27e:	bd30      	pop	{r4, r5, pc}
 800a280:	2000a05c 	.word	0x2000a05c

0800a284 <__ssputs_r>:
 800a284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a288:	688e      	ldr	r6, [r1, #8]
 800a28a:	429e      	cmp	r6, r3
 800a28c:	4682      	mov	sl, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	4690      	mov	r8, r2
 800a292:	461f      	mov	r7, r3
 800a294:	d838      	bhi.n	800a308 <__ssputs_r+0x84>
 800a296:	898a      	ldrh	r2, [r1, #12]
 800a298:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a29c:	d032      	beq.n	800a304 <__ssputs_r+0x80>
 800a29e:	6825      	ldr	r5, [r4, #0]
 800a2a0:	6909      	ldr	r1, [r1, #16]
 800a2a2:	eba5 0901 	sub.w	r9, r5, r1
 800a2a6:	6965      	ldr	r5, [r4, #20]
 800a2a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	444b      	add	r3, r9
 800a2b4:	106d      	asrs	r5, r5, #1
 800a2b6:	429d      	cmp	r5, r3
 800a2b8:	bf38      	it	cc
 800a2ba:	461d      	movcc	r5, r3
 800a2bc:	0553      	lsls	r3, r2, #21
 800a2be:	d531      	bpl.n	800a324 <__ssputs_r+0xa0>
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	f7ff fe65 	bl	8009f90 <_malloc_r>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	b950      	cbnz	r0, 800a2e0 <__ssputs_r+0x5c>
 800a2ca:	230c      	movs	r3, #12
 800a2cc:	f8ca 3000 	str.w	r3, [sl]
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d6:	81a3      	strh	r3, [r4, #12]
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e0:	6921      	ldr	r1, [r4, #16]
 800a2e2:	464a      	mov	r2, r9
 800a2e4:	f7ff fe1e 	bl	8009f24 <memcpy>
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	6126      	str	r6, [r4, #16]
 800a2f6:	6165      	str	r5, [r4, #20]
 800a2f8:	444e      	add	r6, r9
 800a2fa:	eba5 0509 	sub.w	r5, r5, r9
 800a2fe:	6026      	str	r6, [r4, #0]
 800a300:	60a5      	str	r5, [r4, #8]
 800a302:	463e      	mov	r6, r7
 800a304:	42be      	cmp	r6, r7
 800a306:	d900      	bls.n	800a30a <__ssputs_r+0x86>
 800a308:	463e      	mov	r6, r7
 800a30a:	6820      	ldr	r0, [r4, #0]
 800a30c:	4632      	mov	r2, r6
 800a30e:	4641      	mov	r1, r8
 800a310:	f000 faa8 	bl	800a864 <memmove>
 800a314:	68a3      	ldr	r3, [r4, #8]
 800a316:	1b9b      	subs	r3, r3, r6
 800a318:	60a3      	str	r3, [r4, #8]
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	4433      	add	r3, r6
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	2000      	movs	r0, #0
 800a322:	e7db      	b.n	800a2dc <__ssputs_r+0x58>
 800a324:	462a      	mov	r2, r5
 800a326:	f000 fab7 	bl	800a898 <_realloc_r>
 800a32a:	4606      	mov	r6, r0
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d1e1      	bne.n	800a2f4 <__ssputs_r+0x70>
 800a330:	6921      	ldr	r1, [r4, #16]
 800a332:	4650      	mov	r0, sl
 800a334:	f7ff ff5a 	bl	800a1ec <_free_r>
 800a338:	e7c7      	b.n	800a2ca <__ssputs_r+0x46>
	...

0800a33c <_svfiprintf_r>:
 800a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	4698      	mov	r8, r3
 800a342:	898b      	ldrh	r3, [r1, #12]
 800a344:	061b      	lsls	r3, r3, #24
 800a346:	b09d      	sub	sp, #116	; 0x74
 800a348:	4607      	mov	r7, r0
 800a34a:	460d      	mov	r5, r1
 800a34c:	4614      	mov	r4, r2
 800a34e:	d50e      	bpl.n	800a36e <_svfiprintf_r+0x32>
 800a350:	690b      	ldr	r3, [r1, #16]
 800a352:	b963      	cbnz	r3, 800a36e <_svfiprintf_r+0x32>
 800a354:	2140      	movs	r1, #64	; 0x40
 800a356:	f7ff fe1b 	bl	8009f90 <_malloc_r>
 800a35a:	6028      	str	r0, [r5, #0]
 800a35c:	6128      	str	r0, [r5, #16]
 800a35e:	b920      	cbnz	r0, 800a36a <_svfiprintf_r+0x2e>
 800a360:	230c      	movs	r3, #12
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a368:	e0d1      	b.n	800a50e <_svfiprintf_r+0x1d2>
 800a36a:	2340      	movs	r3, #64	; 0x40
 800a36c:	616b      	str	r3, [r5, #20]
 800a36e:	2300      	movs	r3, #0
 800a370:	9309      	str	r3, [sp, #36]	; 0x24
 800a372:	2320      	movs	r3, #32
 800a374:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a378:	f8cd 800c 	str.w	r8, [sp, #12]
 800a37c:	2330      	movs	r3, #48	; 0x30
 800a37e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a528 <_svfiprintf_r+0x1ec>
 800a382:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a386:	f04f 0901 	mov.w	r9, #1
 800a38a:	4623      	mov	r3, r4
 800a38c:	469a      	mov	sl, r3
 800a38e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a392:	b10a      	cbz	r2, 800a398 <_svfiprintf_r+0x5c>
 800a394:	2a25      	cmp	r2, #37	; 0x25
 800a396:	d1f9      	bne.n	800a38c <_svfiprintf_r+0x50>
 800a398:	ebba 0b04 	subs.w	fp, sl, r4
 800a39c:	d00b      	beq.n	800a3b6 <_svfiprintf_r+0x7a>
 800a39e:	465b      	mov	r3, fp
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	4638      	mov	r0, r7
 800a3a6:	f7ff ff6d 	bl	800a284 <__ssputs_r>
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	f000 80aa 	beq.w	800a504 <_svfiprintf_r+0x1c8>
 800a3b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3b2:	445a      	add	r2, fp
 800a3b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f000 80a2 	beq.w	800a504 <_svfiprintf_r+0x1c8>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ca:	f10a 0a01 	add.w	sl, sl, #1
 800a3ce:	9304      	str	r3, [sp, #16]
 800a3d0:	9307      	str	r3, [sp, #28]
 800a3d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3d6:	931a      	str	r3, [sp, #104]	; 0x68
 800a3d8:	4654      	mov	r4, sl
 800a3da:	2205      	movs	r2, #5
 800a3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e0:	4851      	ldr	r0, [pc, #324]	; (800a528 <_svfiprintf_r+0x1ec>)
 800a3e2:	f7f5 fefd 	bl	80001e0 <memchr>
 800a3e6:	9a04      	ldr	r2, [sp, #16]
 800a3e8:	b9d8      	cbnz	r0, 800a422 <_svfiprintf_r+0xe6>
 800a3ea:	06d0      	lsls	r0, r2, #27
 800a3ec:	bf44      	itt	mi
 800a3ee:	2320      	movmi	r3, #32
 800a3f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3f4:	0711      	lsls	r1, r2, #28
 800a3f6:	bf44      	itt	mi
 800a3f8:	232b      	movmi	r3, #43	; 0x2b
 800a3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a402:	2b2a      	cmp	r3, #42	; 0x2a
 800a404:	d015      	beq.n	800a432 <_svfiprintf_r+0xf6>
 800a406:	9a07      	ldr	r2, [sp, #28]
 800a408:	4654      	mov	r4, sl
 800a40a:	2000      	movs	r0, #0
 800a40c:	f04f 0c0a 	mov.w	ip, #10
 800a410:	4621      	mov	r1, r4
 800a412:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a416:	3b30      	subs	r3, #48	; 0x30
 800a418:	2b09      	cmp	r3, #9
 800a41a:	d94e      	bls.n	800a4ba <_svfiprintf_r+0x17e>
 800a41c:	b1b0      	cbz	r0, 800a44c <_svfiprintf_r+0x110>
 800a41e:	9207      	str	r2, [sp, #28]
 800a420:	e014      	b.n	800a44c <_svfiprintf_r+0x110>
 800a422:	eba0 0308 	sub.w	r3, r0, r8
 800a426:	fa09 f303 	lsl.w	r3, r9, r3
 800a42a:	4313      	orrs	r3, r2
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	46a2      	mov	sl, r4
 800a430:	e7d2      	b.n	800a3d8 <_svfiprintf_r+0x9c>
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	1d19      	adds	r1, r3, #4
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	9103      	str	r1, [sp, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	bfbb      	ittet	lt
 800a43e:	425b      	neglt	r3, r3
 800a440:	f042 0202 	orrlt.w	r2, r2, #2
 800a444:	9307      	strge	r3, [sp, #28]
 800a446:	9307      	strlt	r3, [sp, #28]
 800a448:	bfb8      	it	lt
 800a44a:	9204      	strlt	r2, [sp, #16]
 800a44c:	7823      	ldrb	r3, [r4, #0]
 800a44e:	2b2e      	cmp	r3, #46	; 0x2e
 800a450:	d10c      	bne.n	800a46c <_svfiprintf_r+0x130>
 800a452:	7863      	ldrb	r3, [r4, #1]
 800a454:	2b2a      	cmp	r3, #42	; 0x2a
 800a456:	d135      	bne.n	800a4c4 <_svfiprintf_r+0x188>
 800a458:	9b03      	ldr	r3, [sp, #12]
 800a45a:	1d1a      	adds	r2, r3, #4
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	9203      	str	r2, [sp, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	bfb8      	it	lt
 800a464:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a468:	3402      	adds	r4, #2
 800a46a:	9305      	str	r3, [sp, #20]
 800a46c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a538 <_svfiprintf_r+0x1fc>
 800a470:	7821      	ldrb	r1, [r4, #0]
 800a472:	2203      	movs	r2, #3
 800a474:	4650      	mov	r0, sl
 800a476:	f7f5 feb3 	bl	80001e0 <memchr>
 800a47a:	b140      	cbz	r0, 800a48e <_svfiprintf_r+0x152>
 800a47c:	2340      	movs	r3, #64	; 0x40
 800a47e:	eba0 000a 	sub.w	r0, r0, sl
 800a482:	fa03 f000 	lsl.w	r0, r3, r0
 800a486:	9b04      	ldr	r3, [sp, #16]
 800a488:	4303      	orrs	r3, r0
 800a48a:	3401      	adds	r4, #1
 800a48c:	9304      	str	r3, [sp, #16]
 800a48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a492:	4826      	ldr	r0, [pc, #152]	; (800a52c <_svfiprintf_r+0x1f0>)
 800a494:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a498:	2206      	movs	r2, #6
 800a49a:	f7f5 fea1 	bl	80001e0 <memchr>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d038      	beq.n	800a514 <_svfiprintf_r+0x1d8>
 800a4a2:	4b23      	ldr	r3, [pc, #140]	; (800a530 <_svfiprintf_r+0x1f4>)
 800a4a4:	bb1b      	cbnz	r3, 800a4ee <_svfiprintf_r+0x1b2>
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	3307      	adds	r3, #7
 800a4aa:	f023 0307 	bic.w	r3, r3, #7
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	9303      	str	r3, [sp, #12]
 800a4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b4:	4433      	add	r3, r6
 800a4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4b8:	e767      	b.n	800a38a <_svfiprintf_r+0x4e>
 800a4ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4be:	460c      	mov	r4, r1
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	e7a5      	b.n	800a410 <_svfiprintf_r+0xd4>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	3401      	adds	r4, #1
 800a4c8:	9305      	str	r3, [sp, #20]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	f04f 0c0a 	mov.w	ip, #10
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4d6:	3a30      	subs	r2, #48	; 0x30
 800a4d8:	2a09      	cmp	r2, #9
 800a4da:	d903      	bls.n	800a4e4 <_svfiprintf_r+0x1a8>
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d0c5      	beq.n	800a46c <_svfiprintf_r+0x130>
 800a4e0:	9105      	str	r1, [sp, #20]
 800a4e2:	e7c3      	b.n	800a46c <_svfiprintf_r+0x130>
 800a4e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e7f0      	b.n	800a4d0 <_svfiprintf_r+0x194>
 800a4ee:	ab03      	add	r3, sp, #12
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	462a      	mov	r2, r5
 800a4f4:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <_svfiprintf_r+0x1f8>)
 800a4f6:	a904      	add	r1, sp, #16
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f3af 8000 	nop.w
 800a4fe:	1c42      	adds	r2, r0, #1
 800a500:	4606      	mov	r6, r0
 800a502:	d1d6      	bne.n	800a4b2 <_svfiprintf_r+0x176>
 800a504:	89ab      	ldrh	r3, [r5, #12]
 800a506:	065b      	lsls	r3, r3, #25
 800a508:	f53f af2c 	bmi.w	800a364 <_svfiprintf_r+0x28>
 800a50c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a50e:	b01d      	add	sp, #116	; 0x74
 800a510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a514:	ab03      	add	r3, sp, #12
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	462a      	mov	r2, r5
 800a51a:	4b06      	ldr	r3, [pc, #24]	; (800a534 <_svfiprintf_r+0x1f8>)
 800a51c:	a904      	add	r1, sp, #16
 800a51e:	4638      	mov	r0, r7
 800a520:	f000 f87a 	bl	800a618 <_printf_i>
 800a524:	e7eb      	b.n	800a4fe <_svfiprintf_r+0x1c2>
 800a526:	bf00      	nop
 800a528:	080362b0 	.word	0x080362b0
 800a52c:	080362ba 	.word	0x080362ba
 800a530:	00000000 	.word	0x00000000
 800a534:	0800a285 	.word	0x0800a285
 800a538:	080362b6 	.word	0x080362b6

0800a53c <_printf_common>:
 800a53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a540:	4616      	mov	r6, r2
 800a542:	4699      	mov	r9, r3
 800a544:	688a      	ldr	r2, [r1, #8]
 800a546:	690b      	ldr	r3, [r1, #16]
 800a548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a54c:	4293      	cmp	r3, r2
 800a54e:	bfb8      	it	lt
 800a550:	4613      	movlt	r3, r2
 800a552:	6033      	str	r3, [r6, #0]
 800a554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a558:	4607      	mov	r7, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	b10a      	cbz	r2, 800a562 <_printf_common+0x26>
 800a55e:	3301      	adds	r3, #1
 800a560:	6033      	str	r3, [r6, #0]
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	0699      	lsls	r1, r3, #26
 800a566:	bf42      	ittt	mi
 800a568:	6833      	ldrmi	r3, [r6, #0]
 800a56a:	3302      	addmi	r3, #2
 800a56c:	6033      	strmi	r3, [r6, #0]
 800a56e:	6825      	ldr	r5, [r4, #0]
 800a570:	f015 0506 	ands.w	r5, r5, #6
 800a574:	d106      	bne.n	800a584 <_printf_common+0x48>
 800a576:	f104 0a19 	add.w	sl, r4, #25
 800a57a:	68e3      	ldr	r3, [r4, #12]
 800a57c:	6832      	ldr	r2, [r6, #0]
 800a57e:	1a9b      	subs	r3, r3, r2
 800a580:	42ab      	cmp	r3, r5
 800a582:	dc26      	bgt.n	800a5d2 <_printf_common+0x96>
 800a584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a588:	1e13      	subs	r3, r2, #0
 800a58a:	6822      	ldr	r2, [r4, #0]
 800a58c:	bf18      	it	ne
 800a58e:	2301      	movne	r3, #1
 800a590:	0692      	lsls	r2, r2, #26
 800a592:	d42b      	bmi.n	800a5ec <_printf_common+0xb0>
 800a594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a598:	4649      	mov	r1, r9
 800a59a:	4638      	mov	r0, r7
 800a59c:	47c0      	blx	r8
 800a59e:	3001      	adds	r0, #1
 800a5a0:	d01e      	beq.n	800a5e0 <_printf_common+0xa4>
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	68e5      	ldr	r5, [r4, #12]
 800a5a6:	6832      	ldr	r2, [r6, #0]
 800a5a8:	f003 0306 	and.w	r3, r3, #6
 800a5ac:	2b04      	cmp	r3, #4
 800a5ae:	bf08      	it	eq
 800a5b0:	1aad      	subeq	r5, r5, r2
 800a5b2:	68a3      	ldr	r3, [r4, #8]
 800a5b4:	6922      	ldr	r2, [r4, #16]
 800a5b6:	bf0c      	ite	eq
 800a5b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5bc:	2500      	movne	r5, #0
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	bfc4      	itt	gt
 800a5c2:	1a9b      	subgt	r3, r3, r2
 800a5c4:	18ed      	addgt	r5, r5, r3
 800a5c6:	2600      	movs	r6, #0
 800a5c8:	341a      	adds	r4, #26
 800a5ca:	42b5      	cmp	r5, r6
 800a5cc:	d11a      	bne.n	800a604 <_printf_common+0xc8>
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	e008      	b.n	800a5e4 <_printf_common+0xa8>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	4652      	mov	r2, sl
 800a5d6:	4649      	mov	r1, r9
 800a5d8:	4638      	mov	r0, r7
 800a5da:	47c0      	blx	r8
 800a5dc:	3001      	adds	r0, #1
 800a5de:	d103      	bne.n	800a5e8 <_printf_common+0xac>
 800a5e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e8:	3501      	adds	r5, #1
 800a5ea:	e7c6      	b.n	800a57a <_printf_common+0x3e>
 800a5ec:	18e1      	adds	r1, r4, r3
 800a5ee:	1c5a      	adds	r2, r3, #1
 800a5f0:	2030      	movs	r0, #48	; 0x30
 800a5f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5f6:	4422      	add	r2, r4
 800a5f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a600:	3302      	adds	r3, #2
 800a602:	e7c7      	b.n	800a594 <_printf_common+0x58>
 800a604:	2301      	movs	r3, #1
 800a606:	4622      	mov	r2, r4
 800a608:	4649      	mov	r1, r9
 800a60a:	4638      	mov	r0, r7
 800a60c:	47c0      	blx	r8
 800a60e:	3001      	adds	r0, #1
 800a610:	d0e6      	beq.n	800a5e0 <_printf_common+0xa4>
 800a612:	3601      	adds	r6, #1
 800a614:	e7d9      	b.n	800a5ca <_printf_common+0x8e>
	...

0800a618 <_printf_i>:
 800a618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a61c:	7e0f      	ldrb	r7, [r1, #24]
 800a61e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a620:	2f78      	cmp	r7, #120	; 0x78
 800a622:	4691      	mov	r9, r2
 800a624:	4680      	mov	r8, r0
 800a626:	460c      	mov	r4, r1
 800a628:	469a      	mov	sl, r3
 800a62a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a62e:	d807      	bhi.n	800a640 <_printf_i+0x28>
 800a630:	2f62      	cmp	r7, #98	; 0x62
 800a632:	d80a      	bhi.n	800a64a <_printf_i+0x32>
 800a634:	2f00      	cmp	r7, #0
 800a636:	f000 80d8 	beq.w	800a7ea <_printf_i+0x1d2>
 800a63a:	2f58      	cmp	r7, #88	; 0x58
 800a63c:	f000 80a3 	beq.w	800a786 <_printf_i+0x16e>
 800a640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a648:	e03a      	b.n	800a6c0 <_printf_i+0xa8>
 800a64a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a64e:	2b15      	cmp	r3, #21
 800a650:	d8f6      	bhi.n	800a640 <_printf_i+0x28>
 800a652:	a101      	add	r1, pc, #4	; (adr r1, 800a658 <_printf_i+0x40>)
 800a654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a658:	0800a6b1 	.word	0x0800a6b1
 800a65c:	0800a6c5 	.word	0x0800a6c5
 800a660:	0800a641 	.word	0x0800a641
 800a664:	0800a641 	.word	0x0800a641
 800a668:	0800a641 	.word	0x0800a641
 800a66c:	0800a641 	.word	0x0800a641
 800a670:	0800a6c5 	.word	0x0800a6c5
 800a674:	0800a641 	.word	0x0800a641
 800a678:	0800a641 	.word	0x0800a641
 800a67c:	0800a641 	.word	0x0800a641
 800a680:	0800a641 	.word	0x0800a641
 800a684:	0800a7d1 	.word	0x0800a7d1
 800a688:	0800a6f5 	.word	0x0800a6f5
 800a68c:	0800a7b3 	.word	0x0800a7b3
 800a690:	0800a641 	.word	0x0800a641
 800a694:	0800a641 	.word	0x0800a641
 800a698:	0800a7f3 	.word	0x0800a7f3
 800a69c:	0800a641 	.word	0x0800a641
 800a6a0:	0800a6f5 	.word	0x0800a6f5
 800a6a4:	0800a641 	.word	0x0800a641
 800a6a8:	0800a641 	.word	0x0800a641
 800a6ac:	0800a7bb 	.word	0x0800a7bb
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	1d1a      	adds	r2, r3, #4
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	602a      	str	r2, [r5, #0]
 800a6b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e0a3      	b.n	800a80c <_printf_i+0x1f4>
 800a6c4:	6820      	ldr	r0, [r4, #0]
 800a6c6:	6829      	ldr	r1, [r5, #0]
 800a6c8:	0606      	lsls	r6, r0, #24
 800a6ca:	f101 0304 	add.w	r3, r1, #4
 800a6ce:	d50a      	bpl.n	800a6e6 <_printf_i+0xce>
 800a6d0:	680e      	ldr	r6, [r1, #0]
 800a6d2:	602b      	str	r3, [r5, #0]
 800a6d4:	2e00      	cmp	r6, #0
 800a6d6:	da03      	bge.n	800a6e0 <_printf_i+0xc8>
 800a6d8:	232d      	movs	r3, #45	; 0x2d
 800a6da:	4276      	negs	r6, r6
 800a6dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6e0:	485e      	ldr	r0, [pc, #376]	; (800a85c <_printf_i+0x244>)
 800a6e2:	230a      	movs	r3, #10
 800a6e4:	e019      	b.n	800a71a <_printf_i+0x102>
 800a6e6:	680e      	ldr	r6, [r1, #0]
 800a6e8:	602b      	str	r3, [r5, #0]
 800a6ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6ee:	bf18      	it	ne
 800a6f0:	b236      	sxthne	r6, r6
 800a6f2:	e7ef      	b.n	800a6d4 <_printf_i+0xbc>
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	6820      	ldr	r0, [r4, #0]
 800a6f8:	1d19      	adds	r1, r3, #4
 800a6fa:	6029      	str	r1, [r5, #0]
 800a6fc:	0601      	lsls	r1, r0, #24
 800a6fe:	d501      	bpl.n	800a704 <_printf_i+0xec>
 800a700:	681e      	ldr	r6, [r3, #0]
 800a702:	e002      	b.n	800a70a <_printf_i+0xf2>
 800a704:	0646      	lsls	r6, r0, #25
 800a706:	d5fb      	bpl.n	800a700 <_printf_i+0xe8>
 800a708:	881e      	ldrh	r6, [r3, #0]
 800a70a:	4854      	ldr	r0, [pc, #336]	; (800a85c <_printf_i+0x244>)
 800a70c:	2f6f      	cmp	r7, #111	; 0x6f
 800a70e:	bf0c      	ite	eq
 800a710:	2308      	moveq	r3, #8
 800a712:	230a      	movne	r3, #10
 800a714:	2100      	movs	r1, #0
 800a716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a71a:	6865      	ldr	r5, [r4, #4]
 800a71c:	60a5      	str	r5, [r4, #8]
 800a71e:	2d00      	cmp	r5, #0
 800a720:	bfa2      	ittt	ge
 800a722:	6821      	ldrge	r1, [r4, #0]
 800a724:	f021 0104 	bicge.w	r1, r1, #4
 800a728:	6021      	strge	r1, [r4, #0]
 800a72a:	b90e      	cbnz	r6, 800a730 <_printf_i+0x118>
 800a72c:	2d00      	cmp	r5, #0
 800a72e:	d04d      	beq.n	800a7cc <_printf_i+0x1b4>
 800a730:	4615      	mov	r5, r2
 800a732:	fbb6 f1f3 	udiv	r1, r6, r3
 800a736:	fb03 6711 	mls	r7, r3, r1, r6
 800a73a:	5dc7      	ldrb	r7, [r0, r7]
 800a73c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a740:	4637      	mov	r7, r6
 800a742:	42bb      	cmp	r3, r7
 800a744:	460e      	mov	r6, r1
 800a746:	d9f4      	bls.n	800a732 <_printf_i+0x11a>
 800a748:	2b08      	cmp	r3, #8
 800a74a:	d10b      	bne.n	800a764 <_printf_i+0x14c>
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	07de      	lsls	r6, r3, #31
 800a750:	d508      	bpl.n	800a764 <_printf_i+0x14c>
 800a752:	6923      	ldr	r3, [r4, #16]
 800a754:	6861      	ldr	r1, [r4, #4]
 800a756:	4299      	cmp	r1, r3
 800a758:	bfde      	ittt	le
 800a75a:	2330      	movle	r3, #48	; 0x30
 800a75c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a760:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a764:	1b52      	subs	r2, r2, r5
 800a766:	6122      	str	r2, [r4, #16]
 800a768:	f8cd a000 	str.w	sl, [sp]
 800a76c:	464b      	mov	r3, r9
 800a76e:	aa03      	add	r2, sp, #12
 800a770:	4621      	mov	r1, r4
 800a772:	4640      	mov	r0, r8
 800a774:	f7ff fee2 	bl	800a53c <_printf_common>
 800a778:	3001      	adds	r0, #1
 800a77a:	d14c      	bne.n	800a816 <_printf_i+0x1fe>
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a780:	b004      	add	sp, #16
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	4835      	ldr	r0, [pc, #212]	; (800a85c <_printf_i+0x244>)
 800a788:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a78c:	6829      	ldr	r1, [r5, #0]
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	f851 6b04 	ldr.w	r6, [r1], #4
 800a794:	6029      	str	r1, [r5, #0]
 800a796:	061d      	lsls	r5, r3, #24
 800a798:	d514      	bpl.n	800a7c4 <_printf_i+0x1ac>
 800a79a:	07df      	lsls	r7, r3, #31
 800a79c:	bf44      	itt	mi
 800a79e:	f043 0320 	orrmi.w	r3, r3, #32
 800a7a2:	6023      	strmi	r3, [r4, #0]
 800a7a4:	b91e      	cbnz	r6, 800a7ae <_printf_i+0x196>
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	f023 0320 	bic.w	r3, r3, #32
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	2310      	movs	r3, #16
 800a7b0:	e7b0      	b.n	800a714 <_printf_i+0xfc>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	f043 0320 	orr.w	r3, r3, #32
 800a7b8:	6023      	str	r3, [r4, #0]
 800a7ba:	2378      	movs	r3, #120	; 0x78
 800a7bc:	4828      	ldr	r0, [pc, #160]	; (800a860 <_printf_i+0x248>)
 800a7be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7c2:	e7e3      	b.n	800a78c <_printf_i+0x174>
 800a7c4:	0659      	lsls	r1, r3, #25
 800a7c6:	bf48      	it	mi
 800a7c8:	b2b6      	uxthmi	r6, r6
 800a7ca:	e7e6      	b.n	800a79a <_printf_i+0x182>
 800a7cc:	4615      	mov	r5, r2
 800a7ce:	e7bb      	b.n	800a748 <_printf_i+0x130>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	6826      	ldr	r6, [r4, #0]
 800a7d4:	6961      	ldr	r1, [r4, #20]
 800a7d6:	1d18      	adds	r0, r3, #4
 800a7d8:	6028      	str	r0, [r5, #0]
 800a7da:	0635      	lsls	r5, r6, #24
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	d501      	bpl.n	800a7e4 <_printf_i+0x1cc>
 800a7e0:	6019      	str	r1, [r3, #0]
 800a7e2:	e002      	b.n	800a7ea <_printf_i+0x1d2>
 800a7e4:	0670      	lsls	r0, r6, #25
 800a7e6:	d5fb      	bpl.n	800a7e0 <_printf_i+0x1c8>
 800a7e8:	8019      	strh	r1, [r3, #0]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	6123      	str	r3, [r4, #16]
 800a7ee:	4615      	mov	r5, r2
 800a7f0:	e7ba      	b.n	800a768 <_printf_i+0x150>
 800a7f2:	682b      	ldr	r3, [r5, #0]
 800a7f4:	1d1a      	adds	r2, r3, #4
 800a7f6:	602a      	str	r2, [r5, #0]
 800a7f8:	681d      	ldr	r5, [r3, #0]
 800a7fa:	6862      	ldr	r2, [r4, #4]
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	4628      	mov	r0, r5
 800a800:	f7f5 fcee 	bl	80001e0 <memchr>
 800a804:	b108      	cbz	r0, 800a80a <_printf_i+0x1f2>
 800a806:	1b40      	subs	r0, r0, r5
 800a808:	6060      	str	r0, [r4, #4]
 800a80a:	6863      	ldr	r3, [r4, #4]
 800a80c:	6123      	str	r3, [r4, #16]
 800a80e:	2300      	movs	r3, #0
 800a810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a814:	e7a8      	b.n	800a768 <_printf_i+0x150>
 800a816:	6923      	ldr	r3, [r4, #16]
 800a818:	462a      	mov	r2, r5
 800a81a:	4649      	mov	r1, r9
 800a81c:	4640      	mov	r0, r8
 800a81e:	47d0      	blx	sl
 800a820:	3001      	adds	r0, #1
 800a822:	d0ab      	beq.n	800a77c <_printf_i+0x164>
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	079b      	lsls	r3, r3, #30
 800a828:	d413      	bmi.n	800a852 <_printf_i+0x23a>
 800a82a:	68e0      	ldr	r0, [r4, #12]
 800a82c:	9b03      	ldr	r3, [sp, #12]
 800a82e:	4298      	cmp	r0, r3
 800a830:	bfb8      	it	lt
 800a832:	4618      	movlt	r0, r3
 800a834:	e7a4      	b.n	800a780 <_printf_i+0x168>
 800a836:	2301      	movs	r3, #1
 800a838:	4632      	mov	r2, r6
 800a83a:	4649      	mov	r1, r9
 800a83c:	4640      	mov	r0, r8
 800a83e:	47d0      	blx	sl
 800a840:	3001      	adds	r0, #1
 800a842:	d09b      	beq.n	800a77c <_printf_i+0x164>
 800a844:	3501      	adds	r5, #1
 800a846:	68e3      	ldr	r3, [r4, #12]
 800a848:	9903      	ldr	r1, [sp, #12]
 800a84a:	1a5b      	subs	r3, r3, r1
 800a84c:	42ab      	cmp	r3, r5
 800a84e:	dcf2      	bgt.n	800a836 <_printf_i+0x21e>
 800a850:	e7eb      	b.n	800a82a <_printf_i+0x212>
 800a852:	2500      	movs	r5, #0
 800a854:	f104 0619 	add.w	r6, r4, #25
 800a858:	e7f5      	b.n	800a846 <_printf_i+0x22e>
 800a85a:	bf00      	nop
 800a85c:	080362c1 	.word	0x080362c1
 800a860:	080362d2 	.word	0x080362d2

0800a864 <memmove>:
 800a864:	4288      	cmp	r0, r1
 800a866:	b510      	push	{r4, lr}
 800a868:	eb01 0402 	add.w	r4, r1, r2
 800a86c:	d902      	bls.n	800a874 <memmove+0x10>
 800a86e:	4284      	cmp	r4, r0
 800a870:	4623      	mov	r3, r4
 800a872:	d807      	bhi.n	800a884 <memmove+0x20>
 800a874:	1e43      	subs	r3, r0, #1
 800a876:	42a1      	cmp	r1, r4
 800a878:	d008      	beq.n	800a88c <memmove+0x28>
 800a87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a882:	e7f8      	b.n	800a876 <memmove+0x12>
 800a884:	4402      	add	r2, r0
 800a886:	4601      	mov	r1, r0
 800a888:	428a      	cmp	r2, r1
 800a88a:	d100      	bne.n	800a88e <memmove+0x2a>
 800a88c:	bd10      	pop	{r4, pc}
 800a88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a896:	e7f7      	b.n	800a888 <memmove+0x24>

0800a898 <_realloc_r>:
 800a898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89c:	4680      	mov	r8, r0
 800a89e:	4614      	mov	r4, r2
 800a8a0:	460e      	mov	r6, r1
 800a8a2:	b921      	cbnz	r1, 800a8ae <_realloc_r+0x16>
 800a8a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	f7ff bb71 	b.w	8009f90 <_malloc_r>
 800a8ae:	b92a      	cbnz	r2, 800a8bc <_realloc_r+0x24>
 800a8b0:	f7ff fc9c 	bl	800a1ec <_free_r>
 800a8b4:	4625      	mov	r5, r4
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8bc:	f000 f81b 	bl	800a8f6 <_malloc_usable_size_r>
 800a8c0:	4284      	cmp	r4, r0
 800a8c2:	4607      	mov	r7, r0
 800a8c4:	d802      	bhi.n	800a8cc <_realloc_r+0x34>
 800a8c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8ca:	d812      	bhi.n	800a8f2 <_realloc_r+0x5a>
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	f7ff fb5e 	bl	8009f90 <_malloc_r>
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d0ed      	beq.n	800a8b6 <_realloc_r+0x1e>
 800a8da:	42bc      	cmp	r4, r7
 800a8dc:	4622      	mov	r2, r4
 800a8de:	4631      	mov	r1, r6
 800a8e0:	bf28      	it	cs
 800a8e2:	463a      	movcs	r2, r7
 800a8e4:	f7ff fb1e 	bl	8009f24 <memcpy>
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	4640      	mov	r0, r8
 800a8ec:	f7ff fc7e 	bl	800a1ec <_free_r>
 800a8f0:	e7e1      	b.n	800a8b6 <_realloc_r+0x1e>
 800a8f2:	4635      	mov	r5, r6
 800a8f4:	e7df      	b.n	800a8b6 <_realloc_r+0x1e>

0800a8f6 <_malloc_usable_size_r>:
 800a8f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8fa:	1f18      	subs	r0, r3, #4
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	bfbc      	itt	lt
 800a900:	580b      	ldrlt	r3, [r1, r0]
 800a902:	18c0      	addlt	r0, r0, r3
 800a904:	4770      	bx	lr
	...

0800a908 <_init>:
 800a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90a:	bf00      	nop
 800a90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a90e:	bc08      	pop	{r3}
 800a910:	469e      	mov	lr, r3
 800a912:	4770      	bx	lr

0800a914 <_fini>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	bf00      	nop
 800a918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91a:	bc08      	pop	{r3}
 800a91c:	469e      	mov	lr, r3
 800a91e:	4770      	bx	lr
